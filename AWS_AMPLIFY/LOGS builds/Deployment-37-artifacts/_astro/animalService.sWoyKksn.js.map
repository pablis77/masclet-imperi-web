{"version":3,"file":"animalService.sWoyKksn.js","sources":["../../../src/services/mockData.ts","../../../src/services/animalService.ts"],"sourcesContent":["// Mock Data para desarrollo\n// Este archivo proporciona datos simulados para todas las entidades de la aplicación\n\nimport type { UserRole } from './authService';\n\n// Tipos básicos\nexport interface Animal {\n  id: number;\n  explotacio: string;\n  nom: string;\n  genere: 'M' | 'F';\n  estado: 'OK' | 'DEF';\n  alletar: '0' | '1' | '2';\n  pare?: string | null;\n  mare?: string | null;\n  quadra?: string | null;\n  cod?: string | null;\n  num_serie?: string | null;\n  dob?: string | null; // fecha de nacimiento\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface Explotacio {\n  id: number;\n  explotacio: string;   // Identificador único de la explotación\n  animal_count?: number; // Cantidad de animales en la explotación\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  role: UserRole;\n  first_name?: string;\n  last_name?: string;\n  is_active: boolean;\n  created_at: string;\n  updated_at: string;\n  password?: string; // Añadido para simulación\n  full_name?: string; // Añadido para compatibilidad con authService\n}\n\nexport interface Part {\n  id: number;\n  animal_id: number;\n  animal_nom?: string;\n  data: string; // fecha del parto\n  num_cries: number;\n  notes?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ImportHistoryItem {\n  id: number;\n  filename: string;\n  user_id: number;\n  user_name?: string;\n  import_type: string;\n  total_records: number;\n  successful_records: number;\n  failed_records: number;\n  status: 'completed' | 'failed' | 'processing' | 'pending';\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ImportHistoryFilters {\n  import_type?: string;\n  status?: string;\n  page?: number;\n  limit?: number;\n}\n\n// Datos de ejemplo\nexport const mockAnimals: Animal[] = [\n  {\n    id: 1,\n    nom: 'Lucero',\n    explotacio: '1',\n    genere: 'M',\n    estado: 'OK',\n    alletar: '0',\n    pare: null,\n    mare: null,\n    quadra: 'Q1',\n    cod: 'A001',\n    num_serie: 'SN001',\n    dob: '2020-05-15',\n    created_at: '2023-01-10T10:00:00Z',\n    updated_at: '2023-01-10T10:00:00Z'\n  },\n  {\n    id: 2,\n    nom: 'Estrella',\n    explotacio: '1',\n    genere: 'F',\n    estado: 'OK',\n    alletar: '1',\n    pare: 'Lucero',\n    mare: null,\n    quadra: 'Q2',\n    cod: 'A002',\n    num_serie: 'SN002',\n    dob: '2019-08-20',\n    created_at: '2023-01-10T10:00:00Z',\n    updated_at: '2023-01-10T10:00:00Z'\n  },\n  {\n    id: 3,\n    nom: 'Luna',\n    explotacio: '2',\n    genere: 'F',\n    estado: 'OK',\n    alletar: '2',\n    pare: null,\n    mare: null,\n    quadra: 'Q1',\n    cod: 'A003',\n    num_serie: 'SN003',\n    dob: '2021-02-10',\n    created_at: '2023-01-10T10:00:00Z',\n    updated_at: '2023-01-10T10:00:00Z'\n  },\n  {\n    id: 4,\n    nom: 'Tornado',\n    explotacio: '2',\n    genere: 'M',\n    estado: 'DEF',\n    alletar: '0',\n    pare: 'Lucero',\n    mare: 'Estrella',\n    quadra: 'Q3',\n    cod: 'A004',\n    num_serie: 'SN004',\n    dob: '2020-11-05',\n    created_at: '2023-01-10T10:00:00Z',\n    updated_at: '2023-01-10T10:00:00Z'\n  },\n  {\n    id: 5,\n    nom: 'Trueno',\n    explotacio: 'EXP001',\n    genere: 'M',\n    estado: 'OK',\n    alletar: '0',\n    pare: null,\n    mare: null,\n    quadra: 'Q1',\n    cod: 'A005',\n    num_serie: 'SN005',\n    dob: '2022-03-18',\n    created_at: '2023-01-10T10:00:00Z',\n    updated_at: '2023-01-10T10:00:00Z'\n  }\n];\n\nexport const mockExplotacions: Explotacio[] = [\n  {\n    id: 1,\n    explotacio: 'EXP001',\n    animal_count: 25,\n    created_at: '2022-10-01T09:00:00Z',\n    updated_at: '2023-01-05T14:30:00Z'\n  },\n  {\n    id: 2,\n    explotacio: 'EXP002',\n    animal_count: 20,\n    created_at: '2022-11-01T10:00:00Z',\n    updated_at: '2023-01-10T10:00:00Z'\n  },\n  {\n    id: 3,\n    explotacio: 'EXP003',\n    animal_count: 15,\n    created_at: '2022-12-01T11:00:00Z',\n    updated_at: '2023-01-15T11:00:00Z'\n  },\n  {\n    id: 4,\n    explotacio: 'EXP004',\n    animal_count: 10,\n    created_at: '2023-01-01T12:00:00Z',\n    updated_at: '2023-01-20T12:00:00Z'\n  },\n  {\n    id: 5,\n    explotacio: 'EXP005',\n    animal_count: 5,\n    created_at: '2023-01-05T13:00:00Z',\n    updated_at: '2023-01-25T13:00:00Z'\n  }\n];\n\nexport const mockUsers: User[] = [\n  {\n    id: 1,\n    username: 'admin',\n    email: 'admin@example.com',\n    role: 'administrador',\n    first_name: 'Administrador',\n    last_name: '',\n    is_active: true,\n    created_at: '2023-01-01T10:00:00Z',\n    updated_at: '2023-01-01T10:00:00Z',\n    password: 'password123', // Añadido para simulación\n    full_name: 'Administrador' // Añadido para compatibilidad con authService\n  },\n  {\n    id: 2,\n    username: 'gerente',\n    email: 'gerente@example.com',\n    role: 'gerente',\n    first_name: 'Gerente',\n    last_name: 'Principal',\n    is_active: true,\n    created_at: '2023-01-01T10:00:00Z',\n    updated_at: '2023-01-01T10:00:00Z',\n    password: 'password123', // Añadido para simulación\n    full_name: 'Gerente Principal' // Añadido para compatibilidad con authService\n  },\n  {\n    id: 3,\n    username: 'editor',\n    email: 'editor@example.com',\n    role: 'editor',\n    first_name: 'Editor',\n    last_name: '',\n    is_active: true,\n    created_at: '2023-01-01T10:00:00Z',\n    updated_at: '2023-01-01T10:00:00Z',\n    password: 'password123', // Añadido para simulación\n    full_name: 'Editor' // Añadido para compatibilidad con authService\n  },\n  {\n    id: 4,\n    username: 'usuario',\n    email: 'usuario@example.com',\n    role: 'usuario',\n    first_name: 'Usuario',\n    last_name: 'Estándar',\n    is_active: true,\n    created_at: '2023-01-01T10:00:00Z',\n    updated_at: '2023-01-01T10:00:00Z',\n    password: 'password123', // Añadido para simulación\n    full_name: 'Usuario Estándar' // Añadido para compatibilidad con authService\n  }\n];\n\nexport const mockParts: Part[] = [\n  {\n    id: 1,\n    animal_id: 2,\n    animal_nom: 'Estrella',\n    data: '2022-04-10',\n    num_cries: 1,\n    notes: '',\n    created_at: '2022-04-10T10:00:00Z',\n    updated_at: '2022-04-10T10:00:00Z'\n  },\n  {\n    id: 2,\n    animal_id: 3,\n    animal_nom: 'Luna',\n    data: '2022-06-15',\n    num_cries: 1,\n    notes: '',\n    created_at: '2022-06-15T10:00:00Z',\n    updated_at: '2022-06-15T10:00:00Z'\n  },\n  {\n    id: 3,\n    animal_id: 3,\n    animal_nom: 'Luna',\n    data: '2023-07-20',\n    num_cries: 2,\n    notes: '',\n    created_at: '2023-07-20T10:00:00Z',\n    updated_at: '2023-07-20T10:00:00Z'\n  }\n];\n\n// Mock data para el historial de importaciones\nexport const mockImportHistory: ImportHistoryItem[] = [\n  {\n    id: 1,\n    filename: 'animales_enero_2023.csv',\n    user_id: 1,\n    user_name: 'Admin',\n    import_type: 'animals',\n    total_records: 50,\n    successful_records: 48,\n    failed_records: 2,\n    status: 'completed',\n    created_at: '2023-01-15T14:22:30Z',\n    updated_at: '2023-01-15T14:22:45Z'\n  },\n  {\n    id: 2,\n    filename: 'animales_febrero_2023.csv',\n    user_id: 1,\n    user_name: 'Admin',\n    import_type: 'animals',\n    total_records: 35,\n    successful_records: 35,\n    failed_records: 0,\n    status: 'completed',\n    created_at: '2023-02-10T09:45:12Z',\n    updated_at: '2023-02-10T09:45:30Z'\n  },\n  {\n    id: 3,\n    filename: 'animales_marzo_2023.csv',\n    user_id: 2,\n    user_name: 'María Gómez',\n    import_type: 'animals',\n    total_records: 42,\n    successful_records: 38,\n    failed_records: 4,\n    status: 'completed',\n    created_at: '2023-03-05T11:32:45Z',\n    updated_at: '2023-03-05T11:33:10Z'\n  },\n  {\n    id: 4,\n    filename: 'importacion_fallida.csv',\n    user_id: 1,\n    user_name: 'Admin',\n    import_type: 'animals',\n    total_records: 15,\n    successful_records: 0,\n    failed_records: 15,\n    status: 'failed',\n    created_at: '2023-04-12T16:18:22Z',\n    updated_at: '2023-04-12T16:18:35Z'\n  },\n  {\n    id: 5,\n    filename: 'nuevos_animales.csv',\n    user_id: 3,\n    user_name: 'Pedro Sánchez',\n    import_type: 'animals',\n    total_records: 25,\n    successful_records: 20,\n    failed_records: 5,\n    status: 'completed',\n    created_at: '2023-05-20T10:15:30Z',\n    updated_at: '2023-05-20T10:15:55Z'\n  },\n  {\n    id: 6,\n    filename: 'importacion_actual.csv',\n    user_id: 1,\n    user_name: 'Admin',\n    import_type: 'animals',\n    total_records: 30,\n    successful_records: 0,\n    failed_records: 0,\n    status: 'processing',\n    created_at: '2023-06-01T08:45:00Z',\n    updated_at: '2023-06-01T08:45:00Z'\n  }\n];\n\n// Datos para el dashboard\nexport const mockDashboardData = {\n  totalAnimals: mockAnimals.length,\n  maleAnimals: mockAnimals.filter(a => a.genere === 'M').length,\n  femaleAnimals: mockAnimals.filter(a => a.genere === 'F').length,\n  okAnimals: mockAnimals.filter(a => a.estado === 'OK').length,\n  defAnimals: mockAnimals.filter(a => a.estado === 'DEF').length,\n  allettingAnimals: mockAnimals.filter(a => a.alletar !== '0').length,\n  explotacionsCount: mockExplotacions.length,\n  recentParts: mockParts.slice(0, 3).map(p => ({\n    id: p.id,\n    animal_id: p.animal_id,\n    animal_nom: p.animal_nom,\n    data: p.data,\n    num_cries: p.num_cries\n  }))\n};\n\n// Datos simulados para endpoints específicos\n// Estos objetos deben coincidir con las rutas de la API sin el prefijo /api/v1/\nexport const animalsData = {\n  items: mockAnimals,\n  total: mockAnimals.length,\n  page: 1,\n  limit: 10,\n  pages: 1\n};\n\n// Para obtener un animal específico por ID\nexport const getAnimalById = (id: number) => {\n  const animal = mockAnimals.find(a => a.id === id);\n  if (animal) return animal;\n  return null;\n};\n\n// Para el endpoint dashboard/stats\nexport const dashboardStats = mockDashboardData;\n\n// Para el endpoint explotacions\nexport const explotacionsData = {\n  items: mockExplotacions,\n  total: mockExplotacions.length,\n  page: 1,\n  limit: 10,\n  pages: 1\n};\n\n// Para obtener una explotación específica por ID\nexport const getExplotacionById = (id: number) => {\n  const explotacion = mockExplotacions.find(e => e.id === id);\n  if (explotacion) return explotacion;\n  return null;\n};\n\n// Para el endpoint animals por explotación\nexport const getAnimalsByExplotacion = (explotacioId: number) => {\n  const filteredAnimals = mockAnimals.filter(animal => animal.explotacio === String(explotacioId));\n  return {\n    items: filteredAnimals,\n    total: filteredAnimals.length,\n    page: 1,\n    limit: 10,\n    pages: 1\n  };\n};\n\n// Para el endpoint parts\nexport const partsData = {\n  items: mockParts,\n  total: mockParts.length,\n  page: 1,\n  limit: 10,\n  pages: 1\n};\n\n// Para obtener los partos de un animal específico\nexport const getPartsByAnimal = (animalId: number) => {\n  const filteredParts = mockParts.filter(p => p.animal_id === animalId);\n  return {\n    items: filteredParts,\n    total: filteredParts.length,\n    page: 1,\n    limit: 10,\n    pages: 1\n  };\n};\n\n// Para el endpoint import-history\nexport const importHistory = {\n  items: mockImportHistory,\n  total: mockImportHistory.length,\n  page: 1,\n  limit: 10,\n  pages: 1\n};\n\n// Para el endpoint users\nexport const usersData = {\n  items: mockUsers,\n  total: mockUsers.length,\n  page: 1,\n  limit: 10,\n  pages: 1\n};\n","import apiService from './apiService';\nimport { mockAnimals, mockExplotacions } from './mockData';\nimport api from './api';\n\n// Interfaces\nexport interface Parto {\n  id?: number;\n  animal_id?: number;\n  animal_nom?: string;\n  part?: string | null;  // Fecha del parto (DD/MM/YYYY)\n  GenereT?: 'M' | 'F' | 'esforrada' | null;\n  EstadoT?: 'OK' | 'DEF' | null;\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport interface Animal {\n  id: number;\n  explotacio: string;\n  nom: string;\n  genere: 'M' | 'F';\n  estado: 'OK' | 'DEF';\n  alletar: '0' | '1' | '2';  // 0: No amamanta, 1: Un ternero, 2: Dos terneros (solo para vacas)\n  pare?: string | null;\n  mare?: string | null;\n  quadra?: string | null;\n  cod?: string | null;\n  num_serie?: string | null;\n  dob?: string | null;\n  created_at: string;\n  updated_at: string;\n  partos?: Parto[] | { items: Parto[] };\n  parts?: Parto[];  // Soporte para nombre anterior (retrocompatibilidad)\n  estat?: 'OK' | 'DEF';  // Soporte para nombre anterior (retrocompatibilidad)\n}\n\nexport interface AnimalCreateDto {\n  explotacio: string;\n  nom: string;\n  genere: 'M' | 'F';\n  estado: 'OK' | 'DEF';\n  alletar: '0' | '1' | '2';\n  pare?: string | null;\n  mare?: string | null;\n  quadra?: string | null;\n  cod?: string | null;\n  num_serie?: string | null;\n  dob?: string | null;\n}\n\nexport interface AnimalUpdateDto extends Partial<AnimalCreateDto> {}\n\nexport interface AnimalFilters {\n  explotacio?: string;\n  genere?: 'M' | 'F';\n  estado?: 'OK' | 'DEF';\n  alletar?: '0' | '1' | '2';\n  quadra?: string;\n  search?: string;\n  page?: number;\n  limit?: number;\n}\n\nexport interface PaginatedResponse<T> {\n  items: T[];\n  total: number;\n  page: number;\n  limit: number;\n  pages: number;\n}\n\n// Función para filtrar animales (usado para mock)\nconst getFilteredAnimals = (filters: AnimalFilters): Animal[] => {\n  let filteredAnimals = [...mockAnimals];\n  \n  // Aplicar filtros\n  if (filters.explotacio !== undefined) {\n    filteredAnimals = filteredAnimals.filter(a => a.explotacio === filters.explotacio);\n  }\n  \n  if (filters.genere !== undefined) {\n    filteredAnimals = filteredAnimals.filter(a => a.genere === filters.genere);\n  }\n  \n  if (filters.estado !== undefined) {\n    filteredAnimals = filteredAnimals.filter(a => a.estado === filters.estado);\n  }\n  \n  if (filters.alletar !== undefined) {\n    filteredAnimals = filteredAnimals.filter(a => a.alletar === filters.alletar);\n  }\n  \n  if (filters.quadra !== undefined) {\n    filteredAnimals = filteredAnimals.filter(a => a.quadra === filters.quadra);\n  }\n  \n  if (filters.search !== undefined && filters.search !== '') {\n    const searchLower = filters.search.toLowerCase().trim();\n    console.log(`Filtrando por término de búsqueda: \"${searchLower}\"`);\n    \n    // Primero obtenemos todos los animales que coinciden con el término de búsqueda\n    let matchingAnimals = filteredAnimals.filter(a => {\n      // Búsqueda por nom (principal)\n      const matchesNom = a.nom.toLowerCase().includes(searchLower);\n      \n      // Búsqueda por código identificativo\n      const matchesCod = a.cod && a.cod.toLowerCase().includes(searchLower);\n      \n      // Búsqueda por número de serie\n      const matchesNumSerie = a.num_serie && a.num_serie.toLowerCase().includes(searchLower);\n      \n      // Búsqueda por explotación \n      const matchesExplotacio = a.explotacio.toLowerCase().includes(searchLower);\n      \n      // Búsqueda por padre o madre\n      const matchesPare = a.pare && a.pare.toLowerCase().includes(searchLower);\n      const matchesMare = a.mare && a.mare.toLowerCase().includes(searchLower);\n      \n      // Animal coincide si cualquiera de los campos coincide\n      return matchesNom || matchesCod || matchesNumSerie || matchesExplotacio || matchesPare || matchesMare;\n    });\n    \n    // Vamos a asignar valores de prioridad a cada animal en función de dónde coincide el término\n    const animalScores = matchingAnimals.map(animal => {\n      let score = 0;\n      \n      // Prioridad máxima: Coincidencia EXACTA en nom (mismo texto)\n      if (animal.nom.toLowerCase() === searchLower) {\n        score += 1000;\n      }\n      // Prioridad alta: Coincidencia al INICIO del nombre (empieza por)\n      else if (animal.nom.toLowerCase().startsWith(searchLower)) {\n        score += 800;\n      }\n      // Prioridad media-alta: Nombre CONTIENE el término de búsqueda\n      else if (animal.nom.toLowerCase().includes(searchLower)) {\n        score += 500;\n      }\n      \n      // Prioridad media: Coincidencia en código o número de serie (identificadores)\n      if (animal.cod && animal.cod.toLowerCase().includes(searchLower)) {\n        score += 300;\n      }\n      if (animal.num_serie && animal.num_serie.toLowerCase().includes(searchLower)) {\n        score += 300;\n      }\n      \n      // Prioridad baja: Coincidencia en padres, madre, explotación (relaciones)\n      if (animal.pare && animal.pare.toLowerCase().includes(searchLower)) {\n        score += 100;\n      }\n      if (animal.mare && animal.mare.toLowerCase().includes(searchLower)) {\n        score += 100;\n      }\n      if (animal.explotacio && animal.explotacio.toLowerCase().includes(searchLower)) {\n        score += 50;\n      }\n      \n      return { animal, score };\n    });\n    \n    // Ordenar por puntuación (mayor a menor) y luego por fecha de actualización\n    animalScores.sort((a, b) => {\n      // Primero por puntuación\n      if (a.score !== b.score) {\n        return b.score - a.score;\n      }\n      \n      // Si tienen la misma puntuación, ordenar por fecha de actualización (más reciente primero)\n      return new Date(b.animal.updated_at).getTime() - new Date(a.animal.updated_at).getTime();\n    });\n    \n    // Extraer solo los animales del array ordenado de puntuaciones\n    matchingAnimals = animalScores.map(item => item.animal);\n    \n    // Opcional: Mostrar en la consola para depuración\n    console.log('Animales ordenados por relevancia:', animalScores.map(item => `${item.animal.nom} (${item.score})`));\n    \n    // Tercero, consolidamos registros duplicados basados en el mismo animal\n    // Consideramos que dos animales son el mismo si tienen el mismo nombre y código\n    const uniqueAnimals: Animal[] = [];\n    const processedKeys = new Set<string>();\n    \n    matchingAnimals.forEach(animal => {\n      // Creamos una clave única basada en nombre y código para identificar registros duplicados\n      // Si el código contiene un timestamp, lo eliminamos para considerar todas las versiones como un mismo animal\n      const baseCode = animal.cod ? animal.cod.split('_')[0] : '';\n      const uniqueKey = `${animal.nom.toLowerCase()}_${baseCode}`.trim();\n      \n      // Si no hemos procesado este animal antes, lo agregamos a la lista de únicos\n      if (!processedKeys.has(uniqueKey)) {\n        processedKeys.add(uniqueKey);\n        uniqueAnimals.push(animal);\n      }\n    });\n    \n    filteredAnimals = uniqueAnimals;\n    console.log(`Se encontraron ${filteredAnimals.length} animales únicos que coinciden con la búsqueda`);\n  }\n  \n  return filteredAnimals;\n};\n\n// Funciones auxiliares para la UI\nexport const getAnimalStatusClass = (estado: string) => {\n  return estado === 'OK' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';\n};\n\nexport const getAnimalIcon = (animal: Animal) => {\n  if (animal.genere === 'M') {\n    return '🐂'; // Toro\n  } else {\n    if (animal.alletar !== '0') {\n      return '🐄'; // Vaca amamantando\n    } else {\n      return '🐮'; // Vaca\n    }\n  }\n};\n\nexport const getAlletarText = (alletar: string) => {\n  if (alletar === '0') return 'No amamantando';\n  if (alletar === '1') return 'Amamantando 1 ternero';\n  if (alletar === '2') return 'Amamantando 2 terneros';\n  return 'Desconocido';\n};\n\n// Servicio de animales\nconst animalService = {\n  // Obtiene una lista paginada de animales con filtros opcionales\n  async getAnimals(filters: AnimalFilters = {}): Promise<PaginatedResponse<Animal>> {\n    try {\n      // Construir parámetros de consulta\n      const params = new URLSearchParams();\n      const page = filters.page || 1;\n      const limit = filters.limit || 10;\n      \n      // Convertir page a offset para el backend\n      // El backend espera offset en lugar de page\n      const offset = (page - 1) * limit;\n      \n      // Enviar offset y limit como espera el backend\n      params.append('offset', offset.toString());\n      params.append('limit', limit.toString());\n      \n      // Añadir filtros opcionales si están presentes\n      if (filters.explotacio) params.append('explotacio', filters.explotacio);\n      if (filters.genere) params.append('genere', filters.genere);\n      if (filters.estado) params.append('estado', filters.estado);\n      if (filters.alletar) params.append('alletar', filters.alletar);\n      if (filters.quadra) params.append('quadra', filters.quadra);\n      \n      // Búsqueda por nombre y otros campos (nom, cod, num_serie)\n      if (filters.search) {\n        params.append('search', filters.search);\n        console.log(`Buscando animales que coincidan con: \"${filters.search}\"`);\n      }\n      \n      console.log('Obteniendo animales con parámetros:', Object.fromEntries(params.entries()));\n      \n      // Realizar petición a la API\n      // Usar la ruta correcta sin duplicar el prefijo /api/v1 que ya está en la URL base\n      const responseData = await apiService.get(`/animals?${params.toString()}`);\n      console.log('Respuesta RAW de animales recibida:', responseData);\n      \n      // Transformar la estructura de respuesta del backend a nuestro formato esperado\n      let processedResponse: PaginatedResponse<Animal>;\n      \n      // Verificar si la respuesta tiene el formato {status, data}\n      if (responseData && responseData.status === 'success' && responseData.data) {\n        console.log('Detectada respuesta con formato {status, data}. Procesando correctamente...');\n        \n        const { total, offset, limit, items } = responseData.data;\n        \n        processedResponse = {\n          items: items || [],\n          total: total || 0,\n          page: Math.floor(offset / limit) + 1, // Calcular página en base a offset y limit\n          limit: limit || 10,\n          pages: Math.ceil((total || 0) / (limit || 10))\n        };\n      } else {\n        // Si ya tiene el formato esperado o no conocemos el formato\n        console.log('Usando respuesta en formato directo');\n        processedResponse = responseData as PaginatedResponse<Animal>;\n      }\n      \n      console.log('Respuesta procesada de animales:', processedResponse);\n      \n      // Notificar al usuario que los datos son reales\n      if (filters.search) {\n        document.dispatchEvent(new CustomEvent('search-completed', {\n          detail: {\n            term: filters.search,\n            count: processedResponse.items.length,\n            total: processedResponse.total,\n            usedMock: false\n          }\n        }));\n      }\n      \n      return processedResponse;\n    } catch (error: any) {\n      console.error('Error en petición GET /animals:', error);\n      \n      // Usar datos simulados en caso de error\n      let useMockReason = '';\n      \n      // Verificar el tipo de error\n      if (error.code === 'DB_COLUMN_ERROR' || (error.message && error.message.includes('estado_t'))) {\n        useMockReason = 'error en la estructura de la tabla en el backend';\n      } else if (error.code === 'NETWORK_ERROR') {\n        useMockReason = 'error de conexión al servidor';\n      } else {\n        // Si no es un error específico conocido, seguir usando datos simulados pero con otro mensaje\n        useMockReason = 'error en el servidor';\n      }\n      \n      console.warn(`Usando datos simulados debido a: ${useMockReason}`);\n      \n      // Filtrar datos simulados según los filtros proporcionados\n      const filteredAnimals = getFilteredAnimals(filters);\n      \n      // Calcular paginación\n      const page = filters.page || 1;\n      const limit = filters.limit || 10;\n      const startIndex = (page - 1) * limit;\n      const endIndex = startIndex + limit;\n      const paginatedAnimals = filteredAnimals.slice(startIndex, endIndex);\n      \n      // Notificar al usuario que los datos son simulados si es una búsqueda\n      if (filters.search) {\n        document.dispatchEvent(new CustomEvent('search-completed', {\n          detail: {\n            term: filters.search,\n            count: paginatedAnimals.length,\n            total: filteredAnimals.length,\n            usedMock: true,\n            reason: useMockReason\n          }\n        }));\n      }\n      \n      // Devolver respuesta paginada simulada\n      return {\n        items: paginatedAnimals,\n        total: filteredAnimals.length,\n        page,\n        limit,\n        pages: Math.ceil(filteredAnimals.length / limit)\n      };\n    }\n  },\n  \n  // Obtiene un animal por su ID\n  async getAnimalById(id: number): Promise<Animal> {\n    try {\n      console.log(`Intentando cargar animal con ID: ${id}`);\n      // Usar la ruta correcta sin duplicar el prefijo /api/v1 que ya está en la URL base\n      const responseData = await apiService.get(`/animals/${id}`);\n      console.log('Animal cargado:', responseData);\n      \n      let animalData: Animal;\n      \n      // Comprobamos si la respuesta tiene el formato esperado {status, data}\n      if (responseData && responseData.status === 'success' && responseData.data) {\n        animalData = responseData.data as Animal;\n      } \n      // Si la respuesta es directamente el animal\n      else if (responseData && responseData.id) {\n        animalData = responseData as Animal;\n      }\n      else {\n        throw new Error('Formato de respuesta inválido');\n      }\n      \n      // Normalizar estructura de partos si existe\n      if (animalData) {\n        // Asegurarnos de que partos sea siempre un array\n        if (!animalData.partos) {\n          animalData.partos = [];\n        } else if (!Array.isArray(animalData.partos)) {\n          // Si no es un array, pero tiene items, usamos eso\n          if (animalData.partos.items && Array.isArray(animalData.partos.items)) {\n            animalData.partos = animalData.partos.items;\n          } else {\n            // Si no tiene formato esperado, inicializar como array vacío\n            animalData.partos = [];\n          }\n        }\n        \n        // Asegurarse de que existe 'estado' y no 'estat'\n        if (!animalData.estado && animalData['estat']) {\n          animalData.estado = animalData['estat'];\n        }\n      }\n      \n      return animalData;\n    } catch (error: any) {\n      console.error(`Error al obtener animal con ID ${id}:`, error);\n      \n      // Verificar si es el error específico de estado_t o un error de red\n      if (error.code === 'DB_COLUMN_ERROR' || error.code === 'NETWORK_ERROR' || \n          (error.message && (error.message.includes('estado_t') || error.message.includes('conexión')))) {\n        console.warn('Usando datos simulados debido a error en el backend');\n        \n        // Buscar en datos simulados\n        const animal = mockAnimals.find(a => a.id === id);\n        if (animal) {\n          return animal;\n        }\n        \n        throw new Error(`Animal con ID ${id} no encontrado en los datos simulados`);\n      }\n      \n      // Si no es un error manejable, propagar el error\n      throw error;\n    }\n  },\n  \n  // Crea un nuevo animal\n  async createAnimal(animalData: AnimalCreateDto): Promise<Animal> {\n    try {\n      console.log('Creando nuevo animal:', animalData);\n      // Añadir barra diagonal al final para que coincida con el endpoint del backend\n      const responseData = await apiService.post('/animals/', animalData);\n      console.log('Animal creado:', responseData);\n      return responseData;\n    } catch (error: any) {\n      console.error('Error al crear animal:', error);\n      \n      // Si es un error de red o cualquier otro error, usar datos simulados como fallback\n      if (error.code === 'DB_COLUMN_ERROR' || error.code === 'NETWORK_ERROR' || \n          (error.message && (error.message.includes('estado_t') || error.message.includes('conexión')))) {\n        console.warn('Usando datos simulados para crear animal debido a error en el backend');\n        \n        // Crear respuesta simulada\n        const newId = Math.max(...mockAnimals.map(a => a.id)) + 1;\n        const now = new Date().toISOString();\n        \n        return {\n          id: newId,\n          ...animalData,\n          created_at: now,\n          updated_at: now\n        };\n      }\n      \n      // Si no es un error manejable, propagar el error\n      throw error;\n    }\n  },\n  \n  // Actualiza un animal existente usando PATCH (actualización parcial)\n  async updateAnimal(id: number, animalData: any): Promise<Animal> {\n    try {\n      console.log(`[PATCH] Actualizando animal con ID ${id}:`, animalData);\n      \n      // IMPORTANTE: Solo procesamos los campos que realmente se han enviado\n      // No clonamos todo el objeto para evitar enviar campos innecesarios\n      const datosNormalizados: Record<string, any> = {};\n      \n      // Lista de campos que pueden ser nulos\n      const camposNulables = ['mare', 'pare', 'quadra', 'cod', 'num_serie', 'dob'];\n      \n      // Procesar solo los campos que se han proporcionado\n      for (const campo in animalData) {\n        // Comprobar si el campo existe en animalData\n        if (Object.prototype.hasOwnProperty.call(animalData, campo)) {\n          // Si es un campo nullable y está vacío, establecerlo como null\n          if (camposNulables.includes(campo) && animalData[campo] === '') {\n            datosNormalizados[campo] = null;\n          } else if (campo === 'alletar' && animalData[campo] !== undefined) {\n            // Tratar alletar como caso especial\n            datosNormalizados[campo] = String(animalData[campo]) as '0' | '1' | '2';\n          } else if (campo === 'dob' && animalData[campo]) {\n            // Formatear fecha siempre al formato esperado por el backend: DD/MM/YYYY\n            try {\n              let fechaFinal;\n              \n              // Si la fecha ya está en formato DD/MM/YYYY, la dejamos igual\n              if (typeof animalData[campo] === 'string' && /^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(animalData[campo])) {\n                fechaFinal = animalData[campo];\n              }\n              // Si es formato YYYY-MM-DD (desde inputs HTML)\n              else if (typeof animalData[campo] === 'string' && /^\\d{4}-\\d{2}-\\d{2}$/.test(animalData[campo])) {\n                const [year, month, day] = animalData[campo].split('-');\n                fechaFinal = `${day}/${month}/${year}`;\n              }\n              // Cualquier otro formato, intentamos parsearlo\n              else {\n                const fecha = new Date(animalData[campo]);\n                if (!isNaN(fecha.getTime())) {\n                  const day = fecha.getDate().toString().padStart(2, '0');\n                  const month = (fecha.getMonth() + 1).toString().padStart(2, '0');\n                  const year = fecha.getFullYear();\n                  fechaFinal = `${day}/${month}/${year}`;\n                } else {\n                  // Si no se puede parsear, usamos el valor original \n                  fechaFinal = animalData[campo];\n                }\n              }\n              \n              console.log(`Fecha convertida: ${animalData[campo]} -> ${fechaFinal}`);\n              datosNormalizados[campo] = fechaFinal;\n            } catch (err) {\n              console.error('Error al formatear fecha:', err);\n              // En caso de error, usar el valor original\n              datosNormalizados[campo] = animalData[campo];\n            }\n          } else {\n            // Para cualquier otro campo, usar el valor tal cual\n            datosNormalizados[campo] = animalData[campo];\n          }\n        }\n      }\n      \n      // Verificar que hay campos para actualizar\n      const camposAActualizar = Object.keys(datosNormalizados);\n      if (camposAActualizar.length === 0) {\n        throw new Error('No se detectaron cambios para actualizar');\n      }\n      \n      console.log(`[PATCH] Campos a actualizar: ${camposAActualizar.join(', ')}`);\n      console.log('[PATCH] Datos finales:', datosNormalizados);\n      \n      // Ya no necesitamos manejar el token manualmente\n      // La función patch del apiService se encarga de añadir los headers de autenticación\n      \n      // IMPORTANTE: Usar PATCH y la ruta correcta\n      console.log(`[PATCH] Enviando petición a /animals/${id}`);\n      console.log('Datos normalizados:', JSON.stringify(datosNormalizados, null, 2));\n      \n      // Usar el servicio API para garantizar coherencia\n      console.log('Iniciando patch...');\n      const responseData = await apiService.patch(`/animals/${id}`, datosNormalizados);\n      console.log('PATCH completado con éxito');\n      \n      // El método patch de apiService ya maneja los errores y parsea la respuesta\n      return responseData.data || responseData;\n\n    } catch (error: any) {\n      console.error(`[PATCH] Error al actualizar animal con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  // Elimina un animal (marcado como DEF)\n  async deleteAnimal(id: number): Promise<Animal> {\n    try {\n      console.log(`Intentando eliminar animal con ID ${id}`);\n      \n      // Llamar al endpoint de eliminación (en realidad, marcar como DEF)\n      // Usar la ruta correcta sin duplicar el prefijo /api/v1 que ya está en la URL base\n      const response = await apiService.delete(`/api/v1/animals/${id}`);\n      console.log(`Respuesta al eliminar animal con ID ${id}:`, response);\n      \n      return response;\n    } catch (error: any) {\n      console.error(`Error al eliminar animal con ID ${id}:`, error);\n      \n      // Si es un error de red o cualquier otro error, usar datos simulados como fallback\n      if (error.code === 'DB_COLUMN_ERROR' || error.code === 'NETWORK_ERROR' || \n          (error.message && (error.message.includes('estado_t') || error.message.includes('conexión')))) {\n        console.warn('Usando datos simulados para eliminar animal debido a error en el backend');\n        \n        // Marcar como DEF en el frontend (el backend realmente no lo borra)\n        return this.updateAnimal(id, { estado: 'DEF' });\n      }\n      \n      // Si no es un error manejable, propagar el error\n      throw error;\n    }\n  },\n  \n  // Obtiene los posibles padres (machos) para selección en formularios\n  async getPotentialFathers(explotacioId?: number | string): Promise<Animal[]> {\n    try {\n      console.log(`Obteniendo posibles padres${explotacioId ? ` para explotación ${explotacioId}` : ''}`);\n      \n      // Usar el endpoint general de animales con filtros\n      const filters: AnimalFilters = {\n        genere: 'M',\n        estado: 'OK'\n      };\n      \n      // Añadir filtro de explotación si se proporciona\n      if (explotacioId && explotacioId !== 'undefined') {\n        filters.explotacio = String(explotacioId);\n      }\n      \n      // Obtener animales filtrados\n      const response = await this.getAnimals(filters);\n      \n      // Extraer los items si es una respuesta paginada\n      const fathers = Array.isArray(response) ? response : (response.items || []);\n      console.log('Posibles padres recibidos:', fathers);\n      return fathers;\n    } catch (error: any) {\n      console.error(`Error al obtener posibles padres${explotacioId ? ` para explotación ${explotacioId}` : ''}:`, error);\n      \n      // Si es un error de red o cualquier otro error, usar datos simulados como fallback\n      console.warn('Usando datos simulados para posibles padres debido a error en el backend');\n      \n      // Filtrar animales simulados (machos activos)\n      const filteredFathers = mockAnimals.filter(a => \n        a.genere === 'M' && \n        a.estado === 'OK' && \n        (!explotacioId || explotacioId === 'undefined' || a.explotacio === String(explotacioId)));\n      \n      return filteredFathers;\n    }\n  },\n  \n  // Obtiene las posibles madres (hembras) para selección en formularios\n  async getPotentialMothers(explotacioId?: number | string): Promise<Animal[]> {\n    try {\n      console.log(`Obteniendo posibles madres${explotacioId ? ` para explotación ${explotacioId}` : ''}`);\n      \n      // Usar el endpoint general de animales con filtros\n      const filters: AnimalFilters = {\n        genere: 'F',\n        estado: 'OK'\n      };\n      \n      // Añadir filtro de explotación si se proporciona\n      if (explotacioId && explotacioId !== 'undefined') {\n        filters.explotacio = String(explotacioId);\n      }\n      \n      // Obtener animales filtrados\n      const response = await this.getAnimals(filters);\n      \n      // Extraer los items si es una respuesta paginada\n      const mothers = Array.isArray(response) ? response : (response.items || []);\n      console.log('Posibles madres recibidas:', mothers);\n      return mothers;\n    } catch (error: any) {\n      console.error(`Error al obtener posibles madres${explotacioId ? ` para explotación ${explotacioId}` : ''}:`, error);\n      \n      // Si es un error de red o cualquier otro error, usar datos simulados como fallback\n      console.warn('Usando datos simulados para posibles madres debido a error en el backend');\n      \n      // Filtrar animales simulados (hembras activas)\n      const filteredMothers = mockAnimals.filter(a => \n        a.genere === 'F' && \n        a.estado === 'OK' && \n        (!explotacioId || explotacioId === 'undefined' || a.explotacio === String(explotacioId)));\n      \n      return filteredMothers;\n    }\n  },\n  \n  // Obtiene todos los animales de una explotación\n  async getAnimalsByExplotacion(explotacionId: number | string): Promise<Animal[]> {\n    try {\n      // Intentar obtener datos reales de la API\n      try {\n        console.log(`🐄 [Animal] Solicitando animales para explotación ${explotacionId}`);\n        \n        // Probar con diferentes formatos de endpoint para mayor compatibilidad\n        const endpoints = [\n          `/animals?explotacio=${encodeURIComponent(explotacionId)}&limit=100`\n        ];\n        \n        let response = null;\n        let successEndpoint = '';\n        \n        // Intentar cada endpoint hasta que uno funcione\n        for (const endpoint of endpoints) {\n          try {\n            console.log(`🐄 [Animal] Intentando endpoint: ${endpoint}`);\n            response = await apiService.get(endpoint);\n            successEndpoint = endpoint;\n            console.log(`🐄 [Animal] Respuesta recibida de ${endpoint}:`, response);\n            break; // Si llegamos aquí, la petición fue exitosa\n          } catch (endpointError) {\n            console.warn(`🐄 [Animal] Error con endpoint ${endpoint}:`, endpointError);\n            // Continuar con el siguiente endpoint\n          }\n        }\n        \n        if (!response) {\n          throw new Error('Todos los endpoints fallaron');\n        }\n        \n        console.log(`🐄 [Animal] Endpoint exitoso: ${successEndpoint}`);\n        \n        // Si es un array, devolverlo directamente\n        if (Array.isArray(response)) {\n          console.log(`🐄 [Animal] Devolviendo array de ${response.length} animales`);\n          return response;\n        }\n        \n        // Si no es un array, verificar si es un objeto con propiedad 'items' (formato paginado)\n        if (response && typeof response === 'object' && 'items' in response) {\n          console.log(`🐄 [Animal] Devolviendo ${response.items.length} animales desde respuesta paginada`);\n          return response.items as Animal[];\n        }\n        \n        // Si es un objeto con propiedad 'data' (otro formato común)\n        if (response && typeof response === 'object' && 'data' in response) {\n          if (Array.isArray(response.data)) {\n            console.log(`🐄 [Animal] Devolviendo ${response.data.length} animales desde response.data`);\n            return response.data as Animal[];\n          }\n        }\n        \n        // Si no encontramos animales, devolver array vacío\n        console.warn(`🐄 [Animal] No se pudo interpretar la respuesta:`, response);\n        return [];\n      } catch (innerError) {\n        console.error(`🐄 [Animal] Error al obtener animales para explotación ${explotacionId}:`, innerError);\n        throw innerError;\n      }\n    } catch (error: any) {\n      console.error(`🐄 [Animal] Error en petición para obtener animales de explotación ${explotacionId}:`, error);\n      \n      // Si es un error de red o cualquier otro error, usar datos simulados como fallback\n      console.warn(`🐄 [Animal] Usando datos simulados para animales de explotación ${explotacionId}`);\n      \n      // Filtrar animales simulados por explotación\n      const mockAnimalsFiltered = mockAnimals.filter(a => a.explotacio === String(explotacionId));\n      console.log(`🐄 [Animal] Devolviendo ${mockAnimalsFiltered.length} animales simulados para explotación ${explotacionId}`);\n      return mockAnimalsFiltered;\n    }\n  },\n  \n  // Utilidades para iconos y visualización\n  getAnimalIcon(animal: Animal): string {\n    if (animal.genere === 'M') {\n      return '🐂'; // Toro\n    } else {\n      if (animal.alletar !== '0') {\n        return '🐄'; // Vaca amamantando\n      } else {\n        return '🐮'; // Vaca\n      }\n    }\n  },\n  \n  getAnimalStatusClass(estado: string): string {\n    if (estado === 'OK') {\n      return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\n    } else if (estado === 'DEF') {\n      return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';\n    }\n    return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';\n  },\n  \n  // Obtiene texto para alletar\n  getAlletarText(alletar: string): string {\n    if (alletar === '0') return 'No amamantando';\n    if (alletar === '1') return 'Amamantando 1 ternero';\n    if (alletar === '2') return 'Amamantando 2 terneros';\n    return 'Desconocido';\n  },\n  \n  // Método simplificado para obtener valores únicos de explotaciones\n  async getExplotacions(): Promise<{id: number, explotacio: string}[]> {\n    try {\n      console.log('Obteniendo lista de explotaciones');\n      \n      // Intentar primero obtener directamente del endpoint de dashboard/explotacions\n      try {\n        // Usar el endpoint correcto de dashboard para explotaciones\n        const responseData = await apiService.get('/dashboard/explotacions');\n        \n        // Procesamos la respuesta para devolver el formato esperado\n        if (responseData && responseData.status === 'success' && responseData.data && Array.isArray(responseData.data.items)) {\n          const items = responseData.data.items;\n          return items.map((item: any, index: number) => ({\n            id: index + 1, // Usamos un ID secuencial ya que no hay un ID real en la respuesta\n            explotacio: item.explotacio || \"\"\n          }));\n        }\n      } catch (explotacioError) {\n        console.warn('No se pudo obtener explotaciones del dashboard, intentando alternativa', explotacioError);\n        // Continuar con el método alternativo\n      }\n      \n      // Método alternativo: extraer de los animales existentes\n      const response = await this.getAnimals({ page: 1, limit: 100 });\n      \n      // Extraer valores únicos de explotaciones\n      const uniqueExplotacions = new Set<string>();\n      \n      if (response && response.items) {\n        response.items.forEach((animal: Animal) => {\n          if (animal.explotacio) {\n            uniqueExplotacions.add(animal.explotacio);\n          }\n        });\n      }\n      \n      // Si no hay datos, usar valores predefinidos\n      if (uniqueExplotacions.size === 0) {\n        return [\n          { id: 1, explotacio: 'Madrid' },\n          { id: 2, explotacio: 'Barcelona' },\n          { id: 3, explotacio: 'Valencia' },\n          { id: 4, explotacio: 'Guadalajara' }\n        ];\n      }\n      \n      // Convertir a array de objetos con id y explotacio\n      return Array.from(uniqueExplotacions).map((explotacio, index) => ({\n        id: index + 1,\n        explotacio\n      }));\n    } catch (error: any) {\n      console.error('Error al obtener explotaciones:', error);\n      console.log('Usando datos simulados');\n      return mockExplotacions;\n    }\n  }\n};\n\nexport default animalService;\n"],"names":["mockAnimals","mockExplotacions","mockParts","a","p","getFilteredAnimals","filters","filteredAnimals","searchLower","matchingAnimals","matchesNom","matchesCod","matchesNumSerie","matchesExplotacio","matchesPare","matchesMare","animalScores","animal","score","b","item","uniqueAnimals","processedKeys","baseCode","uniqueKey","animalService","params","page","limit","offset","responseData","apiService","processedResponse","total","items","error","useMockReason","startIndex","endIndex","paginatedAnimals","id","animalData","newId","now","datosNormalizados","camposNulables","campo","fechaFinal","year","month","day","fecha","err","camposAActualizar","response","explotacioId","fathers","mothers","explotacionId","endpoints","successEndpoint","endpoint","endpointError","innerError","mockAnimalsFiltered","estado","alletar","index","explotacioError","uniqueExplotacions","explotacio"],"mappings":"uEA8EO,MAAMA,EAAwB,CACnC,CACE,GAAI,EACJ,IAAK,SACL,WAAY,IACZ,OAAQ,IACR,OAAQ,KACR,QAAS,IACT,KAAM,KACN,KAAM,KACN,OAAQ,KACR,IAAK,OACL,UAAW,QACX,IAAK,aACL,WAAY,uBACZ,WAAY,sBACd,EACA,CACE,GAAI,EACJ,IAAK,WACL,WAAY,IACZ,OAAQ,IACR,OAAQ,KACR,QAAS,IACT,KAAM,SACN,KAAM,KACN,OAAQ,KACR,IAAK,OACL,UAAW,QACX,IAAK,aACL,WAAY,uBACZ,WAAY,sBACd,EACA,CACE,GAAI,EACJ,IAAK,OACL,WAAY,IACZ,OAAQ,IACR,OAAQ,KACR,QAAS,IACT,KAAM,KACN,KAAM,KACN,OAAQ,KACR,IAAK,OACL,UAAW,QACX,IAAK,aACL,WAAY,uBACZ,WAAY,sBACd,EACA,CACE,GAAI,EACJ,IAAK,UACL,WAAY,IACZ,OAAQ,IACR,OAAQ,MACR,QAAS,IACT,KAAM,SACN,KAAM,WACN,OAAQ,KACR,IAAK,OACL,UAAW,QACX,IAAK,aACL,WAAY,uBACZ,WAAY,sBACd,EACA,CACE,GAAI,EACJ,IAAK,SACL,WAAY,SACZ,OAAQ,IACR,OAAQ,KACR,QAAS,IACT,KAAM,KACN,KAAM,KACN,OAAQ,KACR,IAAK,OACL,UAAW,QACX,IAAK,aACL,WAAY,uBACZ,WAAY,sBAAA,CAEhB,EAEaC,EAAiC,CAC5C,CACE,GAAI,EACJ,WAAY,SACZ,aAAc,GACd,WAAY,uBACZ,WAAY,sBACd,EACA,CACE,GAAI,EACJ,WAAY,SACZ,aAAc,GACd,WAAY,uBACZ,WAAY,sBACd,EACA,CACE,GAAI,EACJ,WAAY,SACZ,aAAc,GACd,WAAY,uBACZ,WAAY,sBACd,EACA,CACE,GAAI,EACJ,WAAY,SACZ,aAAc,GACd,WAAY,uBACZ,WAAY,sBACd,EACA,CACE,GAAI,EACJ,WAAY,SACZ,aAAc,EACd,WAAY,uBACZ,WAAY,sBAAA,CAEhB,EAyDaC,EAAoB,CAC/B,CACE,GAAI,EACJ,UAAW,EACX,WAAY,WACZ,KAAM,aACN,UAAW,EACX,MAAO,GACP,WAAY,uBACZ,WAAY,sBACd,EACA,CACE,GAAI,EACJ,UAAW,EACX,WAAY,OACZ,KAAM,aACN,UAAW,EACX,MAAO,GACP,WAAY,uBACZ,WAAY,sBACd,EACA,CACE,GAAI,EACJ,UAAW,EACX,WAAY,OACZ,KAAM,aACN,UAAW,EACX,MAAO,GACP,WAAY,uBACZ,WAAY,sBAAA,CAEhB,EAuFeF,EAAY,UAAYG,EAAE,SAAW,GAAG,EAAE,OACxCH,EAAY,UAAYG,EAAE,SAAW,GAAG,EAAE,OAC9CH,EAAY,UAAYG,EAAE,SAAW,IAAI,EAAE,OAC1CH,EAAY,UAAYG,EAAE,SAAW,KAAK,EAAE,OACtCH,EAAY,UAAYG,EAAE,UAAY,GAAG,EAAE,OAC1CF,EAAiB,OACvBC,EAAU,MAAM,EAAG,CAAC,EAAE,IAAUE,IAAA,CAC3C,GAAIA,EAAE,GACN,UAAWA,EAAE,UACb,WAAYA,EAAE,WACd,KAAMA,EAAE,KACR,UAAWA,EAAE,SAAA,EACb,EA0BKH,EAAiB,OClV1B,MAAMI,EAAsBC,GAAqC,CAC3D,IAAAC,EAAkB,CAAC,GAAGP,CAAW,EAuBrC,GApBIM,EAAQ,aAAe,SACzBC,EAAkBA,EAAgB,OAAO,GAAK,EAAE,aAAeD,EAAQ,UAAU,GAG/EA,EAAQ,SAAW,SACrBC,EAAkBA,EAAgB,OAAO,GAAK,EAAE,SAAWD,EAAQ,MAAM,GAGvEA,EAAQ,SAAW,SACrBC,EAAkBA,EAAgB,OAAO,GAAK,EAAE,SAAWD,EAAQ,MAAM,GAGvEA,EAAQ,UAAY,SACtBC,EAAkBA,EAAgB,OAAO,GAAK,EAAE,UAAYD,EAAQ,OAAO,GAGzEA,EAAQ,SAAW,SACrBC,EAAkBA,EAAgB,OAAO,GAAK,EAAE,SAAWD,EAAQ,MAAM,GAGvEA,EAAQ,SAAW,QAAaA,EAAQ,SAAW,GAAI,CACzD,MAAME,EAAcF,EAAQ,OAAO,YAAA,EAAc,KAAK,EAC9C,QAAA,IAAI,uCAAuCE,CAAW,GAAG,EAG7D,IAAAC,EAAkBF,EAAgB,OAAYJ,GAAA,CAEhD,MAAMO,EAAaP,EAAE,IAAI,YAAY,EAAE,SAASK,CAAW,EAGrDG,EAAaR,EAAE,KAAOA,EAAE,IAAI,YAAY,EAAE,SAASK,CAAW,EAG9DI,EAAkBT,EAAE,WAAaA,EAAE,UAAU,YAAY,EAAE,SAASK,CAAW,EAG/EK,EAAoBV,EAAE,WAAW,YAAY,EAAE,SAASK,CAAW,EAGnEM,EAAcX,EAAE,MAAQA,EAAE,KAAK,YAAY,EAAE,SAASK,CAAW,EACjEO,EAAcZ,EAAE,MAAQA,EAAE,KAAK,YAAY,EAAE,SAASK,CAAW,EAGvE,OAAOE,GAAcC,GAAcC,GAAmBC,GAAqBC,GAAeC,CAAA,CAC3F,EAGK,MAAAC,EAAeP,EAAgB,IAAcQ,GAAA,CACjD,IAAIC,EAAQ,EAGZ,OAAID,EAAO,IAAI,YAAY,IAAMT,EACtBU,GAAA,IAGFD,EAAO,IAAI,cAAc,WAAWT,CAAW,EAC7CU,GAAA,IAGFD,EAAO,IAAI,cAAc,SAAST,CAAW,IAC3CU,GAAA,KAIPD,EAAO,KAAOA,EAAO,IAAI,cAAc,SAAST,CAAW,IACpDU,GAAA,KAEPD,EAAO,WAAaA,EAAO,UAAU,cAAc,SAAST,CAAW,IAChEU,GAAA,KAIPD,EAAO,MAAQA,EAAO,KAAK,cAAc,SAAST,CAAW,IACtDU,GAAA,KAEPD,EAAO,MAAQA,EAAO,KAAK,cAAc,SAAST,CAAW,IACtDU,GAAA,KAEPD,EAAO,YAAcA,EAAO,WAAW,cAAc,SAAST,CAAW,IAClEU,GAAA,IAGJ,CAAE,OAAAD,EAAQ,MAAAC,CAAM,CAAA,CACxB,EAGYF,EAAA,KAAK,CAACb,EAAGgB,IAEhBhB,EAAE,QAAUgB,EAAE,MACTA,EAAE,MAAQhB,EAAE,MAId,IAAI,KAAKgB,EAAE,OAAO,UAAU,EAAE,UAAY,IAAI,KAAKhB,EAAE,OAAO,UAAU,EAAE,QAAQ,CACxF,EAGDM,EAAkBO,EAAa,IAAYI,GAAAA,EAAK,MAAM,EAGtD,QAAQ,IAAI,qCAAsCJ,EAAa,IAAYI,GAAA,GAAGA,EAAK,OAAO,GAAG,KAAKA,EAAK,KAAK,GAAG,CAAC,EAIhH,MAAMC,EAA0B,CAAC,EAC3BC,MAAoB,IAE1Bb,EAAgB,QAAkBQ,GAAA,CAG1B,MAAAM,EAAWN,EAAO,IAAMA,EAAO,IAAI,MAAM,GAAG,EAAE,CAAC,EAAI,GACnDO,EAAY,GAAGP,EAAO,IAAI,YAAa,CAAA,IAAIM,CAAQ,GAAG,KAAK,EAG5DD,EAAc,IAAIE,CAAS,IAC9BF,EAAc,IAAIE,CAAS,EAC3BH,EAAc,KAAKJ,CAAM,EAC3B,CACD,EAEiBV,EAAAc,EAClB,QAAQ,IAAI,kBAAkBd,EAAgB,MAAM,gDAAgD,CAAA,CAG/F,OAAAA,CACT,EA2BMkB,EAAgB,CAEpB,MAAM,WAAWnB,EAAyB,GAAwC,CAC5E,GAAA,CAEI,MAAAoB,EAAS,IAAI,gBACbC,EAAOrB,EAAQ,MAAQ,EACvBsB,EAAQtB,EAAQ,OAAS,GAIzBuB,GAAUF,EAAO,GAAKC,EAG5BF,EAAO,OAAO,SAAUG,EAAO,SAAA,CAAU,EACzCH,EAAO,OAAO,QAASE,EAAM,SAAA,CAAU,EAGnCtB,EAAQ,YAAYoB,EAAO,OAAO,aAAcpB,EAAQ,UAAU,EAClEA,EAAQ,QAAQoB,EAAO,OAAO,SAAUpB,EAAQ,MAAM,EACtDA,EAAQ,QAAQoB,EAAO,OAAO,SAAUpB,EAAQ,MAAM,EACtDA,EAAQ,SAASoB,EAAO,OAAO,UAAWpB,EAAQ,OAAO,EACzDA,EAAQ,QAAQoB,EAAO,OAAO,SAAUpB,EAAQ,MAAM,EAGtDA,EAAQ,SACHoB,EAAA,OAAO,SAAUpB,EAAQ,MAAM,EACtC,QAAQ,IAAI,yCAAyCA,EAAQ,MAAM,GAAG,GAGxE,QAAQ,IAAI,sCAAuC,OAAO,YAAYoB,EAAO,QAAA,CAAS,CAAC,EAIjF,MAAAI,EAAe,MAAMC,EAAW,IAAI,YAAYL,EAAO,SAAU,CAAA,EAAE,EACjE,QAAA,IAAI,sCAAuCI,CAAY,EAG3D,IAAAE,EAGJ,GAAIF,GAAgBA,EAAa,SAAW,WAAaA,EAAa,KAAM,CAC1E,QAAQ,IAAI,6EAA6E,EAEnF,KAAA,CAAE,MAAAG,EAAO,OAAAJ,EAAQ,MAAAD,EAAO,MAAAM,GAAUJ,EAAa,KAEjCE,EAAA,CAClB,MAAOE,GAAS,CAAC,EACjB,MAAOD,GAAS,EAChB,KAAM,KAAK,MAAMJ,EAASD,CAAK,EAAI,EACnC,MAAOA,GAAS,GAChB,MAAO,KAAK,MAAMK,GAAS,IAAML,GAAS,GAAG,CAC/C,CAAA,MAGA,QAAQ,IAAI,qCAAqC,EAC7BI,EAAAF,EAGd,eAAA,IAAI,mCAAoCE,CAAiB,EAG7D1B,EAAQ,QACD,SAAA,cAAc,IAAI,YAAY,mBAAoB,CACzD,OAAQ,CACN,KAAMA,EAAQ,OACd,MAAO0B,EAAkB,MAAM,OAC/B,MAAOA,EAAkB,MACzB,SAAU,EAAA,CACZ,CACD,CAAC,EAGGA,QACAG,EAAY,CACX,QAAA,MAAM,kCAAmCA,CAAK,EAGtD,IAAIC,EAAgB,GAGhBD,EAAM,OAAS,mBAAsBA,EAAM,SAAWA,EAAM,QAAQ,SAAS,UAAU,EACzEC,EAAA,mDACPD,EAAM,OAAS,gBACRC,EAAA,gCAGAA,EAAA,uBAGV,QAAA,KAAK,oCAAoCA,CAAa,EAAE,EAG1D,MAAA7B,EAAkBF,EAAmBC,CAAO,EAG5CqB,EAAOrB,EAAQ,MAAQ,EACvBsB,EAAQtB,EAAQ,OAAS,GACzB+B,GAAcV,EAAO,GAAKC,EAC1BU,EAAWD,EAAaT,EACxBW,EAAmBhC,EAAgB,MAAM8B,EAAYC,CAAQ,EAGnE,OAAIhC,EAAQ,QACD,SAAA,cAAc,IAAI,YAAY,mBAAoB,CACzD,OAAQ,CACN,KAAMA,EAAQ,OACd,MAAOiC,EAAiB,OACxB,MAAOhC,EAAgB,OACvB,SAAU,GACV,OAAQ6B,CAAA,CACV,CACD,CAAC,EAIG,CACL,MAAOG,EACP,MAAOhC,EAAgB,OACvB,KAAAoB,EACA,MAAAC,EACA,MAAO,KAAK,KAAKrB,EAAgB,OAASqB,CAAK,CACjD,CAAA,CAEJ,EAGA,MAAM,cAAcY,EAA6B,CAC3C,GAAA,CACM,QAAA,IAAI,oCAAoCA,CAAE,EAAE,EAEpD,MAAMV,EAAe,MAAMC,EAAW,IAAI,YAAYS,CAAE,EAAE,EAClD,QAAA,IAAI,kBAAmBV,CAAY,EAEvC,IAAAW,EAGJ,GAAIX,GAAgBA,EAAa,SAAW,WAAaA,EAAa,KACpEW,EAAaX,EAAa,aAGnBA,GAAgBA,EAAa,GACvBW,EAAAX,MAGP,OAAA,IAAI,MAAM,+BAA+B,EAIjD,OAAIW,IAEGA,EAAW,OAEJ,MAAM,QAAQA,EAAW,MAAM,IAErCA,EAAW,OAAO,OAAS,MAAM,QAAQA,EAAW,OAAO,KAAK,EACvDA,EAAA,OAASA,EAAW,OAAO,MAGtCA,EAAW,OAAS,CAAC,GAPvBA,EAAW,OAAS,CAAC,EAYnB,CAACA,EAAW,QAAUA,EAAW,QACxBA,EAAA,OAASA,EAAW,QAI5BA,QACAN,EAAY,CAInB,GAHA,QAAQ,MAAM,kCAAkCK,CAAE,IAAKL,CAAK,EAGxDA,EAAM,OAAS,mBAAqBA,EAAM,OAAS,iBAClDA,EAAM,UAAYA,EAAM,QAAQ,SAAS,UAAU,GAAKA,EAAM,QAAQ,SAAS,UAAU,GAAK,CACjG,QAAQ,KAAK,qDAAqD,EAGlE,MAAMlB,EAASjB,EAAY,KAAUG,GAAAA,EAAE,KAAOqC,CAAE,EAChD,GAAIvB,EACK,OAAAA,EAGT,MAAM,IAAI,MAAM,iBAAiBuB,CAAE,uCAAuC,CAAA,CAItE,MAAAL,CAAA,CAEV,EAGA,MAAM,aAAaM,EAA8C,CAC3D,GAAA,CACM,QAAA,IAAI,wBAAyBA,CAAU,EAE/C,MAAMX,EAAe,MAAMC,EAAW,KAAK,YAAaU,CAAU,EAC1D,eAAA,IAAI,iBAAkBX,CAAY,EACnCA,QACAK,EAAY,CAInB,GAHQ,QAAA,MAAM,yBAA0BA,CAAK,EAGzCA,EAAM,OAAS,mBAAqBA,EAAM,OAAS,iBAClDA,EAAM,UAAYA,EAAM,QAAQ,SAAS,UAAU,GAAKA,EAAM,QAAQ,SAAS,UAAU,GAAK,CACjG,QAAQ,KAAK,uEAAuE,EAG9E,MAAAO,EAAQ,KAAK,IAAI,GAAG1C,EAAY,IAASG,GAAAA,EAAE,EAAE,CAAC,EAAI,EAClDwC,EAAM,IAAI,KAAK,EAAE,YAAY,EAE5B,MAAA,CACL,GAAID,EACJ,GAAGD,EACH,WAAYE,EACZ,WAAYA,CACd,CAAA,CAII,MAAAR,CAAA,CAEV,EAGA,MAAM,aAAaK,EAAYC,EAAkC,CAC3D,GAAA,CACF,QAAQ,IAAI,sCAAsCD,CAAE,IAAKC,CAAU,EAInE,MAAMG,EAAyC,CAAC,EAG1CC,EAAiB,CAAC,OAAQ,OAAQ,SAAU,MAAO,YAAa,KAAK,EAG3E,UAAWC,KAASL,EAElB,GAAI,OAAO,UAAU,eAAe,KAAKA,EAAYK,CAAK,EAExD,GAAID,EAAe,SAASC,CAAK,GAAKL,EAAWK,CAAK,IAAM,GAC1DF,EAAkBE,CAAK,EAAI,aAClBA,IAAU,WAAaL,EAAWK,CAAK,IAAM,OAEtDF,EAAkBE,CAAK,EAAI,OAAOL,EAAWK,CAAK,CAAC,UAC1CA,IAAU,OAASL,EAAWK,CAAK,EAExC,GAAA,CACE,IAAAC,EAGA,GAAA,OAAON,EAAWK,CAAK,GAAM,UAAY,wBAAwB,KAAKL,EAAWK,CAAK,CAAC,EACzFC,EAAaN,EAAWK,CAAK,UAGtB,OAAOL,EAAWK,CAAK,GAAM,UAAY,sBAAsB,KAAKL,EAAWK,CAAK,CAAC,EAAG,CACzF,KAAA,CAACE,EAAMC,EAAOC,CAAG,EAAIT,EAAWK,CAAK,EAAE,MAAM,GAAG,EACtDC,EAAa,GAAGG,CAAG,IAAID,CAAK,IAAID,CAAI,EAAA,KAGjC,CACH,MAAMG,EAAQ,IAAI,KAAKV,EAAWK,CAAK,CAAC,EACxC,GAAK,MAAMK,EAAM,QAAS,CAAA,EAOxBJ,EAAaN,EAAWK,CAAK,MAPF,CACrB,MAAAI,EAAMC,EAAM,QAAQ,EAAE,WAAW,SAAS,EAAG,GAAG,EAChDF,GAASE,EAAM,SAAS,EAAI,GAAG,WAAW,SAAS,EAAG,GAAG,EACzDH,EAAOG,EAAM,YAAY,EAC/BJ,EAAa,GAAGG,CAAG,IAAID,CAAK,IAAID,CAAI,EAAA,CAItC,CAGF,QAAQ,IAAI,qBAAqBP,EAAWK,CAAK,CAAC,OAAOC,CAAU,EAAE,EACrEH,EAAkBE,CAAK,EAAIC,QACpBK,EAAK,CACJ,QAAA,MAAM,4BAA6BA,CAAG,EAE5BR,EAAAE,CAAK,EAAIL,EAAWK,CAAK,CAAA,MAI3BF,EAAAE,CAAK,EAAIL,EAAWK,CAAK,EAM3C,MAAAO,EAAoB,OAAO,KAAKT,CAAiB,EACnD,GAAAS,EAAkB,SAAW,EACzB,MAAA,IAAI,MAAM,0CAA0C,EAG5D,QAAQ,IAAI,gCAAgCA,EAAkB,KAAK,IAAI,CAAC,EAAE,EAClE,QAAA,IAAI,yBAA0BT,CAAiB,EAM/C,QAAA,IAAI,wCAAwCJ,CAAE,EAAE,EACxD,QAAQ,IAAI,sBAAuB,KAAK,UAAUI,EAAmB,KAAM,CAAC,CAAC,EAG7E,QAAQ,IAAI,oBAAoB,EAChC,MAAMd,EAAe,MAAMC,EAAW,MAAM,YAAYS,CAAE,GAAII,CAAiB,EAC/E,eAAQ,IAAI,4BAA4B,EAGjCd,EAAa,MAAQA,QAErBK,EAAY,CACnB,cAAQ,MAAM,6CAA6CK,CAAE,IAAKL,CAAK,EACjEA,CAAA,CAEV,EAGA,MAAM,aAAaK,EAA6B,CAC1C,GAAA,CACM,QAAA,IAAI,qCAAqCA,CAAE,EAAE,EAIrD,MAAMc,EAAW,MAAMvB,EAAW,OAAO,mBAAmBS,CAAE,EAAE,EAChE,eAAQ,IAAI,uCAAuCA,CAAE,IAAKc,CAAQ,EAE3DA,QACAnB,EAAY,CAInB,GAHA,QAAQ,MAAM,mCAAmCK,CAAE,IAAKL,CAAK,EAGzDA,EAAM,OAAS,mBAAqBA,EAAM,OAAS,iBAClDA,EAAM,UAAYA,EAAM,QAAQ,SAAS,UAAU,GAAKA,EAAM,QAAQ,SAAS,UAAU,GAC5F,eAAQ,KAAK,0EAA0E,EAGhF,KAAK,aAAaK,EAAI,CAAE,OAAQ,MAAO,EAI1C,MAAAL,CAAA,CAEV,EAGA,MAAM,oBAAoBoB,EAAmD,CACvE,GAAA,CACF,QAAQ,IAAI,6BAA6BA,EAAe,qBAAqBA,CAAY,GAAK,EAAE,EAAE,EAGlG,MAAMjD,EAAyB,CAC7B,OAAQ,IACR,OAAQ,IACV,EAGIiD,GAAgBA,IAAiB,cAC3BjD,EAAA,WAAa,OAAOiD,CAAY,GAI1C,MAAMD,EAAW,MAAM,KAAK,WAAWhD,CAAO,EAGxCkD,EAAU,MAAM,QAAQF,CAAQ,EAAIA,EAAYA,EAAS,OAAS,CAAC,EACjE,eAAA,IAAI,6BAA8BE,CAAO,EAC1CA,QACArB,EAAY,CACX,eAAA,MAAM,mCAAmCoB,EAAe,qBAAqBA,CAAY,GAAK,EAAE,IAAKpB,CAAK,EAGlH,QAAQ,KAAK,0EAA0E,EAG/DnC,EAAY,UAClCG,EAAE,SAAW,KACbA,EAAE,SAAW,OACZ,CAACoD,GAAgBA,IAAiB,aAAepD,EAAE,aAAe,OAAOoD,CAAY,EAAE,CAEnF,CAEX,EAGA,MAAM,oBAAoBA,EAAmD,CACvE,GAAA,CACF,QAAQ,IAAI,6BAA6BA,EAAe,qBAAqBA,CAAY,GAAK,EAAE,EAAE,EAGlG,MAAMjD,EAAyB,CAC7B,OAAQ,IACR,OAAQ,IACV,EAGIiD,GAAgBA,IAAiB,cAC3BjD,EAAA,WAAa,OAAOiD,CAAY,GAI1C,MAAMD,EAAW,MAAM,KAAK,WAAWhD,CAAO,EAGxCmD,EAAU,MAAM,QAAQH,CAAQ,EAAIA,EAAYA,EAAS,OAAS,CAAC,EACjE,eAAA,IAAI,6BAA8BG,CAAO,EAC1CA,QACAtB,EAAY,CACX,eAAA,MAAM,mCAAmCoB,EAAe,qBAAqBA,CAAY,GAAK,EAAE,IAAKpB,CAAK,EAGlH,QAAQ,KAAK,0EAA0E,EAG/DnC,EAAY,UAClCG,EAAE,SAAW,KACbA,EAAE,SAAW,OACZ,CAACoD,GAAgBA,IAAiB,aAAepD,EAAE,aAAe,OAAOoD,CAAY,EAAE,CAEnF,CAEX,EAGA,MAAM,wBAAwBG,EAAmD,CAC3E,GAAA,CAEE,GAAA,CACM,QAAA,IAAI,qDAAqDA,CAAa,EAAE,EAGhF,MAAMC,EAAY,CAChB,uBAAuB,mBAAmBD,CAAa,CAAC,YAC1D,EAEA,IAAIJ,EAAW,KACXM,EAAkB,GAGtB,UAAWC,KAAYF,EACjB,GAAA,CACM,QAAA,IAAI,oCAAoCE,CAAQ,EAAE,EAC/CP,EAAA,MAAMvB,EAAW,IAAI8B,CAAQ,EACtBD,EAAAC,EAClB,QAAQ,IAAI,qCAAqCA,CAAQ,IAAKP,CAAQ,EACtE,YACOQ,EAAe,CACtB,QAAQ,KAAK,kCAAkCD,CAAQ,IAAKC,CAAa,CAAA,CAK7E,GAAI,CAACR,EACG,MAAA,IAAI,MAAM,8BAA8B,EAM5C,OAHI,QAAA,IAAI,iCAAiCM,CAAe,EAAE,EAG1D,MAAM,QAAQN,CAAQ,GACxB,QAAQ,IAAI,oCAAoCA,EAAS,MAAM,WAAW,EACnEA,GAILA,GAAY,OAAOA,GAAa,UAAY,UAAWA,GACzD,QAAQ,IAAI,2BAA2BA,EAAS,MAAM,MAAM,oCAAoC,EACzFA,EAAS,OAIdA,GAAY,OAAOA,GAAa,UAAY,SAAUA,GACpD,MAAM,QAAQA,EAAS,IAAI,GAC7B,QAAQ,IAAI,2BAA2BA,EAAS,KAAK,MAAM,+BAA+B,EACnFA,EAAS,OAKZ,QAAA,KAAK,mDAAoDA,CAAQ,EAClE,CAAC,SACDS,EAAY,CACnB,cAAQ,MAAM,0DAA0DL,CAAa,IAAKK,CAAU,EAC9FA,CAAA,QAED5B,EAAY,CACnB,QAAQ,MAAM,sEAAsEuB,CAAa,IAAKvB,CAAK,EAGnG,QAAA,KAAK,mEAAmEuB,CAAa,EAAE,EAGzF,MAAAM,EAAsBhE,EAAY,OAAOG,GAAKA,EAAE,aAAe,OAAOuD,CAAa,CAAC,EAC1F,eAAQ,IAAI,2BAA2BM,EAAoB,MAAM,wCAAwCN,CAAa,EAAE,EACjHM,CAAA,CAEX,EAGA,cAAc/C,EAAwB,CAChC,OAAAA,EAAO,SAAW,IACb,KAEHA,EAAO,UAAY,IACd,KAEA,IAGb,EAEA,qBAAqBgD,EAAwB,CAC3C,OAAIA,IAAW,KACN,oEACEA,IAAW,MACb,4DAEF,+DACT,EAGA,eAAeC,EAAyB,CAClC,OAAAA,IAAY,IAAY,iBACxBA,IAAY,IAAY,wBACxBA,IAAY,IAAY,yBACrB,aACT,EAGA,MAAM,iBAA+D,CAC/D,GAAA,CACF,QAAQ,IAAI,mCAAmC,EAG3C,GAAA,CAEF,MAAMpC,EAAe,MAAMC,EAAW,IAAI,yBAAyB,EAG/D,GAAAD,GAAgBA,EAAa,SAAW,WAAaA,EAAa,MAAQ,MAAM,QAAQA,EAAa,KAAK,KAAK,EAEjH,OADcA,EAAa,KAAK,MACnB,IAAI,CAACV,EAAW+C,KAAmB,CAC9C,GAAIA,EAAQ,EACZ,WAAY/C,EAAK,YAAc,EAAA,EAC/B,QAEGgD,EAAiB,CAChB,QAAA,KAAK,yEAA0EA,CAAe,CAAA,CAKlG,MAAAd,EAAW,MAAM,KAAK,WAAW,CAAE,KAAM,EAAG,MAAO,IAAK,EAGxDe,MAAyB,IAW3B,OATAf,GAAYA,EAAS,OACdA,EAAA,MAAM,QAASrC,GAAmB,CACrCA,EAAO,YACUoD,EAAA,IAAIpD,EAAO,UAAU,CAC1C,CACD,EAICoD,EAAmB,OAAS,EACvB,CACL,CAAE,GAAI,EAAG,WAAY,QAAS,EAC9B,CAAE,GAAI,EAAG,WAAY,WAAY,EACjC,CAAE,GAAI,EAAG,WAAY,UAAW,EAChC,CAAE,GAAI,EAAG,WAAY,aAAc,CACrC,EAIK,MAAM,KAAKA,CAAkB,EAAE,IAAI,CAACC,EAAYH,KAAW,CAChE,GAAIA,EAAQ,EACZ,WAAAG,CAAA,EACA,QACKnC,EAAY,CACX,eAAA,MAAM,kCAAmCA,CAAK,EACtD,QAAQ,IAAI,wBAAwB,EAC7BlC,CAAA,CACT,CAEJ"}