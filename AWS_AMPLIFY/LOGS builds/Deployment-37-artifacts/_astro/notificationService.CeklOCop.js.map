{"version":3,"file":"notificationService.CeklOCop.js","sources":["../../../src/config/features.ts","../../../src/services/notificationService.ts"],"sourcesContent":["/**\n * Configuración de features\n * Este archivo centraliza la activación/desactivación de funcionalidades\n */\n\nexport const FEATURES = {\n  // Características generales\n  ENABLE_NOTIFICATIONS: false, // Desactivado temporalmente por petición del usuario\n  ENABLE_LANGUAGE_SWITCHER: true,\n  \n  // Características por sección\n  DASHBOARD: {\n    ENABLE_CHARTS: true,\n    ENABLE_STATS: true\n  },\n  \n  // Configuraciones de entorno\n  IS_DEVELOPMENT: process.env.NODE_ENV === 'development',\n  IS_PRODUCTION: process.env.NODE_ENV === 'production'\n};\n\nexport default FEATURES;\n","import axios from 'axios';\nimport { FEATURES } from '../config/features';\n\n/**\n * Interfaces para las notificaciones\n */\nexport interface Notification {\n  id: number;\n  type: string;\n  priority: string;\n  title: string;\n  message: string;\n  icon?: string;\n  created_at: string;\n  relative_time?: string;\n  read: boolean;\n  related_entity_id?: number | null;\n  related_entity_type?: string | null;\n  user_id?: number;\n}\n\nexport interface NotificationResponse {\n  items: Notification[];\n  total: number;\n  unread_count: number;\n  has_more?: boolean;\n}\n\nexport interface NotificationSettings {\n  enabled: boolean;\n  emailEnabled: boolean;\n  pushEnabled: boolean;\n  dailySummary: boolean;\n  weeklySummary: boolean;\n  types: {\n    [key: string]: boolean;\n  };\n}\n\n/**\n * Servicio para gestionar notificaciones\n */\nclass NotificationService {\n  // Flag para habilitar notificaciones solo cuando se ponga en producción\n  private isEnabled = FEATURES.ENABLE_NOTIFICATIONS;\n  // Método de compatibilidad para código compilado\n  t(): boolean {  \n    if (!this.isEnabled) return false;\n    console.warn('DEPRECATED: llamada a método t() en notificationService');\n    return false;\n  }\n  private baseUrl = 'http://localhost:8000/api/v1/notifications';\n  private pollingInterval: number | null = null;\n  \n  /**\n   * Obtiene todas las notificaciones del usuario\n   */\n  async getNotifications(unreadOnly = false, limit = 10, skip = 0): Promise<NotificationResponse> {\n    if (!this.isEnabled) {\n      return { items: [], total: 0, unread_count: 0, has_more: false };\n    }\n    try {\n      const params = new URLSearchParams();\n      params.append('unread_only', unreadOnly.toString());\n      params.append('limit', limit.toString());\n      params.append('skip', skip.toString());\n      \n      // Usar axios directamente con cabeceras de autenticación\n      const token = localStorage.getItem('token');\n      const headers: Record<string, string> = {};\n      \n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n      \n      const response = await axios.get(`${this.baseUrl}?${params.toString()}`, { headers });\n      return {\n        items: response.data.items || [],\n        total: response.data.total || 0,\n        unread_count: response.data.unread_count || 0,\n        has_more: response.data.has_more || false\n      };\n    } catch (error) {\n      console.error('Error al obtener notificaciones:', error);\n      // Devolvemos un objeto vacío para cualquier tipo de error\n      return { items: [], total: 0, unread_count: 0, has_more: false };\n    }\n  }\n  \n  /**\n   * Marca una notificación como leída\n   */\n  async markAsRead(notificationId: number): Promise<boolean> {\n    if (!this.isEnabled) return true;\n    try {\n      const token = localStorage.getItem('token');\n      const headers: Record<string, string> = {};\n      \n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n      \n      await axios.post(`${this.baseUrl}/mark-read/${notificationId}`, {}, { headers });\n      return true;\n    } catch (error) {\n      console.error(`Error al marcar notificación ${notificationId} como leída:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Marca todas las notificaciones como leídas\n   */\n  async markAllAsRead(): Promise<boolean> {\n    if (!this.isEnabled) return true;\n    try {\n      const token = localStorage.getItem('token');\n      const headers: Record<string, string> = {};\n      \n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n      \n      await axios.post(`${this.baseUrl}/mark-all-read`, {}, { headers });\n      return true;\n    } catch (error) {\n      console.error('Error al marcar todas las notificaciones como leídas:', error);\n      return false;\n    }\n  }\n  \n  /**\n   * Elimina una notificación\n   */\n  async deleteNotification(notificationId: number): Promise<boolean> {\n    if (!this.isEnabled) return true;\n    try {\n      const token = localStorage.getItem('token');\n      const headers: Record<string, string> = {};\n      \n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n      \n      await axios.delete(`${this.baseUrl}/${notificationId}`, { headers });\n      return true;\n    } catch (error) {\n      console.error(`Error al eliminar notificación ${notificationId}:`, error);\n      return false;\n    }\n  }\n  \n  /**\n   * Elimina todas las notificaciones\n   */\n  async deleteAllNotifications(): Promise<boolean> {\n    if (!this.isEnabled) return true;\n    try {\n      const token = localStorage.getItem('token');\n      const headers: Record<string, string> = {};\n      \n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n      \n      await axios.delete(this.baseUrl, { headers });\n      return true;\n    } catch (error) {\n      console.error('Error al eliminar todas las notificaciones:', error);\n      return false;\n    }\n  }\n  \n  /**\n   * Configura el polling para obtener notificaciones periódicamente\n   */\n  startPolling(callback: (notifications: Notification[]) => void, interval = 30000): number {\n    // Si el servicio está deshabilitado, no iniciar polling\n    if (!this.isEnabled) {\n      console.info('Servicio de notificaciones deshabilitado: No se inicia polling');\n      return 0;\n    }\n    // Hacemos una primera llamada inmediatamente\n    this.getNotifications().then(response => {\n      callback(response.items);\n    }).catch(error => {\n      console.error('Error al obtener notificaciones:', error);\n    });\n    \n    // Configuramos el intervalo\n    const intervalId = window.setInterval(() => {\n      this.getNotifications().then(response => {\n        callback(response.items);\n      }).catch(error => {\n        console.error('Error al obtener notificaciones:', error);\n      });\n    }, interval);\n    \n    this.pollingInterval = intervalId;\n    return intervalId;\n  }\n  \n  /**\n   * Detiene el polling de notificaciones\n   */\n  stopPolling(): void {\n    if (!this.isEnabled) return;\n    if (this.pollingInterval !== null) {\n      window.clearInterval(this.pollingInterval);\n      this.pollingInterval = null;\n    }\n  }\n  \n  /**\n   * Crea una notificación de prueba (solo para desarrollo)\n   */\n  async createTestNotification(): Promise<boolean> {\n    if (!this.isEnabled) return true;\n    try {\n      const token = localStorage.getItem('token');\n      const headers: Record<string, string> = {};\n      \n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n      \n      await axios.post(`${this.baseUrl}/test`, {}, { headers });\n      return true;\n    } catch (error) {\n      console.error('Error al crear notificación de prueba:', error);\n      return false;\n    }\n  }\n}\n\n// Exportamos una única instancia del servicio\nconst notificationService = new NotificationService();\n\n// El método t() ya está definido en la clase NotificationService\n\n// Exportar como default (para import notificationService from './notificationService')\nexport default notificationService;\n\n// Exportar también con nombre (para import { notificationService } from './notificationService')\nexport { notificationService };\n\n// Exportar con alias 'n' para compatibilidad con código compilado que usa import { n }\nexport const n = notificationService;\n"],"names":["FEATURES","NotificationService","unreadOnly","limit","skip","params","token","headers","response","axios","error","notificationId","callback","interval","intervalId","notificationService"],"mappings":"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"}