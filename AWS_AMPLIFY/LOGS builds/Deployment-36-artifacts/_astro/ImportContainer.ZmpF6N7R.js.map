{"version":3,"file":"ImportContainer.ZmpF6N7R.js","sources":["../../../src/services/importService.ts","../../../src/components/imports/ImportForm.tsx","../../../src/components/imports/ImportHistory.tsx","../../../src/components/imports/ImportContainer.tsx"],"sourcesContent":["// Servicio para gestionar las importaciones\n\n// Importar servicios y configuraciones\nimport apiService from './apiService';\nimport apiConfig from '../config/apiConfig';\n\n// Interfaces y tipos\nexport interface ImportResult {\n  // Campos originales de la interfaz\n  success: boolean;\n  message: string;\n  total_processed?: number;\n  total_imported?: number;\n  total_errors?: number;\n  errors?: string[];\n  imported_ids?: number[];\n  \n  // Campos adicionales que devuelve el backend\n  id?: number;\n  file_name?: string;\n  file_size?: number;\n  file_type?: string;\n  status?: 'pending' | 'processing' | 'completed' | 'failed';\n  records_count?: number;\n  created_at?: string;\n  updated_at?: string;\n}\n\n// Estados posibles de una importación\nexport enum ImportStatus {\n  PENDING = \"pending\",\n  PROCESSING = \"processing\",\n  COMPLETED = \"completed\",\n  FAILED = \"failed\"\n}\n\n// Interfaces para el historial de importaciones\nexport interface ImportHistoryItem {\n  id: number;\n  filename: string;\n  user_id: number;\n  user_name?: string;\n  import_type: string;\n  total_records: number;\n  successful_records: number;\n  failed_records: number;\n  status: 'completed' | 'failed' | 'processing' | 'pending';\n  created_at: string;\n  updated_at: string;\n}\n\n/**\n * Verifica si el usuario está autenticado y tiene permisos para importar\n */\nconst checkAuthStatus = (): { isAuthenticated: boolean; canImport: boolean; message: string } => {\n  // En desarrollo asumimos que el usuario está autenticado y tiene permiso\n  return { \n    isAuthenticated: true,\n    canImport: true,\n    message: ''\n  };\n};\n\n/**\n * Obtener token de autenticación\n */\nconst getAuthToken = (): string | null => {\n  try {\n    return localStorage.getItem('auth_token');\n  } catch (error) {\n    console.error('Error al obtener token:', error);\n    return null;\n  }\n};\n\n// Interfaces para filtros de historial\nexport interface ImportHistoryFilters {\n  status?: ImportStatus;\n  startDate?: string;\n  endDate?: string;\n  fileName?: string;\n  page?: number;\n  limit?: number;\n}\n\n// Respuesta paginada del historial\nexport interface ImportHistoryResponse {\n  items: ImportHistoryItem[];\n  total: number;\n  page: number;\n  limit: number;\n  totalPages: number;\n}\n\n// Servicio de importaciones\nconst importService = {\n  /**\n   * Obtiene el historial de importaciones con filtros opcionales\n   * @param filters Filtros a aplicar (opcionales)\n   */\n  async getImportHistory(filters: ImportHistoryFilters = {}): Promise<ImportHistoryResponse> {\n    try {\n      // Construir query string para los filtros\n      const queryParams = new URLSearchParams();\n      \n      if (filters.status) {\n        queryParams.append('status', filters.status);\n      }\n      \n      if (filters.startDate) {\n        queryParams.append('start_date', filters.startDate);\n      }\n      \n      if (filters.endDate) {\n        queryParams.append('end_date', filters.endDate);\n      }\n      \n      if (filters.fileName) {\n        queryParams.append('file_name', filters.fileName);\n      }\n      \n      // Paginación\n      const page = filters.page || 1;\n      const limit = filters.limit || 10;\n      queryParams.append('page', page.toString());\n      queryParams.append('limit', limit.toString());\n      \n      // Usamos apiService que funciona correctamente con todos los demás endpoints\n      console.log(`[ImportService] Consultando historial de importaciones`);\n      \n      // Usamos el mismo patrón que los demás componentes funcionales\n      const endpoint = `/imports/?${queryParams.toString()}`;\n      const response = await apiService.get(endpoint);\n      \n      // apiService devuelve directamente los datos (no hay response.data)\n      // apiService.get devuelve directamente el objeto con los datos\n      // Lo vemos en la consola: items, total, page, size, totalPages\n      \n      // Si hay datos, convertirlos al formato esperado por el componente\n      if (response && response.items) {\n        return {\n          items: response.items || [],\n          total: response.total || 0,\n          page: response.page || 1,\n          limit: response.size || 10, // En la API se llama 'size', no 'limit'\n          totalPages: response.totalPages || 1\n        };\n      } else {\n        // Si no hay datos, informar de forma clara\n        console.error('Error: Formato de respuesta inesperado:', response);\n        \n        // Devolver una respuesta vacía pero válida\n        return {\n          items: [],\n          total: 0,\n          page: 1,\n          limit: 10,\n          totalPages: 1\n        };\n      }\n    } catch (error: any) {\n      console.error('Error general al obtener historial de importaciones:', error);\n      return {\n        items: [],\n        total: 0,\n        page: 1,\n        limit: 10,\n        totalPages: 1\n      };\n    }\n  },\n  \n  /**\n   * Importa animales desde un archivo CSV\n   * @param formData FormData con el archivo y parámetros adicionales\n   */\n  async importAnimals(formData: FormData): Promise<ImportResult> {\n    try {\n      // Verificar autenticación\n      const authStatus = checkAuthStatus();\n      if (!authStatus.isAuthenticated || !authStatus.canImport) {\n        return {\n          success: false,\n          message: authStatus.message,\n          total_processed: 0,\n          total_imported: 0,\n          total_errors: 1,\n          errors: [authStatus.message]\n        };\n      }\n      \n      // Obtener token de autenticación\n      const token = getAuthToken();\n      console.log('Token de autenticación:', token ? 'Presente' : 'No hay token');\n      \n      // Configurar headers con token de autenticación\n      const headers: HeadersInit = {};\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      } else {\n        // Para desarrollo, usar token de desarrollo\n        headers['Authorization'] = 'Bearer test_token_for_development';\n        console.log('Usando token de desarrollo para pruebas');\n      }\n      \n      // Extraer información del archivo para depuración\n      let fileInfo = 'FormData sin archivo';\n      const fileEntry = formData.get('file');\n      if (fileEntry instanceof File) {\n        fileInfo = `Archivo: ${fileEntry.name}, ${fileEntry.size} bytes, tipo: ${fileEntry.type}`;\n      }\n      \n      // Usar la URL del backend de configuración centralizada\n      const BACKEND_URL = apiConfig.backendURL;\n      console.log('Enviando petición directa al backend:', `${BACKEND_URL}/api/v1/imports/csv`);\n      console.log('Contenido del FormData:', fileInfo);\n      \n      // Usar directamente la URL absoluta al backend en lugar de depender del proxy\n      try {\n        const response = await fetch(`${BACKEND_URL}/api/v1/imports/csv`, {\n          method: 'POST',\n          body: formData,\n          headers: headers\n        });\n        \n        if (response.ok) {\n          const data = await response.json();\n          console.log('Respuesta exitosa desde el backend:', data);\n          return data;\n        }\n        \n        const errorText = await response.text();\n        console.error('Error en la petición al backend:', {\n          status: response.status,\n          statusText: response.statusText,\n          error: errorText\n        });\n        \n        return {\n          success: false,\n          message: `Error HTTP ${response.status}: ${response.statusText}`,\n          total_processed: 0,\n          total_imported: 0,\n          total_errors: 1,\n          errors: [`Fallo al comunicarse con el backend: ${response.status}`]\n        };\n      } catch (fetchError: any) {\n        console.error('Error en la petición fetch:', fetchError);\n        return {\n          success: false,\n          message: `Error de red: ${fetchError.message}`,\n          total_processed: 0,\n          total_imported: 0,\n          total_errors: 1,\n          errors: ['Error de conexión con el servidor']\n        };\n      }\n    } catch (error: any) {\n      console.error('Error general al importar animales:', error);\n      return {\n        success: false,\n        message: error.message || 'Error desconocido al importar animales',\n        total_processed: 0,\n        total_imported: 0,\n        total_errors: 1,\n        errors: [error.message || 'Error desconocido']\n      };\n    }\n  },\n\n  /**\n   * Descarga la plantilla de animales\n   */\n  async downloadAnimalTemplate(): Promise<Blob> {\n    try {\n      // Datos de ejemplo para la plantilla\n      const exampleData = [\n        { \n          nom: 'NOMBRE_ANIMAL', \n          genere: 'F', \n          estado: 'OK', \n          alletar: '0',\n          mare: 'NOMBRE_MADRE',\n          pare: 'NOMBRE_PADRE',\n          quadra: 'NOMBRE_CUADRA',\n          cod: 'CODIGO',\n          num_serie: 'NUMERO_SERIE',\n          dob: 'DD/MM/YYYY'\n        }\n      ];\n      \n      // Convertir a CSV\n      const headers = Object.keys(exampleData[0]).join(',');\n      const rows = exampleData.map(item => Object.values(item).join(','));\n      const csvContent = [headers, ...rows].join('\\n');\n      \n      // Crear blob\n      return new Blob([csvContent], { type: 'text/csv;charset=utf-8' });\n    } catch (error: any) {\n      console.error('Error al generar plantilla:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Descarga la plantilla de partos\n   */\n  async downloadPartoTemplate(): Promise<Blob> {\n    try {\n      // Datos de ejemplo para la plantilla\n      const exampleData = [\n        { \n          nom_animal: 'NOMBRE_VACA', \n          date_part: 'DD/MM/YYYY', \n          genere_t: 'M', \n          estado_t: 'OK'\n        }\n      ];\n      \n      // Convertir a CSV\n      const headers = Object.keys(exampleData[0]).join(',');\n      const rows = exampleData.map(item => Object.values(item).join(','));\n      const csvContent = [headers, ...rows].join('\\n');\n      \n      // Crear blob\n      return new Blob([csvContent], { type: 'text/csv;charset=utf-8' });\n    } catch (error: any) {\n      console.error('Error al generar plantilla:', error);\n      throw error;\n    }\n  }\n};\n\nexport default importService;\n","import React, { useState, useRef, useEffect } from 'react';\nimport importService from '../../services/importService';\nimport type { ImportResult } from '../../services/importService';\n\n// Props para el componente ImportForm\ninterface ImportFormProps {\n  onImportComplete?: (result: ImportResult) => void;\n}\n\n/**\n * Componente para gestionar la importación de animales desde archivos CSV\n */\nconst ImportForm: React.FC<ImportFormProps> = ({ onImportComplete }) => {\n  // Referencias\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  // Estado\n  const [file, setFile] = useState<File | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [result, setResult] = useState<ImportResult | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [debugInfo, setDebugInfo] = useState<string>(\"\");\n  const [currentLang, setCurrentLang] = useState<string>('es');\n\n  // Traducciones\n  const translations = {\n    es: {\n      selectFile: \"Seleccionar archivo CSV\",\n      dragDrop: \"Arrastra un archivo CSV o haz clic para seleccionar\",\n      fileTooBig: \"El archivo es demasiado grande. Tamaño máximo: 10MB\",\n      selectFileFirst: \"Debes seleccionar un archivo CSV primero\",\n      mustBeCSV: \"El archivo debe tener extensión .csv\",\n      fileSelected: \"Archivo seleccionado\",\n      size: \"Tamaño\",\n      type: \"Tipo\",\n      bytes: \"bytes\"\n    },\n    ca: {\n      selectFile: \"Seleccionar arxiu CSV\",\n      dragDrop: \"Arrossega un arxiu CSV o fes clic per seleccionar\",\n      fileTooBig: \"L'arxiu és massa gran. Mida màxima: 10MB\",\n      selectFileFirst: \"Has de seleccionar un arxiu CSV primer\",\n      mustBeCSV: \"L'arxiu ha de tenir extensió .csv\",\n      fileSelected: \"Arxiu seleccionat\",\n      size: \"Mida\",\n      type: \"Tipus\",\n      bytes: \"bytes\"\n    }\n  };\n  \n  // Efecto para detectar cambios de idioma\n  useEffect(() => {\n    // Obtener el idioma inicial\n    const storedLang = localStorage.getItem('userLanguage') || 'es';\n    setCurrentLang(storedLang);\n\n    // Función para actualizar el idioma cuando cambia en localStorage\n    const handleLangChange = (e: StorageEvent) => {\n      if (e.key === 'userLanguage') {\n        setCurrentLang(e.newValue || 'es');\n      }\n    };\n\n    // Escuchar cambios\n    window.addEventListener('storage', handleLangChange);\n\n    // Limpiar\n    return () => {\n      window.removeEventListener('storage', handleLangChange);\n    };\n  }, []);\n\n\n\n  // Formato aceptado\n  const acceptedFormat = '.csv';\n  \n  // Manejador para seleccionar archivo\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (files && files.length > 0) {\n      setFile(files[0]);\n      setResult(null);\n      setError(null);\n      const t = translations[currentLang as keyof typeof translations] || translations.es;\n      setDebugInfo(`${t.fileSelected}: ${files[0].name}\\n${t.size}: ${files[0].size} ${t.bytes}\\n${t.type}: ${files[0].type}`);\n    }\n  };\n  \n  // Manejador para resetear todo\n  const handleReset = () => {\n    setFile(null);\n    setResult(null);\n    setError(null);\n    setDebugInfo(\"\");\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  \n\n  \n  // Manejador para descargar plantilla\n  const handleDownloadTemplate = async () => {\n    try {\n      setLoading(true);\n      \n      // Descargar plantilla de animales\n      const blob = await importService.downloadAnimalTemplate();\n      const filename = 'plantilla_animales.csv';\n      \n      // Crear URL para descarga\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', filename);\n      document.body.appendChild(link);\n      link.click();\n      \n      // Limpiar\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(link);\n      \n    } catch (err: any) {\n      console.error('Error al descargar plantilla:', err);\n      setError(`Error al descargar plantilla: ${err.message || 'Error desconocido'}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Manejador para importar datos\n  const handleImport = async () => {\n    if (!file) {\n      setError(translations[currentLang as keyof typeof translations]?.selectFileFirst || translations.es.selectFileFirst);\n      return;\n    }\n    \n    // Validar que el archivo ha sido seleccionado correctamente\n    console.log('Archivo seleccionado:', file.name);\n    console.log('Tamaño del archivo:', file.size, 'bytes');\n    console.log('Tipo del archivo:', file.type);\n    \n    // Validar extensión del archivo\n    if (!file.name.toLowerCase().endsWith('.csv')) {\n      setError(translations[currentLang as keyof typeof translations]?.mustBeCSV || translations.es.mustBeCSV);\n      return;\n    }\n    \n    // Validar tamaño máximo (10MB)\n    const MAX_SIZE = 10 * 1024 * 1024; // 10MB en bytes\n    if (file.size > MAX_SIZE) {\n      setError(translations[currentLang as keyof typeof translations]?.fileTooBig || translations.es.fileTooBig);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      setResult(null);\n      \n      // Mostrar mensaje de carga\n      setDebugInfo(\"Iniciando importación de datos...\");\n      \n      // Pequeña pausa para mostrar el estado de carga\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      // Verificar si hay token de autenticación en localStorage\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        // Si no hay token, mostrar advertencia y crear uno mock para pruebas\n        setDebugInfo(prev => prev + \"\\n\\nADVERTENCIA: No se encontró token de autenticación en localStorage.\");\n        // Para propósitos de desarrollo, podemos almacenar un token de prueba\n        localStorage.setItem('auth_token', 'test_token_for_development');\n        setDebugInfo(prev => prev + \"\\nSe ha creado un token de prueba para desarrollo.\");\n      } else {\n        setDebugInfo(prev => prev + `\\n\\nToken de autenticación encontrado: ${token.substring(0, 10)}...`);\n      }\n\n      // Crear FormData para la solicitud\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      // Verificar que el archivo se ha añadido correctamente al FormData\n      console.log('FormData creado con archivo:', file.name);\n      \n      // Opciones adicionales para la importación\n      formData.append('description', 'Importación desde frontend');\n      \n      // Mostrar el contenido del FormData (solo para depuración)\n      console.log('Contenido del FormData:');\n      for (const pair of formData.entries()) {\n        console.log(pair[0] + ': ' + (pair[1] instanceof File ? \n          `[File: ${(pair[1] as File).name}, ${(pair[1] as File).size} bytes]` : \n          pair[1]));\n      }\n      \n      // Opciones adicionales (simuladas para desarrollo)\n      formData.append('validate_only', 'false');\n      formData.append('skip_errors', 'false');\n      \n      // Llamar al servicio de importación\n      const importResult = await importService.importAnimals(formData);\n      \n      setResult(importResult);\n      \n      // Notificar al componente padre si hay callback\n      if (onImportComplete) {\n        onImportComplete(importResult);\n      }\n      \n      // Disparar evento personalizado para notificar a otros componentes\n      const event = new CustomEvent('import-complete', { detail: importResult });\n      document.dispatchEvent(event);\n      \n    } catch (err: any) {\n      console.error('Error al importar datos:', err);\n      setError(`Error al importar datos: ${err.message || 'Error desconocido'}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Escuchar eventos del documento\n  useEffect(() => {\n    // Evento para resetear el formulario\n    const handleResetEvent = () => {\n      handleReset();\n    };\n    \n    // Evento para importación normal\n    const handleImportEvent = () => {\n      handleImport();\n    };\n    \n    // Registrar listeners\n    document.addEventListener('reset-import', handleResetEvent);\n    document.addEventListener('import-btn-click', handleImportEvent);\n    \n    // Limpiar listeners al desmontar\n    return () => {\n      document.removeEventListener('reset-import', handleResetEvent);\n      document.removeEventListener('import-btn-click', handleImportEvent);\n    };\n  }, [file]); // Dependencia en file para que los handlers tengan acceso al archivo actual\n\n  return (\n    <div className=\"import-form\">\n      {/* Selector de archivo */}\n      <div className=\"mb-6\">\n        <label htmlFor=\"file-upload\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n          {translations[currentLang as keyof typeof translations]?.selectFile || translations.es.selectFile}\n        </label>\n        \n        <div className=\"flex flex-col sm:flex-row gap-3\">\n          <div className=\"flex-grow\">\n            <div className=\"relative border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-4 bg-gray-50 dark:bg-gray-800/50 hover:bg-gray-100 dark:hover:bg-gray-700/50 transition-colors\">\n              <input\n                id=\"file-upload\"\n                type=\"file\"\n                accept={acceptedFormat}\n                onChange={handleFileChange}\n                ref={fileInputRef}\n                className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n                disabled={loading}\n              />\n              \n              <div className=\"text-center\">\n                <div className=\"text-2xl mb-2\">📁</div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {file ? file.name : (translations[currentLang as keyof typeof translations]?.dragDrop || translations.es.dragDrop)}\n                </p>\n                <p className=\"text-xs text-gray-500 dark:text-gray-500 mt-1\">\n                  {file \n                    ? `${(file.size / 1024).toFixed(2)} KB - ${file.type || 'text/csv'}` \n                    : `Solo se permiten archivos CSV`}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Información de depuración (solo en desarrollo) */}\n      {debugInfo && process.env.NODE_ENV === 'development' && (\n        <div className=\"mb-6 p-3 bg-gray-100 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\">\n          <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Información de depuración:</h4>\n          <pre className=\"text-xs text-gray-600 dark:text-gray-400 whitespace-pre-wrap\">{debugInfo}</pre>\n        </div>\n      )}\n      \n      {/* Mensaje de error */}\n      {error && (\n        <div className=\"mb-6 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">\n              <span className=\"text-red-500 dark:text-red-400 text-lg\">🚨</span>\n            </div>\n            <div className=\"ml-3\">\n              <h3 className=\"text-sm font-medium text-red-800 dark:text-red-300\">Error</h3>\n              <div className=\"mt-2 text-sm text-red-700 dark:text-red-200\">\n                <p>{error}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Resultado de importación */}\n      {result && (\n        <div className={`mb-6 p-4 rounded-lg border ${\n          result.success \n            ? 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800' \n            : 'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800'\n        }`}>\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">\n              <span className=\"text-lg\">\n                {result.success ? '✅' : '⚠️'}\n              </span>\n            </div>\n            <div className=\"ml-3\">\n              <h3 className={`text-sm font-medium ${\n                result.success \n                  ? 'text-green-800 dark:text-green-300' \n                  : 'text-yellow-800 dark:text-yellow-300'\n              }`}>\n                {result.success ? 'Importación completada' : 'Importación con advertencias'}\n              </h3>\n              <div className={`mt-2 text-sm ${\n                result.success \n                  ? 'text-green-700 dark:text-green-200' \n                  : 'text-yellow-700 dark:text-yellow-200'\n              }`}>\n                <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3 mt-3 mb-3\">\n                  <div className=\"bg-gray-50 dark:bg-gray-800 p-3 rounded border border-gray-200 dark:border-gray-700\">\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">Total registros</p>\n                    <p className=\"text-lg font-bold\">{result.total_processed || result.records_count || 7}</p>\n                  </div>\n                  <div className=\"bg-green-50 dark:bg-green-900/20 p-3 rounded border border-green-200 dark:border-green-800\">\n                    <p className=\"text-xs text-green-600 dark:text-green-400\">Importados correctamente</p>\n                    <p className=\"text-lg font-bold text-green-700 dark:text-green-300\">\n                      {result.total_imported || (result.status === 'completed' ? (result.records_count || 7) : 0)}\n                    </p>\n                  </div>\n                  <div className={(result.total_errors || 0) > 0 ? \"bg-red-50 dark:bg-red-900/20 p-3 rounded border border-red-200 dark:border-red-800\" : \"bg-gray-50 dark:bg-gray-800 p-3 rounded border border-gray-200 dark:border-gray-700\"}>\n                    <p className={(result.total_errors || 0) > 0 ? \"text-xs text-red-600 dark:text-red-400\" : \"text-xs text-gray-500 dark:text-gray-400\"}>Registros con errores</p>\n                    <p className={(result.total_errors || 0) > 0 ? \"text-lg font-bold text-red-700 dark:text-red-300\" : \"text-lg font-bold\"}>\n                      {result.total_errors || (result.status === 'failed' ? (result.records_count || 7) : 0)}\n                    </p>\n                  </div>\n                </div>\n                {result.message && (\n                  <p className=\"mt-2 font-medium\">{result.message}</p>\n                )}\n              </div>\n              \n              {/* Acciones adicionales */}\n              {(result.total_errors || 0) > 0 && (\n                <div className=\"mt-4\">\n                  <button\n                    onClick={() => {\n                      // Lógica para descargar errores\n                      console.log('Descargar errores de importación');\n                    }}\n                    className=\"inline-flex items-center px-3 py-1.5 border border-red-300 dark:border-red-700 text-xs font-medium rounded-md text-red-700 dark:text-red-400 bg-white dark:bg-gray-800 hover:bg-red-50 dark:hover:bg-red-900/20\"\n                  >\n                    <span className=\"mr-1\">📥</span>\n                    Descargar errores\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n      \n\n      \n      {/* Indicador de carga */}\n      {loading && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-30 dark:bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl max-w-md w-full\">\n            <div className=\"flex flex-col items-center\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mb-4\"></div>\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">Procesando importación</h3>\n              <p className=\"text-sm text-gray-500 dark:text-gray-400 text-center\">\n                Esto puede tardar unos momentos dependiendo del tamaño del archivo.\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ImportForm;\n","import React, { useState, useEffect } from 'react';\nimport importService from '../../services/importService';\nimport type { ImportHistoryItem, ImportHistoryFilters } from '../../services/importService';\n\ninterface ImportHistoryProps {\n  className?: string;\n  defaultFilters?: ImportHistoryFilters;\n  refreshTrigger?: number; // Un valor que cambia para forzar la actualización\n}\n\nconst ImportHistory: React.FC<ImportHistoryProps> = ({ \n  className = '', \n  defaultFilters = {}, \n  refreshTrigger = 0 \n}) => {\n  const [history, setHistory] = useState<ImportHistoryItem[]>([]);\n  const [filters, setFilters] = useState<ImportHistoryFilters>(defaultFilters);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [totalItems, setTotalItems] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [limit] = useState(10);\n  const [currentLang, setCurrentLang] = useState<string>('es');\n\n  // Traducciones\n  const translations = {\n    es: {\n      loadingError: \"No se pudo cargar el historial de importaciones\",\n      noImports: \"No hay importaciones registradas\",\n      filename: \"Nombre de archivo\",\n      importDate: \"Fecha de importación\",\n      status: \"Estado\",\n      records: \"Registros\",\n      actions: \"Acciones\",\n      loading: \"Cargando historial...\",\n      viewDetails: \"Ver detalles\",\n      downloadReport: \"Descargar reporte\",\n      statusCompleted: \"Completado\",\n      statusCompletedErrors: \"Completado con errores\",\n      statusFailed: \"Error\",\n      statusProcessing: \"Procesando\",\n      statusPending: \"Pendiente\",\n      prev: \"Anterior\",\n      next: \"Siguiente\",\n      page: \"Página\",\n      of: \"de\",\n      total: \"Total\",\n      first: \"Primera\"\n    },\n    ca: {\n      loadingError: \"No s'ha pogut carregar l'historial d'importacions\",\n      noImports: \"No hi ha importacions registrades\",\n      filename: \"Nom d'arxiu\",\n      importDate: \"Data d'importació\",\n      status: \"Estat\",\n      records: \"Registres\",\n      actions: \"Accions\", \n      loading: \"Carregant historial...\",\n      viewDetails: \"Veure detalls\",\n      downloadReport: \"Descarregar informe\",\n      statusCompleted: \"Completat\",\n      statusCompletedErrors: \"Completat amb errors\",\n      statusFailed: \"Error\",\n      statusProcessing: \"Processant\",\n      statusPending: \"Pendent\",\n      prev: \"Anterior\",\n      next: \"Següent\",\n      page: \"Pàgina\",\n      of: \"de\",\n      total: \"Total\",\n      first: \"Primera\"\n    }\n  };\n  \n  // Efecto para detectar cambios de idioma\n  useEffect(() => {\n    // Obtener el idioma inicial\n    const storedLang = localStorage.getItem('userLanguage') || 'es';\n    setCurrentLang(storedLang);\n\n    // Función para actualizar el idioma cuando cambia en localStorage\n    const handleLangChange = (e: StorageEvent) => {\n      if (e.key === 'userLanguage') {\n        setCurrentLang(e.newValue || 'es');\n      }\n    };\n\n    // Escuchar cambios\n    window.addEventListener('storage', handleLangChange);\n\n    // Limpiar\n    return () => {\n      window.removeEventListener('storage', handleLangChange);\n    };\n  }, []);\n\n  // Cargar historial de importaciones\n  const loadHistory = async () => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // Preparar los filtros para la API\n      const apiFilters: ImportHistoryFilters = {\n        ...filters,\n        page: currentPage,\n        limit: limit\n      };\n      \n      console.log('[ImportHistory] Consultando API con filtros:', apiFilters);\n      \n      // Llamar al servicio real\n      const response = await importService.getImportHistory(apiFilters);\n      \n      // Actualizar el estado con los datos reales\n      setHistory(response.items);\n      setTotalItems(response.total);\n      setTotalPages(response.totalPages);\n    } catch (err) {\n      console.error('Error al cargar el historial de importaciones:', err);\n      setError(translations[currentLang as keyof typeof translations]?.loadingError || translations.es.loadingError);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Cargar datos cuando cambian los filtros, la página o el refreshTrigger\n  useEffect(() => {\n    loadHistory();\n  }, [filters, currentPage, refreshTrigger]);\n\n  // Cambiar página\n  const handlePageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  // Formatear fecha\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('es-ES', {\n      day: '2-digit', \n      month: '2-digit', \n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // Obtener color y estilo según estado (estilos Tailwind)\n  const getStatusBadge = (status: string) => {\n    let bgColor = '';\n    let textColor = '';\n    let text = '';\n    \n    switch (status) {\n      case 'completed':\n        bgColor = 'bg-green-100 dark:bg-green-800';\n        textColor = 'text-green-800 dark:text-green-100';\n        text = translations[currentLang as keyof typeof translations]?.statusCompleted || translations.es.statusCompleted;\n        break;\n      case 'completed_err':\n        bgColor = 'bg-amber-100 dark:bg-amber-800'; \n        textColor = 'text-amber-800 dark:text-amber-100';\n        text = translations[currentLang as keyof typeof translations]?.statusCompletedErrors || translations.es.statusCompletedErrors;\n        break;\n      case 'failed':\n        bgColor = 'bg-red-100 dark:bg-red-800';\n        textColor = 'text-red-800 dark:text-red-100';\n        text = translations[currentLang as keyof typeof translations]?.statusFailed || translations.es.statusFailed;\n        break;\n      case 'processing':\n        bgColor = 'bg-blue-100 dark:bg-blue-800';\n        textColor = 'text-blue-800 dark:text-blue-100';\n        text = translations[currentLang as keyof typeof translations]?.statusProcessing || translations.es.statusProcessing;\n        break;\n      case 'pending':\n        bgColor = 'bg-amber-100 dark:bg-amber-800';\n        textColor = 'text-amber-800 dark:text-amber-100';\n        text = translations[currentLang as keyof typeof translations]?.statusPending || translations.es.statusPending;\n        break;\n      default:\n        bgColor = 'bg-gray-100 dark:bg-gray-700';\n        textColor = 'text-gray-800 dark:text-gray-100';\n        // Para estados desconocidos, mostrar de forma más amigable\n        text = status\n          .replace('_', ' ')\n          .replace(/\\b\\w/g, l => l.toUpperCase()); // Capitalizar cada palabra\n    }\n    \n    return (\n      <span className={`px-2 py-1 rounded-full text-xs font-medium ${bgColor} ${textColor}`}>\n        {text}\n      </span>\n    );\n  };\n\n  // Descargar errores\n  const handleDownloadErrors = async (importId: number) => {\n    try {\n      setIsLoading(true);\n      \n      // Crear un archivo CSV de errores de ejemplo\n      const headers = ['Línea', 'Columna', 'Valor', 'Error'];\n      const data = [\n        { 'Línea': '2', 'Columna': 'Genere', 'Valor': 'X', 'Error': 'Valor no válido para género. Use M o F.' },\n        { 'Línea': '3', 'Columna': 'Data Naixement', 'Valor': '32/01/2020', 'Error': 'Fecha no válida' },\n        { 'Línea': '5', 'Columna': 'Mare', 'Valor': '999', 'Error': 'Animal madre no encontrado' }\n      ];\n      \n      // Crear CSV\n      let csvContent = headers.join(';') + '\\n';\n      data.forEach(row => {\n        const values = headers.map(header => {\n          // Utilizar indexación con tipo correctamente\n          const value = row[header as keyof typeof row] || '';\n          return typeof value === 'string' && (value.includes(';') || value.includes('\"')) \n            ? `\"${value.replace(/\"/g, '\"\"')}\"` \n            : value;\n        });\n        csvContent += values.join(';') + '\\n';\n      });\n      \n      // Crear blob y descargar\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `errores_importacion_${importId}.csv`);\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n    } catch (err) {\n      console.error('Error al descargar errores:', err);\n      setError(translations[currentLang as keyof typeof translations]?.loadingError || translations.es.loadingError);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className={`${className}`}>\n      {error && (\n        <div className=\"mb-4 p-4 border border-red-200 bg-red-50 text-red-800 dark:bg-red-900/50 dark:text-red-100 dark:border-red-800 rounded-lg\">\n          {error}\n        </div>\n      )}\n      \n      {isLoading ? (\n        <div className=\"flex flex-col items-center justify-center p-8 text-gray-600 dark:text-gray-300\">\n          <div className=\"w-12 h-12 border-4 border-primary/20 border-t-primary rounded-full animate-spin\"></div>\n          <p className=\"mt-4 font-medium\">{translations[currentLang as keyof typeof translations]?.loading || translations.es.loading}</p>\n        </div>\n      ) : history.length === 0 ? (\n        <div className=\"p-8 text-center text-gray-600 dark:text-gray-300 bg-gray-50 dark:bg-gray-800/50 rounded-lg border border-gray-100 dark:border-gray-700\">\n          <div className=\"text-4xl mb-3\">📋</div>\n          <p className=\"text-lg font-medium text-gray-900 dark:text-white mb-1\">{translations[currentLang as keyof typeof translations]?.noImports || translations.es.noImports}</p>\n          <p className=\"text-gray-500 dark:text-gray-400\">Las importaciones que realices aparecerán aquí.</p>\n        </div>\n      ) : (\n        <>\n          <div className=\"overflow-x-auto rounded-lg border border-gray-100 dark:border-gray-700\">\n            <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n              <thead className=\"bg-gray-50 dark:bg-gray-800\">\n                <tr>\n                  <th scope=\"col\" className=\"px-3 py-3.5 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">ID</th>\n                  <th scope=\"col\" className=\"px-3 py-3.5 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">{translations[currentLang as keyof typeof translations]?.filename || translations.es.filename}</th>\n                  <th scope=\"col\" className=\"px-3 py-3.5 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">{translations[currentLang as keyof typeof translations]?.importDate || translations.es.importDate}</th>\n                  <th scope=\"col\" className=\"px-3 py-3.5 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">{translations[currentLang as keyof typeof translations]?.records || translations.es.records}</th>\n                  <th scope=\"col\" className=\"px-3 py-3.5 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">{translations[currentLang as keyof typeof translations]?.status || translations.es.status}</th>\n                  <th scope=\"col\" className=\"px-3 py-3.5 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">{translations[currentLang as keyof typeof translations]?.actions || translations.es.actions}</th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n                {history.map((item, index) => (\n                  <tr key={item.id} className={index % 2 === 0 ? 'bg-white dark:bg-gray-800' : 'bg-gray-50 dark:bg-gray-800/50'}>\n                    <td className=\"px-3 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100\">{item.id}</td>\n                    <td className=\"px-3 py-4 whitespace-nowrap\">\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-sm font-medium text-gray-900 dark:text-white\">{item.filename}</span>\n                        <span className=\"text-xs text-gray-500 dark:text-gray-400\">Por: {item.user_name || 'Sistema'}</span>\n                      </div>\n                    </td>\n                    <td className=\"px-3 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">{formatDate(item.created_at)}</td>\n                    <td className=\"px-3 py-4 whitespace-nowrap\">\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-sm text-gray-900 dark:text-white\">Total: {item.total_records}</span>\n                        <div className=\"flex mt-1 text-xs\">\n                          {item.successful_records > 0 && (\n                            <span className=\"text-green-600 dark:text-green-400 mr-2\">\n                              Éxito: {item.successful_records}\n                            </span>\n                          )}\n                          {item.failed_records > 0 && (\n                            <span className=\"text-red-600 dark:text-red-400\">\n                              Errores: {item.failed_records}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-3 py-4 whitespace-nowrap\">\n                      {getStatusBadge(item.status)}\n                    </td>\n                    <td className=\"px-3 py-4 whitespace-nowrap text-sm\">\n                      {item.failed_records > 0 && (\n                        <button \n                          className=\"inline-flex items-center px-2.5 py-1.5 border border-red-300 dark:border-red-700 text-xs font-medium rounded \n                                   text-red-700 dark:text-red-300 bg-white dark:bg-gray-800 hover:bg-red-50 dark:hover:bg-red-900/30 \n                                   focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 dark:focus:ring-offset-gray-800 transition-colors\"\n                          onClick={() => handleDownloadErrors(item.id)}\n                        >\n                          {translations[currentLang as keyof typeof translations]?.downloadReport || translations.es.downloadReport}\n                        </button>\n                      )}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          \n          {/* Paginación con estilo Tailwind */}\n          {totalPages > 1 && (\n            <div className=\"flex items-center justify-center mt-6 space-x-1\">\n              <button \n                onClick={() => handlePageChange(1)} \n                disabled={currentPage === 1}\n                className={`inline-flex items-center px-2 py-1 border rounded-md text-sm font-medium \n                          ${currentPage === 1 \n                            ? 'bg-gray-100 dark:bg-gray-800 text-gray-400 dark:text-gray-600 border-gray-200 dark:border-gray-700 cursor-not-allowed' \n                            : 'bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'}`}\n              >\n                <span className=\"sr-only\">{translations[currentLang as keyof typeof translations]?.first || 'Primera'}</span>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 19l-7-7 7-7m8 14l-7-7 7-7\" />\n                </svg>\n              </button>\n              <button \n                onClick={() => handlePageChange(currentPage - 1)} \n                disabled={currentPage === 1}\n                className={`inline-flex items-center px-2 py-1 border rounded-md text-sm font-medium \n                          ${currentPage === 1 \n                            ? 'bg-gray-100 dark:bg-gray-800 text-gray-400 dark:text-gray-600 border-gray-200 dark:border-gray-700 cursor-not-allowed' \n                            : 'bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'}`}\n              >\n                <span className=\"sr-only\">{translations[currentLang as keyof typeof translations]?.prev || translations.es.prev}</span>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n                </svg>\n              </button>\n              \n              {/* Números de página */}\n              {[...Array(totalPages)].map((_, index) => {\n                const pageNumber = index + 1;\n                // Mostrar solo algunas páginas si hay muchas\n                if (\n                  pageNumber === 1 ||\n                  pageNumber === totalPages ||\n                  (pageNumber >= currentPage - 1 && pageNumber <= currentPage + 1)\n                ) {\n                  return (\n                    <button\n                      key={pageNumber}\n                      onClick={() => handlePageChange(pageNumber)}\n                      className={`inline-flex items-center px-3 py-1 border text-sm font-medium rounded-md \n                                ${pageNumber === currentPage \n                                  ? 'bg-primary/10 dark:bg-primary/30 text-primary border-primary/20 dark:border-primary/40' \n                                  : 'bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'}`}\n                    >\n                      {pageNumber}\n                    </button>\n                  );\n                } else if (\n                  pageNumber === currentPage - 2 ||\n                  pageNumber === currentPage + 2\n                ) {\n                  return <span key={`ellipsis-${pageNumber}`} className=\"px-1 text-gray-500 dark:text-gray-400\">...</span>;\n                }\n                return null;\n              })}\n              \n              <button \n                onClick={() => handlePageChange(currentPage + 1)} \n                disabled={currentPage === totalPages}\n                className={`inline-flex items-center px-2 py-1 border rounded-md text-sm font-medium \n                          ${currentPage === totalPages \n                            ? 'bg-gray-100 dark:bg-gray-800 text-gray-400 dark:text-gray-600 border-gray-200 dark:border-gray-700 cursor-not-allowed' \n                            : 'bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'}`}\n              >\n                <span className=\"sr-only\">Siguiente</span>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                </svg>\n              </button>\n              <button \n                onClick={() => handlePageChange(totalPages)} \n                disabled={currentPage === totalPages}\n                className={`inline-flex items-center px-2 py-1 border rounded-md text-sm font-medium \n                          ${currentPage === totalPages \n                            ? 'bg-gray-100 dark:bg-gray-800 text-gray-400 dark:text-gray-600 border-gray-200 dark:border-gray-700 cursor-not-allowed' \n                            : 'bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'}`}\n              >\n                <span className=\"sr-only\">Última</span>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 5l7 7-7 7M5 5l7 7-7 7\" />\n                </svg>\n              </button>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ImportHistory;\n","import React, { useState, useEffect } from 'react';\nimport ImportForm from './ImportForm';\nimport ImportHistory from './ImportHistory';\nimport type { ImportResult } from '../../services/importService';\n\n/**\n * Componente contenedor que gestiona el estado compartido entre\n * el formulario de importación y el historial de importaciones\n */\nconst ImportContainer: React.FC = () => {\n  // Estado para controlar la actualización del historial\n  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);\n  \n  // Estado para el idioma\n  const [currentLang, setCurrentLang] = useState<string>('es');\n\n  // Traducciones\n  const translations = {\n    es: {\n      historyTitle: \"Historial de Importaciones\"\n    },\n    ca: {\n      historyTitle: \"Historial d'Importacions\"\n    }\n  };\n\n  // Efecto para detectar cambios de idioma\n  useEffect(() => {\n    // Obtener el idioma inicial\n    const storedLang = localStorage.getItem('userLanguage') || 'es';\n    setCurrentLang(storedLang);\n\n    // Función para actualizar el idioma cuando cambia en localStorage\n    const handleLangChange = (e: StorageEvent) => {\n      if (e.key === 'userLanguage') {\n        setCurrentLang(e.newValue || 'es');\n      }\n    };\n\n    // Escuchar cambios\n    window.addEventListener('storage', handleLangChange);\n\n    // Limpiar\n    return () => {\n      window.removeEventListener('storage', handleLangChange);\n    };\n  }, []);\n\n  // Función que se ejecuta cuando se completa una importación\n  const handleImportComplete = (result: ImportResult) => {\n    console.log('Importación completada. Actualizando historial...', result);\n    // Incrementar el trigger para forzar la recarga del historial\n    setRefreshTrigger(prev => prev + 1);\n  };\n\n  return (\n    <>\n      {/* Formulario de importación */}\n      <ImportForm onImportComplete={handleImportComplete} />\n      \n      {/* Historial de importaciones con trigger de actualización */}\n      <div className=\"mt-8 bg-white dark:bg-gray-800 rounded-lg shadow p-4 md:p-6 border border-gray-100 dark:border-gray-700\">\n        <h2 className=\"text-lg md:text-xl font-semibold mb-3 md:mb-4 text-gray-800 dark:text-white\">\n          {translations[currentLang as keyof typeof translations]?.historyTitle || translations.es.historyTitle}\n        </h2>\n        <ImportHistory refreshTrigger={refreshTrigger} />\n      </div>\n    </>\n  );\n};\n\nexport default ImportContainer;\n"],"names":["checkAuthStatus","getAuthToken","error","importService","filters","queryParams","page","limit","endpoint","response","apiService","formData","authStatus","token","headers","fileInfo","fileEntry","BACKEND_URL","apiConfig","data","errorText","fetchError","exampleData","rows","item","csvContent","ImportForm","onImportComplete","fileInputRef","useRef","file","setFile","useState","loading","setLoading","result","setResult","setError","debugInfo","setDebugInfo","currentLang","setCurrentLang","translations","useEffect","storedLang","handleLangChange","e","acceptedFormat","handleFileChange","event","files","t","handleReset","handleImport","MAX_SIZE","resolve","prev","pair","importResult","err","handleResetEvent","handleImportEvent","jsxs","jsx","ImportHistory","className","defaultFilters","refreshTrigger","history","setHistory","setFilters","isLoading","setIsLoading","totalItems","setTotalItems","currentPage","setCurrentPage","totalPages","setTotalPages","loadHistory","apiFilters","handlePageChange","formatDate","dateString","getStatusBadge","status","bgColor","textColor","text","l","handleDownloadErrors","importId","row","values","header","value","blob","url","link","Fragment","index","_","pageNumber","ImportContainer","setRefreshTrigger","handleImportComplete"],"mappings":"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"}