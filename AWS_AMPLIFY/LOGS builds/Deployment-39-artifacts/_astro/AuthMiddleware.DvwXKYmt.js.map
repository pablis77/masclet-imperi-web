{"version":3,"file":"AuthMiddleware.DvwXKYmt.js","sources":["../../../src/middlewares/AuthMiddleware.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\ninterface AuthMiddlewareProps {\n  children: React.ReactNode;\n  currentPath?: string;\n}\n\n/**\n * Middleware de autenticación para proteger rutas\n * VERSION SIMPLIFICADA: En desarrollo, todos los usuarios tienen acceso completo\n * Las verificaciones de roles se han desactivado temporalmente\n */\nconst AuthMiddleware: React.FC<AuthMiddlewareProps> = ({ children }) => {\n  const [authorized, setAuthorized] = useState(true); // Siempre autorizado en modo desarrollo\n\n  useEffect(() => {\n    // Versión simplificada para desarrollo\n    try {\n      // Si no hay token, crear uno temporal para desarrollo\n      if (!localStorage.getItem('token')) {\n        localStorage.setItem('token', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6NDEwMjQ0NDgwMH0.x');\n        console.log('Token JWT de desarrollo generado automáticamente');\n      }\n      \n      // En desarrollo siempre estamos autorizados\n      setAuthorized(true);\n    } catch (error) {\n      console.error('Error en AuthMiddleware:', error);\n      // En desarrollo, permitir acceso incluso si hay errores\n      setAuthorized(true);\n    }\n    \n    /* El código de verificación se deja comentado para implementarlo más adelante\n    // Obtener la ruta actual\n    const currentPath = window.location.pathname;\n    console.log('Verificando acceso a ruta:', currentPath);\n    \n    // Si no está autenticado, redirigir al login\n    if (!isAuthenticated()) {\n      console.log('Usuario no autenticado, redirigiendo al login');\n      window.location.href = `/login?redirect=${encodeURIComponent(currentPath)}`;\n      return;\n    }\n\n    // Verificar si tiene acceso a la ruta actual\n    const user = getCurrentUser();\n    // Asegurar que el rol del usuario sea de tipo UserRole\n    const userRole = (user?.role as UserRole) || 'usuario';\n    \n    const hasAccess = hasAccessToRoute(currentPath, userRole);\n    console.log('¿Usuario tiene acceso a la ruta?', hasAccess, 'con rol:', userRole);\n    \n    if (!hasAccess) {\n      console.log('Usuario no autorizado para esta ruta, redirigiendo');\n      // Redirigir a página de error o página principal según su rol\n      window.location.href = '/unauthorized';\n      return;\n    }\n\n    // Si todo está correcto, autorizar\n    setAuthorized(true);\n    setLoading(false);\n    */\n  }, []);\n\n  // En modo desarrollo, siempre retornamos los hijos (authorized es siempre true)\n  return <>{children}</>;\n  \n  /* La siguiente lógica se implementará cuando se active la validación de roles\n  return (\n    <>\n      {!authorized ? (\n        <div className=\"p-6 bg-red-50 border border-red-200 rounded-lg text-center\">\n          <h3 className=\"text-xl font-bold text-red-700 mb-2\">Acceso no autorizado</h3>\n          <p className=\"text-red-600 mb-4\">No tienes permiso para acceder a esta página.</p>\n          <button \n            className=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md\"\n            onClick={() => {\n              localStorage.setItem('token', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6NDEwMjQ0NDgwMH0.x');\n              window.location.reload();\n            }}\n          >\n            Iniciar sesión\n          </button>\n        </div>\n      ) : (\n        children\n      )}\n    </>\n  );\n  */\n};\n\nexport default AuthMiddleware;\n"],"names":["AuthMiddleware","children","authorized","setAuthorized","useState","useEffect","error"],"mappings":"gDAYA,MAAMA,EAAgD,CAAC,CAAE,SAAAC,KAAe,CACtE,KAAM,CAACC,EAAYC,CAAa,EAAIC,EAAAA,SAAS,EAAI,EAEjDC,OAAAA,EAAAA,UAAU,IAAM,CAEV,GAAA,CAEG,aAAa,QAAQ,OAAO,IAClB,aAAA,QAAQ,QAAS,oFAAoF,EAClH,QAAQ,IAAI,kDAAkD,GAIhEF,EAAc,EAAI,QACXG,EAAO,CACN,QAAA,MAAM,2BAA4BA,CAAK,EAE/CH,EAAc,EAAI,CAAA,CAkCtB,EAAG,EAAE,oBAGK,SAAAF,EAAS,CAyBrB"}