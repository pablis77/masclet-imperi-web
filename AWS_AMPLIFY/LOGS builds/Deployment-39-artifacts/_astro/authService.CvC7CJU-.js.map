{"version":3,"file":"authService.CvC7CJU-.js","sources":["../../../src/services/authService.js"],"sourcesContent":["/**\n * Servicio de autenticación simplificado para Masclet Imperi\n */\n\n// URL base para endpoints de autenticación (ajustar según API real)\nconst AUTH_URL = '/api/auth';\n\n// Rol por defecto para desarrollo\nconst DEFAULT_ROLE = 'admin';\n\n// Comprobar si estamos en el navegador\nconst isBrowser = typeof window !== 'undefined';\n\n/**\n * Servicio de autenticación\n */\nconst authService = {\n  /**\n   * Comprobar si el usuario está autenticado\n   * @returns {boolean} Estado de autenticación\n   */\n  isAuthenticated() {\n    return !!this.getToken();\n  },\n\n  /**\n   * Obtener token de autenticación\n   * @returns {string|null} Token JWT o null si no está autenticado\n   */\n  getToken() {\n    // Solo acceder a localStorage en el navegador\n    if (isBrowser) {\n      try {\n        return localStorage.getItem('token');\n      } catch (e) {\n        console.warn('Error accediendo a localStorage:', e);\n      }\n    }\n    // Valor predeterminado para desarrollo, tanto en servidor como en cliente\n    return 'token-desarrollo-12345';\n  },\n\n  /**\n   * Iniciar sesión\n   * @param {Object} credentials Credenciales del usuario\n   * @returns {Promise<Object>} Datos del usuario autenticado\n   */\n  async login(credentials) {\n    // Simulación de login para desarrollo\n    if (credentials.username === 'admin' && credentials.password === 'admin123') {\n      const user = {\n        id: 1,\n        username: 'admin',\n        role: 'administrador',\n        fullName: 'Administrador'\n      };\n      const token = 'token-simulado-admin-12345';\n      \n      this.saveToken(token);\n      this.saveUser(user);\n      \n      return { user, token };\n    }\n    \n    // En producción, usar llamada real a la API\n    // const response = await fetch(`${AUTH_URL}/login`, {\n    //   method: 'POST',\n    //   headers: { 'Content-Type': 'application/json' },\n    //   body: JSON.stringify(credentials)\n    // });\n    // const data = await response.json();\n    // \n    // if (!response.ok) {\n    //   throw new Error(data.detail || 'Error de autenticación');\n    // }\n    // \n    // this.saveToken(data.token);\n    // this.saveUser(data.user);\n    // \n    // return data;\n    \n    throw new Error('Credenciales inválidas');\n  },\n  \n  /**\n   * Cerrar sesión\n   */\n  logout() {\n    this.removeToken();\n    this.removeUser();\n  },\n  \n  /**\n   * Registrar un nuevo usuario\n   * @param {Object} userData Datos del nuevo usuario\n   * @returns {Promise<Object>} Datos del usuario creado\n   */\n  async register(userData) {\n    // En producción, usar llamada real a la API\n    // const response = await fetch(`${AUTH_URL}/register`, {\n    //   method: 'POST',\n    //   headers: { 'Content-Type': 'application/json' },\n    //   body: JSON.stringify(userData)\n    // });\n    // return await response.json();\n    \n    // Simulación para desarrollo\n    return {\n      id: Date.now(),\n      ...userData,\n      created_at: new Date().toISOString()\n    };\n  },\n  \n  /**\n   * Actualizar datos de un usuario\n   * @param {number} userId ID del usuario\n   * @param {Object} userData Nuevos datos\n   * @returns {Promise<Object>} Datos actualizados\n   */\n  async updateUser(userId, userData) {\n    // En producción, usar llamada real a la API\n    // const response = await fetch(`${AUTH_URL}/users/${userId}`, {\n    //   method: 'PUT',\n    //   headers: { \n    //     'Content-Type': 'application/json',\n    //     ...this.getAuthHeaders()\n    //   },\n    //   body: JSON.stringify(userData)\n    // });\n    // return await response.json();\n    \n    // Simulación para desarrollo\n    return {\n      id: userId,\n      ...userData,\n      updated_at: new Date().toISOString()\n    };\n  },\n  \n  /**\n   * Obtener usuario almacenado en localStorage\n   * @returns {Object|null} Datos del usuario o null\n   */\n  getStoredUser() {\n    if (isBrowser) {\n      try {\n        const userStr = localStorage.getItem('user');\n        return userStr ? JSON.parse(userStr) : null;\n      } catch (e) {\n        console.warn('Error obteniendo usuario de localStorage:', e);\n        return null;\n      }\n    }\n    return null;\n  },\n  \n  /**\n   * Guardar datos de usuario en localStorage\n   * @param {Object} user Datos del usuario\n   */\n  saveUser(user) {\n    if (isBrowser && user) {\n      try {\n        localStorage.setItem('user', JSON.stringify(user));\n        localStorage.setItem('userRole', user.role || 'usuario');\n      } catch (e) {\n        console.warn('Error guardando usuario en localStorage:', e);\n      }\n    }\n  },\n  \n  /**\n   * Eliminar datos de usuario de localStorage\n   */\n  removeUser() {\n    if (isBrowser) {\n      try {\n        localStorage.removeItem('user');\n        localStorage.removeItem('userRole');\n      } catch (e) {\n        console.warn('Error eliminando usuario de localStorage:', e);\n      }\n    }\n  },\n  \n  /**\n   * Obtener usuario actual (desde localStorage o API)\n   * @returns {Promise<Object|null>} Datos del usuario o null\n   */\n  async getCurrentUser() {\n    const storedUser = this.getStoredUser();\n    if (storedUser) {\n      return storedUser;\n    }\n    \n    // En una aplicación real, verificaríamos con la API\n    // if (this.isAuthenticated()) {\n    //   try {\n    //     const response = await fetch(`${AUTH_URL}/me`, {\n    //       headers: this.getAuthHeaders()\n    //     });\n    //     if (response.ok) {\n    //       const userData = await response.json();\n    //       this.saveUser(userData);\n    //       return userData;\n    //     }\n    //   } catch (e) {\n    //     console.error('Error obteniendo usuario actual:', e);\n    //   }\n    // }\n    \n    return null;\n  },\n\n  /**\n   * Guardar token en localStorage\n   * @param {string} token Token JWT\n   */\n  saveToken(token) {\n    // Solo acceder a localStorage en el navegador\n    if (isBrowser) {\n      try {\n        localStorage.setItem('token', token);\n      } catch (e) {\n        console.warn('Error guardando token:', e);\n      }\n    }\n  },\n\n  /**\n   * Eliminar token (cerrar sesión)\n   */\n  removeToken() {\n    // Solo acceder a localStorage en el navegador\n    if (isBrowser) {\n      try {\n        localStorage.removeItem('token');\n      } catch (e) {\n        console.warn('Error eliminando de localStorage:', e);\n      }\n    }\n  },\n\n  /**\n   * Verificar y restaurar sesión cuando sea necesario\n   * @returns {Promise<boolean>} Estado de autenticación\n   */\n  async ensureAuthenticated() {\n    // En desarrollo, simular siempre autenticación exitosa\n    if (!this.getToken()) {\n      this.saveToken('token-desarrollo-12345');\n      console.info('Token de desarrollo generado automáticamente');\n    }\n    return true;\n  },\n\n  /**\n   * Obtener encabezados de autenticación para peticiones API\n   * @returns {Object} Headers con token de autenticación\n   */\n  getAuthHeaders() {\n    const token = this.getToken() || 'token-desarrollo-12345';\n    return { 'Authorization': `Bearer ${token}` };\n  },\n  \n  /**\n   * Obtener el rol del usuario actual\n   * @returns {string} Rol del usuario (admin, user, etc.)\n   */\n  getCurrentUserRole() {\n    // Solo acceder a localStorage en el navegador\n    if (isBrowser) {\n      try {\n        // En un entorno real, esto podría decodificar el JWT para obtener el rol\n        // o hacer una solicitud al servidor para obtener el perfil del usuario\n        return localStorage.getItem('userRole') || DEFAULT_ROLE;\n      } catch (e) {\n        console.warn('Error al obtener rol de usuario:', e);\n      }\n    }\n    // Siempre devolver un valor por defecto para el servidor\n    return DEFAULT_ROLE;\n  }\n};\n\n// Auto-generar token para desarrollo si se usa directamente\nif (isBrowser) {\n  setTimeout(() => {\n    try {\n      if (!localStorage.getItem('token')) {\n        localStorage.setItem('token', 'token-desarrollo-12345');\n        console.info('Token de desarrollo generado automáticamente');\n      }\n      \n      if (!localStorage.getItem('userRole')) {\n        localStorage.setItem('userRole', DEFAULT_ROLE);\n        console.info('Rol de usuario por defecto establecido:', DEFAULT_ROLE);\n      }\n    } catch (e) {\n      console.warn('Error inicializando valores por defecto:', e);\n    }\n  }, 100);\n}\n\n// Exportar funciones individuales para compatibilidad con imports existentes\nexport const isAuthenticated = () => authService.isAuthenticated();\nexport const login = async (credentials) => authService.login(credentials);\nexport const logout = () => authService.logout();\nexport const register = async (userData) => authService.register(userData);\nexport const updateUser = async (userId, userData) => authService.updateUser(userId, userData);\nexport const getStoredUser = () => authService.getStoredUser();\nexport const getCurrentUser = () => authService.getCurrentUser();\nexport const getUserRole = () => authService.getCurrentUserRole();\nexport const getRedirectPathForUser = (user) => {\n  const role = user?.role || 'usuario';\n  return role === 'administrador' ? '/dashboard' : '/';\n};\n\n// Exportar el objeto completo para usos avanzados\nexport default authService;\n"],"names":["DEFAULT_ROLE","isBrowser","authService","credentials","user","token","userData","userId","userStr","e","storedUser","isAuthenticated","getStoredUser","getCurrentUser"],"mappings":"AAQA,MAAMA,EAAe,QAGfC,EAAY,OAAO,OAAW,IAK9BC,EAAc,CAKlB,iBAAkB,CAChB,MAAO,CAAC,CAAC,KAAK,SAAU,CACzB,EAMD,UAAW,CAET,GAAID,EACF,GAAI,CACF,OAAO,aAAa,QAAQ,OAAO,CACpC,OAAQ,EAAG,CACV,QAAQ,KAAK,mCAAoC,CAAC,CAC1D,CAGI,MAAO,wBACR,EAOD,MAAM,MAAME,EAAa,CAEvB,GAAIA,EAAY,WAAa,SAAWA,EAAY,WAAa,WAAY,CAC3E,MAAMC,EAAO,CACX,GAAI,EACJ,SAAU,QACV,KAAM,gBACN,SAAU,eACX,EACKC,EAAQ,6BAEd,YAAK,UAAUA,CAAK,EACpB,KAAK,SAASD,CAAI,EAEX,CAAE,KAAAA,EAAM,MAAAC,CAAO,CAC5B,CAmBI,MAAM,IAAI,MAAM,wBAAwB,CACzC,EAKD,QAAS,CACP,KAAK,YAAa,EAClB,KAAK,WAAY,CAClB,EAOD,MAAM,SAASC,EAAU,CAUvB,MAAO,CACL,GAAI,KAAK,IAAK,EACd,GAAGA,EACH,WAAY,IAAI,KAAI,EAAG,YAAW,CACnC,CACF,EAQD,MAAM,WAAWC,EAAQD,EAAU,CAajC,MAAO,CACL,GAAIC,EACJ,GAAGD,EACH,WAAY,IAAI,KAAI,EAAG,YAAW,CACnC,CACF,EAMD,eAAgB,CACd,GAAIL,EACF,GAAI,CACF,MAAMO,EAAU,aAAa,QAAQ,MAAM,EAC3C,OAAOA,EAAU,KAAK,MAAMA,CAAO,EAAI,IACxC,OAAQ,EAAG,CACV,eAAQ,KAAK,4CAA6C,CAAC,EACpD,IACf,CAEI,OAAO,IACR,EAMD,SAASJ,EAAM,CACb,GAAIH,GAAaG,EACf,GAAI,CACF,aAAa,QAAQ,OAAQ,KAAK,UAAUA,CAAI,CAAC,EACjD,aAAa,QAAQ,WAAYA,EAAK,MAAQ,SAAS,CACxD,OAAQK,EAAG,CACV,QAAQ,KAAK,2CAA4CA,CAAC,CAClE,CAEG,EAKD,YAAa,CACX,GAAIR,EACF,GAAI,CACF,aAAa,WAAW,MAAM,EAC9B,aAAa,WAAW,UAAU,CACnC,OAAQ,EAAG,CACV,QAAQ,KAAK,4CAA6C,CAAC,CACnE,CAEG,EAMD,MAAM,gBAAiB,CACrB,MAAMS,EAAa,KAAK,cAAe,EACvC,OAAIA,GAoBG,IACR,EAMD,UAAUL,EAAO,CAEf,GAAIJ,EACF,GAAI,CACF,aAAa,QAAQ,QAASI,CAAK,CACpC,OAAQI,EAAG,CACV,QAAQ,KAAK,yBAA0BA,CAAC,CAChD,CAEG,EAKD,aAAc,CAEZ,GAAIR,EACF,GAAI,CACF,aAAa,WAAW,OAAO,CAChC,OAAQ,EAAG,CACV,QAAQ,KAAK,oCAAqC,CAAC,CAC3D,CAEG,EAMD,MAAM,qBAAsB,CAE1B,OAAK,KAAK,aACR,KAAK,UAAU,wBAAwB,EACvC,QAAQ,KAAK,8CAA8C,GAEtD,EACR,EAMD,gBAAiB,CAEf,MAAO,CAAE,cAAiB,UADZ,KAAK,SAAQ,GAAM,wBACQ,EAAI,CAC9C,EAMD,oBAAqB,CAEnB,GAAIA,EACF,GAAI,CAGF,OAAO,aAAa,QAAQ,UAAU,GAAKD,CAC5C,OAAQ,EAAG,CACV,QAAQ,KAAK,mCAAoC,CAAC,CAC1D,CAGI,OAAOA,CACX,CACA,EAGIC,GACF,WAAW,IAAM,CACf,GAAI,CACG,aAAa,QAAQ,OAAO,IAC/B,aAAa,QAAQ,QAAS,wBAAwB,EACtD,QAAQ,KAAK,8CAA8C,GAGxD,aAAa,QAAQ,UAAU,IAClC,aAAa,QAAQ,WAAYD,CAAY,EAC7C,QAAQ,KAAK,0CAA2CA,CAAY,EAEvE,OAAQ,EAAG,CACV,QAAQ,KAAK,2CAA4C,CAAC,CAChE,CACG,EAAE,GAAG,EAII,MAACW,EAAkB,IAAMT,EAAY,gBAAe,EAKnDU,EAAgB,IAAMV,EAAY,cAAa,EAC/CW,EAAiB,IAAMX,EAAY,eAAc"}