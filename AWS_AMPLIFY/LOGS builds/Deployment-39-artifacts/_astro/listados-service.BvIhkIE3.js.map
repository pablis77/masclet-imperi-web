{"version":3,"file":"listados-service.BvIhkIE3.js","sources":["../../../src/services/listados-service.ts"],"sourcesContent":["/**\n * Servicio espec√≠fico para la gesti√≥n de listados\n * \n * Este servicio utiliza el apiService general pero encapsula\n * toda la l√≥gica espec√≠fica para gestionar listados sin modificar\n * el servicio principal.\n */\n\n// Importamos el servicio API general pero NO lo modificamos\nimport apiService from './apiService';\n\n/**\n * Obtener todos los listados\n */\nexport async function getListados() {\n  try {\n    // Asegurarse de usar la barra diagonal final\n    return await apiService.get('listados/');\n  } catch (error) {\n    console.error('Error al obtener listados:', error);\n    // Devolver array vac√≠o en caso de error para evitar errores en la UI\n    return [];\n  }\n}\n\n/**\n * Obtener un listado espec√≠fico por ID\n */\nexport async function getListado(id: string | number) {\n  try {\n    return await apiService.get(`listados/${id}`);\n  } catch (error) {\n    console.error(`Error al obtener listado ${id}:`, error);\n    // Devolver objeto vac√≠o en caso de error\n    return {};\n  }\n}\n\n/**\n * Crear un nuevo listado\n */\nexport async function createListado(data: any) {\n  try {\n    // Adaptar los nombres de campos al formato que espera el backend\n    const adaptedData = {\n      nombre: data.name || '',\n      descripcion: data.description || '',\n      categoria: data.category || '',\n      is_completed: data.is_completed || false,\n      animales: data.animals || []\n    };\n\n    return await apiService.post('listados/', adaptedData);\n  } catch (error) {\n    console.error('Error al crear listado:', error);\n    throw error;\n  }\n}\n\n/**\n * Obtener todos los animales para el selector de listados\n */\nexport async function getAnimals() {\n  try {\n    console.log('Obteniendo animales desde el backend...');\n    \n    // Ahora podemos obtener hasta 1000 animales en una sola petici√≥n\n    // Esto deber√≠a cubrir todas nuestras necesidades actuales y futuras\n    const allAnimals: any[] = [];\n    let offset = 0;\n    const limit = 1000; // Nuevo l√≠mite m√°ximo permitido por el backend\n    let hasMoreAnimals = true;\n    \n    // Hacer peticiones paginadas hasta obtener todos los animales\n    while (hasMoreAnimals) {\n      try {\n        const url = `animals/?offset=${offset}&limit=${limit}`;\n        console.log(`Obteniendo lote de animales: ${url}`);\n        \n        const response = await apiService.get(url);\n        let animalsInPage: any[] = [];\n        \n        // Extraer los animales de la respuesta seg√∫n su formato\n        if (response && typeof response === 'object') {\n          if (response.status === 'success' && response.data) {\n            // Formato {status: 'success', data: [...]} \n            if (Array.isArray(response.data)) {\n              animalsInPage = response.data;\n            } else if (response.data.items && Array.isArray(response.data.items)) {\n              animalsInPage = response.data.items;\n            }\n          } else if (Array.isArray(response)) {\n            // La respuesta es directamente un array\n            animalsInPage = response;\n          }\n        }\n        \n        console.log(`Obtenidos ${animalsInPage.length} animales en esta p√°gina`);\n        \n        // A√±adir los animales de esta p√°gina al total\n        allAnimals.push(...animalsInPage);\n        \n        // Comprobar si hay m√°s animales para obtener\n        if (animalsInPage.length < limit) {\n          hasMoreAnimals = false;\n          console.log('No hay m√°s animales para obtener');\n        } else {\n          offset += limit;\n          console.log(`Avanzando a offset=${offset}`);\n        }\n      } catch (pageError) {\n        console.error('Error al obtener p√°gina de animales:', pageError);\n        hasMoreAnimals = false; // Detener el bucle en caso de error\n      }\n    }\n    \n    console.log(`Total de animales obtenidos: ${allAnimals.length}`);\n    return allAnimals;\n  } catch (error) {\n    console.error('Error al obtener animales:', error);\n    return [];\n  }\n}\n\n/**\n * Actualizar los estados y observaciones de los animales de un listado\n */\n/**\n * Actualiza un listado existente\n * @param id ID del listado a actualizar\n * @param listado Datos a actualizar\n * @returns Promise con el listado actualizado\n */\nexport async function updateListado(id: number, listado: any): Promise<any> {\n  try {\n    console.log(`üìù Actualizando listado ${id}:`, listado);\n    const data = await apiService.put(`listados/${id}`, listado);\n    console.log('‚úÖ Listado actualizado:', data);\n    return data;\n  } catch (error) {\n    console.error('‚ùå Error al actualizar listado:', error);\n    throw error;\n  }\n}\n\nexport async function updateListadoAnimales(id: string | number, animales: any[]) {\n  try {\n    return await apiService.put(`listados/${id}/animales`, { animales });\n  } catch (error) {\n    console.error(`Error al actualizar los animales del listado ${id}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Eliminar un listado por su ID\n */\nexport async function deleteListado(id: string | number) {\n  try {\n    return await apiService.del(`listados/${id}`);\n  } catch (error) {\n    console.error(`Error al eliminar el listado ${id}:`, error);\n    throw error;\n  }\n}\n"],"names":["getListados","apiService","error","getListado","id","createListado","data","adaptedData","getAnimals","allAnimals","offset","limit","hasMoreAnimals","url","response","animalsInPage","pageError","updateListado","listado","updateListadoAnimales","animales","deleteListado"],"mappings":"6CAcA,eAAsBA,GAAc,CAC9B,GAAA,CAEK,OAAA,MAAMC,EAAW,IAAI,WAAW,QAChCC,EAAO,CACN,eAAA,MAAM,6BAA8BA,CAAK,EAE1C,CAAC,CAAA,CAEZ,CAKA,eAAsBC,EAAWC,EAAqB,CAChD,GAAA,CACF,OAAO,MAAMH,EAAW,IAAI,YAAYG,CAAE,EAAE,QACrCF,EAAO,CACd,eAAQ,MAAM,4BAA4BE,CAAE,IAAKF,CAAK,EAE/C,CAAC,CAAA,CAEZ,CAKA,eAAsBG,EAAcC,EAAW,CACzC,GAAA,CAEF,MAAMC,EAAc,CAClB,OAAQD,EAAK,MAAQ,GACrB,YAAaA,EAAK,aAAe,GACjC,UAAWA,EAAK,UAAY,GAC5B,aAAcA,EAAK,cAAgB,GACnC,SAAUA,EAAK,SAAW,CAAA,CAC5B,EAEA,OAAO,MAAML,EAAW,KAAK,YAAaM,CAAW,QAC9CL,EAAO,CACN,cAAA,MAAM,0BAA2BA,CAAK,EACxCA,CAAA,CAEV,CAKA,eAAsBM,GAAa,CAC7B,GAAA,CACF,QAAQ,IAAI,yCAAyC,EAIrD,MAAMC,EAAoB,CAAC,EAC3B,IAAIC,EAAS,EACb,MAAMC,EAAQ,IACd,IAAIC,EAAiB,GAGrB,KAAOA,GACD,GAAA,CACF,MAAMC,EAAM,mBAAmBH,CAAM,UAAUC,CAAK,GAC5C,QAAA,IAAI,gCAAgCE,CAAG,EAAE,EAEjD,MAAMC,EAAW,MAAMb,EAAW,IAAIY,CAAG,EACzC,IAAIE,EAAuB,CAAC,EAGxBD,GAAY,OAAOA,GAAa,WAC9BA,EAAS,SAAW,WAAaA,EAAS,KAExC,MAAM,QAAQA,EAAS,IAAI,EAC7BC,EAAgBD,EAAS,KAChBA,EAAS,KAAK,OAAS,MAAM,QAAQA,EAAS,KAAK,KAAK,IACjEC,EAAgBD,EAAS,KAAK,OAEvB,MAAM,QAAQA,CAAQ,IAEfC,EAAAD,IAIpB,QAAQ,IAAI,aAAaC,EAAc,MAAM,0BAA0B,EAG5DN,EAAA,KAAK,GAAGM,CAAa,EAG5BA,EAAc,OAASJ,GACRC,EAAA,GACjB,QAAQ,IAAI,kCAAkC,IAEpCF,GAAAC,EACF,QAAA,IAAI,sBAAsBD,CAAM,EAAE,SAErCM,EAAW,CACV,QAAA,MAAM,uCAAwCA,CAAS,EAC9CJ,EAAA,EAAA,CAIrB,eAAQ,IAAI,gCAAgCH,EAAW,MAAM,EAAE,EACxDA,QACAP,EAAO,CACN,eAAA,MAAM,6BAA8BA,CAAK,EAC1C,CAAC,CAAA,CAEZ,CAWsB,eAAAe,EAAcb,EAAYc,EAA4B,CACtE,GAAA,CACF,QAAQ,IAAI,2BAA2Bd,CAAE,IAAKc,CAAO,EACrD,MAAMZ,EAAO,MAAML,EAAW,IAAI,YAAYG,CAAE,GAAIc,CAAO,EACnD,eAAA,IAAI,yBAA0BZ,CAAI,EACnCA,QACAJ,EAAO,CACN,cAAA,MAAM,iCAAkCA,CAAK,EAC/CA,CAAA,CAEV,CAEsB,eAAAiB,EAAsBf,EAAqBgB,EAAiB,CAC5E,GAAA,CACK,OAAA,MAAMnB,EAAW,IAAI,YAAYG,CAAE,YAAa,CAAE,SAAAgB,EAAU,QAC5DlB,EAAO,CACd,cAAQ,MAAM,gDAAgDE,CAAE,IAAKF,CAAK,EACpEA,CAAA,CAEV,CAKA,eAAsBmB,EAAcjB,EAAqB,CACnD,GAAA,CACF,OAAO,MAAMH,EAAW,IAAI,YAAYG,CAAE,EAAE,QACrCF,EAAO,CACd,cAAQ,MAAM,gCAAgCE,CAAE,IAAKF,CAAK,EACpDA,CAAA,CAEV"}