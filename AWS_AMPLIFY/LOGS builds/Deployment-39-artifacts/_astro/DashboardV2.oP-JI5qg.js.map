{"version":3,"mappings":"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","names":["isBrowser","ChartJS","registerChartComponents","chartModule","__vitePreload","n","error","StatCard","title","value","color","darkMode","translationKey","currentLang","displayTitle","t","jsxs","jsx","SectionTitle","number","GenderCriaChart","data","setCurrentLang","useState","useEffect","storedLang","handleLanguageChange","e","formattedData","key","labelsMap","chartData","Pie","DistribucionAnualChart","valor","years","year","a","b","Bar","items","context","DistribucionMensualChart","meses","nombresMeses","distribucionPorMes","clave","mes","nombreMes","valoresMeses","getMaxYear","distribucion","entries","maxEntry","max","current","getMinYear","entriesConValor","entry","minEntry","min","getFirstYear","añosConPartos","_","getLastYear","ultimoAño","partosUltimoAño","getPartosCurrentYear","currentYear","PartosSection","statsData","partosData","loading","userLanguage","Fragment","ArcElement","Tooltip","Legend","ResumenOriginalCard","getCurrentLanguage","stats","setStats","animalesDetallados","setAnimalesDetallados","periodoData","setPeriodoData","setLoading","setError","optimizedResponse","apiService","err","errorMsg","statsResponse","animalesResponse","periodoResponse","fallbackErr","fallbackMsg","totalAnimals","activeMales","inactiveMales","activeFemales","inactiveFemales","activeAnimals","inactiveAnimals","nursing0","nursing1","nursing2","label","total","percentage","DashboardV2","setStatsData","setPartosData","setDarkMode","logs","setLogs","addLog","message","isError","formattedMessage","prev","showSkeletonLoader","loadFromCache","cachedData","parsedData","cacheTime","saveToCache","cacheData","partosResponse","isDarkMode","observer","mutations","mutation","isDark","toggleTheme"],"ignoreList":[],"sources":["../../../src/utils/chartConfig.ts","../../../src/components/dashboard/components/UIComponents.tsx","../../../src/components/dashboard/components/ChartComponents.tsx","../../../src/components/dashboard/sections/PartosSection.tsx","../../../src/components/dashboardv2/cards/ResumenOriginalCard.tsx","../../../src/components/dashboardv2/DashboardV2.tsx"],"sourcesContent":["/**\n * chartConfig.ts\n * Configuración y registro de Chart.js compatible con SSR\n * \n * Este archivo gestiona la importación dinámica de Chart.js para evitar errores en SSR\n * ya que Chart.js depende de APIs del navegador que no existen en el servidor.\n */\n\n// Verificar si estamos en un entorno de navegador para evitar errores en SSR\nconst isBrowser = typeof window !== 'undefined';\n\n// Declare los placeholders para usar en el código\nlet ChartJS: any = {};\n\n/**\n * Registra los componentes de Chart.js de forma dinámica solo en el cliente\n * Esta función debe ser llamada después de que el componente se monte en el cliente\n */\nexport async function registerChartComponents(): Promise<void> {\n  // Solo ejecutar en el navegador, no en SSR\n  if (!isBrowser) {\n    console.log('⏩ Saltando registro de Chart.js en entorno SSR');\n    return;\n  }\n\n  try {\n    // Importación dinámica de Chart.js\n    const chartModule = await import('chart.js');\n    \n    // Asignar Chart del módulo importado\n    ChartJS = chartModule.Chart;\n    \n    // Registrar los componentes necesarios\n    ChartJS.register(\n      chartModule.CategoryScale,\n      chartModule.LinearScale,\n      chartModule.PointElement,\n      chartModule.LineElement,\n      chartModule.BarElement,\n      chartModule.ArcElement,\n      chartModule.DoughnutController,\n      chartModule.PieController,\n      chartModule.BarController,\n      chartModule.LineController,\n      chartModule.ScatterController,\n      chartModule.RadarController,\n      chartModule.TimeScale,\n      chartModule.Tooltip,\n      chartModule.Legend\n    );\n    \n    console.log('✅ Componentes de Chart.js registrados correctamente');\n  } catch (error) {\n    console.error('Error al cargar Chart.js:', error);\n  }\n}\n\n// Exportar Chart para usarlo en los componentes\nexport { ChartJS };\n","import React from 'react';\nimport { t } from '../../../i18n/config';\n\n// Componentes UI extraídos directamente del Dashboard original\n// IMPORTANTE: Mantienen EXACTAMENTE la misma apariencia visual\n\n// Renderizar tarjeta de estadísticas\nexport const StatCard = ({ title, value, color, darkMode, translationKey }: { \n  title: string, \n  value: number | string, \n  color: string,\n  darkMode: boolean,\n  translationKey?: string // Nueva propiedad opcional para traducción\n}) => {\n  // Obtener idioma actual del localStorage\n  const currentLang = localStorage.getItem('userLanguage') || 'es';\n  \n  // Usar traducción si hay clave disponible\n  const displayTitle = translationKey ? t(translationKey, currentLang) : title;\n  return (\n    <div \n      className={`${color}`} \n      style={{\n        width: '100%',\n        padding: '0.75rem',\n        borderRadius: '0.5rem',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        marginBottom: '0.5rem',\n        border: darkMode ? '1px solid rgba(255, 255, 255, 0.1)' : '1px solid rgba(0, 0, 0, 0.1)',\n        boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'\n      }}\n    >\n      <h3 style={{color: 'white', fontWeight: 'bold', marginBottom: '0.25rem'}}>{displayTitle}</h3>\n      <p style={{color: 'white', fontSize: '1.75rem', fontWeight: 'bold', margin: 0}}>{value}</p>\n    </div>\n  );\n};\n\n// Renderizar título de sección con número circular\nexport const SectionTitle = ({ number, title, darkMode, translationKey }: { \n  number: string, \n  title: string,\n  darkMode: boolean,\n  translationKey?: string // Nueva propiedad opcional para traducción\n}) => {\n  // Obtener idioma actual del localStorage\n  const currentLang = localStorage.getItem('userLanguage') || 'es';\n  \n  // Usar traducción si hay clave disponible\n  const displayTitle = translationKey ? t(translationKey, currentLang) : title;\n  return (\n    <div style={{\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: '0.5rem',\n      marginTop: '1rem',\n      padding: '0.5rem',\n      // Verde lima corporativo más claro que el principal\n      backgroundColor: darkMode ? '#7cb518' : '#a4cc44', // Verde lima en modo oscuro, verde lima claro en modo claro\n      border: 'none',\n      borderRadius: '0.25rem', // Añadir bordes redondeados\n    }}>\n      <div style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: '1.5rem',\n        height: '1.5rem',\n        borderRadius: '9999px',\n        backgroundColor: '#fff', // Fondo blanco\n        color: '#88c425', // Color verde lima corporativo para el número\n        fontWeight: 'bold',\n        marginRight: '0.5rem',\n      }}>\n        {number}\n      </div>\n      <h2 style={{\n        fontSize: '1.25rem',\n        fontWeight: 'bold',\n        color: 'white', // Texto blanco para ambos modos\n      }}>{displayTitle}</h2>\n    </div>\n  );\n};\n\n// Renderizar tarjeta de dashboard para gráficos\nexport const DashboardCard = ({ title, children, className = '', darkMode }: { \n  title: string, \n  children: React.ReactNode, \n  className?: string,\n  darkMode: boolean\n}) => {\n  return (\n    <div \n      style={{\n        backgroundColor: darkMode ? '#111827' : '#ffffff',\n        color: darkMode ? '#f9fafb' : '#111827',\n        borderRadius: '0.5rem',\n        padding: '1rem',\n        marginBottom: '1rem',\n        border: darkMode ? '1px solid #374151' : '1px solid rgba(0, 0, 0, 0.1)',\n        boxShadow: darkMode ? '0 4px 6px rgba(0, 0, 0, 0.3)' : '0 2px 4px rgba(0, 0, 0, 0.1)'\n      }}\n      className={className}\n    >\n      <h3 \n        style={{\n          fontSize: '1.125rem',\n          fontWeight: 'bold',\n          marginBottom: '1rem',\n          color: darkMode ? '#f9fafb' : '#111827',\n        }}\n      >\n        {title}\n      </h3>\n      {children}\n    </div>\n  );\n};\n\n// Renderizar etiqueta para tarjeta\nexport const CardLabel = ({ children, darkMode }: { \n  children: React.ReactNode,\n  darkMode: boolean\n}) => {\n  return (\n    <div \n      style={{\n        color: darkMode ? '#d1d5db' : '#4b5563',\n        fontSize: '0.875rem',\n        fontWeight: '500',\n        marginBottom: '0.25rem'\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\n// Renderizar divisor para tarjeta\nexport const CardDivider = ({ children, darkMode }: { \n  children: React.ReactNode,\n  darkMode: boolean\n}) => {\n  return (\n    <div \n      style={{\n        borderBottom: darkMode ? '1px solid rgba(255, 255, 255, 0.1)' : '1px solid rgba(0, 0, 0, 0.1)',\n        paddingBottom: '0.5rem',\n        marginBottom: '0.5rem'\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Pie, Bar, Line } from 'react-chartjs-2';\nimport { t } from '../../../i18n/config';\n\n// Importar la configuración de Chart.js\nimport { registerChartComponents } from '../../../utils/chartConfig';\n\n// Registrar los componentes de Chart.js antes de usarlos\nregisterChartComponents();\n\n// Colores estandarizados para los gráficos (coinciden con los colores de las tarjetas)\nconst CHART_COLORS = {\n  TOROS_ACTIVOS: '#3b82f6', // Azul para toros activos\n  FALLECIDOS: '#f97316',    // Naranja para fallecidos (original)\n  VACAS: '#ec4899',         // Rosa para vacas\n  VACAS_AMAM_0: '#f59e0b',  // Ámbar para vacas sin amamantar\n  VACAS_AMAM_1: '#06b6d4',  // Cyan para vacas con 1 ternero\n  VACAS_AMAM_2: '#ef4444'   // Rojo para vacas con 2 terneros\n};\n\n// Componentes de gráficos extraídos directamente del dashboard original\n\n// Renderizar gráfico de distribución por género\nexport const GenderChart = ({ data, darkMode }: { data: Record<string, number> | undefined, darkMode: boolean }) => {\n  // Estado para el idioma actual\n  const [currentLang, setCurrentLang] = useState('es');\n  \n  // Obtener el idioma actual del localStorage\n  useEffect(() => {\n    const storedLang = localStorage.getItem('userLanguage') || 'es';\n    setCurrentLang(storedLang);\n    \n    // Escuchar cambios de idioma\n    const handleLanguageChange = (e: StorageEvent) => {\n      if (e.key === 'userLanguage') {\n        setCurrentLang(e.newValue || 'es');\n      }\n    };\n    \n    window.addEventListener('storage', handleLanguageChange);\n    return () => window.removeEventListener('storage', handleLanguageChange);\n  }, []);\n  \n  if (!data) return null;\n  \n  // Si el objeto está vacío o todos los valores son 0, mostrar un gráfico con valores de ejemplo\n  const totalValue = Object.values(data).reduce((sum, value) => sum + value, 0);\n  if (Object.keys(data).length === 0 || totalValue === 0) {\n    data = {\n      [t('dashboard.males', currentLang)]: 0,\n      [t('dashboard.females', currentLang)]: 0,\n      [t('dashboard.deceased', currentLang)]: 0\n    };\n  }\n  \n  // Mapear etiquetas y colores\n  const labels = Object.keys(data);\n  \n  const chartData = {\n    labels,\n    datasets: [\n      {\n        label: t('dashboard.population_analysis', currentLang),\n        data: Object.values(data),\n        backgroundColor: [\n          `${CHART_COLORS.TOROS_ACTIVOS}CC`, // Azul - Toros (con transparencia)\n          `${CHART_COLORS.VACAS}CC`,         // Rosa - Vacas (con transparencia)\n          `${CHART_COLORS.FALLECIDOS}CC`,    // Naranja - Fallecidos (con transparencia)\n        ],\n        borderColor: [\n          CHART_COLORS.TOROS_ACTIVOS,\n          CHART_COLORS.VACAS,\n          CHART_COLORS.FALLECIDOS,\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n  \n  return <Pie data={chartData} />\n};\n\n// Renderizar gráfico de distribución por género de crías\nexport const GenderCriaChart = ({ data, darkMode }: { data: Record<string, number> | undefined, darkMode: boolean }) => {\n  // Estado para el idioma actual\n  const [currentLang, setCurrentLang] = useState('es');\n  \n  // Obtener el idioma actual del localStorage\n  useEffect(() => {\n    const storedLang = localStorage.getItem('userLanguage') || 'es';\n    setCurrentLang(storedLang);\n    \n    // Escuchar cambios de idioma\n    const handleLanguageChange = (e: StorageEvent) => {\n      if (e.key === 'userLanguage') {\n        setCurrentLang(e.newValue || 'es');\n      }\n    };\n    \n    window.addEventListener('storage', handleLanguageChange);\n    return () => window.removeEventListener('storage', handleLanguageChange);\n  }, []);\n\n  if (!data) return null;\n  \n  // Datos específicos para machos y hembras\n  let formattedData: Record<string, number> = {\n    'M': 0,\n    'F': 0,\n    'esforrada': 0\n  };\n  \n  // Asignar datos de entrada a las categorías correctas\n  if (data) {\n    // Verificar si hemos recibido los datos ya en el formato correcto\n    // Verificamos si las claves son exactamente M, F y posiblemente esforrada\n    const hasExpectedKeys = 'M' in data && 'F' in data;\n    \n    if (hasExpectedKeys) {\n      // Si ya están en el formato esperado, usamos directamente\n      formattedData = {\n        'M': data['M'] || 0,\n        'F': data['F'] || 0,\n        'esforrada': data['esforrada'] || 0\n      };\n    } else {\n      // Procesamiento estándar si no están en el formato esperado\n      Object.entries(data).forEach(([key, value]) => {\n        if (key === 'M' || key === 'm') {\n          formattedData['M'] += value;\n        } else if (key === 'F' || key === 'f') {\n          formattedData['F'] += value;\n        } else if (key === 'esforrada' || key === 'ESFORRADA') {\n          formattedData['esforrada'] += value;\n        }\n      });\n    }\n  }\n  \n  // Preparar etiquetas amigables para el usuario\n  const labelsMap: Record<string, string> = {\n    'M': t('dashboard.males', currentLang),\n    'F': t('dashboard.females', currentLang),\n    'esforrada': t('dashboard.others', currentLang)\n  };\n  \n  const labels = Object.keys(formattedData).map(key => labelsMap[key] || key);\n  \n  const chartData = {\n    labels,\n    datasets: [\n      {\n        label: 'Género de las crías',\n        data: Object.values(formattedData),\n        backgroundColor: [\n          'rgba(59, 130, 246, 0.7)', // Azul - Machos\n          'rgba(236, 72, 153, 0.7)', // Rosa - Hembras\n          'rgba(249, 115, 22, 0.7)', // Naranja - Otros\n        ],\n        borderColor: [\n          'rgba(59, 130, 246, 1)',\n          'rgba(236, 72, 153, 1)',\n          'rgba(249, 115, 22, 1)',\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n  \n  return <Pie data={chartData} />\n};\n\n// Renderizar gráfico de estado\nexport const StatusChart = ({ data, darkMode }: { data: Record<string, number> | undefined, darkMode: boolean }) => {\n  if (!data) return null;\n  \n  // Si el objeto está vacío o todos los valores son 0, mostrar un gráfico con valores de ejemplo\n  const totalValue = Object.values(data).reduce((sum, value) => sum + value, 0);\n  if (Object.keys(data).length === 0 || totalValue === 0) {\n    data = {\n      'Activos': 0,\n      'Inactivos': 0\n    };\n  }\n  \n  // Mapear etiquetas especiales\n  const labels = Object.keys(data).map(key => {\n    if (key === 'OK') return 'Activos';\n    if (key === 'DEF') return 'Fallecidos';\n    return key;\n  });\n  \n  const chartData = {\n    labels,\n    datasets: [\n      {\n        label: 'Estado',\n        data: Object.values(data),\n        backgroundColor: [\n          'rgba(16, 185, 129, 0.7)', // Verde\n          'rgba(239, 68, 68, 0.7)', // Rojo\n        ],\n        borderColor: [\n          'rgba(16, 185, 129, 1)',\n          'rgba(239, 68, 68, 1)',\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n  \n  return <Pie data={chartData} />\n};\n\n// Renderizar gráfico de quadra\nexport const QuadraChart = ({ data, darkMode }: { data: Record<string, number> | undefined, darkMode: boolean }) => {\n  if (!data) return null;\n  \n  // Si no hay datos válidos, mostrar gráfico con valores ejemplo\n  const totalValue = Object.values(data).reduce((sum, value) => sum + value, 0);\n  if (Object.keys(data).length === 0 || totalValue === 0) {\n    data = {\n      'Cuadra A': 0,\n      'Cuadra B': 0,\n      'Cuadra C': 0\n    };\n  }\n  \n  // Ordenar datos por valor (mayor a menor)\n  const sortedEntries = Object.entries(data)\n    .sort((a, b) => b[1] - a[1])\n    .slice(0, 10); // Limitar a 10 elementos para mejor visualización\n    \n  const chartData = {\n    labels: sortedEntries.map(([key]) => key),\n    datasets: [\n      {\n        label: 'Distribución por Origen',\n        data: sortedEntries.map(([_, value]) => value),\n        backgroundColor: 'rgba(59, 130, 246, 0.5)',\n        borderColor: 'rgba(59, 130, 246, 1)',\n        borderWidth: 1,\n      },\n    ],\n  };\n  \n  const options = {\n    scales: {\n      y: {\n        beginAtZero: true\n      }\n    }\n  };\n  \n  return <Bar data={chartData} options={options} />\n};\n\n// Renderizar gráfico de distribución por mes\nexport const MonthlyChart = ({ data, darkMode }: { data: Record<string, number> | undefined, darkMode: boolean }) => {\n  if (!data) return null;\n  \n  // Aseguramos que tengamos un objeto con todos los meses inicializados a 0\n  const completeMonthsData: Record<string, number> = {\n    'Ene': 0, 'Feb': 0, 'Mar': 0, 'Abr': 0, 'May': 0, 'Jun': 0,\n    'Jul': 0, 'Ago': 0, 'Sep': 0, 'Oct': 0, 'Nov': 0, 'Dic': 0\n  };\n  \n  // Convertimos las claves como '2023-01' o '2023-1' a 'Ene', '2023-02' a 'Feb', etc.\n  const monthsMap: Record<string, string> = {\n    '01': 'Ene', '1': 'Ene',\n    '02': 'Feb', '2': 'Feb',\n    '03': 'Mar', '3': 'Mar',\n    '04': 'Abr', '4': 'Abr',\n    '05': 'May', '5': 'May',\n    '06': 'Jun', '6': 'Jun',\n    '07': 'Jul', '7': 'Jul',\n    '08': 'Ago', '8': 'Ago',\n    '09': 'Sep', '9': 'Sep',\n    '10': 'Oct',\n    '11': 'Nov',\n    '12': 'Dic'\n  };\n  \n  // Procesar datos para agrupar por mes sin importar el año\n  if (data && Object.keys(data).length > 0) {\n    Object.entries(data).forEach(([key, value]) => {\n      // Si la clave tiene el formato 'YYYY-MM' o similar, extrae el mes\n      const monthMatch = key.match(/-(\\d{1,2})$/) || key.match(/-(\\d{1,2})-/) || key.match(/^(\\d{1,2})$/);\n      if (monthMatch && monthMatch[1]) {\n        const monthKey = monthsMap[monthMatch[1]] || key;\n        if (monthKey in completeMonthsData) {\n          completeMonthsData[monthKey] += value;\n        }\n      } else if (key in completeMonthsData) {\n        // Si ya está en el formato correcto (Ene, Feb, etc.)\n        completeMonthsData[key] += value;\n      }\n    });\n  }\n  \n  // Ordenar meses correctamente (Ene, Feb, Mar, ...)\n  const monthOrder = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'];\n  \n  const chartData = {\n    labels: monthOrder,\n    datasets: [\n      {\n        label: 'Partos por mes',\n        data: monthOrder.map(month => completeMonthsData[month]),\n        backgroundColor: 'rgba(59, 130, 246, 0.7)',\n        borderColor: 'rgba(59, 130, 246, 1)',\n        borderWidth: 1,\n      },\n    ],\n  };\n  \n  const options = {\n    scales: {\n      y: {\n        beginAtZero: true,\n        ticks: {\n          // Fuerza a que los valores en el eje Y sean enteros\n          stepSize: 1,\n          precision: 0\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: true,\n        position: 'top' as const\n      }\n    }\n  };\n  \n  return <Bar data={chartData} options={options} />\n};\n\n// Renderizar gráfico de tendencia\nexport const TrendChart = ({ data, darkMode }: { data: Record<string, number> | undefined, darkMode: boolean }) => {\n  if (!data) return null;\n  \n  // Filtrar para mostrar solo los años con partos y ordenarlos\n  const sortedKeys = Object.keys(data)\n    .filter(year => data[year] > 0)  // Solo años con partos\n    .sort((a, b) => parseInt(a) - parseInt(b));\n  \n  const chartData = {\n    labels: sortedKeys,\n    datasets: [\n      {\n        label: 'Partos por año',\n        data: sortedKeys.map(year => data[year]),\n        borderColor: '#3b82f6',\n        backgroundColor: 'rgba(59, 130, 246, 0.5)',\n        tension: 0.4,\n      },\n    ],\n  };\n\n  return <Line data={chartData} options={{\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Año'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Número de partos'\n        },\n        beginAtZero: true\n      }\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          title: (items) => `Año ${items[0].label}`,\n          label: (context) => `Partos: ${context.formattedValue}`\n        }\n      }\n    }\n  }} />\n};\n\n// Componente para gráfico de distribución anual detallada\nexport const DistribucionAnualChart = ({ darkMode, data }: { darkMode: boolean, data?: Record<string, number> }) => {\n  // Estado para el idioma actual\n  const [currentLang, setCurrentLang] = useState('es');\n  \n  // Obtener el idioma actual del localStorage\n  useEffect(() => {\n    const storedLang = localStorage.getItem('userLanguage') || 'es';\n    setCurrentLang(storedLang);\n    \n    // Escuchar cambios de idioma\n    const handleLanguageChange = (e: StorageEvent) => {\n      if (e.key === 'userLanguage') {\n        setCurrentLang(e.newValue || 'es');\n      }\n    };\n    \n    window.addEventListener('storage', handleLanguageChange);\n    return () => window.removeEventListener('storage', handleLanguageChange);\n  }, []);\n  \n  // Usar datos de la API o valores por defecto si no hay datos\n  const datosReales = data || {};\n  \n  // Verificar si tenemos datos\n  const tieneValores = Object.values(datosReales).some(valor => valor > 0);\n  \n  // Si no hay datos, mostrar mensaje\n  if (!tieneValores) {\n    return (\n      <div style={{ \n        height: '100%', \n        display: 'flex', \n        alignItems: 'center', \n        justifyContent: 'center',\n        color: darkMode ? '#d1d5db' : '#6b7280'\n      }}>\n        {currentLang === 'ca' ? \"No hi ha dades disponibles\" : \"No hay datos disponibles\"}\n      </div>\n    );\n  }\n  \n  // Verificar si tenemos datos válidos\n  if (!data || typeof data !== 'object') {\n    console.error('No se recibieron datos válidos para el gráfico anual');\n    return (\n      <div style={{ \n        height: '100%', \n        display: 'flex', \n        alignItems: 'center', \n        justifyContent: 'center',\n        color: darkMode ? '#d1d5db' : '#6b7280'\n      }}>\n        {currentLang === 'ca' ? \"No hi ha dades disponibles\" : \"No hay datos disponibles\"}\n      </div>\n    );\n  }\n  \n  // Filtrar y ordenar los años que tienen partos (valor > 0)\n  const years = Object.keys(data)\n    .filter(year => typeof data[year] === 'number' && data[year] > 0)\n    .sort((a, b) => parseInt(a) - parseInt(b));\n  \n  // IMPORTANTE: SOLO usar datos dinámicos del backend\n  const chartData = {\n    labels: years,\n    datasets: [\n      {\n        label: currentLang === 'ca' ? 'Parts per any' : 'Partos por año',\n        data: years.map(year => {\n          // Verificar que data exista y tenga la propiedad del año\n          return data && typeof data === 'object' && year in data ? data[year] : 0;\n        }),\n        backgroundColor: '#10b981', // Verde esmeralda\n        borderColor: '#059669',\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  return <Bar data={chartData} options={{\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Año'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Número de partos'\n        },\n        beginAtZero: true\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        callbacks: {\n          title: (items) => `Año ${items[0].label}`,\n          label: (context) => `Partos: ${context.formattedValue}`\n        }\n      }\n    }\n  }} />\n};\n\n// Componente para gráfico de distribución mensual\nexport const DistribucionMensualChart = ({ darkMode, data }: { darkMode: boolean, data?: Record<string, number> }) => {\n  \n  // Estado para el idioma actual\n  const [currentLang, setCurrentLang] = useState('es');\n  \n  // Obtener el idioma actual del localStorage\n  useEffect(() => {\n    const storedLang = localStorage.getItem('userLanguage') || 'es';\n    setCurrentLang(storedLang);\n    \n    // Escuchar cambios de idioma\n    const handleLanguageChange = (e: StorageEvent) => {\n      if (e.key === 'userLanguage') {\n        setCurrentLang(e.newValue || 'es');\n      }\n    };\n    \n    window.addEventListener('storage', handleLanguageChange);\n    return () => window.removeEventListener('storage', handleLanguageChange);\n  }, []);\n  \n  // Nombres de los meses en orden\n  const meses = [\n    'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',\n    'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'\n  ];\n  \n  // Nombres de los meses en catalán\n  const mesesCat = [\n    'Gener', 'Febrer', 'Març', 'Abril', 'Maig', 'Juny',\n    'Juliol', 'Agost', 'Setembre', 'Octubre', 'Novembre', 'Desembre'\n  ];\n  \n  // Determinar qué nombres de meses usar según el idioma\n  const nombresMeses = currentLang === 'ca' ? mesesCat : meses;\n  \n  // Procesar los datos que vienen del API\n  // Definir el tipo para la distribución por mes\n  type DistribucionMensual = Record<string, number>;\n  \n  // Inicializar con valores por defecto para todos los meses\n  const distribucionPorMesInicial: DistribucionMensual = {\n    \"Enero\": 0, \"Febrero\": 0, \"Marzo\": 0, \"Abril\": 0, \"Mayo\": 0, \"Junio\": 0,\n    \"Julio\": 0, \"Agosto\": 0, \"Septiembre\": 0, \"Octubre\": 0, \"Noviembre\": 0, \"Diciembre\": 0\n  };\n  \n  // Variable para almacenar los datos procesados\n  let distribucionPorMes: DistribucionMensual = {...distribucionPorMesInicial};\n  \n  if (data && typeof data === 'object') {\n    // Verificar si los datos vienen en el formato por_mes\n    if ('por_mes' in data && data.por_mes && typeof data.por_mes === 'object') {\n      distribucionPorMes = data.por_mes as DistribucionMensual;\n    } \n    // Verificar si los datos contienen directamente los nombres de meses\n    else if ('Enero' in data || 'enero' in data) {\n      distribucionPorMes = data as DistribucionMensual;\n    } \n    // Procesar datos en formato año-mes\n    else {\n      // Procesar cada clave del objeto data buscando patrones de año-mes\n      Object.entries(data).forEach(([clave, valor]) => {\n        // Verificar si la clave tiene el formato \"YYYY-MM\"\n        if (clave.match(/^\\d{4}-\\d{2}$/)) {\n          const mes = parseInt(clave.split('-')[1]);\n          if (mes >= 1 && mes <= 12) {\n            const nombreMes = meses[mes - 1]; // -1 porque los meses van de 0-11 en JS\n            if (typeof valor === 'number') {\n              distribucionPorMes[nombreMes] += valor;\n            }\n          }\n        }\n      });\n    }\n  }\n  \n  // Extraer valores de cada mes en orden para usar en el gráfico\n  const valoresMeses = meses.map(mes => {\n    // Cada mes ya está inicializado con su valor por defecto (0)\n    // Devolvemos directamente el valor del mes de distribucionPorMes\n    return distribucionPorMes[mes] || 0;\n  });\n  \n  const chartData = {\n    labels: nombresMeses,\n    datasets: [\n      {\n        label: currentLang === 'ca' ? 'Parts per mes' : 'Partos por mes',\n        data: valoresMeses,\n        backgroundColor: '#3b82f6', // Azul\n        borderColor: '#2563eb',\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  return <Bar data={chartData} options={{\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Mes'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Número de partos'\n        },\n        beginAtZero: true\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      },\n      tooltip: {\n        callbacks: {\n          title: (items) => items[0].label,\n          label: (context) => `Partos: ${context.formattedValue}`\n        }\n      }\n    }\n  }} />\n};\n","import React, { useEffect, useState } from 'react';\nimport { MonthlyChart, GenderCriaChart, TrendChart, DistribucionAnualChart, DistribucionMensualChart } from '../components/ChartComponents';\nimport { StatCard, DashboardCard, CardLabel } from '../components/UIComponents';\nimport type { DashboardStats, PartosStats } from '../types';\nimport { t } from '../../../i18n/config';\n\n// Función para obtener el año con más partos\nconst getMaxYear = (distribucion?: Record<string, number>) => {\n  if (!distribucion || Object.keys(distribucion).length === 0) {\n    return 'N/A';\n  }\n\n  const entries = Object.entries(distribucion);\n  if (entries.length === 0) return 'N/A';\n  \n  const maxEntry = entries.reduce((max, current) => {\n    return current[1] > max[1] ? current : max;\n  }, entries[0]);\n  \n  return `${maxEntry[0]} (${maxEntry[1]} partos)`;\n};\n\n// Función para obtener el año con menos partos\nconst getMinYear = (distribucion?: Record<string, number>) => {\n  if (!distribucion || Object.keys(distribucion).length === 0) {\n    return 'N/A';\n  }\n\n  // Filtrar valores mayores que 0\n  const entriesConValor = Object.entries(distribucion).filter(entry => entry[1] > 0);\n  \n  if (entriesConValor.length === 0) return 'N/A';\n  \n  const minEntry = entriesConValor.reduce((min, current) => {\n    return current[1] < min[1] ? current : min;\n  }, entriesConValor[0]);\n  \n  return `${minEntry[0]} (${minEntry[1]} parto${minEntry[1] !== 1 ? 's' : ''})`;\n};\n\n// Función para obtener el primer año con partos\nconst getFirstYear = (distribucion?: Record<string, number>) => {\n  if (!distribucion || Object.keys(distribucion).length === 0) {\n    return 'N/A';\n  }\n\n  // Filtrar años con al menos un parto\n  const añosConPartos = Object.entries(distribucion)\n    .filter(([_, value]) => value > 0)\n    .map(([year]) => year);\n  \n  if (añosConPartos.length === 0) return 'N/A';\n  \n  // Ordenar años numéricamente\n  const primerAño = añosConPartos.sort((a, b) => parseInt(a) - parseInt(b))[0];\n  \n  return primerAño;\n};\n\n// Función para obtener el último año con partos\nconst getLastYear = (distribucion?: Record<string, number>) => {\n  if (!distribucion || Object.keys(distribucion).length === 0) {\n    return 'N/A';\n  }\n\n  // Filtrar años con al menos un parto\n  const añosConPartos = Object.entries(distribucion)\n    .filter(([_, value]) => value > 0)\n    .map(([year]) => year);\n  \n  if (añosConPartos.length === 0) return 'N/A';\n  \n  // Ordenar años numéricamente\n  const ultimoAño = añosConPartos.sort((a, b) => parseInt(b) - parseInt(a))[0];\n  const partosUltimoAño = distribucion[ultimoAño];\n  \n  return `${ultimoAño} (${partosUltimoAño} parto${partosUltimoAño !== 1 ? 's' : ''})`;\n};\n\n// Función para obtener los partos del año actual\nconst getPartosCurrentYear = (distribucion?: Record<string, number>) => {\n  if (!distribucion) return 0;\n  \n  const currentYear = new Date().getFullYear().toString();\n  return distribucion[currentYear] || 0;\n};\n\n// Función para obtener el total de partos\nconst getTotalPartos = (distribucion?: Record<string, number>) => {\n  if (!distribucion || Object.keys(distribucion).length === 0) {\n    return 0;\n  }\n\n  return Object.values(distribucion).reduce((total, count) => total + count, 0);\n};\n\n// Sección de Partos extraída directamente del dashboard original\n// EXACTAMENTE con la misma estructura visual\ninterface PartosSectionProps {\n  statsData: DashboardStats | null;\n  partosData: PartosStats | null;\n  darkMode: boolean;\n  loading: boolean;\n  error: string | null;\n}\n\nconst PartosSection: React.FC<PartosSectionProps> = ({ \n  statsData, \n  partosData,\n  darkMode, \n  loading, \n  error \n}) => {\n  // Obtener idioma actual del localStorage\n  const [currentLang, setCurrentLang] = useState('es');\n  \n  // Obtener idioma actual cuando se carga el componente\n  useEffect(() => {\n    const userLanguage = localStorage.getItem('userLanguage');\n    if (userLanguage) {\n      setCurrentLang(userLanguage);\n    }\n    \n    // Función para manejar cambios de idioma\n    const handleLanguageChange = (e: StorageEvent) => {\n      if (e.key === 'userLanguage') {\n        setCurrentLang(e.newValue || 'es');\n      }\n    };\n    \n    window.addEventListener('storage', handleLanguageChange);\n    \n    return () => {\n      window.removeEventListener('storage', handleLanguageChange);\n    };\n  }, []);\n  \n  // DEPURACIÓN: Ver exactamente qué datos están llegando\n  useEffect(() => {\n    if (statsData && statsData.partos) {\n      console.log('DATOS MENSUALES RECIBIDOS:', statsData.partos.por_mes);\n      console.log('TIPO DE DATOS:', typeof statsData.partos.por_mes);\n      console.log('CLAVES:', Object.keys(statsData.partos.por_mes || {}));\n      console.log('VALORES:', Object.values(statsData.partos.por_mes || {}));\n      \n      console.log('DATOS ANUALES RECIBIDOS:', statsData.partos.distribucion_anual);\n      console.log('TIPO DE DATOS:', typeof statsData.partos.distribucion_anual);\n      console.log('CLAVES:', Object.keys(statsData.partos.distribucion_anual || {}));\n    }\n  }, [statsData]);\n  if (loading) {\n    return <div className=\"col-span-12 text-center py-4\">{t('dashboard.loading', currentLang)}</div>;\n  }\n  \n  if (error) {\n    return (\n      <div className=\"col-span-12 text-center py-4 text-red-500\">\n        {t('dashboard.loading_error', currentLang)}: {error}\n      </div>\n    );\n  }\n  \n  if (!statsData || !partosData) {\n    return <div className=\"col-span-12 text-center py-4\">{t('common.no_results', currentLang)}</div>;\n  }\n  \n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n      {/* Resumen de Partos */}\n      <div className=\"dashboard-card\">\n        <h3 className=\"text-lg font-semibold mb-4\">{t('dashboard.partos_analysis', currentLang)}</h3>\n        <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: \"0.75rem\" }}>\n          <StatCard\n            title={t('dashboard.partos_count', currentLang)}\n            value={statsData.partos.total}\n            color=\"bg-blue-500\"\n            darkMode={darkMode}\n            translationKey=\"dashboard.partos_count\"\n          />\n          <StatCard\n            title={currentLang === 'ca' ? \"Maig\" : \"Mayo\"}\n            value={statsData.partos.ultimo_mes}\n            color=\"bg-cyan-500\"\n            darkMode={darkMode}\n          />\n        </div>\n        \n        <div className=\"mt-4\" style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: \"0.75rem\" }}>\n          {/* Partos del año actual (2025) */}\n          <StatCard\n            title={new Date().getFullYear().toString()}\n            value={getPartosCurrentYear(statsData.partos.distribucion_anual)}\n            color=\"bg-cyan-500\"\n            darkMode={darkMode}\n          />\n          <StatCard\n            title={currentLang === 'ca' ? \"Supervivència\" : \"Supervivencia\"}\n            value={`${((statsData.partos.tasa_supervivencia || 0) * 100).toFixed(1)}%`}\n            color=\"bg-emerald-500\"\n            darkMode={darkMode}\n          />\n        </div>\n      </div>\n      \n      {/* Distribución Mensual - NUEVA */}\n      <div className=\"dashboard-card\">\n        <h3 className=\"text-lg font-semibold mb-4\">{currentLang === 'ca' ? \"Distribució mensual\" : \"Distribución mensual\"}</h3>\n        <div style={{ height: \"300px\" }}>\n          <DistribucionMensualChart darkMode={darkMode} data={statsData.partos.por_mes} />\n        </div>\n        <div className=\"text-xs text-center mt-2\" style={{ color: darkMode ? '#d1d5db' : '#6b7280' }}>\n          {currentLang === 'ca' ? \"Distribució mensual de parts\" : \"Distribución mensual de partos\"}\n        </div>\n        <div className=\"text-xs text-center mt-1\" style={{ color: darkMode ? 'rgba(209, 213, 219, 0.6)' : 'rgba(107, 114, 128, 0.6)' }}>\n          <span style={{ fontSize: '9px' }}>\n            {currentLang === 'ca' \n              ? `Mes amb més parts: Març (46), mes amb menys parts: Agost (4)`\n              : `Mes con más partos: Marzo (46), mes con menos partos: Agosto (4)`\n            }\n          </span>\n        </div>\n      </div>\n      \n      {/* Distribución Anual Detallada - NUEVA */}\n      <div className=\"dashboard-card\">\n        <h3 className=\"text-lg font-semibold mb-4\">{currentLang === 'ca' ? \"Distribució anual detallada\" : \"Distribución anual detallada\"}</h3>\n        {/* Mostrar los datos de distribución anual que vienen directamente del backend */}\n        <div style={{ height: \"300px\" }}>\n          <DistribucionAnualChart \n            darkMode={darkMode} \n            data={statsData.partos.distribucion_anual} \n          />\n        </div>\n        \n        {/* DEPURACIÓN: Verificamos que estamos recibiendo los datos correctos del API */}\n        <pre style={{ display: 'none', fontSize: '8px', maxHeight: '80px', overflow: 'auto', margin: '0', padding: '4px', backgroundColor: darkMode ? '#1e293b' : '#f1f5f9', borderRadius: '4px' }}>\n          {JSON.stringify(statsData.partos.distribucion_anual, null, 2)}\n        </pre>\n        <div className=\"text-sm text-center mt-3\" style={{ color: darkMode ? '#d1d5db' : '#6b7280', fontWeight: 'bold' }}>\n          {currentLang === 'ca' ? \"Distribució anual de parts (dades reals)\" : \"Distribución anual de partos (datos reales)\"}\n        </div>\n        \n        {/* Información destacada sobre años con partos */}\n        <div className=\"grid grid-cols-2 gap-2 mt-3 mb-2\">\n          <div className=\"text-sm text-center p-2\" style={{ \n            backgroundColor: darkMode ? 'rgba(59, 130, 246, 0.2)' : 'rgba(59, 130, 246, 0.1)', \n            borderRadius: '6px',\n            fontWeight: 'semibold' \n          }}>\n            {currentLang === 'ca' \n              ? <>Any amb <strong>més</strong> parts:<br/><span className=\"text-lg font-bold\">{getMaxYear(statsData.partos.distribucion_anual)}</span></>\n              : <>Año con <strong>más</strong> partos:<br/><span className=\"text-lg font-bold\">{getMaxYear(statsData.partos.distribucion_anual)}</span></>\n            }\n          </div>\n          <div className=\"text-sm text-center p-2\" style={{ \n            backgroundColor: darkMode ? 'rgba(239, 68, 68, 0.2)' : 'rgba(239, 68, 68, 0.1)', \n            borderRadius: '6px',\n            fontWeight: 'semibold' \n          }}>\n            {currentLang === 'ca' \n              ? <>Any amb <strong>menys</strong> parts:<br/><span className=\"text-lg font-bold\">{getMinYear(statsData.partos.distribucion_anual)}</span></>\n              : <>Año con <strong>menos</strong> partos:<br/><span className=\"text-lg font-bold\">{getMinYear(statsData.partos.distribucion_anual)}</span></>\n            }\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-2 mt-1\">\n          <div className=\"text-sm text-center p-2\" style={{ \n            backgroundColor: darkMode ? 'rgba(16, 185, 129, 0.2)' : 'rgba(16, 185, 129, 0.1)', \n            borderRadius: '6px',\n            fontWeight: 'semibold' \n          }}>\n            {currentLang === 'ca' \n              ? <>Primer any amb parts:<br/><span className=\"text-lg font-bold\">{getFirstYear(statsData.partos.distribucion_anual)}</span></>\n              : <>Primer año con partos:<br/><span className=\"text-lg font-bold\">{getFirstYear(statsData.partos.distribucion_anual)}</span></>\n            }\n          </div>\n          <div className=\"text-sm text-center p-2\" style={{ \n            backgroundColor: darkMode ? 'rgba(245, 158, 11, 0.2)' : 'rgba(245, 158, 11, 0.1)', \n            borderRadius: '6px',\n            fontWeight: 'semibold' \n          }}>\n            {currentLang === 'ca' \n              ? <>Últim any amb parts:<br/><span className=\"text-lg font-bold\">{getLastYear(statsData.partos.distribucion_anual)}</span></>\n              : <>Último año con partos:<br/><span className=\"text-lg font-bold\">{getLastYear(statsData.partos.distribucion_anual)}</span></>\n            }\n          </div>\n        </div>\n        \n        <div className=\"text-sm text-center mt-3\" style={{ color: darkMode ? '#d1d5db' : '#6b7280', fontWeight: 'bold' }}>\n          {currentLang === 'ca' \n            ? <>Total: <span className=\"text-lg\">{statsData.partos.total} parts</span></>\n            : <>Total: <span className=\"text-lg\">{statsData.partos.total} partos</span></>\n          }\n        </div>\n      </div>\n\n      {/* Distribución por Género - CORREGIDA */}\n      <div className=\"dashboard-card\">\n        <h3 className=\"text-lg font-semibold mb-4\">{t('dashboard.gender_distribution', currentLang)}</h3>\n        <div style={{ height: \"270px\", display: \"flex\", justifyContent: \"center\" }}>\n          <GenderCriaChart data={statsData.partos.por_genero_cria} darkMode={darkMode} />\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-4 mt-4 mb-2\">\n          <div className=\"text-sm text-center p-2\" style={{ \n            backgroundColor: darkMode ? 'rgba(37, 99, 235, 0.2)' : 'rgba(37, 99, 235, 0.1)', \n            borderRadius: '6px',\n            border: '1px solid rgba(37, 99, 235, 0.3)',\n            boxShadow: '0 1px 2px rgba(0, 0, 0, 0.05)'\n          }}>\n            {currentLang === 'ca' \n              ? <>\n                <div className=\"font-semibold\">Mascles</div>\n                <div className=\"text-2xl font-bold mt-1\">{statsData.partos.por_genero_cria?.M || 0}</div>\n                <div className=\"text-xs mt-1\">({(((statsData.partos.por_genero_cria?.M || 0) / ((statsData.partos.por_genero_cria?.M || 0) + (statsData.partos.por_genero_cria?.F || 0) + (statsData.partos.por_genero_cria?.esforrada || 0))) * 100).toFixed(1)}% del total)</div>\n              </>\n              : <>\n                <div className=\"font-semibold\">Machos</div>\n                <div className=\"text-2xl font-bold mt-1\">{statsData.partos.por_genero_cria?.M || 0}</div>\n                <div className=\"text-xs mt-1\">({(((statsData.partos.por_genero_cria?.M || 0) / ((statsData.partos.por_genero_cria?.M || 0) + (statsData.partos.por_genero_cria?.F || 0) + (statsData.partos.por_genero_cria?.esforrada || 0))) * 100).toFixed(1)}% del total)</div>\n              </>\n            }\n          </div>\n          \n          <div className=\"text-sm text-center p-2\" style={{ \n            backgroundColor: darkMode ? 'rgba(236, 72, 153, 0.2)' : 'rgba(236, 72, 153, 0.1)', \n            borderRadius: '6px',\n            border: '1px solid rgba(236, 72, 153, 0.3)',\n            boxShadow: '0 1px 2px rgba(0, 0, 0, 0.05)'\n          }}>\n            {currentLang === 'ca' \n              ? <>\n                <div className=\"font-semibold\">Femelles</div>\n                <div className=\"text-2xl font-bold mt-1\">{statsData.partos.por_genero_cria?.F || 0}</div>\n                <div className=\"text-xs mt-1\">({(((statsData.partos.por_genero_cria?.F || 0) / ((statsData.partos.por_genero_cria?.M || 0) + (statsData.partos.por_genero_cria?.F || 0) + (statsData.partos.por_genero_cria?.esforrada || 0))) * 100).toFixed(1)}% del total)</div>\n              </>\n              : <>\n                <div className=\"font-semibold\">Hembras</div>\n                <div className=\"text-2xl font-bold mt-1\">{statsData.partos.por_genero_cria?.F || 0}</div>\n                <div className=\"text-xs mt-1\">({(((statsData.partos.por_genero_cria?.F || 0) / ((statsData.partos.por_genero_cria?.M || 0) + (statsData.partos.por_genero_cria?.F || 0) + (statsData.partos.por_genero_cria?.esforrada || 0))) * 100).toFixed(1)}% del total)</div>\n              </>\n            }\n          </div>\n        </div>\n        \n        {(statsData.partos.por_genero_cria?.esforrada || 0) > 0 && (\n          <div className=\"mt-2 text-sm text-center p-2\" style={{ \n            backgroundColor: darkMode ? 'rgba(107, 114, 128, 0.2)' : 'rgba(107, 114, 128, 0.1)', \n            borderRadius: '6px',\n            border: '1px solid rgba(107, 114, 128, 0.3)'\n          }}>\n            {currentLang === 'ca' \n              ? <>\n                <div className=\"font-semibold\">Esforrada</div>\n                <div className=\"text-lg font-bold mt-1\">{statsData.partos.por_genero_cria?.esforrada || 0}</div>\n                <div className=\"text-xs mt-1\">({(((statsData.partos.por_genero_cria?.esforrada || 0) / ((statsData.partos.por_genero_cria?.M || 0) + (statsData.partos.por_genero_cria?.F || 0) + (statsData.partos.por_genero_cria?.esforrada || 0))) * 100).toFixed(1)}% del total)</div>\n              </>\n              : <>\n                <div className=\"font-semibold\">Esforrada</div>\n                <div className=\"text-lg font-bold mt-1\">{statsData.partos.por_genero_cria?.esforrada || 0}</div>\n                <div className=\"text-xs mt-1\">({(((statsData.partos.por_genero_cria?.esforrada || 0) / ((statsData.partos.por_genero_cria?.M || 0) + (statsData.partos.por_genero_cria?.F || 0) + (statsData.partos.por_genero_cria?.esforrada || 0))) * 100).toFixed(1)}% del total)</div>\n              </>\n            }\n          </div>\n        )}\n\n        <div className=\"text-sm text-center mt-3\" style={{ color: darkMode ? '#d1d5db' : '#6b7280', fontWeight: 'bold' }}>\n          {currentLang === 'ca' \n            ? <>Total crías: <span className=\"text-lg\">{(statsData.partos.por_genero_cria?.M || 0) + (statsData.partos.por_genero_cria?.F || 0) + (statsData.partos.por_genero_cria?.esforrada || 0)}</span></>\n            : <>Total crías: <span className=\"text-lg\">{(statsData.partos.por_genero_cria?.M || 0) + (statsData.partos.por_genero_cria?.F || 0) + (statsData.partos.por_genero_cria?.esforrada || 0)}</span></>\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PartosSection;\n","import React, { useState, useEffect } from 'react';\nimport apiService from '../../../services/apiService';\nimport { Pie } from 'react-chartjs-2';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { t, getCurrentLanguage } from '../../../i18n/config';\n\n// Registrar componentes de Chart.js necesarios para el gráfico circular\nChartJS.register(ArcElement, Tooltip, Legend);\n\n// Interfaces\ninterface ResumenOriginalCardProps {\n  darkMode?: boolean;\n}\n\n// Componente principal\nconst ResumenOriginalCard: React.FC<ResumenOriginalCardProps> = ({\n  darkMode = false\n}) => {\n  // Obtener el idioma actual\n  const currentLang = getCurrentLanguage();\n  // Estados para datos\n  const [stats, setStats] = useState<any>(null);\n  const [animalesDetallados, setAnimalesDetallados] = useState<any>(null);\n  const [periodoData, setPeriodoData] = useState<any>(null);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Cargar datos al montar el componente usando el nuevo endpoint optimizado\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        setLoading(true);\n        console.log('Obteniendo datos para ResumenOriginalCard desde endpoint optimizado...');\n        \n        // IMPORTANTE: Usar el nuevo endpoint optimizado que combina las tres llamadas en una sola\n        // Esto mejora significativamente el rendimiento manteniendo datos dinámicos y reales\n        const optimizedResponse = await apiService.get('/dashboard/resumen-card');\n        \n        // Guardar resultados desde la respuesta combinada\n        setStats(optimizedResponse.stats);\n        setAnimalesDetallados(optimizedResponse.animales_detallados);\n        setPeriodoData(optimizedResponse.periodo);\n        \n        console.log('Datos obtenidos correctamente desde endpoint optimizado');\n        setLoading(false);\n        setError(null);\n      } catch (err) {\n        const errorMsg = err instanceof Error ? err.message : 'Error desconocido';\n        console.error(`Error cargando datos desde endpoint optimizado: ${errorMsg}`);\n        console.error('Intentando fallback a peticiones individuales...');\n        \n        // Si el nuevo endpoint falla, volvemos al método anterior como fallback\n        try {\n          const [statsResponse, animalesResponse, periodoResponse] = await Promise.all([\n            apiService.get('/dashboard/stats'),\n            apiService.get('/dashboard-detallado/animales-detallado'),\n            apiService.get('/dashboard-periodo/periodo-dinamico')\n          ]);\n          \n          setStats(statsResponse);\n          setAnimalesDetallados(animalesResponse);\n          setPeriodoData(periodoResponse);\n          setLoading(false);\n          setError(null);\n        } catch (fallbackErr) {\n          const fallbackMsg = fallbackErr instanceof Error ? fallbackErr.message : 'Error desconocido';\n          console.error(`Fallback también ha fallado: ${fallbackMsg}`);\n          setError('Error cargando datos del dashboard. Por favor, intenta de nuevo.');\n          setLoading(false);\n        }\n      }\n    };\n    \n    loadData();\n  }, []);\n\n  // Mostrar estado de carga\n  if (loading) {\n    return (\n      <div className=\"dashboard-card\" style={{ gridColumn: \"span 12\" }}>\n        <div className=\"flex items-center space-x-2\">\n          <svg className=\"animate-spin h-5 w-5 text-blue-500\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n          </svg>\n          <span>Cargando datos del panel de control...</span>\n        </div>\n      </div>\n    );\n  }\n\n  // Mostrar error si existe\n  if (error) {\n    return (\n      <div className=\"dashboard-card\" style={{ gridColumn: \"span 12\" }}>\n        <div className=\"p-4 bg-red-100 text-red-700 rounded-lg mb-4\">\n          <div className=\"flex items-center\">\n            <svg className=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n            {error}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Calcular totales usando los datos detallados (usando la estructura correcta del endpoint)\n  const totalAnimals = animalesDetallados?.total || 0;\n  const activeMales = animalesDetallados?.por_genero?.machos?.activos || 0;\n  const inactiveMales = animalesDetallados?.por_genero?.machos?.fallecidos || 0;\n  const activeFemales = animalesDetallados?.por_genero?.hembras?.activas || 0;\n  const inactiveFemales = animalesDetallados?.por_genero?.hembras?.fallecidas || 0;\n  const activeAnimals = animalesDetallados?.general?.activos || 0;\n  const inactiveAnimals = animalesDetallados?.general?.fallecidos || 0;\n  \n  // Datos de amamantamiento\n  const nursing0 = animalesDetallados?.por_alletar?.['0'] || 0;\n  const nursing1 = animalesDetallados?.por_alletar?.['1'] || 0;\n  const nursing2 = animalesDetallados?.por_alletar?.['2'] || 0;\n  \n  // Imprimir datos para debugging\n  console.log('DATOS DETALLADOS USADOS:', {\n    totalAnimals,\n    activeMales,\n    inactiveMales,\n    activeFemales,\n    inactiveFemales,\n    activeAnimals,\n    inactiveAnimals,\n    nursing0,\n    nursing1,\n    nursing2\n  });\n  \n  // También imprimir la respuesta original para verificar la estructura\n  console.log('RESPUESTA ORIGINAL:', animalesDetallados);\n\n  // Formato para fechas\n  const formatDate = (dateStr: string) => {\n    if (!dateStr) return 'N/A';\n    const [year, month, day] = dateStr.split('-');\n    return `${day}/${month}/${year}`;\n  };\n\n  return (\n    <div className={`dashboard-card ${darkMode ? 'bg-gray-800 text-white' : ''}`} style={{ gridColumn: \"span 12\" }}>\n      {/* Cabecera con período */}\n      <div className=\"flex justify-between items-center mb-4\">\n        {/* Título eliminado para evitar duplicación */}\n        {periodoData && (\n          <div className=\"text-sm bg-blue-100 text-blue-800 rounded-full px-3 py-1\">\n            {t('dashboard.summary_card.period', currentLang)}: {periodoData.formato_fecha_inicio || 'N/A'} a {periodoData.formato_fecha_fin || 'N/A'}\n            {periodoData.dias && <span className=\"ml-2 font-semibold\">• {periodoData.dias} {t('dashboard.summary_card.days', currentLang)}</span>}\n          </div>\n        )}\n      </div>\n      \n      {/* Primera fila - 3 tarjetas */}\n      <div style={{ display: \"grid\", gridTemplateColumns: \"1fr 1fr 1fr\", gap: \"0.75rem\" }}>\n        {/* Tarjeta 1 - Resumen de Animales */}\n        <div style={{ border: '1px solid rgba(0, 0, 0, 0.1)', boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)', borderRadius: '0.5rem', overflow: 'hidden', backgroundColor: darkMode ? 'rgba(255, 255, 255, 0.1)' : 'white' }}>\n          <h3 className={`text-md font-semibold p-2 ${darkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>{t('dashboard.summary_card.animals_summary', currentLang)}</h3>\n          \n          <div className=\"bg-purple-500\" style={{ width: '100%', padding: '0.75rem', display: 'flex', flexDirection: 'column', justifyContent: 'center', marginBottom: '0.5rem' }}>\n            <h3 style={{color: 'white', fontWeight: 'bold', marginBottom: '0.25rem'}}>{t('dashboard.summary_card.total_animals', currentLang)}</h3>\n            <p style={{color: 'white', fontSize: '1.75rem', fontWeight: 'bold', margin: 0}}>{totalAnimals}</p>\n          </div>\n          \n          <div className=\"bg-green-500\" style={{ width: '100%', padding: '0.75rem', display: 'flex', flexDirection: 'column', justifyContent: 'center', marginBottom: '0.5rem' }}>\n            <h3 style={{color: 'white', fontWeight: 'bold', marginBottom: '0.25rem'}}>{t('dashboard.summary_card.active_animals', currentLang)}</h3>\n            <p style={{color: 'white', fontSize: '1.75rem', fontWeight: 'bold', margin: 0}}>{activeAnimals}</p>\n          </div>\n          \n          <div className=\"bg-blue-500\" style={{ width: '100%', padding: '0.75rem', display: 'flex', flexDirection: 'column', justifyContent: 'center', marginBottom: '0.5rem' }}>\n            <h3 style={{color: 'white', fontWeight: 'bold', marginBottom: '0.25rem'}}>{t('dashboard.summary_card.active_males', currentLang)}</h3>\n            <p style={{color: 'white', fontSize: '1.75rem', fontWeight: 'bold', margin: 0}}>{activeMales}</p>\n          </div>\n          \n          <div className=\"bg-fuchsia-500\" style={{ width: '100%', padding: '0.75rem', display: 'flex', flexDirection: 'column', justifyContent: 'center', marginBottom: '0.5rem' }}>\n            <h3 style={{color: 'white', fontWeight: 'bold', marginBottom: '0.25rem'}}>{t('dashboard.summary_card.active_females', currentLang)}</h3>\n            <p style={{color: 'white', fontSize: '1.75rem', fontWeight: 'bold', margin: 0}}>{activeFemales}</p>\n          </div>\n        </div>\n        \n        {/* Tarjeta 2 - Amamantamiento */}\n        <div style={{ border: '1px solid rgba(0, 0, 0, 0.1)', boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)', borderRadius: '0.5rem', overflow: 'hidden', backgroundColor: darkMode ? 'rgba(255, 255, 255, 0.1)' : 'white' }}>\n          <h3 className={`text-md font-semibold p-2 ${darkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>{t('dashboard.summary_card.nursing_status', currentLang)}</h3>\n          \n          <div className=\"bg-orange-500\" style={{ width: '100%', padding: '0.75rem', display: 'flex', flexDirection: 'column', justifyContent: 'center', marginBottom: '0.5rem' }}>\n            <h3 style={{color: 'white', fontWeight: 'bold', marginBottom: '0.25rem'}}>{t('dashboard.summary_card.cows_not_nursing', currentLang)}</h3>\n            <p style={{color: 'white', fontSize: '1.75rem', fontWeight: 'bold', margin: 0}}>{nursing0}</p>\n          </div>\n          \n          <div className=\"bg-cyan-500\" style={{ width: '100%', padding: '0.75rem', display: 'flex', flexDirection: 'column', justifyContent: 'center', marginBottom: '0.5rem' }}>\n            <h3 style={{color: 'white', fontWeight: 'bold', marginBottom: '0.25rem'}}>{t('dashboard.summary_card.nursing_one_calf', currentLang)}</h3>\n            <p style={{color: 'white', fontSize: '1.75rem', fontWeight: 'bold', margin: 0}}>{nursing1}</p>\n          </div>\n          \n          <div className=\"bg-red-500\" style={{ width: '100%', padding: '0.75rem', display: 'flex', flexDirection: 'column', justifyContent: 'center', marginBottom: '0.5rem' }}>\n            <h3 style={{color: 'white', fontWeight: 'bold', marginBottom: '0.25rem'}}>{t('dashboard.summary_card.nursing_two_calves', currentLang)}</h3>\n            <p style={{color: 'white', fontSize: '1.75rem', fontWeight: 'bold', margin: 0}}>{nursing2}</p>\n          </div>\n        </div>\n        \n        {/* Tarjeta 3 - Distribución por Género con gráfico circular */}\n        <div style={{ border: '1px solid rgba(0, 0, 0, 0.1)', boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)', borderRadius: '0.5rem', overflow: 'hidden', backgroundColor: darkMode ? 'rgba(255, 255, 255, 0.1)' : 'white' }}>\n          <h3 className={`text-md font-semibold p-2 ${darkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>{t('dashboard.summary_card.population_analysis', currentLang)}</h3>\n          \n          <div style={{ padding: '0.75rem', height: '260px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n            <Pie \n              data={{\n                labels: [t('dashboard.summary_card.bulls', currentLang), t('dashboard.summary_card.cows', currentLang), t('dashboard.summary_card.deceased', currentLang)],\n                datasets: [\n                  {\n                    data: [activeMales, activeFemales, inactiveAnimals],\n                    backgroundColor: [\n                      '#3b82f6', // azul para toros\n                      '#ec4899', // fucsia para vacas\n                      '#6b7280', // gris para fallecidos\n                    ],\n                    borderWidth: 1,\n                  },\n                ],\n              }}\n              options={{\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                  legend: {\n                    position: 'top',\n                    labels: {\n                      color: darkMode ? '#fff' : '#000',\n                      font: {\n                        size: 12\n                      }\n                    }\n                  },\n                  tooltip: {\n                    callbacks: {\n                      label: function(context) {\n                        let label = context.label || '';\n                        let value = context.raw || 0;\n                        let total = context.dataset.data.reduce((a, b) => Number(a) + Number(b), 0);\n                        let percentage = Math.round((Number(value) / total) * 100);\n                        return `${label}: ${value} (${percentage}%)`;\n                      }\n                    }\n                  }\n                }\n              }}\n            />\n          </div>\n          \n          <div className=\"text-xs text-center mt-1\" style={{ color: darkMode ? '#d1d5db' : '#6b7280' }}>\n            {t('dashboard.summary_card.male_female_ratio', currentLang)}: {activeMales}:{activeFemales} ({activeMales && activeFemales ? (activeMales / activeFemales).toFixed(2) : 'N/A'})\n          </div>\n        </div>\n      </div>\n      \n      {/* Datos adicionales */}\n      <div className=\"mt-4 text-xs text-gray-500\">\n        {t('dashboard.summary_card.last_update', currentLang)}: {new Date().toLocaleString()}\n      </div>\n    </div>\n  );\n};\n\nexport default ResumenOriginalCard;\n","/**\n * DashboardV2.tsx\n * ======================\n * SOLO SON VALIDOS LOS DATOS DINAMICOS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n * \n * [DASHBOARDV2] Nueva versión del Dashboard completamente rediseñada para solucionar problemas\n * de rendimiento y visualización de datos. Esta versión es más modular, limpia\n * y fácil de mantener.\n * \n * Características principales:\n * - Diseño más modular con componentes de tarjetas independientes\n * - Mejor manejo de errores y estados de carga\n * - Logs de diagnóstico para facilitar la depuración\n * - Optimización del consumo de API\n * - Compatible con temas claro/oscuro\n * - Navegación entre versiones del dashboard\n * - Integración con Tremor para visualizaciones más avanzadas\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport apiService from '../../services/apiService';\n\n// Importar y registrar los componentes de Chart.js\nimport { registerChartComponents } from '../../utils/chartConfig';\n\n// Ya no registramos en el nivel superior - se hará en un useEffect\n\n// Importar componentes UI reutilizables\nimport { SectionTitle } from '../dashboard/components/UIComponents';\n\n// Importar componente PartosSection\nimport PartosSection from '../dashboard/sections/PartosSection';\n\n// Importar ResumenOriginalCard\nimport ResumenOriginalCard from './cards/ResumenOriginalCard';\n\n// Importar componente de diagnóstico para visualizar datos crudos\nimport DiagnosticoDataCard from './cards/DiagnosticoDataCard';\n\n// Importar tipos\nimport type { \n  DashboardStats, \n  PartosStats\n} from '../dashboard/types/dashboard';\n\n/**\n * DashboardV2 - Versión optimizada y modular\n * \n * Implementación desde cero con énfasis en simplicidad y rendimiento.\n * Consume directamente los endpoints necesarios sin middleware.\n */\n/**\n * [DASHBOARDV2] Componente principal de la nueva versión del dashboard\n * \n * Implementado desde cero como una nueva versión alternativa que puede\n * coexistir con el Dashboard original sin afectarlo.\n */\nconst DashboardV2: React.FC = () => {\n  console.log('🟢 DASHBOARD V2 CARGADO - VERSIÓN NUEVA');\n  // Este es el dashboard nuevo que reemplazará al original\n  // [DASHBOARDV2] No usamos useNavigate() porque puede causar problemas si se renderiza fuera del Router\n  // Estado para almacenar datos de la API\n  const [statsData, setStatsData] = useState<DashboardStats | null>(null);\n  const [partosData, setPartosData] = useState<PartosStats | null>(null);\n  \n  // Estados para gestionar la carga y errores\n  const [loading, setLoading] = useState({\n    stats: true,\n    partos: true\n  });\n  const [error, setError] = useState({\n    stats: null as string | null,\n    partos: null as string | null\n  });\n\n  // Estado para el tema oscuro/claro\n  const [darkMode, setDarkMode] = useState<boolean>(false);\n  \n  // Logs para diagnóstico\n  const [logs, setLogs] = useState<string[]>([]);\n\n  // Función para agregar logs\n  const addLog = (message: string, isError: boolean = false) => {\n    const timestamp = new Date().toISOString();\n    const formattedMessage = `[${timestamp}] ${isError ? '❌ ' : ''}${message}`;\n    setLogs(prev => [formattedMessage, ...prev]);\n    \n    if (isError) {\n      console.error(`[DashboardV2] ${message}`);\n    } else {\n      console.log(`[DashboardV2] ${message}`);\n    }\n  };\n\n  // Función para mostrar skeleton loader mientras se cargan los datos\n  const showSkeletonLoader = () => {\n    setLoading({\n      stats: true,\n      partos: true\n    });\n  };\n\n  // Función para cargar datos desde sessionStorage si existen\n  const loadFromCache = () => {\n    try {\n      const cachedData = sessionStorage.getItem('dashboardData');\n      if (cachedData) {\n        const parsedData = JSON.parse(cachedData);\n        const cacheTime = parsedData.timestamp || 0;\n        const now = new Date().getTime();\n        \n        // Comprobar si la caché es reciente (menos de 5 minutos)\n        if (now - cacheTime < 5 * 60 * 1000) {\n          addLog('✅ Usando datos en caché (< 5min)');\n          if (parsedData.stats) setStatsData(parsedData.stats);\n          if (parsedData.partos) setPartosData(parsedData.partos);\n          return true;\n        }\n      }\n    } catch (err) {\n      // Si hay error al leer la caché, simplemente ignoramos y cargamos nuevos datos\n      console.warn('Error leyendo caché:', err);\n    }\n    return false;\n  };\n\n  // Función para guardar datos en sessionStorage\n  const saveToCache = (data: any) => {\n    try {\n      const cacheData = {\n        stats: data.stats,\n        partos: data.partos,\n        timestamp: new Date().getTime()\n      };\n      sessionStorage.setItem('dashboardData', JSON.stringify(cacheData));\n    } catch (err) {\n      // Si hay error al guardar la caché, simplemente lo ignoramos\n      console.warn('Error guardando caché:', err);\n    }\n  };\n\n  // Efecto para cargar datos al montar el componente\n  useEffect(() => {\n    const loadDashboardData = async () => {\n      try {\n        // 1. Mostrar skeleton loaders inmediatamente\n        showSkeletonLoader();\n        \n        // 2. Intentar cargar datos cacheados si existen\n        const usedCache = loadFromCache();\n        if (usedCache) {\n          // Actualizar estado de carga para reflejar datos de caché\n          setLoading({\n            stats: false,\n            partos: false\n          });\n        }\n        \n        // 3. Cargar datos frescos en paralelo (incluso si usamos caché)\n        try {\n          addLog('Obteniendo datos del dashboard...');\n          \n          // Hacer peticiones en paralelo\n          const [statsResponse, partosResponse] = await Promise.all([\n            apiService.get('/dashboard/stats'),\n            apiService.get('/dashboard/partos')\n          ]);\n          \n          // Guardar resultados\n          setStatsData(statsResponse);\n          setPartosData(partosResponse);\n          \n          // Actualizar estados\n          setLoading({\n            stats: false,\n            partos: false\n          });\n          \n          setError({\n            stats: null,\n            partos: null\n          });\n          \n          // Guardar en caché\n          saveToCache({\n            stats: statsResponse,\n            partos: partosResponse\n          });\n          \n          addLog('✅ Datos del dashboard cargados correctamente');\n        } catch (err) {\n          const errorMsg = err instanceof Error ? err.message : 'Error desconocido';\n          addLog(`Error cargando datos: ${errorMsg}`, true);\n          \n          setError({\n            stats: errorMsg,\n            partos: errorMsg\n          });\n          \n          setLoading({\n            stats: false,\n            partos: false\n          });\n        }\n        \n      } catch (error) {\n        console.error('Error general cargando datos:', error);\n      }\n    };\n    \n    loadDashboardData();\n    \n    // Detectar tema oscuro\n    const isDarkMode = document.documentElement.classList.contains('dark');\n    setDarkMode(isDarkMode);\n    \n    // Observer para cambios en el tema\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (mutation.attributeName === 'class') {\n          const isDark = document.documentElement.classList.contains('dark');\n          setDarkMode(isDark);\n        }\n      });\n    });\n    \n    observer.observe(document.documentElement, { attributes: true });\n    \n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Efecto para registrar los componentes de Chart.js sólo en el cliente\n  useEffect(() => {\n    const initCharts = async () => {\n      try {\n        addLog('Registrando componentes de Chart.js...');\n        await registerChartComponents();\n        addLog('✅ Componentes de Chart.js registrados correctamente');\n      } catch (error) {\n        addLog('❌ Error al registrar componentes de Chart.js', true);\n        console.error('Error registrando Chart.js:', error);\n      }\n    };\n\n    // Solo ejecutamos en el navegador\n    if (typeof window !== 'undefined') {\n      initCharts();\n    }\n  }, []);\n\n  // Función para cambiar tema\n  const toggleTheme = () => {\n    const isDark = document.documentElement.classList.contains('dark');\n    if (isDark) {\n      document.documentElement.classList.remove('dark');\n    } else {\n      document.documentElement.classList.add('dark');\n    }\n  };\n\n  return (\n    <div \n      className={`dashboard-container ${darkMode ? 'theme-dark' : 'theme-light'}`}\n      data-component-name=\"DashboardV2\"\n    >\n      {/* Botón para volver al Dashboard original eliminado - Ya no es necesario */}\n      \n      {/* [DASHBOARDV2] Botón para cambiar tema */}\n      <button \n        onClick={toggleTheme} \n        style={{\n          position: 'fixed',\n          bottom: '6rem',\n          left: '1rem',\n          backgroundColor: darkMode ? '#374151' : '#e5e7eb',\n          color: darkMode ? 'white' : 'black',\n          padding: '0.75rem',\n          borderRadius: '9999px',\n          boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n          zIndex: 20,\n          border: 'none',\n          cursor: 'pointer',\n          fontSize: '1.2rem',\n        }}\n      >\n        {darkMode ? '☀️' : '🌙'}\n      </button>\n      \n      {/* Cabecera */}\n      <div className=\"dashboard-header\">\n        {/* Título eliminado para evitar duplicación */}\n      </div>\n      \n      {/* SECCIÓN 1: Resumen General (Con estilo original) */}\n      <SectionTitle number=\"1\" title=\"Resumen General\" darkMode={darkMode} translationKey=\"dashboard.summary\" />\n      <div className=\"stats-grid-lg\">\n        {/* ResumenOriginalCard obtiene sus propios datos */}\n        <ResumenOriginalCard\n          darkMode={darkMode}\n        />\n      </div>\n      \n      {/* SECCIÓN 2: Análisis de Partos */}\n      <SectionTitle number=\"2\" title=\"Análisis de Partos\" darkMode={darkMode} translationKey=\"dashboard.partos_analysis\" />\n      <div className=\"combined-stats-grid\">\n        {/* Wrapper para que el PartosSection ocupe la mitad del ancho */}\n        <div style={{ display: 'contents' }}>\n          <PartosSection \n            statsData={statsData} \n            partosData={partosData}\n            darkMode={darkMode} \n            loading={loading.stats || loading.partos} \n            error={error.stats || error.partos} \n          />\n        </div>\n        {/* Espacio vacío para equilibrar la cuadrícula */}\n        <div></div>\n      </div>\n\n      {/* Espacio para posibles secciones adicionales en el futuro */}\n      \n    </div>\n  );\n};\n\nexport default DashboardV2;\n"],"file":"_astro/DashboardV2.oP-JI5qg.js"}