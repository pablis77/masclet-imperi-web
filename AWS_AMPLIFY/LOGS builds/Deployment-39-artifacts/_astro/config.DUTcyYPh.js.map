{"version":3,"file":"config.DUTcyYPh.js","sources":["../../../src/i18n/config.ts"],"sourcesContent":["// Configuración básica para multilenguaje\nexport const defaultLang = 'es';\nexport const supportedLanguages = ['es', 'ca'];\n\n// Definición de tipos para evitar errores\ntype TranslationDict = Record<string, Record<string, any>>;\n\n// Importar directamente las traducciones desde los archivos JSON\nimport * as esTranslations from './locales/es.json';\nimport * as caTranslations from './locales/ca.json';\n\n// Usar las traducciones importadas\nconst es: TranslationDict = esTranslations as unknown as TranslationDict;\nconst ca: TranslationDict = caTranslations as unknown as TranslationDict;\n\n// Asegurar que las traducciones se han cargado correctamente\nconsole.log('[i18n] Traducciones cargadas:', \n  'ES:', Object.keys(es).length, 'secciones', \n  'CA:', Object.keys(ca).length, 'secciones');\n\n// Función mejorada para las traducciones que soporta múltiples niveles de anidación\nexport function t(key: string, lang = defaultLang): string {\n  try {\n    const parts = key.split('.');\n    if (parts.length < 2) return key;\n    \n    const dict = lang === 'ca' ? ca : es;\n    \n    // Manejar múltiples niveles de anidación\n    let current: any = dict;\n    \n    // Navegar por la estructura anidada\n    for (const part of parts) {\n      if (current && current[part]) {\n        current = current[part];\n      } else {\n        // Si no encuentra alguna parte de la ruta, devuelve la clave original\n        console.warn(`Traducción no encontrada para la clave: ${key} (parte: ${part})`);\n        return key;\n      }\n    }\n    \n    // Si llegamos aquí, current debería contener el valor final\n    if (typeof current === 'string') {\n      return current;\n    }\n    \n    console.warn(`Valor no válido para la clave: ${key}`);\n    return key;\n  } catch (e) {\n    console.error(`Error en traducción para la clave: ${key}`, e);\n    return key;\n  }\n}\n\n// Función para cambiar el idioma\nexport function setLanguage(lang: string): string {\n  if (supportedLanguages.includes(lang)) {\n    if (typeof localStorage !== 'undefined') {\n      localStorage.setItem('userLanguage', lang);\n    }\n    return lang;\n  }\n  return defaultLang;\n}\n\n// Función mejorada para obtener el idioma actual\nexport function getCurrentLanguage(): string {\n  // En entorno de navegador\n  if (typeof window !== 'undefined' && typeof localStorage !== 'undefined') {\n    // 1. Primero comprobar parámetro URL (para debugging y forzar idioma)\n    try {\n      const urlParams = new URLSearchParams(window.location.search);\n      const urlLang = urlParams.get('lang');\n      \n      if (urlLang && supportedLanguages.includes(urlLang)) {\n        console.log('[i18n] Usando idioma desde URL:', urlLang);\n        // Guardar en localStorage para mantener coherencia\n        localStorage.setItem('userLanguage', urlLang);\n        return urlLang;\n      }\n    } catch (e) {\n      console.error('[i18n] Error al leer parámetros URL:', e);\n    }\n    \n    // 2. Comprobar localStorage\n    const savedLang = localStorage.getItem('userLanguage');\n    if (savedLang && supportedLanguages.includes(savedLang)) {\n      console.log('[i18n] Usando idioma desde localStorage:', savedLang);\n      return savedLang;\n    }\n    \n    // 3. Comprobar preferencia del navegador\n    try {\n      const browserLang = navigator.language.split('-')[0];\n      if (supportedLanguages.includes(browserLang)) {\n        console.log('[i18n] Usando idioma del navegador:', browserLang);\n        localStorage.setItem('userLanguage', browserLang);\n        return browserLang;\n      }\n    } catch (e) {\n      console.error('[i18n] Error al detectar idioma del navegador:', e);\n    }\n  }\n  \n  // Si no se puede determinar o en SSR, usar idioma por defecto\n  console.log('[i18n] Usando idioma por defecto:', defaultLang);\n  return defaultLang;\n}\n"],"names":["defaultLang","supportedLanguages","es","esTranslations","ca","caTranslations","t","key","lang","parts","current","part","e","getCurrentLanguage","urlLang","savedLang","browserLang"],"mappings":"w7/BACaA,EAAc,KACdC,EAAqB,CAAC,KAAM,IAAI,EAUvCC,EAAsBC,EACtBC,EAAsBC,EAG5B,QAAQ,IAAI,gCACV,MAAO,OAAO,KAAKH,CAAE,EAAE,OAAQ,YAC/B,MAAO,OAAO,KAAKE,CAAE,EAAE,OAAQ,WAAW,EAG5B,SAAAE,EAAEC,EAAaC,EAAOR,EAAqB,CACrD,GAAA,CACI,MAAAS,EAAQF,EAAI,MAAM,GAAG,EACvB,GAAAE,EAAM,OAAS,EAAU,OAAAF,EAK7B,IAAIG,EAHSF,IAAS,KAAOJ,EAAKF,EAMlC,UAAWS,KAAQF,EACb,GAAAC,GAAWA,EAAQC,CAAI,EACzBD,EAAUA,EAAQC,CAAI,MAGtB,gBAAQ,KAAK,2CAA2CJ,CAAG,YAAYI,CAAI,GAAG,EACvEJ,EAKP,OAAA,OAAOG,GAAY,SACdA,GAGD,QAAA,KAAK,kCAAkCH,CAAG,EAAE,EAC7CA,SACAK,EAAG,CACV,eAAQ,MAAM,sCAAsCL,CAAG,GAAIK,CAAC,EACrDL,CAAA,CAEX,CAcO,SAASM,GAA6B,CAE3C,GAAI,OAAO,OAAW,KAAe,OAAO,aAAiB,IAAa,CAEpE,GAAA,CAEI,MAAAC,EADY,IAAI,gBAAgB,OAAO,SAAS,MAAM,EAClC,IAAI,MAAM,EAEpC,GAAIA,GAAWb,EAAmB,SAASa,CAAO,EACxC,eAAA,IAAI,kCAAmCA,CAAO,EAEzC,aAAA,QAAQ,eAAgBA,CAAO,EACrCA,QAEFF,EAAG,CACF,QAAA,MAAM,uCAAwCA,CAAC,CAAA,CAInD,MAAAG,EAAY,aAAa,QAAQ,cAAc,EACrD,GAAIA,GAAad,EAAmB,SAASc,CAAS,EAC5C,eAAA,IAAI,2CAA4CA,CAAS,EAC1DA,EAIL,GAAA,CACF,MAAMC,EAAc,UAAU,SAAS,MAAM,GAAG,EAAE,CAAC,EAC/C,GAAAf,EAAmB,SAASe,CAAW,EACjC,eAAA,IAAI,sCAAuCA,CAAW,EACjD,aAAA,QAAQ,eAAgBA,CAAW,EACzCA,QAEFJ,EAAG,CACF,QAAA,MAAM,iDAAkDA,CAAC,CAAA,CACnE,CAIM,eAAA,IAAI,oCAAqCZ,CAAW,EACrDA,CACT"}