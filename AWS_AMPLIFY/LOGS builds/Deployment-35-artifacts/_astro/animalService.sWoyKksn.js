import{a as u}from"./apiService.DFT83caO.js";import"./api.ppmg8LLO.js";const d=[{id:1,nom:"Lucero",explotacio:"1",genere:"M",estado:"OK",alletar:"0",pare:null,mare:null,quadra:"Q1",cod:"A001",num_serie:"SN001",dob:"2020-05-15",created_at:"2023-01-10T10:00:00Z",updated_at:"2023-01-10T10:00:00Z"},{id:2,nom:"Estrella",explotacio:"1",genere:"F",estado:"OK",alletar:"1",pare:"Lucero",mare:null,quadra:"Q2",cod:"A002",num_serie:"SN002",dob:"2019-08-20",created_at:"2023-01-10T10:00:00Z",updated_at:"2023-01-10T10:00:00Z"},{id:3,nom:"Luna",explotacio:"2",genere:"F",estado:"OK",alletar:"2",pare:null,mare:null,quadra:"Q1",cod:"A003",num_serie:"SN003",dob:"2021-02-10",created_at:"2023-01-10T10:00:00Z",updated_at:"2023-01-10T10:00:00Z"},{id:4,nom:"Tornado",explotacio:"2",genere:"M",estado:"DEF",alletar:"0",pare:"Lucero",mare:"Estrella",quadra:"Q3",cod:"A004",num_serie:"SN004",dob:"2020-11-05",created_at:"2023-01-10T10:00:00Z",updated_at:"2023-01-10T10:00:00Z"},{id:5,nom:"Trueno",explotacio:"EXP001",genere:"M",estado:"OK",alletar:"0",pare:null,mare:null,quadra:"Q1",cod:"A005",num_serie:"SN005",dob:"2022-03-18",created_at:"2023-01-10T10:00:00Z",updated_at:"2023-01-10T10:00:00Z"}],g=[{id:1,explotacio:"EXP001",animal_count:25,created_at:"2022-10-01T09:00:00Z",updated_at:"2023-01-05T14:30:00Z"},{id:2,explotacio:"EXP002",animal_count:20,created_at:"2022-11-01T10:00:00Z",updated_at:"2023-01-10T10:00:00Z"},{id:3,explotacio:"EXP003",animal_count:15,created_at:"2022-12-01T11:00:00Z",updated_at:"2023-01-15T11:00:00Z"},{id:4,explotacio:"EXP004",animal_count:10,created_at:"2023-01-01T12:00:00Z",updated_at:"2023-01-20T12:00:00Z"},{id:5,explotacio:"EXP005",animal_count:5,created_at:"2023-01-05T13:00:00Z",updated_at:"2023-01-25T13:00:00Z"}],_=[{id:1,animal_id:2,animal_nom:"Estrella",data:"2022-04-10",num_cries:1,notes:"",created_at:"2022-04-10T10:00:00Z",updated_at:"2022-04-10T10:00:00Z"},{id:2,animal_id:3,animal_nom:"Luna",data:"2022-06-15",num_cries:1,notes:"",created_at:"2022-06-15T10:00:00Z",updated_at:"2022-06-15T10:00:00Z"},{id:3,animal_id:3,animal_nom:"Luna",data:"2023-07-20",num_cries:2,notes:"",created_at:"2023-07-20T10:00:00Z",updated_at:"2023-07-20T10:00:00Z"}];d.filter(e=>e.genere==="M").length,d.filter(e=>e.genere==="F").length,d.filter(e=>e.estado==="OK").length,d.filter(e=>e.estado==="DEF").length,d.filter(e=>e.alletar!=="0").length,g.length,_.slice(0,3).map(e=>({id:e.id,animal_id:e.animal_id,animal_nom:e.animal_nom,data:e.data,num_cries:e.num_cries}));g.length;const A=e=>{let o=[...d];if(e.explotacio!==void 0&&(o=o.filter(a=>a.explotacio===e.explotacio)),e.genere!==void 0&&(o=o.filter(a=>a.genere===e.genere)),e.estado!==void 0&&(o=o.filter(a=>a.estado===e.estado)),e.alletar!==void 0&&(o=o.filter(a=>a.alletar===e.alletar)),e.quadra!==void 0&&(o=o.filter(a=>a.quadra===e.quadra)),e.search!==void 0&&e.search!==""){const a=e.search.toLowerCase().trim();console.log(`Filtrando por término de búsqueda: "${a}"`);let r=o.filter(t=>{const s=t.nom.toLowerCase().includes(a),c=t.cod&&t.cod.toLowerCase().includes(a),m=t.num_serie&&t.num_serie.toLowerCase().includes(a),p=t.explotacio.toLowerCase().includes(a),h=t.pare&&t.pare.toLowerCase().includes(a),f=t.mare&&t.mare.toLowerCase().includes(a);return s||c||m||p||h||f});const i=r.map(t=>{let s=0;return t.nom.toLowerCase()===a?s+=1e3:t.nom.toLowerCase().startsWith(a)?s+=800:t.nom.toLowerCase().includes(a)&&(s+=500),t.cod&&t.cod.toLowerCase().includes(a)&&(s+=300),t.num_serie&&t.num_serie.toLowerCase().includes(a)&&(s+=300),t.pare&&t.pare.toLowerCase().includes(a)&&(s+=100),t.mare&&t.mare.toLowerCase().includes(a)&&(s+=100),t.explotacio&&t.explotacio.toLowerCase().includes(a)&&(s+=50),{animal:t,score:s}});i.sort((t,s)=>t.score!==s.score?s.score-t.score:new Date(s.animal.updated_at).getTime()-new Date(t.animal.updated_at).getTime()),r=i.map(t=>t.animal),console.log("Animales ordenados por relevancia:",i.map(t=>`${t.animal.nom} (${t.score})`));const l=[],n=new Set;r.forEach(t=>{const s=t.cod?t.cod.split("_")[0]:"",c=`${t.nom.toLowerCase()}_${s}`.trim();n.has(c)||(n.add(c),l.push(t))}),o=l,console.log(`Se encontraron ${o.length} animales únicos que coinciden con la búsqueda`)}return o},E={async getAnimals(e={}){try{const o=new URLSearchParams,a=e.page||1,r=e.limit||10,i=(a-1)*r;o.append("offset",i.toString()),o.append("limit",r.toString()),e.explotacio&&o.append("explotacio",e.explotacio),e.genere&&o.append("genere",e.genere),e.estado&&o.append("estado",e.estado),e.alletar&&o.append("alletar",e.alletar),e.quadra&&o.append("quadra",e.quadra),e.search&&(o.append("search",e.search),console.log(`Buscando animales que coincidan con: "${e.search}"`)),console.log("Obteniendo animales con parámetros:",Object.fromEntries(o.entries()));const l=await u.get(`/animals?${o.toString()}`);console.log("Respuesta RAW de animales recibida:",l);let n;if(l&&l.status==="success"&&l.data){console.log("Detectada respuesta con formato {status, data}. Procesando correctamente...");const{total:t,offset:s,limit:c,items:m}=l.data;n={items:m||[],total:t||0,page:Math.floor(s/c)+1,limit:c||10,pages:Math.ceil((t||0)/(c||10))}}else console.log("Usando respuesta en formato directo"),n=l;return console.log("Respuesta procesada de animales:",n),e.search&&document.dispatchEvent(new CustomEvent("search-completed",{detail:{term:e.search,count:n.items.length,total:n.total,usedMock:!1}})),n}catch(o){console.error("Error en petición GET /animals:",o);let a="";o.code==="DB_COLUMN_ERROR"||o.message&&o.message.includes("estado_t")?a="error en la estructura de la tabla en el backend":o.code==="NETWORK_ERROR"?a="error de conexión al servidor":a="error en el servidor",console.warn(`Usando datos simulados debido a: ${a}`);const r=A(e),i=e.page||1,l=e.limit||10,n=(i-1)*l,t=n+l,s=r.slice(n,t);return e.search&&document.dispatchEvent(new CustomEvent("search-completed",{detail:{term:e.search,count:s.length,total:r.length,usedMock:!0,reason:a}})),{items:s,total:r.length,page:i,limit:l,pages:Math.ceil(r.length/l)}}},async getAnimalById(e){try{console.log(`Intentando cargar animal con ID: ${e}`);const o=await u.get(`/animals/${e}`);console.log("Animal cargado:",o);let a;if(o&&o.status==="success"&&o.data)a=o.data;else if(o&&o.id)a=o;else throw new Error("Formato de respuesta inválido");return a&&(a.partos?Array.isArray(a.partos)||(a.partos.items&&Array.isArray(a.partos.items)?a.partos=a.partos.items:a.partos=[]):a.partos=[],!a.estado&&a.estat&&(a.estado=a.estat)),a}catch(o){if(console.error(`Error al obtener animal con ID ${e}:`,o),o.code==="DB_COLUMN_ERROR"||o.code==="NETWORK_ERROR"||o.message&&(o.message.includes("estado_t")||o.message.includes("conexión"))){console.warn("Usando datos simulados debido a error en el backend");const a=d.find(r=>r.id===e);if(a)return a;throw new Error(`Animal con ID ${e} no encontrado en los datos simulados`)}throw o}},async createAnimal(e){try{console.log("Creando nuevo animal:",e);const o=await u.post("/animals/",e);return console.log("Animal creado:",o),o}catch(o){if(console.error("Error al crear animal:",o),o.code==="DB_COLUMN_ERROR"||o.code==="NETWORK_ERROR"||o.message&&(o.message.includes("estado_t")||o.message.includes("conexión"))){console.warn("Usando datos simulados para crear animal debido a error en el backend");const a=Math.max(...d.map(i=>i.id))+1,r=new Date().toISOString();return{id:a,...e,created_at:r,updated_at:r}}throw o}},async updateAnimal(e,o){try{console.log(`[PATCH] Actualizando animal con ID ${e}:`,o);const a={},r=["mare","pare","quadra","cod","num_serie","dob"];for(const n in o)if(Object.prototype.hasOwnProperty.call(o,n))if(r.includes(n)&&o[n]==="")a[n]=null;else if(n==="alletar"&&o[n]!==void 0)a[n]=String(o[n]);else if(n==="dob"&&o[n])try{let t;if(typeof o[n]=="string"&&/^\d{2}\/\d{2}\/\d{4}$/.test(o[n]))t=o[n];else if(typeof o[n]=="string"&&/^\d{4}-\d{2}-\d{2}$/.test(o[n])){const[s,c,m]=o[n].split("-");t=`${m}/${c}/${s}`}else{const s=new Date(o[n]);if(isNaN(s.getTime()))t=o[n];else{const c=s.getDate().toString().padStart(2,"0"),m=(s.getMonth()+1).toString().padStart(2,"0"),p=s.getFullYear();t=`${c}/${m}/${p}`}}console.log(`Fecha convertida: ${o[n]} -> ${t}`),a[n]=t}catch(t){console.error("Error al formatear fecha:",t),a[n]=o[n]}else a[n]=o[n];const i=Object.keys(a);if(i.length===0)throw new Error("No se detectaron cambios para actualizar");console.log(`[PATCH] Campos a actualizar: ${i.join(", ")}`),console.log("[PATCH] Datos finales:",a),console.log(`[PATCH] Enviando petición a /animals/${e}`),console.log("Datos normalizados:",JSON.stringify(a,null,2)),console.log("Iniciando patch...");const l=await u.patch(`/animals/${e}`,a);return console.log("PATCH completado con éxito"),l.data||l}catch(a){throw console.error(`[PATCH] Error al actualizar animal con ID ${e}:`,a),a}},async deleteAnimal(e){try{console.log(`Intentando eliminar animal con ID ${e}`);const o=await u.delete(`/api/v1/animals/${e}`);return console.log(`Respuesta al eliminar animal con ID ${e}:`,o),o}catch(o){if(console.error(`Error al eliminar animal con ID ${e}:`,o),o.code==="DB_COLUMN_ERROR"||o.code==="NETWORK_ERROR"||o.message&&(o.message.includes("estado_t")||o.message.includes("conexión")))return console.warn("Usando datos simulados para eliminar animal debido a error en el backend"),this.updateAnimal(e,{estado:"DEF"});throw o}},async getPotentialFathers(e){try{console.log(`Obteniendo posibles padres${e?` para explotación ${e}`:""}`);const o={genere:"M",estado:"OK"};e&&e!=="undefined"&&(o.explotacio=String(e));const a=await this.getAnimals(o),r=Array.isArray(a)?a:a.items||[];return console.log("Posibles padres recibidos:",r),r}catch(o){return console.error(`Error al obtener posibles padres${e?` para explotación ${e}`:""}:`,o),console.warn("Usando datos simulados para posibles padres debido a error en el backend"),d.filter(r=>r.genere==="M"&&r.estado==="OK"&&(!e||e==="undefined"||r.explotacio===String(e)))}},async getPotentialMothers(e){try{console.log(`Obteniendo posibles madres${e?` para explotación ${e}`:""}`);const o={genere:"F",estado:"OK"};e&&e!=="undefined"&&(o.explotacio=String(e));const a=await this.getAnimals(o),r=Array.isArray(a)?a:a.items||[];return console.log("Posibles madres recibidas:",r),r}catch(o){return console.error(`Error al obtener posibles madres${e?` para explotación ${e}`:""}:`,o),console.warn("Usando datos simulados para posibles madres debido a error en el backend"),d.filter(r=>r.genere==="F"&&r.estado==="OK"&&(!e||e==="undefined"||r.explotacio===String(e)))}},async getAnimalsByExplotacion(e){try{try{console.log(`🐄 [Animal] Solicitando animales para explotación ${e}`);const o=[`/animals?explotacio=${encodeURIComponent(e)}&limit=100`];let a=null,r="";for(const i of o)try{console.log(`🐄 [Animal] Intentando endpoint: ${i}`),a=await u.get(i),r=i,console.log(`🐄 [Animal] Respuesta recibida de ${i}:`,a);break}catch(l){console.warn(`🐄 [Animal] Error con endpoint ${i}:`,l)}if(!a)throw new Error("Todos los endpoints fallaron");return console.log(`🐄 [Animal] Endpoint exitoso: ${r}`),Array.isArray(a)?(console.log(`🐄 [Animal] Devolviendo array de ${a.length} animales`),a):a&&typeof a=="object"&&"items"in a?(console.log(`🐄 [Animal] Devolviendo ${a.items.length} animales desde respuesta paginada`),a.items):a&&typeof a=="object"&&"data"in a&&Array.isArray(a.data)?(console.log(`🐄 [Animal] Devolviendo ${a.data.length} animales desde response.data`),a.data):(console.warn("🐄 [Animal] No se pudo interpretar la respuesta:",a),[])}catch(o){throw console.error(`🐄 [Animal] Error al obtener animales para explotación ${e}:`,o),o}}catch(o){console.error(`🐄 [Animal] Error en petición para obtener animales de explotación ${e}:`,o),console.warn(`🐄 [Animal] Usando datos simulados para animales de explotación ${e}`);const a=d.filter(r=>r.explotacio===String(e));return console.log(`🐄 [Animal] Devolviendo ${a.length} animales simulados para explotación ${e}`),a}},getAnimalIcon(e){return e.genere==="M"?"🐂":e.alletar!=="0"?"🐄":"🐮"},getAnimalStatusClass(e){return e==="OK"?"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200":e==="DEF"?"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200":"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200"},getAlletarText(e){return e==="0"?"No amamantando":e==="1"?"Amamantando 1 ternero":e==="2"?"Amamantando 2 terneros":"Desconocido"},async getExplotacions(){try{console.log("Obteniendo lista de explotaciones");try{const a=await u.get("/dashboard/explotacions");if(a&&a.status==="success"&&a.data&&Array.isArray(a.data.items))return a.data.items.map((i,l)=>({id:l+1,explotacio:i.explotacio||""}))}catch(a){console.warn("No se pudo obtener explotaciones del dashboard, intentando alternativa",a)}const e=await this.getAnimals({page:1,limit:100}),o=new Set;return e&&e.items&&e.items.forEach(a=>{a.explotacio&&o.add(a.explotacio)}),o.size===0?[{id:1,explotacio:"Madrid"},{id:2,explotacio:"Barcelona"},{id:3,explotacio:"Valencia"},{id:4,explotacio:"Guadalajara"}]:Array.from(o).map((a,r)=>({id:r+1,explotacio:a}))}catch(e){return console.error("Error al obtener explotaciones:",e),console.log("Usando datos simulados"),g}}};export{E as a};
