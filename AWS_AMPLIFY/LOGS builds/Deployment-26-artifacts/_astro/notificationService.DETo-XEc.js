import{c as a}from"./vendor.BAk4NxX6.js";class l{baseUrl="http://localhost:8000/api/v1/notifications";pollingInterval=null;async getNotifications(t=!1,e=10,o=0){try{const r=new URLSearchParams;r.append("unread_only",t.toString()),r.append("limit",e.toString()),r.append("skip",o.toString());const i=localStorage.getItem("token"),s={};i&&(s.Authorization=`Bearer ${i}`);const n=await a.get(`${this.baseUrl}?${r.toString()}`,{headers:s});return{items:n.data.items||[],total:n.data.total||0,unread_count:n.data.unread_count||0,has_more:n.data.has_more||!1}}catch(r){return console.error("Error al obtener notificaciones:",r),{items:[],total:0,unread_count:0,has_more:!1}}}async markAsRead(t){try{const e=localStorage.getItem("token"),o={};return e&&(o.Authorization=`Bearer ${e}`),await a.post(`${this.baseUrl}/mark-read/${t}`,{},{headers:o}),!0}catch(e){return console.error(`Error al marcar notificación ${t} como leída:`,e),!1}}async markAllAsRead(){try{const t=localStorage.getItem("token"),e={};return t&&(e.Authorization=`Bearer ${t}`),await a.post(`${this.baseUrl}/mark-all-read`,{},{headers:e}),!0}catch(t){return console.error("Error al marcar todas las notificaciones como leídas:",t),!1}}async deleteNotification(t){try{const e=localStorage.getItem("token"),o={};return e&&(o.Authorization=`Bearer ${e}`),await a.delete(`${this.baseUrl}/${t}`,{headers:o}),!0}catch(e){return console.error(`Error al eliminar notificación ${t}:`,e),!1}}async deleteAllNotifications(){try{const t=localStorage.getItem("token"),e={};return t&&(e.Authorization=`Bearer ${t}`),await a.delete(this.baseUrl,{headers:e}),!0}catch(t){return console.error("Error al eliminar todas las notificaciones:",t),!1}}startPolling(t,e=3e4){this.getNotifications().then(r=>{t(r.items)}).catch(r=>{console.error("Error al obtener notificaciones:",r)});const o=window.setInterval(()=>{this.getNotifications().then(r=>{t(r.items)}).catch(r=>{console.error("Error al obtener notificaciones:",r)})},e);return this.pollingInterval=o,o}stopPolling(){this.pollingInterval!==null&&(window.clearInterval(this.pollingInterval),this.pollingInterval=null)}async createTestNotification(){try{const t=localStorage.getItem("token"),e={};return t&&(e.Authorization=`Bearer ${t}`),await a.post(`${this.baseUrl}/test`,{},{headers:e}),!0}catch(t){return console.error("Error al crear notificación de prueba:",t),!1}}}const u=new l;export{u as n};
