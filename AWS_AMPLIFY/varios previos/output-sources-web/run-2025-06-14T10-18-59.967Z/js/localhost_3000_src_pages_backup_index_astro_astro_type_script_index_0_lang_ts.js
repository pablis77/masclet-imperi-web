import { getBackupsList, createBackup, restoreBackup, deleteBackup, getBackupDownloadUrl } from "/src/services/backupService.js";
import { t as translate, getCurrentLanguage } from "/src/i18n/config.ts";
const currentLang = getCurrentLanguage();
const t = (key, lang = currentLang) => {
  const translation = translate(key, lang);
  if (translation === key) {
    const hardcodedTranslations = {
      "backup.download": lang === "ca" ? "Descarregar" : "Descargar",
      "backup.restore": lang === "ca" ? "Restaurar" : "Restaurar",
      "backup.delete": lang === "ca" ? "Eliminar" : "Eliminar",
      "backup.loading": lang === "ca" ? "Carregant..." : "Cargando...",
      "backup.no_backups": lang === "ca" ? "No hi ha còpies de seguretat disponibles" : "No hay copias de seguridad disponibles",
      "backup.backup_created": lang === "ca" ? "Còpia de seguretat creada amb èxit" : "Copia de seguridad creada con éxito",
      "backup.backup_error": lang === "ca" ? "Error al crear la còpia de seguretat" : "Error al crear la copia de seguridad",
      "backup.restore_success": lang === "ca" ? "Sistema restaurat correctament" : "Sistema restaurado correctamente",
      "backup.restore_error": lang === "ca" ? "Error al restaurar el sistema" : "Error al restaurar el sistema",
      "backup.deleteSuccess": lang === "ca" ? "Còpia de seguretat eliminada correctament" : "Copia de seguridad eliminada correctamente",
      "backup.deleteInProgress": lang === "ca" ? "Eliminant..." : "Eliminando...",
      "backup.restoreInProgress": lang === "ca" ? "Restaurant sistema..." : "Restaurando sistema...",
      "backup.backupInProgress": lang === "ca" ? "Creant còpia de seguretat..." : "Creando copia de seguridad...",
      "backup.error": lang === "ca" ? "Error" : "Error"
    };
    return hardcodedTranslations[key] || key;
  }
  return translation;
};
let selectedBackup = null;
let backupsList = [];
const alertContainer = document.getElementById("alert-container");
const alertElement = document.getElementById("alert");
const alertMessage = document.getElementById("alert-message");
let createBackupBtn = document.getElementById("create-backup-btn");
let restoreBackupBtn = document.getElementById("restore-backup-btn");
let selectBackupBtn = document.getElementById("select-backup-btn");
let changeBackupBtn = document.getElementById("change-backup-btn");
const selectedBackupContainer = document.getElementById("selected-backup-container");
const noSelectedBackupContainer = document.getElementById("no-selected-backup-container");
const selectedBackupName = document.getElementById("selected-backup-name");
const backupsTableBody = document.getElementById("backups-table-body");
const includeAnimals = document.getElementById("include-animals");
const includeBirths = document.getElementById("include-births");
const includeConfig = document.getElementById("include-config");
function showAlert(message, type = "success") {
  alertContainer.classList.remove("hidden");
  alertMessage.innerText = message;
  alertElement.className = "p-4 rounded-md text-center";
  if (type === "success") {
    alertElement.classList.add("bg-green-100", "text-green-800", "dark:bg-green-900", "dark:text-green-200");
  } else if (type === "error") {
    alertElement.classList.add("bg-red-100", "text-red-800", "dark:bg-red-900", "dark:text-red-200");
  } else if (type === "warning") {
    alertElement.classList.add("bg-yellow-100", "text-yellow-800", "dark:bg-yellow-900", "dark:text-yellow-200");
  } else if (type === "info") {
    alertElement.classList.add("bg-blue-100", "text-blue-800", "dark:bg-blue-900", "dark:text-blue-200");
  }
  setTimeout(() => {
    alertContainer.classList.add("hidden");
  }, 5e3);
}
function setLoading(button, isLoading, text) {
  if (isLoading) {
    button.disabled = true;
    button.originalText = button.innerText;
    button.innerText = text || t("backup.loading", currentLang);
    button.classList.add("opacity-70");
  } else {
    button.disabled = false;
    button.innerText = button.originalText || button.innerText;
    button.classList.remove("opacity-70");
  }
}
function updateSelectedBackup(backup) {
  selectedBackup = backup;
  if (backup) {
    selectedBackupName.innerText = backup.filename;
    selectedBackupContainer.classList.remove("hidden");
    noSelectedBackupContainer.classList.add("hidden");
    restoreBackupBtn.classList.remove("opacity-50", "cursor-not-allowed");
    restoreBackupBtn.disabled = false;
  } else {
    selectedBackupContainer.classList.add("hidden");
    noSelectedBackupContainer.classList.remove("hidden");
    restoreBackupBtn.classList.add("opacity-50", "cursor-not-allowed");
    restoreBackupBtn.disabled = true;
  }
}
function getBackupTypeLabel(backup) {
  if (backup.backup_type) {
    switch (backup.backup_type) {
      case "daily":
        return "Backup diario programado";
      case "animal_created":
        return "Backup tras crear animal";
      case "animal_updated":
        return "Backup tras modificar animal";
      case "import":
        return "Backup tras importación";
      case "manual":
        return t("backup.manualBackup", currentLang);
      default:
        return backup.backup_type;
    }
  }
  if (backup.filename.includes("diario-auto")) {
    return t("backup.autoBackup", currentLang);
  } else if (backup.filename.includes("cambio-sistema")) {
    return t("backup.systemBackup", currentLang);
  } else {
    return t("backup.manualBackup", currentLang);
  }
}
function getBackupTypeColor(backupType) {
  switch (backupType) {
    case "animal_created":
      return "bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200";
    case "animal_updated":
      return "bg-indigo-100 dark:bg-indigo-900 text-indigo-800 dark:text-indigo-200";
    case "daily":
      return "bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200";
    case "import":
      return "bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200";
    case "manual":
      return "bg-amber-100 dark:bg-amber-900 text-amber-800 dark:text-amber-200";
    default:
      return "bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200";
  }
}
async function loadBackupsList() {
  try {
    backupsList = await getBackupsList();
    console.log("Datos de backups recibidos:", backupsList);
    console.log("Número de backups:", backupsList.length);
    const debugMsg = document.createElement("div");
    debugMsg.id = "debug-message";
    debugMsg.style.padding = "10px";
    debugMsg.style.margin = "10px 0";
    debugMsg.style.backgroundColor = "#f0f0f0";
    debugMsg.style.border = "1px solid #ccc";
    debugMsg.style.borderRadius = "4px";
    debugMsg.innerHTML = `Datos recibidos: ${backupsList.length} copias de seguridad<br>Último log: ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}`;
    const backupsTable = document.querySelector("#backups-table");
    if (backupsTable && !document.getElementById("debug-message")) {
      backupsTable.parentNode.insertBefore(debugMsg, backupsTable);
    }
    if (backupsList.length === 0) {
      backupsTableBody.innerHTML = `
            <tr class="text-center">
              <td colspan="5" class="px-6 py-4 text-sm text-gray-500 dark:text-gray-300">${t("backup.no_backups", currentLang)}</td>
            </tr>
          `;
      return;
    }
    backupsTableBody.innerHTML = backupsList.map((backup) => `
          <tr class="hover:bg-gray-50 dark:hover:bg-gray-700" data-filename="${backup.filename}">
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">${backup.date}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">${backup.size}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">${backup.created_by}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300">
              <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getBackupTypeColor(backup.backup_type)}">
                ${backup.backup_type || "manual"}
              </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300 max-w-xs truncate">
              ${backup.description || ""}
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
              <div class="flex space-x-2">
                <a href="${getBackupDownloadUrl(backup.filename)}" class="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-200" download>${t("backup.download", currentLang)}</a>
                <button class="restore-btn text-green-600 hover:text-green-900 dark:text-green-400 dark:hover:text-green-200">
                  ${t("backup.restore", currentLang)}
                </button>
                <button class="delete-btn text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-200">
                  ${t("backup.delete", currentLang)}
                </button>
              </div>
            </td>
          </tr>
        `).join("");
    document.querySelectorAll(".restore-btn").forEach((btn) => {
      btn.addEventListener("click", handleRestoreFromTable);
    });
    document.querySelectorAll(".delete-btn").forEach((btn) => {
      btn.addEventListener("click", handleDeleteFromTable);
    });
  } catch (error) {
    console.error("Error al cargar la lista de backups:", error);
    showAlert(`${t("backup.error")}: ${error.message}`, "error");
    backupsTableBody.innerHTML = `
          <tr class="text-center">
            <td colspan="5" class="px-6 py-4 text-sm text-red-500 dark:text-red-300">${t("backup.error", currentLang)}: ${error.message}</td>
          </tr>
        `;
  }
}
function initEventListeners() {
  createBackupBtn.addEventListener("click", handleCreateBackup);
}
async function handleCreateBackup() {
  console.log("Botón de backup clickeado");
  const options = {
    include_animals: includeAnimals.checked,
    include_births: includeBirths.checked,
    include_config: includeConfig.checked,
    created_by: "usuario"
  };
  setLoading(createBackupBtn, true, t("backup.backupInProgress", currentLang));
  try {
    const result = await createBackup(options);
    console.log("Backup creado correctamente:", result);
    showAlert(t("backup.backup_created", currentLang), "success");
    await loadBackupsList();
  } catch (error) {
    console.error("Error al crear backup:", error);
    if (error.message && error.message.includes("<!DOCTYPE")) {
      console.log("El backup probablemente se creó correctamente a pesar del error de parseo");
      showAlert(t("backup.backup_created", currentLang), "success");
      setTimeout(() => loadBackupsList(), 1e3);
    } else {
      showAlert(`${t("backup.backup_error", currentLang)}: ${error.message || "Error desconocido"}`, "error");
    }
  } finally {
    setLoading(createBackupBtn, false);
  }
}
async function handleRestoreBackup() {
  if (!selectedBackup) return;
  try {
    setLoading(restoreBackupBtn, true, t("backup.restoreInProgress", currentLang));
    await restoreBackup(selectedBackup.filename);
    showAlert(t("backup.restore_success", currentLang), "success");
    await loadBackupsList();
    updateSelectedBackup(null);
  } catch (error) {
    console.error("Error al restaurar backup:", error);
    showAlert(`${t("backup.error", currentLang)}: ${error.message}`, "error");
  } finally {
    setLoading(restoreBackupBtn, false);
  }
}
function handleSelectBackup() {
  if (backupsList.length > 0) {
    updateSelectedBackup(backupsList[0]);
  } else {
    showAlert(t("backup.no_backups", currentLang), "warning");
  }
}
function handleChangeBackup() {
  updateSelectedBackup(null);
}
function handleRestoreFromTable(event) {
  const row = event.target.closest("tr");
  const filename = row.dataset.filename;
  const backup = backupsList.find((b) => b.filename === filename);
  if (backup) {
    updateSelectedBackup(backup);
    document.getElementById("restore-backup-btn").scrollIntoView({ behavior: "smooth" });
  }
}
async function handleDeleteFromTable(event) {
  const row = event.target.closest("tr");
  const filename = row.dataset.filename;
  try {
    event.target.disabled = true;
    event.target.textContent = t("backup.deleteInProgress", currentLang);
    await deleteBackup(filename);
    showAlert(t("backup.deleteSuccess", currentLang), "success");
    await loadBackupsList();
    if (selectedBackup && selectedBackup.filename === filename) {
      updateSelectedBackup(null);
    }
  } catch (error) {
    console.error("Error al eliminar backup:", error);
    showAlert(`${t("backup.error", currentLang)}: ${error.message}`, "error");
    event.target.disabled = false;
    event.target.textContent = t("backup.delete", currentLang);
  }
}
function initPage() {
  console.log("Inicializando página de backup...");
  if (!createBackupBtn) {
    console.error("No se encontró el botón de crear backup");
    createBackupBtn = document.getElementById("create-backup-btn");
  }
  if (!restoreBackupBtn) {
    console.error("No se encontró el botón de restaurar backup");
    restoreBackupBtn = document.getElementById("restore-backup-btn");
  }
  if (!selectBackupBtn) {
    console.error("No se encontró el botón de seleccionar backup");
    selectBackupBtn = document.getElementById("select-backup-btn");
  }
  if (!changeBackupBtn) {
    console.error("No se encontró el botón de cambiar backup");
    changeBackupBtn = document.getElementById("change-backup-btn");
  }
  loadBackupsList();
  if (createBackupBtn) {
    console.log("Añadiendo event listener al botón de crear backup");
    createBackupBtn.addEventListener("click", handleCreateBackup);
  }
  if (restoreBackupBtn) {
    restoreBackupBtn.addEventListener("click", handleRestoreBackup);
  }
  if (selectBackupBtn) {
    selectBackupBtn.addEventListener("click", handleSelectBackup);
  }
  if (changeBackupBtn) {
    changeBackupBtn.addEventListener("click", handleChangeBackup);
  }
}
document.addEventListener("DOMContentLoaded", initPage);
setTimeout(initPage, 1e3);
try {
  initPage();
} catch (error) {
  console.error("Error al inicializar la página:", error);
}

//# sourceMappingURL=data:application/json;base64,