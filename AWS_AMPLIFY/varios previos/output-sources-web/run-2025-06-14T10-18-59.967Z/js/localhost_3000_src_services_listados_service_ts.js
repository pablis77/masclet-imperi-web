import apiService from "/src/services/apiService.ts";
export async function getListados() {
  try {
    return await apiService.get("listados/");
  } catch (error) {
    console.error("Error al obtener listados:", error);
    return [];
  }
}
export async function getListado(id) {
  try {
    return await apiService.get(`listados/${id}`);
  } catch (error) {
    console.error(`Error al obtener listado ${id}:`, error);
    return {};
  }
}
export async function createListado(data) {
  try {
    const adaptedData = {
      nombre: data.name || "",
      descripcion: data.description || "",
      categoria: data.category || "",
      is_completed: data.is_completed || false,
      animales: data.animals || []
    };
    return await apiService.post("listados/", adaptedData);
  } catch (error) {
    console.error("Error al crear listado:", error);
    throw error;
  }
}
export async function getAnimals() {
  try {
    console.log("Obteniendo animales desde el backend...");
    const allAnimals = [];
    let offset = 0;
    const limit = 1e3;
    let hasMoreAnimals = true;
    while (hasMoreAnimals) {
      try {
        const url = `animals/?offset=${offset}&limit=${limit}`;
        console.log(`Obteniendo lote de animales: ${url}`);
        const response = await apiService.get(url);
        let animalsInPage = [];
        if (response && typeof response === "object") {
          if (response.status === "success" && response.data) {
            if (Array.isArray(response.data)) {
              animalsInPage = response.data;
            } else if (response.data.items && Array.isArray(response.data.items)) {
              animalsInPage = response.data.items;
            }
          } else if (Array.isArray(response)) {
            animalsInPage = response;
          }
        }
        console.log(`Obtenidos ${animalsInPage.length} animales en esta página`);
        allAnimals.push(...animalsInPage);
        if (animalsInPage.length < limit) {
          hasMoreAnimals = false;
          console.log("No hay más animales para obtener");
        } else {
          offset += limit;
          console.log(`Avanzando a offset=${offset}`);
        }
      } catch (pageError) {
        console.error("Error al obtener página de animales:", pageError);
        hasMoreAnimals = false;
      }
    }
    console.log(`Total de animales obtenidos: ${allAnimals.length}`);
    return allAnimals;
  } catch (error) {
    console.error("Error al obtener animales:", error);
    return [];
  }
}
export async function updateListadoAnimales(id, animales) {
  try {
    return await apiService.put(`listados/${id}/animales`, { animales });
  } catch (error) {
    console.error(`Error al actualizar los animales del listado ${id}:`, error);
    throw error;
  }
}
export async function deleteListado(id) {
  try {
    return await apiService.del(`listados/${id}`);
  } catch (error) {
    console.error(`Error al eliminar el listado ${id}:`, error);
    throw error;
  }
}

//# sourceMappingURL=data:application/json;base64,