import * as listadosService from "/src/services/listados-service.ts";
import { getCurrentLanguage, t } from "/src/i18n/config.ts";
function updateAllTranslations() {
  try {
    const currentLang = getCurrentLanguage();
    console.log("Listados: Actualizando traducciones al idioma:", currentLang);
    document.querySelectorAll("[data-i18n-key]").forEach((el) => {
      const key = el.getAttribute("data-i18n-key");
      if (key) {
        const translation = t(key, currentLang);
        if (translation !== key) {
          el.textContent = translation;
          console.log(`Traducido '${key}' a '${translation}'`);
        }
      }
    });
    const pageTitle = document.getElementById("page-title");
    if (pageTitle) {
      pageTitle.textContent = t("listings.title", currentLang);
    }
  } catch (error) {
    console.error("Error al actualizar traducciones:", error);
  }
}
document.addEventListener("DOMContentLoaded", () => {
  updateAllTranslations();
  window.addEventListener("storage", function(e) {
    if (e.key === "userLanguage") {
      updateAllTranslations();
    }
  });
});
document.addEventListener("DOMContentLoaded", async () => {
  const listadosContainer = document.getElementById("listados-container");
  const listadosTable = document.getElementById("listados-table");
  const listadosBody = document.getElementById("listados-body");
  const loadingMessage = document.getElementById("loading-message");
  const errorMessage = document.getElementById("error-message");
  const emptyMessage = document.getElementById("empty-message");
  const token = localStorage.getItem("token");
  if (!token) {
    window.location.href = "/login";
    return;
  }
  const currentLang = localStorage.getItem("userLanguage") || "es";
  const translations = {
    es: {
      view: "Ver",
      edit: "Editar",
      delete: "Eliminar",
      "export": "Exportar",
      confirmDelete: "¿Estás seguro de que quieres eliminar este listado?",
      error: "Error al cargar los listados.",
      dateFormat: {
        day: "2-digit",
        month: "2-digit",
        year: "numeric"
      }
    },
    ca: {
      view: "Veure",
      edit: "Editar",
      delete: "Eliminar",
      "export": "Exportar",
      confirmDelete: "Estàs segur que vols eliminar aquest llistat?",
      error: "Error al carregar els llistats.",
      dateFormat: {
        day: "2-digit",
        month: "2-digit",
        year: "numeric"
      }
    }
  };
  const t2 = (key) => {
    return translations[currentLang]?.[key] || key;
  };
  try {
    const listados = await listadosService.getListados();
    loadingMessage.classList.add("hidden");
    if (listados.length === 0) {
      emptyMessage.classList.remove("hidden");
    } else {
      listadosTable.classList.remove("hidden");
      listadosBody.innerHTML = "";
      const dateFormatter = new Intl.DateTimeFormat(
        currentLang === "ca" ? "ca-ES" : "es-ES",
        t2("dateFormat")
      );
      listados.forEach((listado) => {
        const row = document.createElement("tr");
        const createdDate = new Date(listado.created_at);
        const formattedDate = dateFormatter.format(createdDate);
        row.innerHTML = `
            <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 dark:text-gray-100 sm:pl-6">
              ${listado.nombre}
            </td>
            <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400">
              ${listado.categoria || "-"}
            </td>
            <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400">
              ${listado.animales_count || 0}
            </td>
            <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400">
              ${formattedDate}
            </td>
            <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
              <div class="flex justify-end space-x-2">
                <a href="/listados/${listado.id}" class="inline-flex items-center px-2 py-1 bg-primary text-white rounded hover:bg-primary/80">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                  </svg>
                  ${t2("view")}
                </a>
                <a href="/listados/editar/${listado.id}" class="inline-flex items-center px-2 py-1 bg-blue-600 text-white rounded hover:bg-blue-700">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                  </svg>
                  ${t2("edit")}
                </a>
                <button 
                  data-listado-id="${listado.id}" 
                  class="delete-button inline-flex items-center px-2 py-1 bg-red-600 text-white rounded hover:bg-red-700"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                  ${t2("delete")}
                </button>
                <!-- Enlace de exportar eliminado -->
              </div>
            </td>
          `;
        listadosBody.appendChild(row);
      });
      document.querySelectorAll(".delete-button").forEach((button) => {
        button.addEventListener("click", async (e) => {
          const listadoId = e.target.dataset.listadoId;
          if (confirm(t2("confirmDelete"))) {
            try {
              await listadosService.deleteListado(listadoId);
              window.location.reload();
            } catch (error) {
              console.error("Error al eliminar listado:", error);
              alert(error.message);
            }
          }
        });
      });
    }
  } catch (error) {
    console.error("Error al cargar listados:", error);
    loadingMessage.classList.add("hidden");
    errorMessage.classList.remove("hidden");
    errorMessage.textContent = `${t2("error")} ${error.message}`;
  }
});

//# sourceMappingURL=data:application/json;base64,