import axios from "/node_modules/.vite/deps/axios.js?v=5e89932e";
import {
  API_BASE_URL,
  API_TIMEOUT,
  API_DEFAULT_HEADERS,
  environment,
  isProduction,
  isLocal,
  TOKEN_NAME
} from "/src/services/apiConfigAdapter.ts";
let ENVIRONMENT = environment;
let USE_MOCK_DATA = false;
console.log(`[ApiService] Entorno: ${ENVIRONMENT}`);
console.log(`[ApiService] API configurada para conectarse a: ${API_BASE_URL}`);
if (isProduction) {
  console.log("[ApiService] Ejecutando en modo PRODUCCIÓN");
} else {
  console.log("[ApiService] Ejecutando en modo LOCAL");
}
let apiBaseUrl = API_BASE_URL;
const api = axios.create({
  baseURL: apiBaseUrl,
  timeout: API_TIMEOUT,
  headers: API_DEFAULT_HEADERS
});
api.interceptors.request.use(
  (config) => {
    const endpoint = config.url || "";
    const finalUrl = `${config.baseURL || ""}${config.url || ""}`;
    if (finalUrl.includes("/api/v1/api/v1/")) {
      console.log(`[API] Corrigiendo URL duplicada: ${finalUrl}`);
      const fixedUrl = finalUrl.replace("/api/v1/api/v1/", "/api/v1/");
      const baseUrlPart = config.baseURL || "";
      config.url = fixedUrl.replace(baseUrlPart, "");
      console.log(`[API] URL corregida: ${baseUrlPart}${config.url}`);
    }
    if (typeof localStorage !== "undefined" && localStorage.getItem(TOKEN_NAME)) {
      config.headers.Authorization = `Bearer ${localStorage.getItem(TOKEN_NAME)}`;
    }
    config.withCredentials = false;
    if (isProduction) {
      if (config.url && config.url.startsWith("http:")) {
        config.url = config.url.replace("http:", "https:");
      }
      if (config.baseURL && config.baseURL.startsWith("http:")) {
        config.baseURL = config.baseURL.replace("http:", "https:");
      }
      console.log(`[PROD] URL final: ${config.baseURL}${config.url}`);
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);
api.interceptors.request.use(
  (config) => {
    if (typeof window !== "undefined" && window.localStorage) {
      try {
        const token = localStorage.getItem(TOKEN_NAME);
        if (token) {
          config.headers["Authorization"] = `Bearer ${token}`;
          console.log("Usando token JWT para autenticación");
        } else {
          console.warn("No se encontró token en localStorage");
        }
      } catch (e) {
        console.warn("No se pudo acceder a localStorage:", e);
      }
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);
export function configureApi(baseUrl, useMockData = false) {
  apiBaseUrl = baseUrl;
  USE_MOCK_DATA = useMockData;
  api.defaults.baseURL = baseUrl;
  console.log(`API configurada con URL base: ${baseUrl}`);
  console.log(`Uso de datos simulados: ${useMockData ? "SÍ" : "NO"}`);
}
export async function get(endpoint) {
  try {
    const normalizedEndpoint = endpoint.startsWith("/") ? endpoint : `/${endpoint}`;
    let apiEndpoint = normalizedEndpoint;
    const baseUrlHasPrefix = apiBaseUrl.includes("/api/v1");
    if (!apiEndpoint.startsWith("/api/v1") && !baseUrlHasPrefix) {
      apiEndpoint = `/api/v1${normalizedEndpoint}`;
      console.log(`Añadiendo prefijo a endpoint: ${normalizedEndpoint} -> ${apiEndpoint}`);
    }
    const finalEndpoint = !apiEndpoint.includes("?") && apiEndpoint.endsWith("/") ? apiEndpoint.slice(0, -1) : apiEndpoint;
    if (isProduction) {
    } else {
      console.log(`Realizando petición GET a: ${finalEndpoint}`);
    }
    const response = await api.get(finalEndpoint);
    if (response.data === void 0 || response.data === null) {
      if (Array.isArray(response.data)) {
        return [];
      } else {
        return {};
      }
    }
    return response.data;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error(`❌ Error en petición GET a ${endpoint}: ${error.message} (${error.response?.status || "sin status"})`);
    } else {
      console.error(`❌ Error no relacionado con Axios en ${endpoint}: ${error}`);
    }
    if (axios.isAxiosError(error) && error.response?.status === 404) {
      const originalUrl = error.config?.url || "";
      const absoluteUrl = error.config?.baseURL ? `${error.config.baseURL}${originalUrl}` : originalUrl;
      if (!isProduction) {
      } else {
        if (absoluteUrl.includes("://")) {
          try {
            const urlObj = new URL(absoluteUrl);
            const relativePath = urlObj.pathname + urlObj.search;
            try {
              const retryResponse = await axios.get(relativePath, {
                baseURL: "",
                headers: error.config?.headers
              });
              return retryResponse.data;
            } catch (retryError) {
            }
          } catch (e) {
          }
        }
        if (originalUrl.includes("//") || originalUrl.includes("api/api") || originalUrl.includes("/api/v1") && endpoint.includes("/api/v1")) {
          let correctedUrl = endpoint.replace(/api\/api/g, "api");
          correctedUrl = correctedUrl.replace(/\/api\/v1\/api\/v1/g, "/api/v1");
          correctedUrl = correctedUrl.replace(/\/\/api\/v1/g, "/api/v1");
          if (correctedUrl !== endpoint) {
            try {
              const retryResponse = await api.get(correctedUrl);
              return retryResponse.data;
            } catch (retryError) {
            }
          }
        }
        if (error.config?.baseURL) {
          try {
            let finalAttemptUrl = originalUrl;
            if (!finalAttemptUrl.startsWith("/api")) {
              finalAttemptUrl = `/api/v1/${finalAttemptUrl.startsWith("/") ? finalAttemptUrl.substring(1) : finalAttemptUrl}`;
            }
            const lastResponse = await axios.get(finalAttemptUrl, {
              baseURL: ""
            });
            return lastResponse.data;
          } catch (lastError) {
          }
        }
      }
      if (endpoint.includes("list") || endpoint.includes("all") || endpoint.includes("explotacions") || endpoint.includes("animales")) {
        return [];
      }
    }
    return {};
  }
}
export async function post(endpoint, data) {
  try {
    const normalizedEndpoint = endpoint.startsWith("/") ? endpoint : `/${endpoint}`;
    const response = await api.post(normalizedEndpoint, data);
    return response.data;
  } catch (error) {
    console.error(`Error en petición POST a ${endpoint}:`, error);
    throw error;
  }
}
export async function put(endpoint, data) {
  try {
    const normalizedEndpoint = endpoint.startsWith("/") ? endpoint : `/${endpoint}`;
    const response = await api.put(normalizedEndpoint, data);
    return response.data;
  } catch (error) {
    console.error(`Error en petición PUT a ${endpoint}:`, error);
    throw error;
  }
}
export async function patch(endpoint, data) {
  try {
    const normalizedEndpoint = endpoint.startsWith("/") ? endpoint : `/${endpoint}`;
    console.log(`Realizando petición PATCH a ${apiBaseUrl}${normalizedEndpoint}`);
    console.log("Datos enviados:", data);
    const response = await api.patch(normalizedEndpoint, data);
    return response.data;
  } catch (error) {
    console.error(`Error en petición PATCH a ${endpoint}:`, error);
    throw error;
  }
}
export async function del(endpoint) {
  try {
    const normalizedEndpoint = endpoint.startsWith("/") ? endpoint : `/${endpoint}`;
    const response = await api.delete(normalizedEndpoint);
    return response.data;
  } catch (error) {
    console.error(`Error en petición DELETE a ${endpoint}:`, error);
    throw error;
  }
}
export async function isAuthenticated() {
  try {
    if (typeof window !== "undefined" && window.localStorage) {
      const token = localStorage.getItem("token");
      if (!token) return false;
      return true;
    }
    return false;
  } catch (error) {
    console.error("Error al verificar autenticación:", error);
    return false;
  }
}
export async function getUserInfo() {
  try {
    if (await isAuthenticated()) {
      return await get("/users/me");
    }
    return null;
  } catch (error) {
    console.error("Error al obtener información del usuario:", error);
    return null;
  }
}
export async function login(username, password) {
  try {
    const formData = new URLSearchParams();
    formData.append("username", username);
    formData.append("password", password);
    formData.append("grant_type", "password");
    const loginEndpoint = "/auth/login";
    let loginUrl = loginEndpoint;
    let useBaseUrlOverride = false;
    let baseUrlOverride = "";
    if (typeof window !== "undefined") {
      const hostname = window.location.hostname;
      const isLocalNetwork = hostname === "localhost" || hostname === "127.0.0.1" || /^192\.168\./.test(hostname) || /^10\./.test(hostname) || /^172\.(1[6-9]|2[0-9]|3[0-1])/.test(hostname);
      if (isLocalNetwork) {
        useBaseUrlOverride = true;
        baseUrlOverride = "http://127.0.0.1:8000/api/v1";
        loginUrl = "/auth/login";
        console.log(`Realizando login a: ${baseUrlOverride}${loginUrl}`);
      } else if (isProduction) {
        console.log(`Realizando login a: /api/v1${loginEndpoint}`);
      } else {
        console.log(`Realizando login a: ${api.defaults.baseURL}${loginEndpoint}`);
      }
    } else {
      console.log(`Realizando login a: ${api.defaults.baseURL}${loginEndpoint}`);
    }
    let response;
    if (useBaseUrlOverride) {
      const tempAxios = axios.create({
        baseURL: baseUrlOverride,
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        }
      });
      response = await tempAxios.post(loginUrl, formData);
    } else {
      response = await api.post(loginEndpoint, formData, {
        headers: {
          "Content-Type": "application/x-www-form-urlencoded"
        }
      });
    }
    if (typeof window !== "undefined" && window.localStorage && response.data.access_token) {
      localStorage.setItem("token", response.data.access_token);
      console.log("Token guardado correctamente");
    }
    return response;
  } catch (error) {
    console.error("Error al iniciar sesión:", error);
    throw error;
  }
}
export function getBaseUrl() {
  return apiBaseUrl;
}
;
export default {
  get,
  post,
  put,
  patch,
  del,
  isAuthenticated,
  getUserInfo,
  login,
  configureApi,
  getBaseUrl
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaVNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTZXJ2aWNpbyBBUEkgY2VudHJhbGl6YWRvIHBhcmEgTWFzY2xldCBJbXBlcmlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogXG4gKiBFc3RhIHZlcnNpw7NuIGhhIHNpZG8gYWN0dWFsaXphZGEgcGFyYSB1c2FyIGxhIGNvbmZpZ3VyYWNpw7NuIGNlbnRyYWxpemFkYVxuICogZGUgQVBJIGEgdHJhdsOpcyBkZWwgYWRhcHRhZG9yIGFwaUNvbmZpZ0FkYXB0ZXIudHNcbiAqL1xuXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgXG4gIEFQSV9CQVNFX1VSTCxcbiAgQVBJX1RJTUVPVVQsXG4gIEFQSV9ERUZBVUxUX0hFQURFUlMsXG4gIGVudmlyb25tZW50LFxuICBpc1Byb2R1Y3Rpb24sXG4gIGlzTG9jYWwsXG4gIFRPS0VOX05BTUVcbn0gZnJvbSAnLi9hcGlDb25maWdBZGFwdGVyJztcblxuLy8gVmFyaWFibGVzIHBhcmEgbWFudGVuZXIgY29tcGF0aWJpbGlkYWQgY29uIGPDs2RpZ28gZXhpc3RlbnRlXG5sZXQgRU5WSVJPTk1FTlQ6IHN0cmluZyA9IGVudmlyb25tZW50O1xubGV0IFVTRV9NT0NLX0RBVEE6IGJvb2xlYW4gPSBmYWxzZTtcblxuLy8gSW1wcmltaXIgaW5mb3JtYWNpw7NuIGRlIGRpYWduw7NzdGljb1xuY29uc29sZS5sb2coYFtBcGlTZXJ2aWNlXSBFbnRvcm5vOiAke0VOVklST05NRU5UfWApO1xuY29uc29sZS5sb2coYFtBcGlTZXJ2aWNlXSBBUEkgY29uZmlndXJhZGEgcGFyYSBjb25lY3RhcnNlIGE6ICR7QVBJX0JBU0VfVVJMfWApO1xuXG5pZiAoaXNQcm9kdWN0aW9uKSB7XG4gIGNvbnNvbGUubG9nKCdbQXBpU2VydmljZV0gRWplY3V0YW5kbyBlbiBtb2RvIFBST0RVQ0NJw5NOJyk7XG59IGVsc2Uge1xuICAvLyBNb2RvIGxvY2FsIChpbmNsdXllIGxvY2FsaG9zdCwgMTI3LjAuMC4xLCByZWRlcyBpbnRlcm5hcywgZXRjLilcbiAgY29uc29sZS5sb2coJ1tBcGlTZXJ2aWNlXSBFamVjdXRhbmRvIGVuIG1vZG8gTE9DQUwnKTtcbn1cblxuLy8gQ3JlZGVuY2lhbGVzIGZpamFzIHBhcmEgZGVzYXJyb2xsbzogYWRtaW4vYWRtaW4xMjNcbi8vIEVzdGFzIHNvbiBsYXMgY3JlZGVuY2lhbGVzIGluZGljYWRhcyBlbiBsb3MgcmVxdWlzaXRvc1xuXG4vLyBNYW50ZW5lciB1bmEgY29waWEgbG9jYWwgZGUgbGEgVVJMIGJhc2UgcGFyYSBwb3NpYmxlcyBtb2RpZmljYWNpb25lc1xubGV0IGFwaUJhc2VVcmwgPSBBUElfQkFTRV9VUkw7XG5cbi8vIENyZWFyIGluc3RhbmNpYSBkZSBheGlvcyBjb24gY29uZmlndXJhY2nDs24gYmFzZSBjZW50cmFsaXphZGFcbmNvbnN0IGFwaSA9IGF4aW9zLmNyZWF0ZSh7XG4gIGJhc2VVUkw6IGFwaUJhc2VVcmwsXG4gIHRpbWVvdXQ6IEFQSV9USU1FT1VULFxuICBoZWFkZXJzOiBBUElfREVGQVVMVF9IRUFERVJTXG59KTtcblxuLy8gR0VTVEnDk04gVU5JVkVSU0FMIERFIFBFVElDSU9ORVMgQVBJXG5hcGkuaW50ZXJjZXB0b3JzLnJlcXVlc3QudXNlKFxuICAoY29uZmlnKSA9PiB7XG4gICAgY29uc3QgZW5kcG9pbnQgPSBjb25maWcudXJsIHx8ICcnO1xuICAgIFxuICAgIC8vIERlYnVnIHBhcmEgdG9kYXMgbGFzIHBldGljaW9uZXNcbiAgICAvLyBjb25zb2xlLmxvZyhgW0FQSV0gUHJvY2VzYW5kbyBzb2xpY2l0dWQ6ICR7ZW5kcG9pbnR9YCk7XG4gICAgXG4gICAgLy8gRXZpdGFyIGR1cGxpY2FjacOzbiBkZSBwcmVmaWpvcyAvYXBpL3YxXG4gICAgY29uc3QgZmluYWxVcmwgPSBgJHtjb25maWcuYmFzZVVSTCB8fCAnJ30ke2NvbmZpZy51cmwgfHwgJyd9YDtcbiAgICBpZiAoZmluYWxVcmwuaW5jbHVkZXMoJy9hcGkvdjEvYXBpL3YxLycpKSB7XG4gICAgICBjb25zb2xlLmxvZyhgW0FQSV0gQ29ycmlnaWVuZG8gVVJMIGR1cGxpY2FkYTogJHtmaW5hbFVybH1gKTtcbiAgICAgIGNvbnN0IGZpeGVkVXJsID0gZmluYWxVcmwucmVwbGFjZSgnL2FwaS92MS9hcGkvdjEvJywgJy9hcGkvdjEvJyk7XG4gICAgICBjb25zdCBiYXNlVXJsUGFydCA9IGNvbmZpZy5iYXNlVVJMIHx8ICcnO1xuICAgICAgY29uZmlnLnVybCA9IGZpeGVkVXJsLnJlcGxhY2UoYmFzZVVybFBhcnQsICcnKTtcbiAgICAgIGNvbnNvbGUubG9nKGBbQVBJXSBVUkwgY29ycmVnaWRhOiAke2Jhc2VVcmxQYXJ0fSR7Y29uZmlnLnVybH1gKTtcbiAgICB9XG4gICAgXG4gICAgLy8gQXNlZ3VyYXIgZW5jYWJlemFkb3MgQVVUSFxuICAgIGlmICh0eXBlb2YgbG9jYWxTdG9yYWdlICE9PSAndW5kZWZpbmVkJyAmJiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShUT0tFTl9OQU1FKSkge1xuICAgICAgY29uZmlnLmhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IGBCZWFyZXIgJHtsb2NhbFN0b3JhZ2UuZ2V0SXRlbShUT0tFTl9OQU1FKX1gO1xuICAgIH1cbiAgICBcbiAgICAvLyBOTyBhY3RpdmFtb3Mgd2l0aENyZWRlbnRpYWxzIGVuIG5pbmfDum4gZW50b3JubyBwYXJhIGV2aXRhciBwcm9ibGVtYXMgQ09SU1xuICAgIC8vIExhcyBjb29raWVzIG5vIHNvbiBuZWNlc2FyaWFzIHBhcmEgbnVlc3RybyBlc3F1ZW1hIGRlIGF1dGVudGljYWNpw7NuIEpXVFxuICAgIGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgPSBmYWxzZTtcbiAgICBcbiAgICAvLyBTaSBlc3RhbW9zIGVuIHByb2R1Y2Npw7NuLCBjb25maWd1cmFjacOzbiBhZGljaW9uYWxcbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAvLyBFbiBwcm9kdWNjacOzbiwgYXNlZ3VyYXIgcXVlIHRvZGFzIGxhcyBwZXRpY2lvbmVzIHNvbiBzZWd1cmFzXG4gICAgICBpZiAoY29uZmlnLnVybCAmJiBjb25maWcudXJsLnN0YXJ0c1dpdGgoJ2h0dHA6JykpIHtcbiAgICAgICAgY29uZmlnLnVybCA9IGNvbmZpZy51cmwucmVwbGFjZSgnaHR0cDonLCAnaHR0cHM6Jyk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEFzZWd1cmFyIHF1ZSBiYXNlVVJMIGVzIEhUVFBTIGVuIHByb2R1Y2Npw7NuXG4gICAgICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgY29uZmlnLmJhc2VVUkwuc3RhcnRzV2l0aCgnaHR0cDonKSkge1xuICAgICAgICBjb25maWcuYmFzZVVSTCA9IGNvbmZpZy5iYXNlVVJMLnJlcGxhY2UoJ2h0dHA6JywgJ2h0dHBzOicpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zb2xlLmxvZyhgW1BST0RdIFVSTCBmaW5hbDogJHtjb25maWcuYmFzZVVSTH0ke2NvbmZpZy51cmx9YCk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBjb25maWc7XG4gIH0sXG4gIChlcnJvcikgPT4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH1cbik7XG5cbi8vIEludGVyY2VwdG9yIHBhcmEgYcOxYWRpciBjcmVkZW5jaWFsZXMgYSB0b2RhcyBsYXMgcGV0aWNpb25lc1xuYXBpLmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShcbiAgKGNvbmZpZykgPT4ge1xuICAgIC8vIEludGVudGFyIHVzYXIgZWwgdG9rZW4gSldUIGRlbCBsb2NhbFN0b3JhZ2VcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmxvY2FsU3RvcmFnZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShUT0tFTl9OQU1FKTtcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgY29uZmlnLmhlYWRlcnNbJ0F1dGhvcml6YXRpb24nXSA9IGBCZWFyZXIgJHt0b2tlbn1gO1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdVc2FuZG8gdG9rZW4gSldUIHBhcmEgYXV0ZW50aWNhY2nDs24nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ05vIHNlIGVuY29udHLDsyB0b2tlbiBlbiBsb2NhbFN0b3JhZ2UnKTtcbiAgICAgICAgICAvLyBPcGNpb25hbDogcmVkaXJpZ2lyIGEgbG9naW4gc2kgbm8gaGF5IHRva2VuXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdObyBzZSBwdWRvIGFjY2VkZXIgYSBsb2NhbFN0b3JhZ2U6JywgZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb25maWc7XG4gIH0sXG4gIChlcnJvcikgPT4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gIH1cbik7XG5cbi8vIEZ1bmNpw7NuIHBhcmEgY29uZmlndXJhciBsYSBBUElcbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVBcGkoYmFzZVVybDogc3RyaW5nLCB1c2VNb2NrRGF0YTogYm9vbGVhbiA9IGZhbHNlKSB7XG4gIGFwaUJhc2VVcmwgPSBiYXNlVXJsOyAvLyBVc2FyIHZhcmlhYmxlIGxvY2FsIGVuIGx1Z2FyIGRlIGxhIGltcG9ydGFkYVxuICBVU0VfTU9DS19EQVRBID0gdXNlTW9ja0RhdGE7XG4gIGFwaS5kZWZhdWx0cy5iYXNlVVJMID0gYmFzZVVybDtcbiAgXG4gIGNvbnNvbGUubG9nKGBBUEkgY29uZmlndXJhZGEgY29uIFVSTCBiYXNlOiAke2Jhc2VVcmx9YCk7XG4gIGNvbnNvbGUubG9nKGBVc28gZGUgZGF0b3Mgc2ltdWxhZG9zOiAke3VzZU1vY2tEYXRhID8gJ1PDjScgOiAnTk8nfWApO1xufVxuXG4vLyBGdW5jacOzbiBwYXJhIHJlYWxpemFyIHBldGljaW9uZXMgR0VUXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0PFQgPSBhbnk+KGVuZHBvaW50OiBzdHJpbmcpOiBQcm9taXNlPFQ+IHtcbiAgdHJ5IHtcbiAgICAvLyBOb3JtYWxpemFyIGVuZHBvaW50IGFzZWd1cmFuZG8gcXVlIGVtcGllY2UgY29uIC9cbiAgICBjb25zdCBub3JtYWxpemVkRW5kcG9pbnQgPSBlbmRwb2ludC5zdGFydHNXaXRoKCcvJykgPyBlbmRwb2ludCA6IGAvJHtlbmRwb2ludH1gO1xuICAgIFxuICAgIC8vIElNUE9SVEFOVEU6IEHDsWFkaXIgcHJlZmlqbyAvYXBpL3YxIHNpIG5vIGVzdMOhIHByZXNlbnRlIHkgbm8gaGF5IHlhIHVuIHByZWZpam8gZW4gbGEgVVJMIGJhc2VcbiAgICBsZXQgYXBpRW5kcG9pbnQgPSBub3JtYWxpemVkRW5kcG9pbnQ7XG4gICAgLy8gQ29tcHJvYmFyIHNpIHlhIGhheSB1biBwcmVmaWpvIGVuIGxhIFVSTCBiYXNlIChjb25maWcuYmFzZVVSTCkgbyBzaSB5YSBoYXkgdW4gcHJlZmlqbyBlbiBlbCBlbmRwb2ludFxuICAgIGNvbnN0IGJhc2VVcmxIYXNQcmVmaXggPSBhcGlCYXNlVXJsLmluY2x1ZGVzKCcvYXBpL3YxJyk7XG4gICAgaWYgKCFhcGlFbmRwb2ludC5zdGFydHNXaXRoKCcvYXBpL3YxJykgJiYgIWJhc2VVcmxIYXNQcmVmaXgpIHtcbiAgICAgIGFwaUVuZHBvaW50ID0gYC9hcGkvdjEke25vcm1hbGl6ZWRFbmRwb2ludH1gO1xuICAgICAgY29uc29sZS5sb2coYEHDsWFkaWVuZG8gcHJlZmlqbyBhIGVuZHBvaW50OiAke25vcm1hbGl6ZWRFbmRwb2ludH0gLT4gJHthcGlFbmRwb2ludH1gKTtcbiAgICB9XG4gICAgXG4gICAgLy8gUXVpdGFyIC8gYWwgZmluYWwgc2kgZWwgZW5kcG9pbnQgbG8gdGllbmUgeSBubyBjb250aWVuZSBxdWVyeSBwYXJhbXNcbiAgICAvLyBFbCBiYWNrZW5kIGVzdMOhIHJlZGlyaWdpZW5kbyBsb3MgZW5kcG9pbnRzIGNvbiAvIGFsIGZpbmFsIGEgbG9zIHF1ZSBubyBsbyB0aWVuZW5cbiAgICBjb25zdCBmaW5hbEVuZHBvaW50ID0gKCFhcGlFbmRwb2ludC5pbmNsdWRlcygnPycpICYmIGFwaUVuZHBvaW50LmVuZHNXaXRoKCcvJykpIFxuICAgICAgPyBhcGlFbmRwb2ludC5zbGljZSgwLCAtMSkgXG4gICAgICA6IGFwaUVuZHBvaW50O1xuICAgIFxuICAgIC8vIElNUE9SVEFOVEU6IEVuIHByb2R1Y2Npw7NuLCBzb2xvIGltcHJpbWlyIGxhIHJ1dGEgcmVsYXRpdmFcbiAgICBpZiAoaXNQcm9kdWN0aW9uKSB7XG4gICAgICAvLyBjb25zb2xlLmxvZyhgUmVhbGl6YW5kbyBwZXRpY2nDs24gR0VUIGE6ICR7ZmluYWxFbmRwb2ludH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coYFJlYWxpemFuZG8gcGV0aWNpw7NuIEdFVCBhOiAke2ZpbmFsRW5kcG9pbnR9YCk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldDxUPihmaW5hbEVuZHBvaW50KTtcbiAgICBcbiAgICAvLyBSZWdpc3RyYXIgaW5mb3JtYWNpw7NuIGRldGFsbGFkYSBkZSBsYSByZXNwdWVzdGEgcGFyYSBkZXB1cmFjacOzblxuICAgIC8vIGNvbnNvbGUubG9nKGDinIUgUmVzcHVlc3RhIHJlY2liaWRhIGRlICR7ZmluYWxFbmRwb2ludH06YCwge1xuICAgIC8vICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG4gICAgLy8gICBzdGF0dXNUZXh0OiByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgIC8vICAgZGF0YVR5cGU6IHR5cGVvZiByZXNwb25zZS5kYXRhLFxuICAgIC8vICAgaXNOdWxsOiByZXNwb25zZS5kYXRhID09PSBudWxsLFxuICAgIC8vICAgaXNVbmRlZmluZWQ6IHJlc3BvbnNlLmRhdGEgPT09IHVuZGVmaW5lZCxcbiAgICAvLyAgIGRhdGFMZW5ndGg6IHJlc3BvbnNlLmRhdGEgJiYgdHlwZW9mIHJlc3BvbnNlLmRhdGEgPT09ICdvYmplY3QnID8gT2JqZWN0LmtleXMocmVzcG9uc2UuZGF0YSkubGVuZ3RoIDogJ04vQSdcbiAgICAvLyB9KTtcbiAgICBcbiAgICAvLyBTaSBsYSBkYXRhIGVzIHVuZGVmaW5lZCBvIG51bGwsIHJlZ2lzdHJhciB3YXJuaW5nIHkgZGV2b2x2ZXIgb2JqZXRvIHZhY8Otb1xuICAgIGlmIChyZXNwb25zZS5kYXRhID09PSB1bmRlZmluZWQgfHwgcmVzcG9uc2UuZGF0YSA9PT0gbnVsbCkge1xuICAgICAgLy8gY29uc29sZS53YXJuKGDimqDvuI8gRGF0b3MgcmVjaWJpZG9zIHZhY8Otb3MgZW4gJHtmaW5hbEVuZHBvaW50fWApO1xuICAgICAgXG4gICAgICAvLyBEZXZvbHZlciBvYmpldG8gdmFjw61vIGRlbCB0aXBvIGVzcGVyYWRvIHBhcmEgZXZpdGFyIGVycm9yZXNcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3BvbnNlLmRhdGEpKSB7XG4gICAgICAgIHJldHVybiBbXSBhcyB1bmtub3duIGFzIFQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge30gYXMgVDtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8gTWVqb3JhciBlbCBsb2cgZGUgZXJyb3JlcyBwYXJhIGZhY2lsaXRhciBsYSBkZXB1cmFjacOzblxuICAgIGlmIChheGlvcy5pc0F4aW9zRXJyb3IoZXJyb3IpKSB7XG4gICAgICAvLyBTb2xvIG1hbnRlbmVtb3MgdW4gbG9nIGRlIGVycm9yIGLDoXNpY28gcGFyYSBkaWFnbsOzc3RpY29cbiAgICAgIGNvbnNvbGUuZXJyb3IoYOKdjCBFcnJvciBlbiBwZXRpY2nDs24gR0VUIGEgJHtlbmRwb2ludH06ICR7ZXJyb3IubWVzc2FnZX0gKCR7ZXJyb3IucmVzcG9uc2U/LnN0YXR1cyB8fCAnc2luIHN0YXR1cyd9KWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKGDinYwgRXJyb3Igbm8gcmVsYWNpb25hZG8gY29uIEF4aW9zIGVuICR7ZW5kcG9pbnR9OiAke2Vycm9yfWApO1xuICAgIH1cbiAgICBcbiAgICAvLyBNZWNhbmlzbW8gZGUgcmVpbnRlbnRvIHBhcmEgZXJyb3JlcyA0MDRcbiAgICBpZiAoYXhpb3MuaXNBeGlvc0Vycm9yKGVycm9yKSAmJiBlcnJvci5yZXNwb25zZT8uc3RhdHVzID09PSA0MDQpIHtcbiAgICAgIC8vIE9idGVuZXIgbGEgVVJMIG9yaWdpbmFsIHF1ZSBmYWxsw7NcbiAgICAgIGNvbnN0IG9yaWdpbmFsVXJsID0gZXJyb3IuY29uZmlnPy51cmwgfHwgJyc7XG4gICAgICBjb25zdCBhYnNvbHV0ZVVybCA9IGVycm9yLmNvbmZpZz8uYmFzZVVSTCA/IGAke2Vycm9yLmNvbmZpZy5iYXNlVVJMfSR7b3JpZ2luYWxVcmx9YCA6IG9yaWdpbmFsVXJsO1xuICAgICAgXG4gICAgICAvLyBSZWdpc3RyYXIgZWwgZmFsbG8gcGFyYSBkaWFnbsOzc3RpY29cbiAgICAgIC8vIGNvbnNvbGUud2Fybihg4pqg77iPIEVycm9yIDQwNCBlbjogJHthYnNvbHV0ZVVybH1gKTtcbiAgICAgIFxuICAgICAgLy8gRW4gZGVzYXJyb2xsbyBsb2NhbCwgc2ltcGxlbWVudGUgcmVnaXN0cmFtb3MgZWwgZXJyb3IgeSBkZWphbW9zIHF1ZSBmYWxsZSBub3JtYWxtZW50ZVxuICAgICAgaWYgKCFpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgLy8gY29uc29sZS53YXJuKGBFbnRvcm5vIGRlIGRlc2Fycm9sbG86IHNpbiByZWludGVudG9zIGF1dG9tw6F0aWNvc2ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRW4gcHJvZHVjY2nDs24sIGludGVudGFtb3MgZXN0cmF0ZWdpYXMgZGUgcmVjdXBlcmFjacOzblxuICAgICAgICBcbiAgICAgICAgLy8gRXN0cmF0ZWdpYSAxOiBDb252ZXJ0aXIgVVJMIGFic29sdXRhIGEgcmVsYXRpdmFcbiAgICAgICAgaWYgKGFic29sdXRlVXJsLmluY2x1ZGVzKCc6Ly8nKSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBFeHRyYWVyIHNvbG8gZWwgcGF0aCBwYXJhIGhhY2VyIHVuYSBwZXRpY2nDs24gcmVsYXRpdmFcbiAgICAgICAgICAgIGNvbnN0IHVybE9iaiA9IG5ldyBVUkwoYWJzb2x1dGVVcmwpO1xuICAgICAgICAgICAgY29uc3QgcmVsYXRpdmVQYXRoID0gdXJsT2JqLnBhdGhuYW1lICsgdXJsT2JqLnNlYXJjaDtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGDwn5SnIERldGVjdGFkYSBVUkwgYWJzb2x1dGEsIHJlaW50ZW50YW5kbyBjb24gcnV0YSByZWxhdGl2YTogJHtyZWxhdGl2ZVBhdGh9YCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEhhY2VyIHVuYSBwZXRpY2nDs24gY29tcGxldGFtZW50ZSByZWxhdGl2YVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgLy8gQ29uZmlndXJhciBtYW51YWxtZW50ZSBwYXJhIGlnbm9yYXIgY3VhbHF1aWVyIGJhc2VVUkxcbiAgICAgICAgICAgICAgY29uc3QgcmV0cnlSZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldDxUPihyZWxhdGl2ZVBhdGgsIHtcbiAgICAgICAgICAgICAgICBiYXNlVVJMOiAnJyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBlcnJvci5jb25maWc/LmhlYWRlcnNcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGDinIUgw4l4aXRvIGNvbiBsYSBydXRhIHJlbGF0aXZhIWApO1xuICAgICAgICAgICAgICByZXR1cm4gcmV0cnlSZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgfSBjYXRjaCAocmV0cnlFcnJvcikge1xuICAgICAgICAgICAgICAvLyBjb25zb2xlLmVycm9yKGDwn5KlIEZhbGzDsyBlbCBpbnRlbnRvIGNvbiBydXRhIHJlbGF0aXZhOiAke3JlbGF0aXZlUGF0aH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLndhcm4oYE5vIHNlIHB1ZG8gcHJvY2VzYXIgbGEgVVJMIHBhcmEgcmVpbnRlbnRvOiAke2Fic29sdXRlVXJsfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gRXN0cmF0ZWdpYSAyOiBDb3JyZWdpciBVUkxzIG1hbCBmb3JtYWRhc1xuICAgICAgICBpZiAob3JpZ2luYWxVcmwuaW5jbHVkZXMoJy8vJykgfHwgb3JpZ2luYWxVcmwuaW5jbHVkZXMoJ2FwaS9hcGknKSB8fCBcbiAgICAgICAgICAgIChvcmlnaW5hbFVybC5pbmNsdWRlcygnL2FwaS92MScpICYmIGVuZHBvaW50LmluY2x1ZGVzKCcvYXBpL3YxJykpKSB7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coYPCflKcgRGV0ZWN0YWRhIFVSTCBtYWwgZm9ybWFkYSwgaW50ZW50YW5kbyBjb3JyZWdpci4uLmApO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIENvcnJlZ2lyIHByb2JsZW1hcyBjb211bmVzIGVuIGxhcyBVUkxzXG4gICAgICAgICAgbGV0IGNvcnJlY3RlZFVybCA9IGVuZHBvaW50LnJlcGxhY2UoL2FwaVxcL2FwaS9nLCAnYXBpJyk7XG4gICAgICAgICAgY29ycmVjdGVkVXJsID0gY29ycmVjdGVkVXJsLnJlcGxhY2UoL1xcL2FwaVxcL3YxXFwvYXBpXFwvdjEvZywgJy9hcGkvdjEnKTtcbiAgICAgICAgICBjb3JyZWN0ZWRVcmwgPSBjb3JyZWN0ZWRVcmwucmVwbGFjZSgvXFwvXFwvYXBpXFwvdjEvZywgJy9hcGkvdjEnKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBTaSBsYSBVUkwgc2UgY29ycmlnZSwgaW50ZW50YXIgbnVldmFtZW50ZVxuICAgICAgICAgIGlmIChjb3JyZWN0ZWRVcmwgIT09IGVuZHBvaW50KSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhg8J+UqCBSZWludGVudGFuZG8gY29uIFVSTCBjb3JyZWdpZGE6ICR7Y29ycmVjdGVkVXJsfWApO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgY29uc3QgcmV0cnlSZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQ8VD4oY29ycmVjdGVkVXJsKTtcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYOKchSDDiXhpdG8gY29uIFVSTCBjb3JyZWdpZGEhYCk7XG4gICAgICAgICAgICAgIHJldHVybiByZXRyeVJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgICB9IGNhdGNoIChyZXRyeUVycm9yKSB7XG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoYPCfkqUgVGFtYmnDqW4gZmFsbMOzIGVsIHJlaW50ZW50byBjb24gVVJMIGNvcnJlZ2lkYWApOyAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gRXN0cmF0ZWdpYSAzOiDDmmx0aW1vIGludGVudG8gY29uIHJ1dGEgYWJzb2x1dGEgZGVzZGUgcmHDrXpcbiAgICAgICAgaWYgKGVycm9yLmNvbmZpZz8uYmFzZVVSTCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgZmluYWxBdHRlbXB0VXJsID0gb3JpZ2luYWxVcmw7XG4gICAgICAgICAgICBpZiAoIWZpbmFsQXR0ZW1wdFVybC5zdGFydHNXaXRoKCcvYXBpJykpIHtcbiAgICAgICAgICAgICAgZmluYWxBdHRlbXB0VXJsID0gYC9hcGkvdjEvJHtmaW5hbEF0dGVtcHRVcmwuc3RhcnRzV2l0aCgnLycpID8gZmluYWxBdHRlbXB0VXJsLnN1YnN0cmluZygxKSA6IGZpbmFsQXR0ZW1wdFVybH1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhg8J+kliDDmmx0aW1vIGludGVudG8gY29uIHJ1dGEgYWJzb2x1dGE6ICR7ZmluYWxBdHRlbXB0VXJsfWApO1xuICAgICAgICAgICAgY29uc3QgbGFzdFJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0PFQ+KGZpbmFsQXR0ZW1wdFVybCwge1xuICAgICAgICAgICAgICBiYXNlVVJMOiAnJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhg4pyFIMOJeGl0byBlbiBlbCDDumx0aW1vIGludGVudG8hYCk7XG4gICAgICAgICAgICByZXR1cm4gbGFzdFJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgfSBjYXRjaCAobGFzdEVycm9yKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmVycm9yKGDwn5KlIEZhbGzDsyBlbCDDumx0aW1vIGludGVudG8gZGUgcmVjdXBlcmFjacOzbmApOyBcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gU2kgbGxlZ2Ftb3MgYXF1w60sIGVsIHJlaW50ZW50byBmYWxsw7MgbyBubyBzZSBpbnRlbnTDsywgZGV2b2x2ZXIgYXJyYXkgdmFjw61vIHBhcmEgZW5kcG9pbnRzIGRlIGxpc3RhXG4gICAgICBpZiAoZW5kcG9pbnQuaW5jbHVkZXMoJ2xpc3QnKSB8fCBcbiAgICAgICAgICBlbmRwb2ludC5pbmNsdWRlcygnYWxsJykgfHwgXG4gICAgICAgICAgZW5kcG9pbnQuaW5jbHVkZXMoJ2V4cGxvdGFjaW9ucycpIHx8IFxuICAgICAgICAgIGVuZHBvaW50LmluY2x1ZGVzKCdhbmltYWxlcycpKSB7XG4gICAgICAgIC8vIGNvbnNvbGUud2FybihgRGV2b2x2aWVuZG8gYXJyYXkgdmFjw61vIHBhcmEgJHtlbmRwb2ludH0gZGViaWRvIGEgNDA0YCk7XG4gICAgICAgIHJldHVybiBbXSBhcyB1bmtub3duIGFzIFQ7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIERldm9sdmVyIG9iamV0byB2YWPDrW8gcGFyYSBldml0YXIgcXVlIGxhIFVJIHNlIHJvbXBhXG4gICAgcmV0dXJuIHt9IGFzIFQ7XG4gIH1cbn1cblxuLy8gRnVuY2nDs24gcGFyYSByZWFsaXphciBwZXRpY2lvbmVzIFBPU1RcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwb3N0PFQgPSBhbnk+KGVuZHBvaW50OiBzdHJpbmcsIGRhdGE6IGFueSk6IFByb21pc2U8VD4ge1xuICB0cnkge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWRFbmRwb2ludCA9IGVuZHBvaW50LnN0YXJ0c1dpdGgoJy8nKSA/IGVuZHBvaW50IDogYC8ke2VuZHBvaW50fWA7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkucG9zdDxUPihub3JtYWxpemVkRW5kcG9pbnQsIGRhdGEpO1xuICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGVuIHBldGljacOzbiBQT1NUIGEgJHtlbmRwb2ludH06YCwgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbi8vIEZ1bmNpw7NuIHBhcmEgcmVhbGl6YXIgcGV0aWNpb25lcyBQVVRcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwdXQ8VCA9IGFueT4oZW5kcG9pbnQ6IHN0cmluZywgZGF0YTogYW55KTogUHJvbWlzZTxUPiB7XG4gIHRyeSB7XG4gICAgY29uc3Qgbm9ybWFsaXplZEVuZHBvaW50ID0gZW5kcG9pbnQuc3RhcnRzV2l0aCgnLycpID8gZW5kcG9pbnQgOiBgLyR7ZW5kcG9pbnR9YDtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wdXQ8VD4obm9ybWFsaXplZEVuZHBvaW50LCBkYXRhKTtcbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGBFcnJvciBlbiBwZXRpY2nDs24gUFVUIGEgJHtlbmRwb2ludH06YCwgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbi8vIEZ1bmNpw7NuIHBhcmEgcmVhbGl6YXIgcGV0aWNpb25lcyBQQVRDSFxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBhdGNoPFQgPSBhbnk+KGVuZHBvaW50OiBzdHJpbmcsIGRhdGE6IGFueSk6IFByb21pc2U8VD4ge1xuICB0cnkge1xuICAgIC8vIE5vcm1hbGl6YXIgZW5kcG9pbnRcbiAgICBjb25zdCBub3JtYWxpemVkRW5kcG9pbnQgPSBlbmRwb2ludC5zdGFydHNXaXRoKCcvJykgPyBlbmRwb2ludCA6IGAvJHtlbmRwb2ludH1gO1xuICAgIGNvbnNvbGUubG9nKGBSZWFsaXphbmRvIHBldGljacOzbiBQQVRDSCBhICR7YXBpQmFzZVVybH0ke25vcm1hbGl6ZWRFbmRwb2ludH1gKTtcbiAgICBjb25zb2xlLmxvZygnRGF0b3MgZW52aWFkb3M6JywgZGF0YSk7XG4gICAgXG4gICAgLy8gUmVhbGl6YXIgcGV0aWNpw7NuIHV0aWxpemFuZG8gVVJMIGJhc2UgbG9jYWxcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5wYXRjaDxUPihub3JtYWxpemVkRW5kcG9pbnQsIGRhdGEpO1xuICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGVuIHBldGljacOzbiBQQVRDSCBhICR7ZW5kcG9pbnR9OmAsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG4vLyBGdW5jacOzbiBwYXJhIHJlYWxpemFyIHBldGljaW9uZXMgREVMRVRFXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsPFQgPSBhbnk+KGVuZHBvaW50OiBzdHJpbmcpOiBQcm9taXNlPFQ+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBub3JtYWxpemVkRW5kcG9pbnQgPSBlbmRwb2ludC5zdGFydHNXaXRoKCcvJykgPyBlbmRwb2ludCA6IGAvJHtlbmRwb2ludH1gO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmRlbGV0ZTxUPihub3JtYWxpemVkRW5kcG9pbnQpO1xuICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGVuIHBldGljacOzbiBERUxFVEUgYSAke2VuZHBvaW50fTpgLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuLy8gRnVuY2nDs24gcGFyYSB2ZXJpZmljYXIgc2kgZWwgdXN1YXJpbyBlc3TDoSBhdXRlbnRpY2Fkb1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGlzQXV0aGVudGljYXRlZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgdHJ5IHtcbiAgICAvLyBWZXJpZmljYXIgc2kgaGF5IHVuIHRva2VuIGVuIGxvY2FsU3RvcmFnZVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cubG9jYWxTdG9yYWdlKSB7XG4gICAgICBjb25zdCB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpO1xuICAgICAgaWYgKCF0b2tlbikgcmV0dXJuIGZhbHNlO1xuICAgICAgXG4gICAgICAvLyBPcGNpb25hbG1lbnRlLCB2ZXJpZmljYXIgbGEgdmFsaWRleiBkZWwgdG9rZW4gY29uIGVsIGJhY2tlbmRcbiAgICAgIC8vIGF3YWl0IGdldCgnL2F1dGgvdmVyaWZ5Jyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFsIHZlcmlmaWNhciBhdXRlbnRpY2FjacOzbjonLCBlcnJvcik7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8vIEZ1bmNpw7NuIHBhcmEgb2J0ZW5lciBpbmZvcm1hY2nDs24gZGVsIHVzdWFyaW8gYWN0dWFsXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VXNlckluZm8oKSB7XG4gIHRyeSB7XG4gICAgaWYgKGF3YWl0IGlzQXV0aGVudGljYXRlZCgpKSB7XG4gICAgICByZXR1cm4gYXdhaXQgZ2V0KCcvdXNlcnMvbWUnKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgYWwgb2J0ZW5lciBpbmZvcm1hY2nDs24gZGVsIHVzdWFyaW86JywgZXJyb3IpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8vIEZ1bmNpw7NuIHBhcmEgaW5pY2lhciBzZXNpw7NuIHVzYW5kbyBlbCBmb3JtYXRvIE9BdXRoMiByZXF1ZXJpZG9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2dpbih1c2VybmFtZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSB7XG4gIHRyeSB7XG4gICAgLy8gQ3JlYXIgbG9zIGRhdG9zIGVuIGZvcm1hdG8gYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIHF1ZSBlc3BlcmEgT0F1dGgyXG4gICAgY29uc3QgZm9ybURhdGEgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgZm9ybURhdGEuYXBwZW5kKCd1c2VybmFtZScsIHVzZXJuYW1lKTtcbiAgICBmb3JtRGF0YS5hcHBlbmQoJ3Bhc3N3b3JkJywgcGFzc3dvcmQpO1xuICAgIGZvcm1EYXRhLmFwcGVuZCgnZ3JhbnRfdHlwZScsICdwYXNzd29yZCcpO1xuICAgIFxuICAgIC8vIFJ1dGEgZGUgbG9naW4gZGlyZWN0YSBzaW4gY29uY2F0ZW5hciBiYXNlVVJMIHBhcmEgZXZpdGFyIHByb2JsZW1hc1xuICAgIGNvbnN0IGxvZ2luRW5kcG9pbnQgPSAnL2F1dGgvbG9naW4nO1xuICAgIFxuICAgIC8vIERldGVybWluYXIgcXXDqSBVUkwgdXNhciBwYXJhIGVsIGxvZ2luXG4gICAgbGV0IGxvZ2luVXJsID0gbG9naW5FbmRwb2ludDtcbiAgICBsZXQgdXNlQmFzZVVybE92ZXJyaWRlID0gZmFsc2U7XG4gICAgbGV0IGJhc2VVcmxPdmVycmlkZSA9ICcnO1xuICAgIFxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgaG9zdG5hbWUgPSB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWU7XG4gICAgICBjb25zdCBpc0xvY2FsTmV0d29yayA9IFxuICAgICAgICBob3N0bmFtZSA9PT0gJ2xvY2FsaG9zdCcgfHwgXG4gICAgICAgIGhvc3RuYW1lID09PSAnMTI3LjAuMC4xJyB8fFxuICAgICAgICAvXjE5MlxcLjE2OFxcLi8udGVzdChob3N0bmFtZSkgfHxcbiAgICAgICAgL14xMFxcLi8udGVzdChob3N0bmFtZSkgfHxcbiAgICAgICAgL14xNzJcXC4oMVs2LTldfDJbMC05XXwzWzAtMV0pLy50ZXN0KGhvc3RuYW1lKTtcbiAgICAgIFxuICAgICAgaWYgKGlzTG9jYWxOZXR3b3JrKSB7XG4gICAgICAgIC8vIFBhcmEgcmVkZXMgbG9jYWxlcyB1c2FuZG8gSVAsIGZvcnphciBjb25leGnDs24gYSBsb2NhbGhvc3Q6ODAwMFxuICAgICAgICB1c2VCYXNlVXJsT3ZlcnJpZGUgPSB0cnVlO1xuICAgICAgICBiYXNlVXJsT3ZlcnJpZGUgPSAnaHR0cDovLzEyNy4wLjAuMTo4MDAwL2FwaS92MSc7XG4gICAgICAgIGxvZ2luVXJsID0gJy9hdXRoL2xvZ2luJzsgLy8gU2luIGFwaS92MSB5YSBxdWUgZXN0w6EgZW4gYmFzZVVybE92ZXJyaWRlXG4gICAgICAgIGNvbnNvbGUubG9nKGBSZWFsaXphbmRvIGxvZ2luIGE6ICR7YmFzZVVybE92ZXJyaWRlfSR7bG9naW5Vcmx9YCk7XG4gICAgICB9IGVsc2UgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgICAgICBjb25zb2xlLmxvZyhgUmVhbGl6YW5kbyBsb2dpbiBhOiAvYXBpL3YxJHtsb2dpbkVuZHBvaW50fWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coYFJlYWxpemFuZG8gbG9naW4gYTogJHthcGkuZGVmYXVsdHMuYmFzZVVSTH0ke2xvZ2luRW5kcG9pbnR9YCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKGBSZWFsaXphbmRvIGxvZ2luIGE6ICR7YXBpLmRlZmF1bHRzLmJhc2VVUkx9JHtsb2dpbkVuZHBvaW50fWApO1xuICAgIH1cbiAgICBcbiAgICAvLyBSZWFsaXphciBsYSBzb2xpY2l0dWQgY29uIGVsIGZvcm1hdG8gY29ycmVjdG9cbiAgICBsZXQgcmVzcG9uc2U7XG4gICAgaWYgKHVzZUJhc2VVcmxPdmVycmlkZSkge1xuICAgICAgLy8gQ3JlYXIgdW5hIGluc3RhbmNpYSBkZSBheGlvcyB0ZW1wb3JhbCBwYXJhIGVzdGEgcGV0aWNpw7NuIGVzcGVjw61maWNhXG4gICAgICBjb25zdCB0ZW1wQXhpb3MgPSBheGlvcy5jcmVhdGUoe1xuICAgICAgICBiYXNlVVJMOiBiYXNlVXJsT3ZlcnJpZGUsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXNwb25zZSA9IGF3YWl0IHRlbXBBeGlvcy5wb3N0KGxvZ2luVXJsLCBmb3JtRGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVzYXIgY29uZmlndXJhY2nDs24gZXN0w6FuZGFyXG4gICAgICByZXNwb25zZSA9IGF3YWl0IGFwaS5wb3N0KGxvZ2luRW5kcG9pbnQsIGZvcm1EYXRhLCB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIC8vIEd1YXJkYXIgZWwgdG9rZW4gZW4gbG9jYWxTdG9yYWdlXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5sb2NhbFN0b3JhZ2UgJiYgcmVzcG9uc2UuZGF0YS5hY2Nlc3NfdG9rZW4pIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2tlbicsIHJlc3BvbnNlLmRhdGEuYWNjZXNzX3Rva2VuKTtcbiAgICAgIGNvbnNvbGUubG9nKCdUb2tlbiBndWFyZGFkbyBjb3JyZWN0YW1lbnRlJyk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBhbCBpbmljaWFyIHNlc2nDs246JywgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbi8vIEZ1bmNpw7NuIHBhcmEgb2J0ZW5lciBsYSBVUkwgYmFzZSBkZSBsYSBBUEkgKHBhcmEgZGVwdXJhY2nDs24pXG5leHBvcnQgZnVuY3Rpb24gZ2V0QmFzZVVybCgpOiBzdHJpbmcge1xuICByZXR1cm4gYXBpQmFzZVVybDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0LFxuICBwb3N0LFxuICBwdXQsXG4gIHBhdGNoLFxuICBkZWwsXG4gIGlzQXV0aGVudGljYXRlZCxcbiAgZ2V0VXNlckluZm8sXG4gIGxvZ2luLFxuICBjb25maWd1cmVBcGksXG4gIGdldEJhc2VVcmxcbn07XG4iXSwibWFwcGluZ3MiOiJBQVFBLE9BQU8sV0FBVztBQUNsQjtBQUFBLEVBQ0U7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxPQUNLO0FBR1AsSUFBSSxjQUFzQjtBQUMxQixJQUFJLGdCQUF5QjtBQUc3QixRQUFRLElBQUkseUJBQXlCLFdBQVcsRUFBRTtBQUNsRCxRQUFRLElBQUksbURBQW1ELFlBQVksRUFBRTtBQUU3RSxJQUFJLGNBQWM7QUFDaEIsVUFBUSxJQUFJLDRDQUE0QztBQUMxRCxPQUFPO0FBRUwsVUFBUSxJQUFJLHVDQUF1QztBQUNyRDtBQU1BLElBQUksYUFBYTtB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