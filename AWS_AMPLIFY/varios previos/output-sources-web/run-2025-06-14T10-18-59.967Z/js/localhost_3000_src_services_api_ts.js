import axios from "/node_modules/.vite/deps/axios.js?v=5e89932e";
import {
  API_BASE_URL as CENTRAL_API_URL,
  API_TIMEOUT,
  API_DEFAULT_HEADERS,
  environment as centralEnvironment,
  isProduction,
  isLocal,
  normalizePath as apiNormalizePath,
  TOKEN_NAME
} from "/src/services/apiConfigAdapter.ts";
const environment = centralEnvironment;
let baseURL = CENTRAL_API_URL;
let useRelativeUrls = isProduction;
const API_BASE_URL_LOCAL = baseURL;
console.log("üåé Modo de conexi√≥n:", environment);
console.log("üîå API Base URL:", baseURL);
console.log("üîó URLs Relativas:", useRelativeUrls ? "S√ç" : "NO");
function normalizePath(path) {
  return apiNormalizePath(path);
}
console.log("üåé [api.ts] Modo de conexi√≥n:", environment);
console.log("üîå [api.ts] API Base URL:", baseURL || "URL relativa");
const api = axios.create({
  baseURL,
  timeout: API_TIMEOUT,
  headers: API_DEFAULT_HEADERS,
  validateStatus: function(status) {
    return status >= 200 && status < 500;
  }
});
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem(TOKEN_NAME);
    if (token && config.headers) {
      config.headers["Authorization"] = `Bearer ${token}`;
    } else {
      console.warn("‚ö†Ô∏è No se encontr√≥ token JWT para autenticar la petici√≥n");
      console.log("URL de la petici√≥n:", config.url);
      console.log("M√©todo:", config.method);
      console.log("Headers actuales:", config.headers);
      if (typeof window !== "undefined") {
        console.log("Contenido de localStorage:");
        for (let i = 0; i < localStorage.length; i++) {
          const key = localStorage.key(i);
          if (key) {
            const value = localStorage.getItem(key);
            console.log(`- ${key}: ${value ? value.substring(0, 20) + "..." : "null"}`);
          }
        }
      }
    }
    return config;
  },
  (error) => {
    console.error("Error en interceptor de peticiones:", error);
    return Promise.reject(error);
  }
);
api.interceptors.response.use(
  (response) => {
    console.log("Respuesta del servidor recibida:", {
      url: response.config.url,
      status: response.status,
      statusText: response.statusText,
      headers: response.headers,
      contentType: response.headers["content-type"]
    });
    console.log("Cuerpo completo de la respuesta:", response);
    console.log("Datos de la respuesta (data):", response.data);
    console.log("Tipo de data:", typeof response.data);
    if (typeof response.data === "string" && response.data.trim().startsWith("{")) {
      try {
        console.log("Intentando parsear respuesta como JSON...");
        const parsedData = JSON.parse(response.data);
        console.log("Datos parseados:", parsedData);
        return parsedData;
      } catch (e) {
        console.warn("Error al parsear respuesta como JSON:", e);
      }
    }
    if (response.data === void 0) {
      console.warn("Respuesta con data undefined, verificando respuesta bruta...");
      if (response.status === 200) {
        if (response.request && response.request.response) {
          try {
            console.log("Intentando extraer datos de request.response...");
            const rawData = response.request.response;
            if (typeof rawData === "string") {
              const parsedData = JSON.parse(rawData);
              console.log("Datos extra√≠dos de request.response:", parsedData);
              return parsedData;
            }
          } catch (e) {
            console.warn("Error al procesar request.response:", e);
          }
        }
        console.warn("No se pudieron extraer datos de la respuesta, devolviendo objeto vac√≠o");
        return {};
      }
    }
    if (response.data && typeof response.data === "object" && response.data.hasOwnProperty("data")) {
      console.log("Extrayendo datos de response.data.data");
      return response.data.data;
    }
    return response.data || {};
  },
  (error) => {
    if (error.response) {
      if (error.response.status === 401) {
        localStorage.removeItem("token");
        window.location.href = "/login";
      }
      const errorData = error.response.data;
      const errorMsg = errorData.detail || errorData.message || "Error desconocido";
      return Promise.reject({
        message: errorMsg,
        status: error.response.status,
        code: errorData.code || "ERROR"
      });
    }
    if (error.request) {
      return Promise.reject({
        message: "No se pudo conectar con el servidor. Por favor, verifique su conexi√≥n.",
        status: 0,
        code: "NETWORK_ERROR"
      });
    }
    return Promise.reject({
      message: error.message || "Ocurri√≥ un error al procesar la solicitud",
      status: 500,
      code: "UNKNOWN_ERROR"
    });
  }
);
export async function fetchData(endpoint, params = {}) {
  try {
    const queryParams = new URLSearchParams();
    Object.entries(params).forEach(([key, value]) => {
      if (value !== void 0 && value !== null) {
        queryParams.append(key, String(value));
      }
    });
    let url;
    queryParams.append("endpoint", endpoint);
    url = `${API_BASE_URL_LOCAL}/proxy?${queryParams.toString()}`;
    console.log(`üîç Fetching data:`, url);
    const token = localStorage.getItem("token");
    const headers = {
      "Content-Type": "application/json"
    };
    if (token) {
      headers["Authorization"] = `Bearer ${token}`;
    }
    const response = await fetch(url, {
      headers
    });
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ message: response.statusText }));
      console.error(`‚ùå Error ${response.status} en GET ${endpoint}:`, errorData);
      throw new Error(errorData.message || `Error ${response.status}: ${response.statusText}`);
    }
    const data = await response.json();
    console.log(`‚úÖ Respuesta GET ${endpoint}:`, data);
    return data;
  } catch (error) {
    console.error(`‚ùå Error en fetchData (${endpoint}):`, error);
    throw {
      message: error.message || "No se pudo conectar con el servidor. Por favor, verifica tu conexi√≥n.",
      status: error.status || 0,
      code: error.code || "NETWORK_ERROR"
    };
  }
}
export async function postData(endpoint, data = {}, method = "POST") {
  try {
    const token = localStorage.getItem("token");
    const headers = {
      "Content-Type": "application/json"
    };
    if (token) {
      headers["Authorization"] = `Bearer ${token}`;
    }
    let url;
    let requestBody;
    url = `${API_BASE_URL_LOCAL}/proxy`;
    requestBody = JSON.stringify({
      endpoint,
      data,
      method
    });
    console.log(`üì§ ${method}:`, url, data);
    const response = await fetch(url, {
      method: "POST",
      headers,
      body: requestBody
    });
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ message: response.statusText }));
      console.error(`‚ùå Error ${response.status} en ${method} ${endpoint}:`, errorData);
      throw new Error(errorData.message || errorData.detail || `Error ${response.status}: ${response.statusText}`);
    }
    const responseData = await response.json();
    console.log(`‚úÖ Respuesta ${method} ${endpoint}:`, responseData);
    return responseData;
  } catch (error) {
    console.error(`‚ùå Error en ${method} (${endpoint}):`, error);
    throw {
      message: error.message || "No se pudo conectar con el servidor. Por favor, verifica tu conexi√≥n.",
      status: error.status || 0,
      code: error.code || "NETWORK_ERROR"
    };
  }
}
export async function patchData(endpoint, data = {}) {
  try {
    const token = localStorage.getItem("token");
    const headers = {
      "Content-Type": "application/json"
    };
    if (token) {
      headers["Authorization"] = `Bearer ${token}`;
    }
    let url;
    let requestBody = JSON.stringify(data);
    url = `${API_BASE_URL_LOCAL}${endpoint}`;
    console.log(`üîß PATCH:`, url, data);
    const response = await fetch(url, {
      method: "PATCH",
      headers,
      body: requestBody
    });
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ message: response.statusText }));
      console.error(`‚ùå Error ${response.status} en PATCH ${endpoint}:`, errorData);
      throw new Error(errorData.message || errorData.detail || `Error ${response.status}: ${response.statusText}`);
    }
    const responseData = await response.json();
    console.log(`‚úÖ Respuesta PATCH ${endpoint}:`, responseData);
    return responseData;
  } catch (error) {
    console.error(`Error en patchData (${endpoint}):`, error);
    throw {
      message: error.message || "No se pudo conectar con el servidor. Por favor, verifique su conexi√≥n.",
      status: error.status || 0,
      code: error.code || "NETWORK_ERROR"
    };
  }
}
export async function putData(endpoint, data = {}) {
  return postData(endpoint, data, "PUT");
}
export async function deleteData(endpoint, data = {}) {
  return postData(endpoint, data, "DELETE");
}
export function handleApiError(error, setError, defaultMessage = "Ha ocurrido un error. Por favor, int√©ntelo de nuevo.") {
  console.error("API Error:", error);
  if (error.code === "NETWORK_ERROR") {
    setError("No se pudo conectar con el servidor. Por favor, verifique su conexi√≥n.");
  } else if (error.message) {
    setError(error.message);
  } else {
    setError(error.message || defaultMessage);
  }
}
api.fetchData = fetchData;
api.postData = postData;
api.putData = putData;
api.deleteData = deleteData;
api.handleApiError = handleApiError;
api.patchData = patchData;
export default api;

//# sourceMappingURL=data:application/json;base64,