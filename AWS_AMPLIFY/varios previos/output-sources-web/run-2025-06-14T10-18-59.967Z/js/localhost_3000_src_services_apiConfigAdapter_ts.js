import { API_CONFIG, AUTH_CONFIG } from "/src/config/apiConfig.centralizado.ts";
export const API_BASE_URL = API_CONFIG.baseUrl;
export const API_TIMEOUT = API_CONFIG.timeout;
export const API_DEFAULT_HEADERS = API_CONFIG.defaultHeaders;
export const API_ENDPOINTS = API_CONFIG.endpoints;
export const getEnvironment = () => {
  if (typeof window === "undefined") return "server";
  const hostname = window.location.hostname;
  if (hostname === "localhost" || hostname === "127.0.0.1" || hostname.includes("192.168.") || hostname.startsWith("10.") || hostname.indexOf(".local") > -1 || hostname.indexOf(".internal") > -1) {
    return "local";
  }
  return "production";
};
export const environment = getEnvironment();
export const isProduction = environment === "production";
export const isLocal = environment === "local";
export function normalizePath(path) {
  path = path.startsWith("/") ? path.substring(1) : path;
  return path.endsWith("/") ? path : `${path}/`;
}
export function getApiUrl() {
  return API_CONFIG.baseUrl;
}
export function configureApi(baseUrl, useMockData = false) {
  console.log(`API configurada con URL base: ${baseUrl}`);
  console.log(`Uso de datos simulados: ${useMockData ? "S√ç" : "NO"}`);
}
export const TOKEN_NAME = AUTH_CONFIG.tokenName;
export const REFRESH_TOKEN_NAME = AUTH_CONFIG.refreshTokenName;
export const AUTH_ENDPOINTS = AUTH_CONFIG.endpoints;
export default {
  API_BASE_URL,
  API_TIMEOUT,
  API_DEFAULT_HEADERS,
  API_ENDPOINTS,
  environment,
  isProduction,
  isLocal,
  normalizePath,
  getApiUrl,
  configureApi,
  TOKEN_NAME,
  REFRESH_TOKEN_NAME,
  AUTH_ENDPOINTS
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaUNvbmZpZ0FkYXB0ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBZGFwdGFkb3IgcGFyYSBsYSBjb25maWd1cmFjacOzbiBjZW50cmFsaXphZGEgZGUgQVBJXG4gKiBFc3RlIGFyY2hpdm8gYWN0w7phIGNvbW8gcHVlbnRlIGVudHJlIG51ZXN0cmEgY29uZmlndXJhY2nDs24gY2VudHJhbGl6YWRhXG4gKiB5IGxvcyBzZXJ2aWNpb3MgQVBJIGV4aXN0ZW50ZXMsIHNpbiBtb2RpZmljYXJsb3MgZGlyZWN0YW1lbnRlLlxuICovXG5cbmltcG9ydCB7IEFQSV9DT05GSUcsIEFVVEhfQ09ORklHIH0gZnJvbSAnLi4vY29uZmlnL2FwaUNvbmZpZy5jZW50cmFsaXphZG8nO1xuXG4vLyBFeHBvcnRhciBjb25zdGFudGVzIGFkYXB0YWRhcyBwYXJhIHNlcnZpY2lvcyBleGlzdGVudGVzXG5leHBvcnQgY29uc3QgQVBJX0JBU0VfVVJMID0gQVBJX0NPTkZJRy5iYXNlVXJsO1xuZXhwb3J0IGNvbnN0IEFQSV9USU1FT1VUID0gQVBJX0NPTkZJRy50aW1lb3V0O1xuZXhwb3J0IGNvbnN0IEFQSV9ERUZBVUxUX0hFQURFUlMgPSBBUElfQ09ORklHLmRlZmF1bHRIZWFkZXJzO1xuZXhwb3J0IGNvbnN0IEFQSV9FTkRQT0lOVFMgPSBBUElfQ09ORklHLmVuZHBvaW50cztcblxuLy8gRGV0ZWN0YXIgZW50b3JubyAoY29tcGF0aWJsZSBjb24gYXBpLnRzIHkgYXBpU2VydmljZS50cylcbmV4cG9ydCBjb25zdCBnZXRFbnZpcm9ubWVudCA9ICgpOiAnc2VydmVyJyB8ICdsb2NhbCcgfCAncHJvZHVjdGlvbicgPT4ge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuICdzZXJ2ZXInO1xuICAgIFxuICAgIGNvbnN0IGhvc3RuYW1lID0gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lO1xuICAgIC8vIENvbXByb2JhciBzaSBlc3RhbW9zIGVuIGxvY2FsaG9zdCBvIHJlZCBsb2NhbFxuICAgIGlmIChob3N0bmFtZSA9PT0gJ2xvY2FsaG9zdCcgfHwgXG4gICAgICAgIGhvc3RuYW1lID09PSAnMTI3LjAuMC4xJyB8fCBcbiAgICAgICAgaG9zdG5hbWUuaW5jbHVkZXMoJzE5Mi4xNjguJykgfHwgXG4gICAgICAgIGhvc3RuYW1lLnN0YXJ0c1dpdGgoJzEwLicpIHx8IFxuICAgICAgICBob3N0bmFtZS5pbmRleE9mKCcubG9jYWwnKSA+IC0xIHx8IFxuICAgICAgICBob3N0bmFtZS5pbmRleE9mKCcuaW50ZXJuYWwnKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiAnbG9jYWwnO1xuICAgIH1cbiAgICByZXR1cm4gJ3Byb2R1Y3Rpb24nO1xufTtcblxuZXhwb3J0IGNvbnN0IGVudmlyb25tZW50ID0gZ2V0RW52aXJvbm1lbnQoKTtcbmV4cG9ydCBjb25zdCBpc1Byb2R1Y3Rpb24gPSBlbnZpcm9ubWVudCA9PT0gJ3Byb2R1Y3Rpb24nO1xuZXhwb3J0IGNvbnN0IGlzTG9jYWwgPSBlbnZpcm9ubWVudCA9PT0gJ2xvY2FsJztcblxuLy8gRnVuY2nDs24gcGFyYSBub3JtYWxpemFyIHJ1dGFzIChjb21wYXRpYmxlIGNvbiBhcGkudHMpXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplUGF0aChwYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIC8vIEVsaW1pbmFyIGJhcnJhIGluaWNpYWwgc2kgZXhpc3RlXG4gICAgcGF0aCA9IHBhdGguc3RhcnRzV2l0aCgnLycpID8gcGF0aC5zdWJzdHJpbmcoMSkgOiBwYXRoO1xuICAgIC8vIEFzZWd1cmFyIGJhcnJhIGZpbmFsXG4gICAgcmV0dXJuIHBhdGguZW5kc1dpdGgoJy8nKSA/IHBhdGggOiBgJHtwYXRofS9gO1xufVxuXG4vLyBGdW5jacOzbiBxdWUgcHJvcG9yY2lvbmEgbGEgVVJMIGJhc2UgcGFyYSBlbCBlbnRvcm5vIGFjdHVhbFxuLy8gRXN0YSBmdW5jacOzbiBlcyBjb21wYXRpYmxlIGNvbiBnZXRBcGlVcmwoKSBlbiBhcGlTZXJ2aWNlLnRzXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXBpVXJsKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIEFQSV9DT05GSUcuYmFzZVVybDtcbn1cblxuLy8gRnVuY2nDs24gcGFyYSBjb25maWd1cmFyIGxhIEFQSSAoY29tcGF0aWJsZSBjb24gYXBpU2VydmljZS50cylcbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmVBcGkoYmFzZVVybDogc3RyaW5nLCB1c2VNb2NrRGF0YTogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coYEFQSSBjb25maWd1cmFkYSBjb24gVVJMIGJhc2U6ICR7YmFzZVVybH1gKTtcbiAgICBjb25zb2xlLmxvZyhgVXNvIGRlIGRhdG9zIHNpbXVsYWRvczogJHt1c2VNb2NrRGF0YSA/ICdTw40nIDogJ05PJ31gKTtcbn1cblxuLy8gRXhwb3J0YXIgY29uZmlndXJhY2nDs24gZGUgYXV0ZW50aWNhY2nDs25cbmV4cG9ydCBjb25zdCBUT0tFTl9OQU1FID0gQVVUSF9DT05GSUcudG9rZW5OYW1lO1xuZXhwb3J0IGNvbnN0IFJFRlJFU0hfVE9LRU5fTkFNRSA9IEFVVEhfQ09ORklHLnJlZnJlc2hUb2tlbk5hbWU7XG5leHBvcnQgY29uc3QgQVVUSF9FTkRQT0lOVFMgPSBBVVRIX0NPTkZJRy5lbmRwb2ludHM7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBBUElfQkFTRV9VUkwsXG4gICAgQVBJX1RJTUVPVVQsXG4gICAgQVBJX0RFRkFVTFRfSEVBREVSUyxcbiAgICBBUElfRU5EUE9JTlRTLFxuICAgIGVudmlyb25tZW50LFxuICAgIGlzUHJvZHVjdGlvbixcbiAgICBpc0xvY2FsLFxuICAgIG5vcm1hbGl6ZVBhdGgsXG4gICAgZ2V0QXBpVXJsLFxuICAgIGNvbmZpZ3VyZUFwaSxcbiAgICBUT0tFTl9OQU1FLFxuICAgIFJFRlJFU0hfVE9LRU5fTkFNRSxcbiAgICBBVVRIX0VORFBPSU5UU1xufTtcbiJdLCJtYXBwaW5ncyI6IkFBTUEsU0FBUyxZQUFZLG1CQUFtQjtBQUdqQyxhQUFNLGVBQWUsV0FBVztBQUNoQyxhQUFNLGNBQWMsV0FBVztBQUMvQixhQUFNLHNCQUFzQixXQUFXO0FBQ3ZDLGFBQU0sZ0JBQWdCLFdBQVc7QUFHakMsYUFBTSxpQkFBaUIsTUFBeUM7QUFDbkUsTUFBSSxPQUFPLFdBQVcsWUFBYSxRQUFPO0FBRTFDLFFBQU0sV0FBVyxPQUFPLFNBQVM7QUFFakMsTUFBSSxhQUFhLGVBQ2IsYUFBYSxlQUNiLFNBQVMsU0FBUyxVQUFVLEtBQzVCLFNBQVMsV0FBVyxLQUFLLEtBQ3pCLFNBQVMsUUFBUSxRQUFRLElBQUksTUFDN0IsU0FBUyxRQUFRLFdBQVcsSUFBSSxJQUFJO0FBQ3BDLFdBQU87QUFBQSxFQUNYO0FBQ0EsU0FBTztBQUNYO0FBRU8sYUFBTSxjQUFjLGVBQWU7QUFDbkMsYUFBTSxlQUFlLGdCQUFnQjtBQUNyQyxhQUFNLFVBQVUsZ0JBQWdCO0FBR2hDLGdCQUFTLGNBQWMsTUFBc0I7QUFFaEQsU0FBTyxLQUFLLFdBQVcsR0FBRyxJQUFJLEtBQUssVUFBVSxDQUFDLElBQUk7QUFFbEQsU0FBTyxLQUFLLFNBQVMsR0FBRyxJQUFJLE9BQU8sR0FBRyxJQUFJO0FBQzlDO0FBSU8sZ0JBQVMsWUFBb0I7QUFDaEMsU0FBTyxXQUFXO0FBQ3RCO0FBR08sZ0JBQVMsYUFBYSxTQUFpQixjQUF1QixPQUFhO0FBQzlFLFVBQVEsSUFBSSxpQ0FBaUMsT0FBTyxFQUFFO0FBQ3RELFVBQVEsSUFBSSwyQkFBMkIsY0FBYyxPQUFPLElBQUksRUFBRTtBQUN0RTtBQUdPLGFBQU0sYUFBYSxZQUFZO0FBQy9CLGFBQU0scUJBQXFCLFlBQVk7QUFDdkMsYUFBTSxpQkFBaUIsWUFBWTtBQUUxQyxlQUFlO0FBQUEsRUFDWDtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUNKOyIsIm5hbWVzIjpbXX0=