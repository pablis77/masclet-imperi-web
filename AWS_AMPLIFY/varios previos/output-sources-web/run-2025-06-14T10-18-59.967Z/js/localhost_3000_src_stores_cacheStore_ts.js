import { map } from "/node_modules/.vite/deps/nanostores.js?v=5e89932e";
const DEFAULT_TTL = 5 * 60 * 1e3;
export const cacheStore = map({});
export function setCache(key, data, options) {
  const ttl = options?.ttl || DEFAULT_TTL;
  cacheStore.setKey(key, {
    data,
    timestamp: Date.now(),
    expiry: ttl
  });
}
export function getCache(key, options) {
  if (options?.forceRefresh) {
    return null;
  }
  const cacheItem = cacheStore.get()[key];
  if (!cacheItem) {
    return null;
  }
  const now = Date.now();
  const isExpired = now - cacheItem.timestamp > cacheItem.expiry;
  if (isExpired) {
    removeCache(key);
    return null;
  }
  return cacheItem.data;
}
export function removeCache(key) {
  const state = cacheStore.get();
  const { [key]: _, ...rest } = state;
  cacheStore.set(rest);
}
export function clearCache(onlyExpired = false) {
  if (!onlyExpired) {
    cacheStore.set({});
    return;
  }
  const now = Date.now();
  const state = cacheStore.get();
  const newState = {};
  Object.entries(state).forEach(([key, item]) => {
    if (now - item.timestamp <= item.expiry) {
      newState[key] = item;
    }
  });
  cacheStore.set(newState);
}
export async function cachedFetch(key, fetchFn, options) {
  const cacheKey = options?.key || key;
  const cachedData = getCache(cacheKey, options);
  if (cachedData !== null) {
    console.log(`Usando datos en cachÃ© para: ${cacheKey}`);
    return cachedData;
  }
  console.log(`Obteniendo datos frescos para: ${cacheKey}`);
  const data = await fetchFn();
  setCache(cacheKey, data, options);
  return data;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhY2hlU3RvcmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFwIH0gZnJvbSAnbmFub3N0b3Jlcyc7XG5pbXBvcnQgdHlwZSB7IENhY2hlSXRlbSwgQ2FjaGVPcHRpb25zIH0gZnJvbSAnLi4vdHlwZXMvdHlwZXMnO1xuXG4vLyBUaWVtcG8gZGUgdmlkYSBwcmVkZXRlcm1pbmFkbyBwYXJhIGxhIGNhY2jDqSAoNSBtaW51dG9zKVxuY29uc3QgREVGQVVMVF9UVEwgPSA1ICogNjAgKiAxMDAwO1xuXG4vLyBTdG9yZSBwYXJhIGdlc3Rpb25hciBsYSBjYWNow6kgZGUgZGF0b3NcbmV4cG9ydCBjb25zdCBjYWNoZVN0b3JlID0gbWFwPFJlY29yZDxzdHJpbmcsIENhY2hlSXRlbTxhbnk+Pj4oe30pO1xuXG4vKipcbiAqIEd1YXJkYSBkYXRvcyBlbiBsYSBjYWNow6lcbiAqIEBwYXJhbSBrZXkgLSBDbGF2ZSBwYXJhIGlkZW50aWZpY2FyIGxvcyBkYXRvc1xuICogQHBhcmFtIGRhdGEgLSBEYXRvcyBhIGFsbWFjZW5hclxuICogQHBhcmFtIG9wdGlvbnMgLSBPcGNpb25lcyBkZSBjYWNow6lcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldENhY2hlPFQ+KGtleTogc3RyaW5nLCBkYXRhOiBULCBvcHRpb25zPzogQ2FjaGVPcHRpb25zKTogdm9pZCB7XG4gIGNvbnN0IHR0bCA9IG9wdGlvbnM/LnR0bCB8fCBERUZBVUxUX1RUTDtcbiAgXG4gIGNhY2hlU3RvcmUuc2V0S2V5KGtleSwge1xuICAgIGRhdGEsXG4gICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgIGV4cGlyeTogdHRsXG4gIH0pO1xufVxuXG4vKipcbiAqIE9idGllbmUgZGF0b3MgZGUgbGEgY2FjaMOpXG4gKiBAcGFyYW0ga2V5IC0gQ2xhdmUgZGUgbG9zIGRhdG9zXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wY2lvbmVzIGRlIGNhY2jDqVxuICogQHJldHVybnMgTG9zIGRhdG9zIGFsbWFjZW5hZG9zIG8gbnVsbCBzaSBubyBleGlzdGVuIG8gaGFuIGV4cGlyYWRvXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDYWNoZTxUPihrZXk6IHN0cmluZywgb3B0aW9ucz86IENhY2hlT3B0aW9ucyk6IFQgfCBudWxsIHtcbiAgLy8gU2kgc2Ugc29saWNpdGEgZm9yemFyIHJlZnJlc2NvLCBpZ25vcmFyIGxhIGNhY2jDqVxuICBpZiAob3B0aW9ucz8uZm9yY2VSZWZyZXNoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgXG4gIGNvbnN0IGNhY2hlSXRlbSA9IGNhY2hlU3RvcmUuZ2V0KClba2V5XSBhcyBDYWNoZUl0ZW08VD4gfCB1bmRlZmluZWQ7XG4gIFxuICAvLyBTaSBubyBoYXkgZGF0b3MgZW4gY2FjaMOpLCBkZXZvbHZlciBudWxsXG4gIGlmICghY2FjaGVJdGVtKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgXG4gIC8vIENvbXByb2JhciBzaSBsb3MgZGF0b3MgaGFuIGV4cGlyYWRvXG4gIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gIGNvbnN0IGlzRXhwaXJlZCA9IG5vdyAtIGNhY2hlSXRlbS50aW1lc3RhbXAgPiBjYWNoZUl0ZW0uZXhwaXJ5O1xuICBcbiAgaWYgKGlzRXhwaXJlZCkge1xuICAgIC8vIEVsaW1pbmFyIGRhdG9zIGV4cGlyYWRvc1xuICAgIHJlbW92ZUNhY2hlKGtleSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgXG4gIHJldHVybiBjYWNoZUl0ZW0uZGF0YTtcbn1cblxuLyoqXG4gKiBFbGltaW5hIGRhdG9zIGRlIGxhIGNhY2jDqVxuICogQHBhcmFtIGtleSAtIENsYXZlIGRlIGxvcyBkYXRvcyBhIGVsaW1pbmFyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVDYWNoZShrZXk6IHN0cmluZyk6IHZvaWQge1xuICBjb25zdCBzdGF0ZSA9IGNhY2hlU3RvcmUuZ2V0KCk7XG4gIGNvbnN0IHsgW2tleV06IF8sIC4uLnJlc3QgfSA9IHN0YXRlO1xuICBjYWNoZVN0b3JlLnNldChyZXN0KTtcbn1cblxuLyoqXG4gKiBMaW1waWEgdG9kYSBsYSBjYWNow6kgbyBsb3MgZWxlbWVudG9zIGV4cGlyYWRvc1xuICogQHBhcmFtIG9ubHlFeHBpcmVkIC0gU2kgZXMgdHJ1ZSwgc29sbyBlbGltaW5hIGxvcyBlbGVtZW50b3MgZXhwaXJhZG9zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbGVhckNhY2hlKG9ubHlFeHBpcmVkOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcbiAgaWYgKCFvbmx5RXhwaXJlZCkge1xuICAgIGNhY2hlU3RvcmUuc2V0KHt9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgXG4gIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gIGNvbnN0IHN0YXRlID0gY2FjaGVTdG9yZS5nZXQoKTtcbiAgY29uc3QgbmV3U3RhdGU6IFJlY29yZDxzdHJpbmcsIENhY2hlSXRlbTxhbnk+PiA9IHt9O1xuICBcbiAgLy8gTWFudGVuZXIgc29sbyBsb3MgZWxlbWVudG9zIG5vIGV4cGlyYWRvc1xuICBPYmplY3QuZW50cmllcyhzdGF0ZSkuZm9yRWFjaCgoW2tleSwgaXRlbV06IFtzdHJpbmcsIENhY2hlSXRlbTxhbnk+XSkgPT4ge1xuICAgIGlmIChub3cgLSBpdGVtLnRpbWVzdGFtcCA8PSBpdGVtLmV4cGlyeSkge1xuICAgICAgbmV3U3RhdGVba2V5XSA9IGl0ZW07XG4gICAgfVxuICB9KTtcbiAgXG4gIGNhY2hlU3RvcmUuc2V0KG5ld1N0YXRlKTtcbn1cblxuLyoqXG4gKiBGdW5jacOzbiBwYXJhIGVudm9sdmVyIHBldGljaW9uZXMgYSBsYSBBUEkgY29uIGNhY2jDqVxuICogQHBhcmFtIGtleSAtIENsYXZlIHBhcmEgbGEgY2FjaMOpXG4gKiBAcGFyYW0gZmV0Y2hGbiAtIEZ1bmNpw7NuIHF1ZSByZWFsaXphIGxhIHBldGljacOzbiBhIGxhIEFQSVxuICogQHBhcmFtIG9wdGlvbnMgLSBPcGNpb25lcyBkZSBjYWNow6lcbiAqIEByZXR1cm5zIFJlc3VsdGFkbyBkZSBsYSBwZXRpY2nDs24gKGRlc2RlIGNhY2jDqSBvIGRlc2RlIGxhIEFQSSlcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNhY2hlZEZldGNoPFQ+KFxuICBrZXk6IHN0cmluZyxcbiAgZmV0Y2hGbjogKCkgPT4gUHJvbWlzZTxUPixcbiAgb3B0aW9ucz86IENhY2hlT3B0aW9uc1xuKTogUHJvbWlzZTxUPiB7XG4gIC8vIFVzYXIgY2xhdmUgcGVyc29uYWxpemFkYSBzaSBzZSBwcm9wb3JjaW9uYVxuICBjb25zdCBjYWNoZUtleSA9IG9wdGlvbnM/LmtleSB8fCBrZXk7XG4gIFxuICAvLyBJbnRlbnRhciBvYnRlbmVyIGRhdG9zIGRlIGxhIGNhY2jDqVxuICBjb25zdCBjYWNoZWREYXRhID0gZ2V0Q2FjaGU8VD4oY2FjaGVLZXksIG9wdGlvbnMpO1xuICBpZiAoY2FjaGVkRGF0YSAhPT0gbnVsbCkge1xuICAgIGNvbnNvbGUubG9nKGBVc2FuZG8gZGF0b3MgZW4gY2FjaMOpIHBhcmE6ICR7Y2FjaGVLZXl9YCk7XG4gICAgcmV0dXJuIGNhY2hlZERhdGE7XG4gIH1cbiAgXG4gIC8vIFNpIG5vIGhheSBkYXRvcyBlbiBjYWNow6kgbyBoYW4gZXhwaXJhZG8sIHJlYWxpemFyIGxhIHBldGljacOzblxuICBjb25zb2xlLmxvZyhgT2J0ZW5pZW5kbyBkYXRvcyBmcmVzY29zIHBhcmE6ICR7Y2FjaGVLZXl9YCk7XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCBmZXRjaEZuKCk7XG4gIFxuICAvLyBHdWFyZGFyIGxvcyBudWV2b3MgZGF0b3MgZW4gbGEgY2FjaMOpXG4gIHNldENhY2hlKGNhY2hlS2V5LCBkYXRhLCBvcHRpb25zKTtcbiAgXG4gIHJldHVybiBkYXRhO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLFdBQVc7QUFJcEIsTUFBTSxjQUFjLElBQUksS0FBSztBQUd0QixhQUFNLGFBQWEsSUFBb0MsQ0FBQyxDQUFDO0FBUXpELGdCQUFTLFNBQVksS0FBYSxNQUFTLFNBQThCO0FBQzlFLFFBQU0sTUFBTSxTQUFTLE9BQU87QUFFNUIsYUFBVyxPQUFPLEtBQUs7QUFBQSxJQUNyQjtBQUFBLElBQ0EsV0FBVyxLQUFLLElBQUk7QUFBQSxJQUNwQixRQUFRO0FBQUEsRUFDVixDQUFDO0FBQ0g7QUFRTyxnQkFBUyxTQUFZLEtBQWEsU0FBa0M7QUFFekUsTUFBSSxTQUFTLGNBQWM7QUFDekIsV0FBTztBQUFBLEVBQ1Q7QUFFQSxRQUFNLFlBQVksV0FBVyxJQUFJLEVBQUUsR0FBRztBQUd0QyxNQUFJLENBQUMsV0FBVztBQUNkLFdBQU87QUFBQSxFQUNUO0FBR0EsUUFBTSxNQUFNLEtBQUssSUFBSTtBQUNyQixRQUFNLFlBQVksTUFBTSxVQUFVLFlBQVksVUFBVTtBQUV4RCxNQUFJLFdBQVc7QUFFYixnQkFBWSxHQUFHO0FBQ2YsV0FBTztBQUFBLEVBQ1Q7QUFFQSxTQUFPLFVBQVU7QUFDbkI7QUFNTyxnQkFBUyxZQUFZLEtBQW1CO0FBQzdDLFFBQU0sUUFBUSxXQUFXLElBQUk7QUFDN0IsUUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxLQUFLLElBQUk7QUFDOUIsYUFBVyxJQUFJLElBQUk7QUFDckI7QUFNTyxnQkFBUyxXQUFXLGNBQXVCLE9BQWE7QUFDN0QsTUFBSSxDQUFDLGFBQWE7QUFDaEIsZUFBVyxJQUFJLENBQUMsQ0FBQztBQUNqQjtBQUFBLEVBQ0Y7QUFFQSxRQUFNLE1BQU0sS0FBSyxJQUFJO0FBQ3JCLFFBQU0sUUFBUSxXQUFXLElBQUk7QUFDN0IsUUFBTSxXQUEyQyxDQUFDO0FBR2xELFNBQU8sUUFBUSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsS0FBSyxJQUFJLE1BQWdDO0FBQ3ZFLFFBQUksTUFBTSxLQUFLLGFBQWEsS0FBSyxRQUFRO0FBQ3ZDLGVBQVMsR0FBRyxJQUFJO0FBQUEsSUFDbEI7QUFBQSxFQUNGLENBQUM7QUFFRCxhQUFXLElBQUksUUFBUTtBQUN6QjtBQVNBLHNCQUFzQixZQUNwQixLQUNBLFNBQ0EsU0FDWTtBQUVaLFFBQU0sV0FBVyxTQUFTLE9BQU87QUFHakMsUUFBTSxhQUFhLFNBQVksVUFBVSxPQUFPO0FBQ2hELE1BQUksZUFBZSxNQUFNO0FBQ3ZCLFlBQVEsSUFBSSwrQkFBK0IsUUFBUSxFQUFFO0FBQ3JELFdBQU87QUFBQSxFQUNUO0FBR0EsVUFBUSxJQUFJLGtDQUFrQyxRQUFRLEVBQUU7QUFDeEQsUUFBTSxPQUFPLE1BQU0sUUFBUTtBQUczQixXQUFTLFVBQVUsTUFBTSxPQUFPO0FBRWhDLFNBQU87QUFDVDsiLCJuYW1lcyI6W119