let lastRoleLoggedTime = 0;
let lastRoleValue = "";
function actualizarRolUsuario(forzarLimpieza = false, logLevel = "silent") {
  const rolSpan = document.getElementById("user-role-display");
  if (!rolSpan) {
    return;
  }
  const token = localStorage.getItem("token");
  if (forzarLimpieza || !token) {
    rolSpan.textContent = "---";
    return;
  }
  if (rolSpan.textContent && rolSpan.dataset.processed === "true") {
    return;
  }
  try {
    let parseJwt2 = function(token2) {
      const base64Url = token2.split(".")[1];
      const base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
      const jsonPayload = decodeURIComponent(
        atob(base64).split("").map((c) => {
          return "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2);
        }).join("")
      );
      return JSON.parse(jsonPayload);
    };
    var parseJwt = parseJwt2;
    const decoded = parseJwt2(token);
    const tokenUsername = decoded.sub || "";
    const tokenRole = decoded.role || "";
    if (logLevel === "verbose" || lastRoleValue !== tokenRole && Date.now() - lastRoleLoggedTime > 5e3) {
      lastRoleLoggedTime = Date.now();
      lastRoleValue = tokenRole;
    }
    if (tokenRole) {
      rolSpan.textContent = tokenRole;
      localStorage.setItem("userRole", tokenRole);
      localStorage.setItem("username", tokenUsername);
      rolSpan.dataset.processed = "true";
      return;
    }
  } catch (e) {
  }
  const username = localStorage.getItem("username");
  const storedRole = localStorage.getItem("userRole");
  const storedUser = localStorage.getItem("user");
  const isRamon = username === "Ramon" || storedRole === "Ramon";
  if (isRamon) {
    rolSpan.textContent = "Ramon";
    localStorage.setItem("userRole", "Ramon");
    rolSpan.dataset.processed = "true";
    return;
  }
  if (storedRole) {
    rolSpan.textContent = storedRole;
    rolSpan.dataset.processed = "true";
  } else if (storedUser) {
    try {
      const userData = JSON.parse(storedUser);
      rolSpan.textContent = userData.role || "usuario";
      rolSpan.dataset.processed = "true";
    } catch (e) {
      rolSpan.textContent = "usuario";
    }
  } else {
    rolSpan.textContent = "usuario";
  }
}
document.addEventListener("DOMContentLoaded", () => {
  actualizarRolUsuario(false, "verbose");
});
window.addEventListener("storage", (event) => {
  if (event.key === "token" || event.key === "user" || event.key === "userRole" || event.key === "username") {
    actualizarRolUsuario(false, "verbose");
  }
});
const isFromLogin = document.referrer.includes("/login");
if (isFromLogin) {
  actualizarRolUsuario(false, "verbose");
  setTimeout(() => actualizarRolUsuario(false, "verbose"), 500);
}
let clickTimer;
document.addEventListener("click", () => {
  clearTimeout(clickTimer);
  clickTimer = setTimeout(() => actualizarRolUsuario(), 100);
});

//# sourceMappingURL=data:application/json;base64,