document.addEventListener("DOMContentLoaded", () => {
  const importForm = document.querySelector("import-form");
  const importHistory = document.querySelector("import-history");
  const resetBtn = document.getElementById("reset-import");
  const importBtn = document.getElementById("import-btn");
  const refreshHistory = () => {
    if (importHistory) {
      const event = new CustomEvent("refresh-history");
      importHistory.dispatchEvent(event);
    }
  };
  if (importForm) {
    importForm.addEventListener("import-complete", () => {
      setTimeout(refreshHistory, 1e3);
    });
  }
  if (resetBtn) {
    resetBtn.addEventListener("click", () => {
      document.dispatchEvent(new CustomEvent("reset-import"));
    });
  }
  if (importBtn) {
    importBtn.addEventListener("click", () => {
      document.dispatchEvent(new CustomEvent("import-btn-click"));
    });
  }
});

//# sourceMappingURL=data:application/json;base64,