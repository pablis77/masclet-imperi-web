document.addEventListener("DOMContentLoaded", () => {
  const selector = document.getElementById("language-selector");
  const indicator = document.getElementById("current-lang-indicator");
  if (selector) {
    const currentLang = localStorage.getItem("userLanguage") || "es";
    selector.value = currentLang;
    console.log("[LanguageSwitcher] Idioma detectado:", currentLang);
    if (indicator) {
      indicator.textContent = `Idioma actual: ${currentLang}`;
    }
    const url = new URL(window.location.href);
    url.searchParams.set("lang", currentLang);
    selector.addEventListener("change", () => {
      const newLang = selector.value;
      console.log("[LanguageSwitcher] Cambiando idioma a:", newLang);
      localStorage.setItem("userLanguage", newLang);
      localStorage.setItem("languageChanging", "true");
      const redirectUrl = new URL(window.location.href);
      redirectUrl.searchParams.set("lang", newLang);
      redirectUrl.searchParams.set("t", Date.now());
      console.log("[LanguageSwitcher] Forzando recarga completa con idioma:", newLang);
      window.location.href = redirectUrl.toString();
    });
    const urlParams = new URLSearchParams(window.location.search);
    const urlLang = urlParams.get("lang");
    if (urlLang && urlLang !== currentLang && (urlLang === "es" || urlLang === "ca")) {
      console.log("[LanguageSwitcher] Detectado idioma en URL:", urlLang);
      localStorage.setItem("userLanguage", urlLang);
      const cleanUrl = new URL(window.location.href);
      cleanUrl.searchParams.delete("lang");
      window.location.href = cleanUrl.toString();
    }
  } else {
    console.error("[LanguageSwitcher] No se encontr√≥ el selector de idioma");
  }
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxhbmd1YWdlU3dpdGNoZXIuYXN0cm8iXSwic291cmNlc0NvbnRlbnQiOlsiLS0tXG4vLyBJbXBvcnRhbW9zIGxhcyBmdW5jaW9uZXMgZGUgaWRpb21hIHF1ZSBjcmVhbW9zXG5pbXBvcnQgeyBnZXRDdXJyZW50TGFuZ3VhZ2UsIHNldExhbmd1YWdlLCBzdXBwb3J0ZWRMYW5ndWFnZXMgfSBmcm9tICcuLi9pMThuL2NvbmZpZyc7XG4tLS1cblxuPGRpdiBjbGFzcz1cImxhbmd1YWdlLXN3aXRjaGVyXCI+XG4gIDxzZWxlY3RcbiAgICBpZD1cImxhbmd1YWdlLXNlbGVjdG9yXCJcbiAgICBjbGFzcz1cImJnLXdoaXRlIGRhcms6YmctZ3JheS04MDAgYm9yZGVyIGJvcmRlci1ncmF5LTMwMCBkYXJrOmJvcmRlci1ncmF5LTcwMCB0ZXh0LWdyYXktODAwIGRhcms6dGV4dC13aGl0ZSByb3VuZGVkIHB5LTEgcHgtMiB0ZXh0LXNtXCJcbiAgPlxuICAgIDxvcHRpb24gdmFsdWU9XCJlc1wiIHNlbGVjdGVkPXtnZXRDdXJyZW50TGFuZ3VhZ2UoKSA9PT0gJ2VzJ30+RXNwYcOxb2w8L29wdGlvbj5cbiAgICA8b3B0aW9uIHZhbHVlPVwiY2FcIiBzZWxlY3RlZD17Z2V0Q3VycmVudExhbmd1YWdlKCkgPT09ICdjYSd9PkNhdGFsw6A8L29wdGlvbj5cbiAgPC9zZWxlY3Q+XG4gIDxkaXYgaWQ9XCJjdXJyZW50LWxhbmctaW5kaWNhdG9yXCIgY2xhc3M9XCJoaWRkZW4gdGV4dC14cyBtdC0xIHRleHQtd2hpdGUgcC0xIHJvdW5kZWQgYmctZ3JlZW4tNjAwXCI+XG4gICAgSWRpb21hOiB7Z2V0Q3VycmVudExhbmd1YWdlKCl9XG4gIDwvZGl2PlxuPC9kaXY+XG5cbjxzY3JpcHQ+XG4gIC8vIFNjcmlwdCBtZWpvcmFkbyBwYXJhIG1hbmVqYXIgZWwgY2FtYmlvIGRlIGlkaW9tYVxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xhbmd1YWdlLXNlbGVjdG9yJyk7XG4gICAgY29uc3QgaW5kaWNhdG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2N1cnJlbnQtbGFuZy1pbmRpY2F0b3InKTtcbiAgICBcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIC8vIEVzdGFibGVjZXIgZWwgdmFsb3IgaW5pY2lhbCBkZXNkZSBsb2NhbFN0b3JhZ2VcbiAgICAgIGNvbnN0IGN1cnJlbnRMYW5nID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXJMYW5ndWFnZScpIHx8ICdlcyc7XG4gICAgICBzZWxlY3Rvci52YWx1ZSA9IGN1cnJlbnRMYW5nO1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZygnW0xhbmd1YWdlU3dpdGNoZXJdIElkaW9tYSBkZXRlY3RhZG86JywgY3VycmVudExhbmcpO1xuICAgICAgXG4gICAgICAvLyBNb3N0cmFyIGVsIGluZGljYWRvciBlbiBtb2RvIGRlc2Fycm9sbG9cbiAgICAgIGlmIChpbmRpY2F0b3IpIHtcbiAgICAgICAgaW5kaWNhdG9yLnRleHRDb250ZW50ID0gYElkaW9tYSBhY3R1YWw6ICR7Y3VycmVudExhbmd9YDtcbiAgICAgICAgLy8gRGVzY29tZW50YXIgcGFyYSBkZWJ1Z2dpbmdcbiAgICAgICAgLy8gaW5kaWNhdG9yLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBBw7FhZGlyIHVuIHBhcsOhbWV0cm8gVVJMIHBhcmEgZm9yemFyIGVsIGlkaW9tYSAocGFyYSBkZWJ1Z2dpbmcpXG4gICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KCdsYW5nJywgY3VycmVudExhbmcpO1xuICAgICAgXG4gICAgICAvLyBFc2N1Y2hhciBjYW1iaW9zIGVuIGVsIHNlbGVjdG9yXG4gICAgICBzZWxlY3Rvci5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld0xhbmcgPSBzZWxlY3Rvci52YWx1ZTtcbiAgICAgICAgY29uc29sZS5sb2coJ1tMYW5ndWFnZVN3aXRjaGVyXSBDYW1iaWFuZG8gaWRpb21hIGE6JywgbmV3TGFuZyk7XG4gICAgICAgIFxuICAgICAgICAvLyBHdWFyZGFyIGVuIGxvY2FsU3RvcmFnZVxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlckxhbmd1YWdlJywgbmV3TGFuZyk7XG4gICAgICAgIFxuICAgICAgICAvLyBJbmRpY2FyIHF1ZSBlc3RhbW9zIGNhbWJpYW5kbyBkZSBpZGlvbWEgcGFyYSBxdWUgb3RyYXMgcGFydGVzIGRlIGxhIGFwbGljYWNpw7NuIGxvIGRldGVjdGVuXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsYW5ndWFnZUNoYW5naW5nJywgJ3RydWUnKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEHDsWFkaXIgcGFyw6FtZXRyb3MgYSBsYSBVUkwgcGFyYSBmb3J6YXIgbGEgcmVjYXJnYSBjb21wbGV0YVxuICAgICAgICBjb25zdCByZWRpcmVjdFVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgICByZWRpcmVjdFVybC5zZWFyY2hQYXJhbXMuc2V0KCdsYW5nJywgbmV3TGFuZyk7XG4gICAgICAgIHJlZGlyZWN0VXJsLnNlYXJjaFBhcmFtcy5zZXQoJ3QnLCBEYXRlLm5vdygpKTsgLy8gQcOxYWRpciB0aW1lc3RhbXAgcGFyYSBldml0YXIgY2FjaMOpXG4gICAgICAgIFxuICAgICAgICAvLyBSZWNhcmdhciBwYXJhIGFwbGljYXIgZWwgbnVldm8gaWRpb21hXG4gICAgICAgIGNvbnNvbGUubG9nKCdbTGFuZ3VhZ2VTd2l0Y2hlcl0gRm9yemFuZG8gcmVjYXJnYSBjb21wbGV0YSBjb24gaWRpb21hOicsIG5ld0xhbmcpO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHJlZGlyZWN0VXJsLnRvU3RyaW5nKCk7XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gVmVyaWZpY2FyIHNpIGhheSB1biBwYXLDoW1ldHJvIGRlIGlkaW9tYSBlbiBsYSBVUkxcbiAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG4gICAgICBjb25zdCB1cmxMYW5nID0gdXJsUGFyYW1zLmdldCgnbGFuZycpO1xuICAgICAgXG4gICAgICBpZiAodXJsTGFuZyAmJiB1cmxMYW5nICE9PSBjdXJyZW50TGFuZyAmJiAodXJsTGFuZyA9PT0gJ2VzJyB8fCB1cmxMYW5nID09PSAnY2EnKSkge1xuICAgICAgICBjb25zb2xlLmxvZygnW0xhbmd1YWdlU3dpdGNoZXJdIERldGVjdGFkbyBpZGlvbWEgZW4gVVJMOicsIHVybExhbmcpO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlckxhbmd1YWdlJywgdXJsTGFuZyk7XG4gICAgICAgIFxuICAgICAgICAvLyBSZWNhcmdhciBzaW4gZWwgcGFyw6FtZXRybyBsYW5nIHBhcmEgbm8gZW50cmFyIGVuIGJ1Y2xlXG4gICAgICAgIGNvbnN0IGNsZWFuVXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgICAgIGNsZWFuVXJsLnNlYXJjaFBhcmFtcy5kZWxldGUoJ2xhbmcnKTtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBjbGVhblVybC50b1N0cmluZygpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbTGFuZ3VhZ2VTd2l0Y2hlcl0gTm8gc2UgZW5jb250csOzIGVsIHNlbGVjdG9yIGRlIGlkaW9tYScpO1xuICAgIH1cbiAgfSk7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICAubGFuZ3VhZ2Utc3dpdGNoZXIge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBtYXJnaW4tbGVmdDogMXJlbTtcbiAgfVxuPC9zdHlsZT4iXSwibWFwcGluZ3MiOiJBQW9CRSxTQUFTLGlCQUFpQixvQkFBb0IsTUFBTTtBQUNsRCxRQUFNLFdBQVcsU0FBUyxlQUFlLG1CQUFtQjtBQUM1RCxRQUFNLFlBQVksU0FBUyxlQUFlLHdCQUF3QjtBQUVsRSxNQUFJLFVBQVU7QUFFWixVQUFNLGNBQWMsYUFBYSxRQUFRLGNBQWMsS0FBSztBQUM1RCxhQUFTLFFBQVE7QUFFakIsWUFBUSxJQUFJLHdDQUF3QyxXQUFXO0FBRy9ELFFBQUksV0FBVztBQUNiLGdCQUFVLGNBQWMsa0JBQWtCLFdBQVc7SUFHdkQ7QUFHQSxVQUFNLE1BQU0sSUFBSSxJQUFJLE9BQU8sU0FBUyxJQUFJO0FBQ3hDLFFBQUksYUFBYSxJQUFJLFFBQVEsV0FBVztBQUd4QyxhQUFTLGlCQUFpQixVQUFVLE1BQU07QUFDeEMsWUFBTSxVQUFVLFNBQVM7QUFDekIsY0FBUSxJQUFJLDBDQUEwQyxPQUFPO0FBRzdELG1CQUFhLFFBQVEsZ0JBQWdCLE9BQU87QUFHNUMsbUJBQWEsUUFBUSxvQkFBb0IsTUFBTTtBQUcvQyxZQUFNLGNBQWMsSUFBSSxJQUFJLE9BQU8sU0FBUyxJQUFJO0FBQ2hELGtCQUFZLGFBQWEsSUFBSSxRQUFRLE9BQU87QUFDNUMsa0JBQVksYUFBYSxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUM7QUFHNUMsY0FBUSxJQUFJLDREQUE0RCxPQUFPO0FBQy9FLGFBQU8sU0FBUyxPQUFPLFlBQVksU0FBUztJQUM5QyxDQUFDO0FBR0QsVUFBTSxZQUFZLElBQUksZ0JBQWdCLE9BQU8sU0FBUyxNQUFNO0FBQzVELFVBQU0sVUFBVSxVQUFVLElBQUksTUFBTTtBQUVwQyxRQUFJLFdBQVcsWUFBWSxnQkFBZ0IsWUFBWSxRQUFRLFlBQVksT0FBTztBQUNoRixjQUFRLElBQUksK0NBQStDLE9BQU87QUFDbEUsbUJBQWEsUUFBUSxnQkFBZ0IsT0FBTztBQUc1QyxZQUFNLFdBQVcsSUFBSSxJQUFJLE9BQU8sU0FBUyxJQUFJO0FBQzdDLGVBQVMsYUFBYSxPQUFPLE1BQU07QUFDbkMsYUFBTyxTQUFTLE9BQU8sU0FBUyxTQUFTO0lBQzNDO0VBQ0YsT0FBTztBQUNMLFlBQVEsTUFBTSx5REFBd0Q7RUFDeEU7QUFDRixDQUFDOyIsIm5hbWVzIjpbXX0=