import("/src/components/notifications/NotificationsMenu.js").then((module) => {
  const initializeNotifications = module.default;
  document.addEventListener("DOMContentLoaded", () => {
    console.log("Inicializando sistema de notificaciones...");
    initializeNotifications();
  });
}).catch((error) => {
  console.error("Error al cargar el sistema de notificaciones:", error);
});

//# sourceMappingURL=data:application/json;base64,