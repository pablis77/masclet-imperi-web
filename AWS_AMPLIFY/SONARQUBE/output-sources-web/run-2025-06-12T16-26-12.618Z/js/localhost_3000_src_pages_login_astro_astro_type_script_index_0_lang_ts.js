import apiService from "/src/services/apiService.ts";
window.showPasswordErrorModal = function() {
  document.dispatchEvent(new CustomEvent("show-password-error"));
};
document.addEventListener("DOMContentLoaded", () => {
  const loginForm = document.getElementById("loginForm");
  const script = document.createElement("script");
  script.textContent = `
      // Esta función se ejecutará cuando el componente React esté listo
      document.addEventListener('astro:page-load', () => {
        // Escuchar el evento personalizado para mostrar el modal
        document.addEventListener('show-password-error', () => {
          // Buscar el elemento modal por su ID
          const modal = document.getElementById('passwordErrorModal');
          if (modal) {
            // Enviar mensaje al componente React para cambiar su estado
            const event = new CustomEvent('update-modal-state', { 
              detail: { isOpen: true } 
            });
            modal.dispatchEvent(event);
          }
        });
      });
    `;
  document.head.appendChild(script);
  loginForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const username = document.getElementById("username").value;
    const password = document.getElementById("password").value;
    try {
      const response = await apiService.login(username, password);
      const token = response.data?.access_token || response.access_token;
      if (token) {
        console.log("Login exitoso, token recibido:", token);
        localStorage.setItem("token", token);
        if (response.data?.user || response.user) {
          const userData = response.data?.user || response.user;
          if (userData.username && userData.username.toLowerCase() === "ramon") {
            console.log("🔴 Usuario Ramon detectado, FORZANDO rol Ramon");
            userData.role = "Ramon";
            localStorage.setItem("userRole", "Ramon");
            console.log("🔴 Rol Ramon guardado separadamente para mayor seguridad");
            localStorage.setItem("ramonFix", "true");
          } else if (userData.role === "gerente") {
            console.log("Rol gerente detectado, convirtiendo a Ramon");
            userData.role = "Ramon";
            localStorage.setItem("userRole", "Ramon");
          }
          localStorage.setItem("user", JSON.stringify(userData));
          if (userData.role) {
            localStorage.setItem("userRole", userData.role);
          }
        }
        console.log("Redirigiendo a la página principal (dashboard)");
        window.location.href = "/";
        return;
      } else {
        console.error("Error de autenticación: No se encontró token en la respuesta:", response);
        window.showPasswordErrorModal();
      }
    } catch (error) {
      console.error("Error al iniciar sesión:", error);
      window.showPasswordErrorModal();
    }
  });
  function showStatus(message, type) {
    if (!loginStatus) return;
    loginStatus.textContent = message;
    loginStatus.classList.remove("hidden", "text-green-500", "text-red-500", "text-blue-500");
    switch (type) {
      case "success":
        loginStatus.classList.add("text-green-500");
        break;
      case "error":
        loginStatus.classList.add("text-red-500");
        break;
      case "info":
        loginStatus.classList.add("text-blue-500");
        break;
    }
  }
});
function extractRoleFromToken() {
  console.log("extractRoleFromToken llamada desde login.astro");
  const userJson = localStorage.getItem("user");
  if (userJson) {
    try {
      const user = JSON.parse(userJson);
      if (user.username && user.username.toLowerCase() === "ramon") {
        console.log("Usuario Ramon detectado en extractRoleFromToken de login.astro");
        return "Ramon";
      }
      if (user.role) {
        if (user.role === "gerente") {
          console.log("Rol gerente detectado, convirtiendo a Ramon");
          return "Ramon";
        }
        return user.role;
      }
    } catch (e) {
      console.error("Error al parsear usuario:", e);
    }
  }
  const explicitRole = localStorage.getItem("userRole");
  if (explicitRole) {
    if (explicitRole === "gerente") {
      return "Ramon";
    }
    return explicitRole;
  }
  return "usuario";
}
function getCurrentUserRole() {
  console.log("getCurrentUserRole llamada desde login.astro");
  const ramonFix = localStorage.getItem("ramonFix");
  if (ramonFix === "true") {
    console.log("Indicador ramonFix encontrado, retornando rol Ramon");
    return "Ramon";
  }
  return extractRoleFromToken();
}
function getStoredUser() {
  console.log("getStoredUser llamada desde login.astro");
  const userJson = localStorage.getItem("user");
  if (!userJson) {
    return null;
  }
  try {
    const user = JSON.parse(userJson);
    if (user.username && user.username.toLowerCase() === "ramon") {
      if (user.role !== "Ramon") {
        console.log("Corrigiendo rol de Ramon en getStoredUser de login.astro");
        user.role = "Ramon";
        localStorage.setItem("user", JSON.stringify(user));
        localStorage.setItem("userRole", "Ramon");
      }
    }
    return user;
  } catch (e) {
    console.error("Error al obtener usuario:", e);
    return null;
  }
}

//# sourceMappingURL=data:application/json;base64,