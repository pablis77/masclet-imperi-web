document.addEventListener("DOMContentLoaded", () => {
  const translations = {
    es: {
      // Menú principal
      dashboard: "Dashboard",
      animals: "Animales",
      listings: "Listados",
      exploitations: "Explotaciones",
      // Menú administrativo
      users: "Usuarios",
      imports: "Importación",
      backup: "Copias de seguridad",
      // Títulos
      management_system: "Sistema de Gestión",
      // Roles
      administrador: "Administrador",
      gerente: "Ramon",
      editor: "Editor",
      usuario: "Usuario"
    },
    ca: {
      // Menú principal
      dashboard: "Tauler de control",
      animals: "Animals",
      listings: "Llistats",
      exploitations: "Explotacions",
      // Menú administrativo
      users: "Usuaris",
      imports: "Importació",
      backup: "Còpies de seguretat",
      // Títulos
      management_system: "Sistema de Gestió",
      // Roles
      administrador: "Administrador",
      gerente: "Ramon",
      editor: "Editor",
      usuario: "Usuari"
    }
  };
  function t(key, lang) {
    return translations[lang]?.[key] || key;
  }
  function translateSidebar() {
    const currentLang = localStorage.getItem("userLanguage") || "es";
    const navTitle = document.getElementById("nav-title");
    if (navTitle) {
      navTitle.textContent = "NAVEGACIÓN";
    }
    document.querySelectorAll('h3[data-section-key="navigation"]').forEach((header) => {
      header.textContent = "NAVEGACIÓN";
    });
    document.querySelectorAll('h3[data-section-key="admin"]').forEach((header) => {
      header.textContent = "ADMINISTRACIÓN";
    });
    document.querySelectorAll("nav a").forEach((link) => {
      const text = link.textContent.trim();
      const emoji = text.match(/^([\u{1F300}-\u{1F5FF}\u{1F900}-\u{1F9FF}\u{1F600}-\u{1F64F}\u{1F680}-\u{1F6FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}\u{1F1E6}-\u{1F1FF}\u{1F191}-\u{1F251}\u{1F004}\u{1F0CF}\u{1F170}-\u{1F171}\u{1F17E}-\u{1F17F}\u{1F18E}\u{3030}\u{2B50}\u{2B55}\u{2934}-\u{2935}\u{2B05}-\u{2B07}\u{2B1B}-\u{2B1C}\u{3297}\u{3299}\u{303D}\u{00A9}\u{00AE}\u{2122}\u{23F3}\u{24C2}\u{23E9}-\u{23EF}\u{25B6}\u{23F8}-\u{23FA}]+)/u);
      const emojiPrefix = emoji ? emoji[0] + " " : "";
      let translationKey = "";
      if (text.includes("Dashboard")) translationKey = "dashboard";
      else if (text.includes("Animales")) translationKey = "animals";
      else if (text.includes("Explotaciones")) translationKey = "exploitations";
      else if (text.includes("Usuarios")) translationKey = "users";
      else if (text.includes("Importación")) translationKey = "imports";
      else if (text.includes("Backup") || text.includes("Copias")) translationKey = "backup";
      if (translationKey) {
        link.innerHTML = `${emojiPrefix} ${t(translationKey, currentLang)}`;
      }
    });
    const systemText = document.querySelector("p.text-sm.text-gray-500.dark\\:text-gray-300.text-center");
    if (systemText) {
      systemText.textContent = t("management_system", currentLang);
    }
  }
  translateSidebar();
  setInterval(() => {
    document.querySelectorAll('h3[data-section-key="navigation"]').forEach((header) => {
      if (header.textContent !== "NAVEGACIÓN") {
        console.log("Corrigiendo título de navegación");
        header.textContent = "NAVEGACIÓN";
      }
    });
  }, 1e3);
  window.addEventListener("storage", function(e) {
    if (e.key === "userLanguage") {
      translateSidebar();
    }
  });
  const closeSidebarButton = document.getElementById("close-sidebar");
  if (closeSidebarButton) {
    closeSidebarButton.addEventListener("click", () => {
      document.dispatchEvent(new CustomEvent("close-sidebar"));
    });
  }
});

//# sourceMappingURL=data:application/json;base64,