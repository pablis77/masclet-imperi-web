import { showSuccess, showError } from "/src/stores/messageStore.ts";
import { cachedFetch } from "/src/stores/cacheStore.ts";
import animalService from "/src/services/animalService.ts";
document.addEventListener("DOMContentLoaded", () => {
  const form = document.getElementById("new-animal-form");
  const genereSelect = document.getElementById("genere");
  const alletarContainer = document.getElementById("alletar-container");
  if (genereSelect && alletarContainer) {
    genereSelect.addEventListener("change", () => {
      if (genereSelect.value === "F") {
        alletarContainer.classList.remove("hidden");
      } else {
        alletarContainer.classList.add("hidden");
      }
    });
  }
  if (form) {
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      const submitBtn = form.querySelector('button[type="submit"]');
      if (submitBtn) {
        submitBtn.disabled = true;
        submitBtn.innerHTML = "Creando...";
      }
      try {
        const formData = new FormData(form);
        const animalData = {};
        for (const [key, value] of formData.entries()) {
          if (value !== "") {
            if (key === "dob" && value) {
              const dateParts = value.split("-");
              if (dateParts.length === 3) {
                animalData[key] = `${dateParts[2]}/${dateParts[1]}/${dateParts[0]}`;
              } else {
                animalData[key] = value;
              }
            } else {
              animalData[key] = value;
            }
          }
        }
        const requiredFields = ["nom", "genere", "explotacio", "estado"];
        for (const field of requiredFields) {
          if (!animalData[field]) {
            throw new Error(`El campo ${field} es obligatorio`);
          }
        }
        if (animalData.genere === "F" && !animalData.alletar) {
          animalData.alletar = "0";
        }
        if (animalData.genere === "M" && animalData.alletar) {
          delete animalData.alletar;
        }
        console.log("Datos a enviar:", animalData);
        const token = localStorage.getItem("token");
        if (!token) {
          throw new Error("No hay token de autenticación. Por favor, inicie sesión nuevamente.");
        }
        const result = await animalService.createAnimal(animalData);
        console.log("Animal creado:", result);
        showSuccess("Animal creado", `El animal ${animalData.nom} ha sido creado correctamente`);
        setTimeout(() => {
          let animalId;
          if (result && result.data && result.data.id) {
            animalId = result.data.id;
          } else if (result && result.id) {
            animalId = result.id;
          } else {
            console.error("No se pudo obtener el ID del animal creado:", result);
            window.location.href = "/animals";
            return;
          }
          console.log("Redirigiendo a la ficha del animal con ID:", animalId);
          window.location.href = `/animals/${animalId}`;
        }, 1e3);
      } catch (error) {
        console.error("Error al crear animal:", error);
        showError("Error", error.message || "Ha ocurrido un error al crear el animal");
        if (submitBtn) {
          submitBtn.disabled = false;
          submitBtn.innerHTML = "Crear Animal";
        }
      }
    });
  }
});

//# sourceMappingURL=data:application/json;base64,