document.addEventListener("DOMContentLoaded", () => {
  const refreshBtn = document.getElementById("refreshBtn");
  const totalAnimalsContainer = document.getElementById("totalAnimalsContainer");
  if (refreshBtn) {
    refreshBtn.addEventListener("click", () => {
      window.location.reload();
    });
  }
  document.addEventListener("animals-loaded", (e) => {
    if (totalAnimalsContainer && e.detail && e.detail.total !== void 0) {
      const currentLang = localStorage.getItem("userLanguage") || "es";
      const animalesText = currentLang === "ca" ? "animals" : "animales";
      totalAnimalsContainer.innerHTML = `<span class="text-sm text-gray-500 dark:text-gray-400">
          Total: ${e.detail.total} ${animalesText} 
        </span>`;
    }
  });
  document.addEventListener("filters-applied", (e) => {
    if (totalAnimalsContainer) {
      const currentLang = localStorage.getItem("userLanguage") || "es";
      const filtrosText = currentLang === "ca" ? "Aplicant filtres..." : "Aplicando filtros...";
      totalAnimalsContainer.innerHTML = `<span class="text-sm text-gray-500 dark:text-gray-400">
          ${filtrosText}
        </span>`;
    }
  });
  function translatePageTexts() {
    const currentLang = localStorage.getItem("userLanguage") || "es";
    if (currentLang === "ca") {
      const mainTitle = document.querySelector('[data-astro-source-loc="56:79"]');
      if (mainTitle) mainTitle.textContent = "Gestió d'Animals";
      const newAnimalBtn = document.querySelector('a[href="/animals/new"]');
      if (newAnimalBtn) {
        try {
          const token = localStorage.getItem("token");
          let userRole = "guest";
          if (token) {
            const payload = JSON.parse(atob(token.split(".")[1]));
            userRole = (payload.role || "guest").toLowerCase();
            console.log("Rol detectado en script traducción:", userRole);
          }
          if (userRole === "editor" || userRole === "usuario") {
            console.log("BLOQUEANDO BOTÓN EN SCRIPT DE TRADUCCIÓN");
            newAnimalBtn.href = "javascript:void(0);";
            newAnimalBtn.disabled = true;
            newAnimalBtn.setAttribute("disabled", "disabled");
            newAnimalBtn.style.opacity = "0.5";
            newAnimalBtn.style.pointerEvents = "none";
            newAnimalBtn.style.cursor = "not-allowed";
            newAnimalBtn.title = "NO TIENES PERMISOS PARA CREAR NUEVOS ANIMALES";
            newAnimalBtn.classList.add("opacity-50", "cursor-not-allowed");
            if (!newAnimalBtn.querySelector(".lock-icon")) {
              const lockIcon = document.createElement("span");
              lockIcon.textContent = " 🔒";
              lockIcon.className = "ml-1 lock-icon";
              newAnimalBtn.appendChild(lockIcon);
            }
            newAnimalBtn.addEventListener("click", function(e) {
              e.preventDefault();
              e.stopPropagation();
              alert("NO TIENES PERMISOS PARA CREAR NUEVOS ANIMALES");
              return false;
            });
          }
        } catch (e) {
          console.error("Error aplicando restricciones en traducción:", e);
        }
        const spanPlus = newAnimalBtn.querySelector("span");
        if (spanPlus && spanPlus.nextSibling) {
          spanPlus.nextSibling.textContent = " Nou Animal";
        }
      }
      const refreshBtn2 = document.getElementById("refreshBtn");
      if (refreshBtn2) {
        const spanRefresh = refreshBtn2.querySelector("span");
        if (spanRefresh && spanRefresh.nextSibling) {
          spanRefresh.nextSibling.textContent = " Actualitzar";
        }
      }
      const searchHeader = document.querySelector('[data-astro-source-loc="74:97"]');
      if (searchHeader) searchHeader.textContent = "Cerca i Filtres";
      const searchDesc = document.querySelector('[data-astro-source-loc="77:85"]');
      if (searchDesc) searchDesc.textContent = "Utilitza els filtres per trobar animals específics. Pots filtrar per explotació, gènere, estat i més.";
      const listHeader = document.querySelector('[data-astro-source-loc="93:97"]');
      if (listHeader) listHeader.textContent = "Llistat d'Animals";
    }
  }
  translatePageTexts();
  window.addEventListener("storage", () => {
    translatePageTexts();
  });
});

//# sourceMappingURL=data:application/json;base64,