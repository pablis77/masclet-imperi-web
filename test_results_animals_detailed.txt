============================= test session starts =============================
platform win32 -- Python 3.11.11, pytest-8.3.4, pluggy-1.5.0 -- C:\Users\Usuario\anaconda3\envs\masclet-imperi\python.exe
cachedir: .pytest_cache
rootdir: C:\Proyectos\claude\masclet-imperi-web
configfile: pytest.ini
plugins: anyio-3.7.1, asyncio-0.25.3, cov-6.0.0, env-1.1.5, ordering-0.6
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=function
collecting ... collected 13 items

new_tests/animals/test_animals_create.py::test_create_animal_minimal 
Probando crear animal con campos mínimos: http://localhost:8000/api/v1/animals/
Código de estado: 201
Test de crear animal con campos mínimos completado con éxito.
PASSED
new_tests/animals/test_animals_create.py::test_create_animal_complete 
Probando crear animal con todos los campos: http://localhost:8000/api/v1/animals/
Código de estado: 201
Test de crear animal con todos los campos completado con éxito.
PASSED
new_tests/animals/test_animals_create.py::test_create_animal_invalid_data 
Probando crear animal con datos inválidos - Falta el nombre
Código de estado: 400
Error recibido (esperado): {"detail":"1 validation error for AnimalCreate\nnom\n  Field required [type=missing, input_value={'genere': 'M', 'explotac...Gurans', 'estado': 'OK'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing"}

Probando crear animal con datos inválidos - Falta el género
Código de estado: 400
Error recibido (esperado): {"detail":"1 validation error for AnimalCreate\ngenere\n  Field required [type=missing, input_value={'nom': 'Test Sin Género...Gurans', 'estado': 'OK'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing"}

Probando crear animal con datos inválidos - Falta la explotación
Código de estado: 400
Error recibido (esperado): {"detail":"1 validation error for AnimalCreate\nexplotacio\n  Field required [type=missing, input_value={'nom': 'Test Sin Explota...e': 'M', 'estado': 'OK'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.6/v/missing"}

Probando crear animal con datos inválidos - Género inválido
Código de estado: 400
Error recibido (esperado): {"detail":"1 validation error for AnimalCreate\ngenere\n  Value error, Género inválido [type=value_error, input_value='X', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error"}

Probando crear animal con datos inválidos - Estado inválido
Código de estado: 400
Error recibido (esperado): {"detail":"1 validation error for AnimalCreate\nestado\n  Value error, Estado inválido [type=value_error, input_value='INVALID', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error"}

Probando crear animal con datos inválidos - Fecha de nacimiento con formato inválido
Código de estado: 400
Error recibido (esperado): {"detail":"1 validation error for AnimalCreate\ndob\n  Value error, La fecha debe estar en formato DD/MM/YYYY [type=value_error, input_value='2022-01-01', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.6/v/value_error"}
Test de validación de datos al crear animales completado con éxito.
PASSED
new_tests/animals/test_animals_delete.py::test_delete_animal 
Creando animal de prueba para eliminar...
Animal creado con ID: 244
Probando eliminar animal: http://localhost:8000/api/v1/animals/244
Código de estado de eliminación: 204
Test de eliminar animal completado con éxito.
PASSED
new_tests/animals/test_animals_delete.py::test_delete_nonexistent_animal 
Probando eliminar animal inexistente: http://localhost:8000/api/v1/animals/99999
Código de estado: 404
Error recibido (esperado): {"detail":"Animal 99999 no encontrado"}
Test de eliminar animal inexistente completado con éxito.
PASSED
new_tests/animals/test_animals_get.py::test_get_animal_by_id 
=== Obteniendo token de autenticación ===
Respuesta de autenticación: 200
Token obtenido: eyJhbGciOi...

=== Obteniendo lista de animales ===
Estructura de la respuesta: ['status', 'data']
Usando animal existente con ID: 119
Datos del animal: {
  "nom": "AnimalParcial53464",
  "genere": "F",
  "explotacio": "TestExplotacio",
  "estado": "OK",
  "alletar": "0",
  "dob": "01/01/2021",
  "mare": null,
  "pare": null,
  "quadra": null,
  "cod": "COD53464",
  "num_serie": null,
  "part": null,
  "genere_t": null,
  "estado_t": null,
  "id": 119,
  "partos": {
    "total": 0,
    "ultimo": null,
    "items": [],
    "first_date": null,
    "last_date": null
  },
  "created_at": "02/04/2025",
  "updated_at": "02/04/2025"
}

=== Obteniendo animal por ID ===
URL: http://localhost:8000/api/v1/animals/119
Código de respuesta: 200
Datos del animal obtenido: {
  "status": "success",
  "data": {
    "nom": "AnimalParcial53464",
    "genere": "F",
    "explotacio": "TestExplotacio",
    "estado": "OK",
    "alletar": "0",
    "dob": "01/01/2021",
    "mare": null,
    "pare": null,
    "quadra": null,
    "cod": "COD53464",
    "num_serie": null,
    "part": null,
    "genere_t": null,
    "estado_t": null,
    "id": 119,
    "partos": {
      "total": 0,
      "ultimo": null,
      "items": [],
      "first_date": null,
      "last_date": null
    },
    "created_at": "02/04/2025",
    "updated_at": "02/04/2025"
  }
}

Campos en la respuesta del animal:
  - nom: AnimalParcial53464
  - genere: F
  - explotacio: TestExplotacio
  - estado: OK
  - alletar: 0
  - dob: 01/01/2021
  - mare: None
  - pare: None
  - quadra: None
  - cod: COD53464
  - num_serie: None
  - part: None
  - genere_t: None
  - estado_t: None
  - id: 119
  - partos: {'total': 0, 'ultimo': None, 'items': [], 'first_date': None, 'last_date': None}
  - created_at: 02/04/2025
  - updated_at: 02/04/2025

CAMPOS ADICIONALES encontrados en la respuesta (no en CSV): ['genere_t', 'estado_t', 'partos']
Test de obtener animal por ID completado con éxito.
PASSED
new_tests/animals/test_animals_integration.py::test_animal_crud_workflow 
1. CREACIÓN DE ANIMAL
Creando animal con nombre: Integration_520152a0
Animal creado con ID: 245

2. OBTENCIÓN DE ANIMAL POR ID
Obteniendo animal con ID: 245
Animal obtenido correctamente: Integration_520152a0

3. ACTUALIZACIÓN DE ANIMAL
Actualizando animal con ID 245 - Nuevo nombre: Updated_Integration_520152a0
Animal actualizado correctamente: Updated_Integration_520152a0

4. LISTADO DE ANIMALES
Animal encontrado y verificado: Updated_Integration_520152a0

5. ELIMINACIÓN DE ANIMAL
Eliminando animal con ID: 245
Animal eliminado correctamente

6. VERIFICACIÓN DE ELIMINACIÓN EN LISTA
Animal no encontrado en la lista después de eliminarlo (correcto)

Test de integración CRUD completado con éxito.
PASSED
new_tests/animals/test_animals_integration.py::test_animal_with_partos 
1. CREACIÓN DE ANIMAL HEMBRA
Hembra creada con ID: 246

2. AÑADIR PARTO
Parto añadido con ID: 156

3. VERIFICAR PARTO EN ANIMAL
Parto verificado correctamente en el animal

4. VERIFICAR QUE LOS PARTOS NO PUEDAN ELIMINARSE (REGLA DE NEGOCIO)
Verificado: Los partos no pueden eliminarse (son registros históricos permanentes)
Animal eliminado correctamente

Test de animal con partos completado con éxito.
PASSED
new_tests/animals/test_animals_list.py::test_list_animals 
Probando listar animales: http://localhost:8000/api/v1/animals/
Código de estado: 200
Número de animales encontrados: 10
Ejemplo de animal: {'nom': 'AnimalParcial53464', 'genere': 'F', 'explotacio': 'TestExplotacio', 'estado': 'OK', 'alletar': '0', 'dob': '01/01/2021', 'mare': None, 'pare': None, 'quadra': None, 'cod': 'COD53464', 'num_serie': None, 'part': None, 'genere_t': None, 'estado_t': None, 'id': 119, 'partos': {'total': 0, 'ultimo': None, 'items': [], 'first_date': None, 'last_date': None}, 'created_at': '02/04/2025', 'updated_at': '02/04/2025'}
Test de listar animales completado con éxito.
PASSED
new_tests/animals/test_animals_list.py::test_list_animals_with_filters 
Probando listar animales con filtros: http://localhost:8000/api/v1/animals/?explotacio=Gurans
Código de estado: 200
Error durante la solicitud con filtros {'explotacio': 'Gurans'}: El filtro de explotación no se aplicó correctamente: TestExplotacio != Gurans
assert 'TestExplotacio' == 'Gurans'
  
  - Gurans
  + TestExplotacio
FAILED
new_tests/animals/test_animals_update.py::test_update_animal_partial 
Probando actualizar parcialmente un animal: http://localhost:8000/api/v1/animals/247
Código de estado: 200
Test de actualización parcial completado con éxito.
PASSED
new_tests/animals/test_animals_update.py::test_update_animal_complete 
Probando actualizar completamente un animal: http://localhost:8000/api/v1/animals/248
Género del animal: M, usando alletar=0
Código de estado: 200
Test de actualización completa completado con éxito.
PASSED
new_tests/animals/test_animals_update.py::test_update_animal_invalid_data 
Probando actualizar animal con datos inválidos - Género inválido
Código de estado: 422
Error recibido (esperado): {"detail":[{"type":"value_error","loc":["body","genere"],"msg":"Value error, Género inválido","input":"X","ctx":{"error":{}}}]}

Probando actualizar animal con datos inválidos - Estado inválido
Código de estado: 422
Error recibido (esperado): {"detail":[{"type":"value_error","loc":["body","estado"],"msg":"Value error, Estado inválido","input":"INVALID","ctx":{"error":{}}}]}

Probando actualizar animal con datos inválidos - Fecha de nacimiento con formato inválido
Código de estado: 422
Error recibido (esperado): {"detail":[{"type":"value_error","loc":["body","dob"],"msg":"Value error, La fecha debe estar en formato DD/MM/YYYY","input":"2022-01-01","ctx":{"error":{}}}]}
Test de validación de datos al actualizar animales completado con éxito.
PASSED

================================== FAILURES ===================================
_______________________ test_list_animals_with_filters ________________________

auth_token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsInJvbGUiOiJVc2VyUm9sZS5BRE1JTiIsImV4cCI6MTc0MzYwNzc3OH0.bdnGQWGti5ZKPROY5gDXhi_7Kk8DDiuChjccQXdRS8A'

    @pytest.mark.asyncio
    async def test_list_animals_with_filters(auth_token):
        """Test para el endpoint de listar animales con filtros."""
        # Probar diferentes combinaciones de filtros
        filters = [
            {"explotacio": "Gurans"},
            {"genere": "M"},
            {"estado": "OK"},
            {"alletar": "0"},
            {"explotacio": "Gurans", "genere": "F"},
            {"search": "Test"}
        ]
    
        for filter_params in filters:
            # Construir la URL con los parámetros de consulta
            url = f"{BASE_URL}/?"
            for key, value in filter_params.items():
                url += f"{key}={value}&"
            url = url.rstrip("&")  # Eliminar el último '&'
    
            headers = {"Authorization": f"Bearer {auth_token}"}
    
            print(f"\nProbando listar animales con filtros: {url}")
    
            try:
                # Realizar la solicitud GET para listar animales con filtros
                response = requests.get(url, headers=headers)
    
                print(f"Código de estado: {response.status_code}")
    
                assert response.status_code == 200, f"Error: {response.status_code} - {response.text}"
                data = response.json()
    
                # Verificar que la respuesta tiene la estructura correcta
                assert "status" in data, "La respuesta no contiene el campo 'status'"
                assert data["status"] == "success", f"El estado no es 'success', es '{data['status']}'"
                assert "data" in data, "La respuesta no contiene el campo 'data'"
    
                # Verificar que data contiene los campos de paginación
                assert "total" in data["data"], "Falta el campo 'total' en la paginación"
                assert "offset" in data["data"], "Falta el campo 'offset' en la paginación"
                assert "limit" in data["data"], "Falta el campo 'limit' en la paginación"
                assert "items" in data["data"], "Falta el campo 'items' en la paginación"
    
                # Verificar que los filtros se aplicaron correctamente
                if "explotacio" in filter_params and data["data"]["items"]:
                    for animal in data["data"]["items"]:
>                       assert animal["explotacio"] == filter_params["explotacio"], f"El filtro de explotación no se aplicó correctamente: {animal['explotacio']} != {filter_params['explotacio']}"
E                       AssertionError: El filtro de explotación no se aplicó correctamente: TestExplotacio != Gurans
E                       assert 'TestExplotacio' == 'Gurans'
E                         
E                         - Gurans
E                         + TestExplotacio

new_tests\animals\test_animals_list.py:138: AssertionError

During handling of the above exception, another exception occurred:

auth_token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsInJvbGUiOiJVc2VyUm9sZS5BRE1JTiIsImV4cCI6MTc0MzYwNzc3OH0.bdnGQWGti5ZKPROY5gDXhi_7Kk8DDiuChjccQXdRS8A'

    @pytest.mark.asyncio
    async def test_list_animals_with_filters(auth_token):
        """Test para el endpoint de listar animales con filtros."""
        # Probar diferentes combinaciones de filtros
        filters = [
            {"explotacio": "Gurans"},
            {"genere": "M"},
            {"estado": "OK"},
            {"alletar": "0"},
            {"explotacio": "Gurans", "genere": "F"},
            {"search": "Test"}
        ]
    
        for filter_params in filters:
            # Construir la URL con los parámetros de consulta
            url = f"{BASE_URL}/?"
            for key, value in filter_params.items():
                url += f"{key}={value}&"
            url = url.rstrip("&")  # Eliminar el último '&'
    
            headers = {"Authorization": f"Bearer {auth_token}"}
    
            print(f"\nProbando listar animales con filtros: {url}")
    
            try:
                # Realizar la solicitud GET para listar animales con filtros
                response = requests.get(url, headers=headers)
    
                print(f"Código de estado: {response.status_code}")
    
                assert response.status_code == 200, f"Error: {response.status_code} - {response.text}"
                data = response.json()
    
                # Verificar que la respuesta tiene la estructura correcta
                assert "status" in data, "La respuesta no contiene el campo 'status'"
                assert data["status"] == "success", f"El estado no es 'success', es '{data['status']}'"
                assert "data" in data, "La respuesta no contiene el campo 'data'"
    
                # Verificar que data contiene los campos de paginación
                assert "total" in data["data"], "Falta el campo 'total' en la paginación"
                assert "offset" in data["data"], "Falta el campo 'offset' en la paginación"
                assert "limit" in data["data"], "Falta el campo 'limit' en la paginación"
                assert "items" in data["data"], "Falta el campo 'items' en la paginación"
    
                # Verificar que los filtros se aplicaron correctamente
                if "explotacio" in filter_params and data["data"]["items"]:
                    for animal in data["data"]["items"]:
                        assert animal["explotacio"] == filter_params["explotacio"], f"El filtro de explotación no se aplicó correctamente: {animal['explotacio']} != {filter_params['explotacio']}"
    
                if "genere" in filter_params and data["data"]["items"]:
                    for animal in data["data"]["items"]:
                        assert animal["genere"] == filter_params["genere"], f"El filtro de género no se aplicó correctamente: {animal['genere']} != {filter_params['genere']}"
    
                if "estado" in filter_params and data["data"]["items"]:
                    for animal in data["data"]["items"]:
                        assert animal["estado"] == filter_params["estado"], f"El filtro de estado no se aplicó correctamente: {animal['estado']} != {filter_params['estado']}"
    
                if "alletar" in filter_params and data["data"]["items"]:
                    for animal in data["data"]["items"]:
                        assert animal["alletar"] == filter_params["alletar"], f"El filtro de alletar no se aplicó correctamente: {animal['alletar']} != {filter_params['alletar']}"
    
                print(f"Número de animales encontrados con filtros {filter_params}: {len(data['data']['items'])}")
    
            except Exception as e:
                print(f"Error durante la solicitud con filtros {filter_params}: {e}")
                import traceback
                traceback.print_exc()
>               assert False, f"Excepción durante la solicitud HTTP con filtros {filter_params}."
E               AssertionError: Excepción durante la solicitud HTTP con filtros {'explotacio': 'Gurans'}.
E               assert False

new_tests\animals\test_animals_list.py:158: AssertionError
=========================== short test summary info ===========================
FAILED new_tests/animals/test_animals_list.py::test_list_animals_with_filters - AssertionError: Excepción durante la solicitud HTTP con filtros {'explotacio': 'Gurans'}.
assert False
======================== 1 failed, 12 passed in 3.59s =========================
