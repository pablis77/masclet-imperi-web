#!/usr/bin/env python
"""
Script para corregir el endpoint de salud en el servidor de producci√≥n.
"""
import sys
import os
import argparse
import subprocess
import tempfile

def main():
    # Configurar el parser de argumentos
    parser = argparse.ArgumentParser(description='Corregir endpoint de salud en producci√≥n')
    parser.add_argument('--ec2-ip', required=True, help='Direcci√≥n IP del servidor EC2')
    parser.add_argument('--pem-path', required=True, help='Ruta al archivo .pem para SSH')
    args = parser.parse_args()
    
    # Crear el archivo de correcci√≥n
    health_py_fix = """
\"\"\"
Endpoint de salud para monitoreo y health checks.
Proporciona informaci√≥n b√°sica sobre el estado del servidor.
\"\"\"
from fastapi import APIRouter, Depends, HTTPException, status
from tortoise.exceptions import OperationalError
from app.core.config import settings
import time
import logging
import socket
import os
from typing import Dict, Any

router = APIRouter(prefix="/health", tags=["health"])
logger = logging.getLogger(__name__)

@router.get("", status_code=status.HTTP_200_OK)
async def health_check() -> Dict[str, Any]:
    \"\"\"
    Endpoint de verificaci√≥n de salud (health check) b√°sico.
    Verifica la disponibilidad del servicio para load balancers y herramientas de monitoreo.
    
    Returns:
        Informaci√≥n b√°sica sobre el estado del servicio.
    \"\"\"
    try:
        # Informaci√≥n b√°sica sobre el servicio
        result = {
            "status": "ok",
            "environment": getattr(settings, 'environment', 'production'),
            "version": getattr(settings, 'version', '1.0.0'),
            "timestamp": time.time()
        }
        return result
    except Exception as e:
        logger.error(f"Error en health check: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error interno al verificar estado del servicio"
        )

@router.get("/detailed", status_code=status.HTTP_200_OK)
async def detailed_health_check() -> Dict[str, Any]:
    \"\"\"
    Endpoint de verificaci√≥n de salud detallado.
    Proporciona informaci√≥n b√°sica sobre el estado del servicio.
    
    Returns:
        Informaci√≥n detallada del estado del servicio.
    \"\"\"
    # No mostrar informaci√≥n detallada en producci√≥n por seguridad
    if getattr(settings, 'environment', 'production') == "production":
        return {
            "status": "ok",
            "message": "Informaci√≥n detallada no disponible en producci√≥n"
        }
        
    hostname = socket.gethostname()
    
    try:
        # Informaci√≥n del sistema
        system_info = {
            "hostname": hostname,
            "ip": socket.gethostbyname(hostname),
            "python_version": sys.version,
            "environment": getattr(settings, 'environment', 'production'),
            "version": getattr(settings, 'version', '1.0.0'),
            "timestamp": time.time(),
            "process_id": os.getpid(),
            "uptime_seconds": time.time() - process_start_time
        }
        
        # Verificar base de datos y otros servicios cr√≠ticos si es necesario
        # Esta parte se puede extender para verificar m√°s servicios
        
        return {
            "status": "ok",
            "system": system_info,
            # A√±adir m√°s informaci√≥n de otros servicios si es necesario
        }
    except Exception as e:
        logger.error(f"Error en detailed health check: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Error interno al verificar estado detallado del servicio"
        )

# Variable global para calcular el uptime
process_start_time = time.time()
"""
    
    print("üîß Generando archivo de correcci√≥n...")
    
    # Crear archivo temporal con la correcci√≥n
    with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as temp:
        temp.write(health_py_fix)
        temp_file = temp.name
    
    try:
        print(f"üì§ Copiando archivo al servidor {args.ec2_ip}...")
        # Copiar el archivo al servidor
        subprocess.run([
            'scp', 
            '-i', args.pem_path, 
            temp_file, 
            f'ec2-user@{args.ec2_ip}:/home/ec2-user/health.py'
        ], check=True)
        
        print("üîÑ Aplicando correcci√≥n al contenedor masclet-api...")
        # Copiar el archivo dentro del contenedor
        subprocess.run([
            'ssh',
            '-i', args.pem_path,
            f'ec2-user@{args.ec2_ip}',
            'docker cp /home/ec2-user/health.py masclet-api:/app/app/api/endpoints/health.py'
        ], check=True)
        
        print("üîÑ Reiniciando el contenedor masclet-api...")
        # Reiniciar el contenedor
        subprocess.run([
            'ssh',
            '-i', args.pem_path,
            f'ec2-user@{args.ec2_ip}',
            'docker restart masclet-api'
        ], check=True)
        
        print("‚úÖ Correcci√≥n aplicada correctamente. El servicio deber√≠a estar funcionando en unos segundos.")
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error al aplicar la correcci√≥n: {e}")
        return 1
    finally:
        # Limpiar el archivo temporal
        os.unlink(temp_file)
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
