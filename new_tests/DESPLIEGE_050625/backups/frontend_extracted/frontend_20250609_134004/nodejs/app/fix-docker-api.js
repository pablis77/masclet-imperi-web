// Script corrector para la configuraci√≥n de la API en Docker
// Este script funciona con m√≥dulos ES

console.log('üê≥ Iniciando script de correcci√≥n de API para Docker...');

// Configuraci√≥n principal
const API_CONFIG = {
  baseURL: '/api/v1',
  timeout: 15000,
  withCredentials: true,
  backendURL: 'http://masclet-api:8000'
};

// Funci√≥n principal
async function applyFix() {
  try {
    console.log('üîß Aplicando configuraci√≥n directa para API en Docker...');
    
    // 1. Mostrar la configuraci√≥n que vamos a aplicar
    console.log('üìã Configuraci√≥n a aplicar:');
    console.log('- backendURL:', API_CONFIG.backendURL);
    console.log('- baseURL:', API_CONFIG.baseURL);
    
    // 2. Crear archivo de configuraci√≥n con import/export
    const configContent = 
// Configuracion API simplificada para entorno de produccion
const API_CONFIG = {
  baseURL: '',
  timeout: ,
  withCredentials: true,
  backendURL: ''
};

// Logs para diagn√≥stico
console.log('[API Config] Modo: PRODUCCION');
console.log(\[API Config] BackendURL: \\);
console.log(\[API Config] Base URL: \\);

// Exportar configuraci√≥n
export { API_CONFIG as A };
;

    // 3. Usar la API del sistema de archivos con promesas
    const { writeFile } = await import('fs/promises');
    const { join } = await import('path');
    
    // 4. Escribir el archivo de configuraci√≥n
    await writeFile('/app/server/chunks/apiConfig_Qu2HXU2s.mjs', configContent, 'utf8');
    console.log('‚úÖ Archivo de configuraci√≥n del servidor actualizado');
    
    // 5. Tambi√©n actualizamos el archivo de configuraci√≥n del cliente
    const clientConfigContent = 
// Configuraci√≥n para API de producci√≥n
const apiConfig = {
  baseURL: '',
  timeout: ,
  withCredentials: true,
  backendURL: ''
};

// Exportar la configuraci√≥n
export { apiConfig as A };
;
    
    await writeFile('/app/client/_astro/apiConfig.BYL0hBvc.js', clientConfigContent, 'utf8');
    console.log('‚úÖ Archivo de configuraci√≥n del cliente actualizado');
    
    console.log('üöÄ Correcci√≥n aplicada con √©xito');
    console.log('‚ö†Ô∏è IMPORTANTE: Es necesario reiniciar el contenedor para aplicar los cambios');
    
    return true;
  } catch (error) {
    console.error('‚ùå Error al aplicar la correcci√≥n:', error.message);
    return false;
  }
}

// Ejecutar la funci√≥n principal
applyFix().then(success => {
  if (success) {
    console.log('‚ú® Script de correcci√≥n completado exitosamente');
  } else {
    console.error('‚ùå Script de correcci√≥n fall√≥');
    process.exit(1);
  }
});
