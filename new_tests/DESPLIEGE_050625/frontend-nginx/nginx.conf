server {
    listen 80;
    server_name _;

    # Log de errores y accesos
    error_log  /var/log/nginx/error.log warn;
    access_log /var/log/nginx/access.log;

    # Directorio raíz donde están los archivos
    root /usr/share/nginx/html;
    index index.html;
    
    # Compresión GZIP
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_types text/plain text/css text/xml application/xml application/javascript application/json text/javascript image/svg+xml;
    gzip_disable "msie6";
    
    # Evitar error 413 - Peticiones grandes
    client_max_body_size 20M;
    
    # Headers de seguridad
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    
    # Acceso directo a los recursos de client/
    location /client/ {
        alias /usr/share/nginx/html/client/;
        try_files $uri $uri/ =404;
        add_header Cache-Control "public, max-age=2592000";
        access_log off;
    }

    # Acceso directo a recursos _astro generados por Astro (ruta absoluta)
    location ~* ^/_astro/ {
        alias /usr/share/nginx/html/client/_astro/;
        access_log off;
        expires max;
        add_header Cache-Control "public, max-age=31536000";
        add_header X-Content-Origin "direct-astro-path" always;
        try_files $uri =404;
    }

    # Acceso directo a recursos _astro generados por Astro (ruta relativa)
    location ~* ^/client/_astro/ {
        alias /usr/share/nginx/html/client/_astro/;
        access_log off;
        expires max;
        add_header Cache-Control "public, max-age=31536000";
        add_header X-Content-Origin "client-astro-path" always;
        try_files $uri =404;
    }
    
    # 1. Servir imágenes y fuentes con cache largo
    location ~* \.(?:jpg|jpeg|gif|png|ico|webp|svg|woff|woff2|ttf|eot)$ {
        expires 30d;
        add_header Cache-Control "public, max-age=2592000";
        access_log off;
        try_files $uri =404;
    }
    
    # 2. Servir JS/CSS con cache medio
    location ~* \.(?:js|css)$ {
        expires 7d;
        add_header Cache-Control "public, max-age=604800";
        access_log off;
        try_files $uri =404;
    }

    # 3. Proxy para API backend
    location /api/ {
        proxy_pass http://masclet-backend:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # 4. Endpoint para health check
    location = /health {
        access_log off;
        return 200 'OK';
        add_header Content-Type text/plain;
    }

    # 5. Todo lo demás se maneja como SPA
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Configuración de error 404
    error_page 404 = /index.html;

    # Manejo de errores del servidor
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
