server {
    listen 80 default_server;
    server_name _;

    # Logs detallados para debugging inicial
    error_log /var/log/nginx/error.log debug;
    access_log /var/log/nginx/access.log combined;

    # Configuración de Gzip optimizada para mejor rendimiento
    gzip on;
    gzip_comp_level 5;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_vary on;
    gzip_types
      application/javascript
      application/json
      application/x-javascript
      application/xml
      image/svg+xml
      text/css
      text/javascript
      text/plain
      text/xml;

    # Headers de seguridad
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Debug-Info "Nginx Main Entry $request_uri" always;

    # API proxy hacia el backend
    location /api/ {
        proxy_pass http://masclet-backend:8000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 180s;
        add_header X-Debug-Info "Proxying to API: $request_uri" always;
    }

    # Servir archivos estáticos desde _astro (es donde Astro coloca assets procesados)
    location /_astro/ {
        alias /usr/share/nginx/html/client/_astro/;
        add_header Cache-Control "public, max-age=31536000, immutable";
        add_header X-Debug-Info "Serving static from /_astro/: $request_uri" always;
        try_files $uri =404;
        access_log off;
        expires max;
    }

    # Archivos estáticos (JS, CSS, imágenes, etc.) con alta prioridad
    location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webp|webm|htc|woff2|woff|ttf|eot)$ {
        root /usr/share/nginx/html/client;
        try_files $uri =404;
        add_header Cache-Control "public, max-age=31536000, immutable";
        add_header X-Debug-Info "Serving static asset: $request_uri from $document_root" always;
        access_log off;
        expires max;
    }

    # Archivos HTML y XML (caché corto para actualizaciones rápidas)
    location ~* \.(?:manifest|appcache|html?|xml|json)$ {
        root /usr/share/nginx/html/client;
        try_files $uri =404;
        add_header Cache-Control "public, max-age=0";
        add_header X-Debug-Info "Serving document: $request_uri" always;
    }

    # Cliente de health check para NGINX
    location = /nginx-health {
        access_log off;
        return 200 'NGINX OK';
        add_header Content-Type text/plain;
    }

    # Health check endpoint para SSR Node.js (enviado al servidor Node)
    location = /health {
        proxy_pass http://masclet-frontend-node:3000/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        add_header X-Debug-Info "Health check for Node SSR" always;
        access_log off;
    }

    # Para todas las demás rutas, proxy hacia el servidor Node.js para SSR
    location / {
        proxy_pass http://masclet-frontend-node:3000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        proxy_read_timeout 300s;
        proxy_cache_bypass $http_upgrade;
        add_header X-Debug-Info "Proxying to Node.js SSR: $request_uri" always;
    }

    # Páginas de error mejoradas
    error_page 500 502 503 504 /50x.html;
    error_page 404 /404.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }
}
