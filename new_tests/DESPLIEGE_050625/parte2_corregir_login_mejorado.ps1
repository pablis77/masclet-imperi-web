# Parte 2 (Mejorada): Correcci√≥n espec√≠fica del problema de login
# Este script implementa una soluci√≥n directa para el problema de login

Write-Host "üîê Iniciando correcci√≥n espec√≠fica mejorada del login..." -ForegroundColor Cyan

# Variables y configuraci√≥n
$KEY_PATH = "C:\Proyectos\primeros proyectos\AWS\masclet-imperi-key.pem"
$SERVER = "ec2-user@34.253.203.194"

# 1. Crear script para la correcci√≥n del login
$correccionLoginScript = @'
#!/bin/bash
set -e

echo "===== CORRECCI√ìN ESPEC√çFICA DEL LOGIN ====="

# 1. Crear script de reemplazo del login
echo -e "\n1. Creando script espec√≠fico para login..."
cat > /tmp/login-direct-fix.js << 'EOL'
// Script de correcci√≥n directa para el login
console.log("üîê Script de correcci√≥n de login cargado");

// Funci√≥n para interceptar y corregir el login
function fixLogin() {
  console.log("üìã Preparando correcci√≥n de login...");
  
  // Interceptar todos los formularios de login
  document.addEventListener('submit', async function(e) {
    // Verificar si es un formulario de login
    const form = e.target;
    const usernameField = form.querySelector('[name="username"], [id="username"], [name="email"], [id="email"]');
    const passwordField = form.querySelector('[name="password"], [id="password"]');
    
    if (usernameField && passwordField) {
      e.preventDefault();
      console.log("üîë Interceptando env√≠o de formulario de login");
      
      const username = usernameField.value;
      const password = passwordField.value;
      
      console.log(`üë§ Intentando login con usuario: ${username}`);
      
      try {
        // 1. Crear datos en formato correcto (x-www-form-urlencoded)
        const formData = new URLSearchParams();
        formData.append('username', username);
        formData.append('password', password);
        
        // 2. Realizar petici√≥n utilizando el formato correcto
        console.log("üì§ Enviando petici√≥n de login en formato form-urlencoded...");
        let response = await fetch('/api/v1/auth/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
          },
          body: formData
        });
        
        console.log(`üì• Respuesta recibida, status: ${response.status}`);
        
        // Si falla, intentar formato JSON como respaldo
        if (!response.ok) {
          console.log("‚ö†Ô∏è Primer intento fallido, probando formato JSON...");
          response = await fetch('/api/v1/auth/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              username: username,
              password: password
            })
          });
          console.log(`üì• Segunda respuesta recibida, status: ${response.status}`);
        }
        
        if (response.ok) {
          try {
            const data = await response.json();
            console.log("‚úÖ Login exitoso:", data);
            
            if (data.access_token) {
              console.log("üîê Token recibido correctamente");
              localStorage.setItem('token', data.access_token);
              
              // Guardar info de usuario
              if (data.user) {
                console.log("üë§ Informaci√≥n de usuario recibida");
                localStorage.setItem('user', JSON.stringify(data.user));
                
                // Guardar rol por separado para acceso m√°s f√°cil
                if (data.user.role) {
                  localStorage.setItem('userRole', data.user.role);
                  
                  // Ajuste espec√≠fico para usuario Ramon o admin con rol gerente
                  if (data.user.username.toLowerCase() === 'ramon' || 
                      (data.user.username.toLowerCase() === 'admin' && data.user.role === 'gerente')) {
                    console.log("‚öôÔ∏è Aplicando ajuste especial para usuario privilegiado");
                    localStorage.setItem('userRole', 'Ramon');
                  }
                }
              }
              
              // Redirigir al dashboard principal
              console.log("üîÑ Login exitoso, redirigiendo...");
              window.location.href = '/';
            } else {
              console.error("‚ùå No se encontr√≥ token en la respuesta");
              alert("Error: No se recibi√≥ token de autenticaci√≥n");
            }
          } catch (jsonError) {
            console.error("‚ùå Error al procesar respuesta JSON:", jsonError);
            
            // Si no es JSON pero la petici√≥n fue exitosa, intentar redirigir
            if (response.status >= 200 && response.status < 300) {
              console.log("‚ö†Ô∏è Respuesta exitosa pero no es JSON, redirigiendo...");
              window.location.href = '/';
            } else {
              alert("Error al procesar la respuesta del servidor");
            }
          }
        } else {
          console.error("‚ùå Error en la respuesta HTTP:", response.status);
          
          // Intentar leer mensaje de error
          try {
            const errorData = await response.json();
            console.error("‚ùå Detalles del error:", errorData);
            alert(`Error de autenticaci√≥n: ${errorData.detail || errorData.message || 'Credenciales incorrectas'}`);
          } catch (e) {
            console.error("‚ùå No se pudo leer el error:", e);
            alert("Error de autenticaci√≥n: Credenciales incorrectas");
          }
        }
      } catch (error) {
        console.error("‚ùå Error en proceso de login:", error);
        alert("Error al conectar con el servidor. Por favor, int√©ntalo de nuevo.");
      }
    }
  }, { capture: true });

  // Tambi√©n corregimos el logout para evitar que se quede colgado
  document.addEventListener('click', function(e) {
    // Buscar enlaces o botones de logout
    const target = e.target.closest('a, button');
    if (target && (
        target.textContent.toLowerCase().includes('logout') || 
        target.textContent.toLowerCase().includes('cerrar sesi√≥n') ||
        target.textContent.toLowerCase().includes('salir') ||
        target.href && target.href.includes('logout')
    )) {
      console.log("üö™ Interceptando click en logout");
      e.preventDefault();
      
      // Limpiar localStorage
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      localStorage.removeItem('userRole');
      
      // Redirigir a login
      console.log("üîÑ Redirigiendo a login despu√©s de logout");
      window.location.href = '/login';
    }
  });
  
  console.log("‚úÖ Correcci√≥n de login aplicada correctamente");
}

// Ejecutar cuando el DOM est√© completamente cargado
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', fixLogin);
} else {
  // Si ya est√° cargado, ejecutar inmediatamente
  fixLogin();
}
EOL

# 2. Instalar script de correcci√≥n en Nginx
echo -e "\n2. Instalando script de correcci√≥n en Nginx..."
docker cp /tmp/login-direct-fix.js masclet-frontend:/usr/share/nginx/html/login-direct-fix.js

# 3. Inyectar directamente nuestro script en todas las p√°ginas HTML
echo -e "\n3. Inyectando nuestro script en las p√°ginas HTML..."
# Buscar e inyectar en archivos HTML en el directorio principal
docker exec masclet-frontend find /usr/share/nginx/html -type f -name "*.html" | xargs -I{} docker exec masclet-frontend sh -c "echo 'Modificando {} ...' && grep -q 'login-direct-fix.js' {} || sed -i 's|</head>|<script src=\"/login-direct-fix.js\"></script></head>|' {}"

# Buscar e inyectar en subdirectorios (especialmente /client/)
docker exec masclet-frontend find /usr/share/nginx/html/client -type f -name "*.html" | xargs -I{} docker exec masclet-frontend sh -c "echo 'Modificando {} ...' && grep -q 'login-direct-fix.js' {} || sed -i 's|</head>|<script src=\"/login-direct-fix.js\"></script></head>|' {}"

# 4. Si no hay archivos HTML, inyectar en el archivo index.html principal
echo -e "\n4. Asegurando inyecci√≥n en index.html principal..."
docker exec masclet-frontend sh -c "if [ -f /usr/share/nginx/html/index.html ]; then echo 'Modificando index.html principal...' && grep -q 'login-direct-fix.js' /usr/share/nginx/html/index.html || sed -i 's|</head>|<script src=\"/login-direct-fix.js\"></script></head>|' /usr/share/nginx/html/index.html; fi"

# 5. Crear configuraci√≥n espec√≠fica para el endpoint de autenticaci√≥n
echo -e "\n5. Creando configuraci√≥n espec√≠fica para el endpoint de autenticaci√≥n..."
cat > /tmp/auth-endpoint.conf << 'EOL'
# Configuraci√≥n espec√≠fica para endpoint de autenticaci√≥n
location = /api/v1/auth/login {
    # Aumentar el l√≠mite de tiempo para peticiones de login
    proxy_read_timeout 180s;
    
    # Proxy hacia el backend
    proxy_pass http://masclet-api:8000/api/v1/auth/login;
    proxy_http_version 1.1;
    
    # Cabeceras del proxy
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # Configuraci√≥n CORS para autenticaci√≥n
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
    
    # Manejo de peticiones OPTIONS para CORS
    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain; charset=utf-8';
        add_header 'Content-Length' 0;
        return 204;
    }
    
    # Debug
    add_header X-Debug-Info "Auth API Login: $request_uri" always;
}
EOL

# 6. Instalar configuraci√≥n y recargar Nginx
echo -e "\n6. Instalando configuraci√≥n y recargando Nginx..."
docker cp /tmp/auth-endpoint.conf masclet-frontend:/etc/nginx/conf.d/auth-endpoint.conf
docker exec masclet-frontend bash -c "grep -q 'include /etc/nginx/conf.d/auth-endpoint.conf;' /etc/nginx/conf.d/default.conf || sed -i '/server {/a\\    include /etc/nginx/conf.d/auth-endpoint.conf;' /etc/nginx/conf.d/default.conf"
docker exec masclet-frontend nginx -s reload

# 7. Verificar la correcta instalaci√≥n del script
echo -e "\n7. Verificando la correcta instalaci√≥n del script..."
docker exec masclet-frontend ls -la /usr/share/nginx/html/login-direct-fix.js

# 8. Comprobar que se ha inyectado correctamente en alg√∫n archivo HTML
echo -e "\n8. Comprobando la inyecci√≥n en archivos HTML..."
docker exec masclet-frontend sh -c "grep -r 'login-direct-fix.js' /usr/share/nginx/html || echo '‚ö†Ô∏è No se encontr√≥ el script inyectado en ning√∫n archivo HTML'"

echo -e "\n===== CORRECCI√ìN DE LOGIN COMPLETADA ====="
echo "Por favor, pruebe el login con las siguientes credenciales:"
echo "- Usuario: admin"
echo "- Contrase√±a: admin123"
echo ""
echo "La soluci√≥n implementada:"
echo "1. Intercepta el env√≠o del formulario de login"
echo "2. Utiliza el formato correcto para la autenticaci√≥n (application/x-www-form-urlencoded)"
echo "3. Maneja correctamente el token y la informaci√≥n de usuario"
echo "4. Corrige el proceso de logout para evitar que se quede colgado"
echo "5. Optimiza la configuraci√≥n de Nginx para el endpoint de autenticaci√≥n"
'@

# 2. Transferir y ejecutar el script - con tratamiento para finales de l√≠nea
$tempFile = New-TemporaryFile
$correccionLoginScript | Out-File -FilePath $tempFile.FullName -Encoding utf8

# Convertir finales de l√≠nea Windows (CRLF) a Unix (LF)
Get-Content -Path $tempFile.FullName -Raw | 
    ForEach-Object { $_ -replace "`r`n", "`n" } |
    ssh -i $KEY_PATH $SERVER "cat > /tmp/parte2_corregir_login_mejorado.sh"

Remove-Item -Path $tempFile.FullName

Write-Host "üîí Ejecutando correcci√≥n espec√≠fica mejorada del login..." -ForegroundColor Cyan
ssh -i $KEY_PATH $SERVER "chmod +x /tmp/parte2_corregir_login_mejorado.sh && sh /tmp/parte2_corregir_login_mejorado.sh"

Write-Host @"
‚úÖ Correcci√≥n mejorada del login aplicada correctamente.

Esta soluci√≥n:

1. Implementa una soluci√≥n completa para el proceso de login:
   - Intercepta todos los formularios de login
   - Utiliza el formato correcto para OAuth2 (application/x-www-form-urlencoded)
   - Maneja correctamente el token y la informaci√≥n de usuario
   - Incluye una soluci√≥n de respaldo utilizando formato JSON

2. Corrige el proceso de logout:
   - Evita que se quede colgado en "Cerrando sesi√≥n..."
   - Limpia correctamente localStorage
   - Redirige a la p√°gina de login

3. Optimiza la configuraci√≥n de Nginx:
   - Configuraci√≥n espec√≠fica para el endpoint de autenticaci√≥n
   - Gesti√≥n correcta de CORS
   - Aumenta el tiempo de espera para peticiones de login

4. Verifica la correcta instalaci√≥n:
   - Comprueba que el script se ha copiado correctamente
   - Verifica que se ha inyectado en los archivos HTML

Por favor, ahora:
1. Accede a http://34.253.203.194/login
2. Prueba el login con usuario: admin y contrase√±a: admin123 
3. Verifica que el logout funciona correctamente
"@ -ForegroundColor Green
