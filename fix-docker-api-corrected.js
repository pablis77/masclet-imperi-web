// Script corrector para la configuraci√≥n de la API en Docker
// Este script funciona con m√≥dulos ES

console.log('üê≥ Iniciando script de correcci√≥n de API para Docker...');

// Configuraci√≥n principal
const API_CONFIG = {
  baseURL: '/api/v1',
  timeout: 15000,
  withCredentials: true,
  backendURL: 'http://masclet-api:8000'
};

// Funci√≥n principal
async function applyFix() {
  try {
    console.log('üîß Aplicando configuraci√≥n directa para API en Docker...');
    
    // 1. Mostrar la configuraci√≥n que vamos a aplicar
    console.log('üìã Configuraci√≥n a aplicar:');
    console.log('- backendURL:', API_CONFIG.backendURL);
    console.log('- baseURL:', API_CONFIG.baseURL);
    
    // 2. Crear archivo de configuraci√≥n con import/export
    const configContent = `
// Configuracion API simplificada para entorno de produccion
const API_CONFIG = {
  baseURL: "${API_CONFIG.baseURL}",
  timeout: ${API_CONFIG.timeout},
  withCredentials: true,
  backendURL: "${API_CONFIG.backendURL}"
};

// Logs para diagn√≥stico
console.log("[API Config] Modo: PRODUCCI√ìN");
console.log("[API Config] BackendURL: ${API_CONFIG.backendURL}");
console.log("[API Config] Base URL: ${API_CONFIG.baseURL}");

// Exportar configuraci√≥n
export { API_CONFIG as A };
`;

    // 3. Usar la API del sistema de archivos con promesas
    const { writeFile } = await import('fs/promises');
    const { join } = await import('path');
    
    // 4. Escribir el archivo de configuraci√≥n
    await writeFile('/app/server/chunks/apiConfig_Qu2HXU2s.mjs', configContent, 'utf8');
    console.log('‚úÖ Archivo de configuraci√≥n del servidor actualizado');
    
    // 5. Tambi√©n actualizamos el archivo de configuraci√≥n del cliente
    const clientConfigContent = `
/**
 * Configuraci√≥n de la API corregida para AWS con Docker
 */
const apiConfig = {
  baseURL: "${API_CONFIG.baseURL}",
  timeout: ${API_CONFIG.timeout},
  withCredentials: true,
  backendURL: "${API_CONFIG.backendURL}"
};

// Exportar para compatibilidad con m√≥dulos
if (typeof window !== 'undefined') {
  window.apiConfig = apiConfig;
  console.log("Configuraci√≥n API inicializada para entorno de producci√≥n Docker:");
  console.log("- backendURL:", apiConfig.backendURL);
  console.log("- baseURL:", apiConfig.baseURL);
}

// Exportar como valor predeterminado
export default apiConfig;
`;

    // 6. Escribir la configuraci√≥n del cliente
    await writeFile('/app/client/js/fix/apiConfig.js', clientConfigContent, 'utf8');
    console.log('‚úÖ Archivo de configuraci√≥n del cliente actualizado');
    
    console.log('üéâ Proceso de correcci√≥n de API completado con √©xito.');
    
    return { success: true };
  } catch (error) {
    console.error('‚ùå Error al aplicar correcci√≥n de API:', error);
    return { success: false, error };
  }
}

// Ejecutar la funci√≥n principal
applyFix().then(result => {
  if (result.success) {
    console.log('‚úÖ Script de correcci√≥n API ejecutado correctamente');
  } else {
    console.error('‚ùå Script de correcci√≥n API fall√≥:', result.error);
    process.exit(1);
  }
});
