def crear_interfaz_inicial(self):
        # Forzar que el main_frame comience desde la coordenada (0,0)
        self.main_frame.place(x=0, y=0, relwidth=1, relheight=1)
        
        # Configuración del grid
        self.main_frame.grid_rowconfigure(0, weight=0)  # No expansión para el header
        self.main_frame.grid_rowconfigure(1, weight=0)  # No expansión para búsqueda
        self.main_frame.grid_rowconfigure(2, weight=1)  # Expansión para contenido
        self.main_frame.grid_columnconfigure(0, weight=1)

        # Header con logo
        header_frame = ttk.Frame(self.main_frame)
        header_frame.grid(row=0, column=0, sticky='ew', pady=(0,20))
        
        try:
            base64_images = get_base64_images()
            image_data = base64.b64decode(base64_images['logo'])
            image = Image.open(io.BytesIO(image_data))
            image = image.resize((200, 100), Image.Resampling.LANCZOS)
            self.logo_photo = ImageTk.PhotoImage(image)
            logo_label = ttk.Label(header_frame, image=self.logo_photo, background='white')
            logo_label.pack()
        except Exception as e:
            print(f"Error en carregar el logo: {e}")

        # Primero crear el frame de búsqueda
        search_frame = ttk.Frame(self.main_frame)
        search_frame.grid(row=1, column=0, sticky='ew', pady=10)

        # Luego crear el frame contenedor centrado
        center_frame = ttk.Frame(search_frame)
        center_frame.pack(expand=True, anchor='center')
        
        # Frame para los campos de búsqueda
        search_fields_frame = ttk.Frame(center_frame)
        search_fields_frame.pack(expand=True)

        # Añadir los elementos de búsqueda
        ttk.Label(search_fields_frame, text="NOM:", font=('Arial', 11)).pack(side='left', padx=(0, 5))
        self.search_entry = ttk.Entry(search_fields_frame)
        self.search_entry.pack(side='left', padx=5)
        self.search_entry.bind('<Return>', self.buscar_animal)
        
        ttk.Button(search_fields_frame, text="Cercar", command=self.buscar_animal).pack(side='left')

        # Content frame
        self.content_frame = ttk.Frame(self.main_frame)
        self.content_frame.grid(row=2, column=0, sticky='nsew')

        # Botón volver
        tk.Button(self.main_frame, 
                text="Tornar",
                font=('Arial', 11),
                relief='solid',
                bd=1,
                bg='white',
                command=self.main_app.crear_interfaz_principal).grid(row=3, column=0, pady=20)

def guardar_cambios(self):
        """Guarda los campos modificados"""
        try:
            nom = self.search_entry.get()
            campos_actualizados = {}
            
            # Obtener datos actuales del animal
            data_actual = self.data_manager.get_animal_data(nom)
            
            # Recopilar cambios de los campos de entrada
            for campo, widget in self.campos_entrada.items():
                valor = widget.get().strip()
                if valor and valor != data_actual['general'].get(campo, ''):
                    campos_actualizados[campo] = valor
            
            # Cambios habituales
            if hasattr(self, 'estado_var') and self.estado_var.get():
                campos_actualizados['Estado'] = self.estado_var.get()
                
            if hasattr(self, 'alletar_var') and self.alletar_var.get():
                campos_actualizados['Alletar'] = self.alletar_var.get().lower()
                
            if hasattr(self, 'generet_var') and self.generet_var.get():
                if self.part_entry.get():
                    campos_actualizados['part'] = self.part_entry.get()
                if self.generet_var.get():
                    campos_actualizados['GenereT'] = self.generet_var.get()
                if hasattr(self, 'estadot_var') and self.estadot_var.get():
                    campos_actualizados['EstadoT'] = self.estadot_var.get()
                    
            logging.info(f"Intentando actualizar campos: {campos_actualizados}")
            
            if campos_actualizados:
                if self.data_manager.actualizar_ficha(nom, campos_actualizados):
                    self.main_app.message_system.show_message("Fitxa actualitzada correctament", message_type='success')
                    self.buscar_animal()
                else:
                    self.main_app.message_system.show_message("Error en actualitzar la fitxa", message_type='error')
            else:
                self.main_app.message_system.show_message("No hi ha canvis per desar", message_type='info')
                
        except Exception as e:
            logging.error(f"Error en guardar_canvis: {e}")
            self.main_app.message_system.show_message(f"Error en guardar_canvis: {str(e)}", message_type='error')







if campos_actualizados:
                if self.data_manager.actualizar_ficha(nom, campos_actualizados):
                    self.main_app.message_system.show_message("Fitxa actualitzada correctament", 
                        message_type='success'
                    )
                    # Limpiar el campo de búsqueda
                    self.search_entry.delete(0, 'end')
                    self.buscar_animal()
                else:
                    self.main_app.message_system.show_message(
                        "Error en actualitzar la fitxa", 
                        message_type='error'
                    )
            else:
                self.main_app.message_system.show_message(
                    "No hi ha canvis per desar", 
                    message_type='info'
                )