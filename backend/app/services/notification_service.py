"""
Servicio para la gesti√≥n de notificaciones en tiempo real
"""
import logging
from datetime import datetime
from typing import Optional, List, Dict, Any, Union

from app.models.notification import Notification, NotificationType, NotificationPriority
from app.models.user import User

# Configuraci√≥n de logging
logger = logging.getLogger(__name__)

class NotificationService:
    """
    Servicio para la creaci√≥n y gesti√≥n de notificaciones del sistema basadas en eventos reales.
    Este servicio centraliza la creaci√≥n de notificaciones para asegurar consistencia.
    """
    
    @classmethod
    async def create_notification(
        cls,
        user_id: int,
        type: NotificationType,
        title: str,
        message: str,
        priority: NotificationPriority = NotificationPriority.MEDIUM,
        icon: str = "üîî",
        related_entity_id: Optional[int] = None,
        related_entity_type: Optional[str] = None
    ) -> Notification:
        """
        Crea una nueva notificaci√≥n en la base de datos.
        
        Args:
            user_id: ID del usuario destinatario
            type: Tipo de notificaci√≥n
            title: T√≠tulo de la notificaci√≥n
            message: Mensaje detallado
            priority: Prioridad (default: MEDIUM)
            icon: Emoji o icono para la notificaci√≥n
            related_entity_id: ID de la entidad relacionada (opcional)
            related_entity_type: Tipo de entidad relacionada (opcional)
            
        Returns:
            La notificaci√≥n creada
        """
        try:
            notification = Notification(
                user_id=user_id,
                type=type,
                title=title,
                message=message,
                priority=priority,
                icon=icon,
                related_entity_id=related_entity_id,
                related_entity_type=related_entity_type
            )
            
            await notification.save()
            logger.info(f"Notificaci√≥n creada: {title} para usuario {user_id}")
            return notification
            
        except Exception as e:
            logger.error(f"Error al crear notificaci√≥n: {e}")
            return None

    @classmethod
    async def create_backup_notification(
        cls,
        user_id: int,
        backup_type: str,
        success: bool,
        details: Dict[str, Any]
    ) -> Notification:
        """
        Crea una notificaci√≥n espec√≠fica para eventos de backup.
        
        Args:
            user_id: ID del usuario destinatario
            backup_type: Tipo de backup (daily, manual, etc.)
            success: Si el backup fue exitoso
            details: Detalles del backup
            
        Returns:
            La notificaci√≥n creada
        """
        if success:
            title = f"Backup {backup_type} completado"
            message = f"El backup {backup_type} se ha completado exitosamente."
            if "filename" in details:
                message += f" Archivo: {details['filename']}"
            if "size" in details:
                message += f" Tama√±o: {details['size']}"
            priority = NotificationPriority.LOW
            icon = "üíæ"
        else:
            title = f"Error en backup {backup_type}"
            message = f"El backup {backup_type} ha fallado."
            if "error" in details:
                message += f" Error: {details['error']}"
            priority = NotificationPriority.HIGH
            icon = "‚ö†Ô∏è"
            
        return await cls.create_notification(
            user_id=user_id,
            type=NotificationType.BACKUP,
            title=title,
            message=message,
            priority=priority,
            icon=icon,
            related_entity_type="backup"
        )
        
    @classmethod
    async def create_import_notification(
        cls,
        user_id: int,
        success: bool,
        total_records: int,
        errors: int = 0,
        details: Optional[Dict[str, Any]] = None
    ) -> Notification:
        """
        Crea una notificaci√≥n para eventos de importaci√≥n.
        
        Args:
            user_id: ID del usuario destinatario
            success: Si la importaci√≥n fue exitosa
            total_records: Total de registros procesados
            errors: N√∫mero de errores (si los hubo)
            details: Detalles adicionales
            
        Returns:
            La notificaci√≥n creada
        """
        if success and errors == 0:
            title = "Importaci√≥n completada exitosamente"
            message = f"Se han importado {total_records} registros sin errores."
            priority = NotificationPriority.MEDIUM
            icon = "üì•"
        elif success and errors > 0:
            title = "Importaci√≥n completada con advertencias"
            message = f"Se han importado {total_records - errors} de {total_records} registros. ({errors} errores)"
            priority = NotificationPriority.MEDIUM
            icon = "‚ö†Ô∏è"
        else:
            title = "Error en la importaci√≥n"
            message = f"La importaci√≥n ha fallado con {errors} errores de {total_records} registros."
            priority = NotificationPriority.HIGH
            icon = "‚ùå"
            
        if details and "import_id" in details:
            related_entity_id = details["import_id"]
        else:
            related_entity_id = None
            
        return await cls.create_notification(
            user_id=user_id,
            type=NotificationType.IMPORT,
            title=title,
            message=message,
            priority=priority,
            icon=icon,
            related_entity_id=related_entity_id,
            related_entity_type="import"
        )
    
    @classmethod
    async def create_system_notification(
        cls,
        title: str,
        message: str,
        priority: NotificationPriority = NotificationPriority.MEDIUM,
        send_to_all_admins: bool = True
    ) -> List[Notification]:
        """
        Crea una notificaci√≥n del sistema y la env√≠a a todos los administradores.
        
        Args:
            title: T√≠tulo de la notificaci√≥n
            message: Mensaje detallado
            priority: Prioridad
            send_to_all_admins: Si se debe enviar a todos los usuarios admin
            
        Returns:
            Lista de notificaciones creadas
        """
        notifications = []
        try:
            # Obtener usuarios con rol administrador
            if send_to_all_admins:
                admins = await User.filter(role__in=["administrador", "Ramon"]).all()
                for admin in admins:
                    notif = await cls.create_notification(
                        user_id=admin.id,
                        type=NotificationType.SYSTEM,
                        title=title,
                        message=message,
                        priority=priority,
                        icon="üîß" if priority == NotificationPriority.LOW else "‚ö†Ô∏è",
                        related_entity_type="system"
                    )
                    if notif:
                        notifications.append(notif)
            
            return notifications
        except Exception as e:
            logger.error(f"Error al crear notificaciones de sistema: {e}")
            return []
            
    @classmethod
    async def create_animal_notification(
        cls,
        user_id: int,
        animal_id: int,
        action: str,
        details: Dict[str, Any]
    ) -> Notification:
        """
        Crea una notificaci√≥n relacionada con animales.
        
        Args:
            user_id: ID del usuario destinatario
            animal_id: ID del animal
            action: Acci√≥n realizada (created, updated, etc.)
            details: Detalles adicionales
            
        Returns:
            La notificaci√≥n creada
        """
        animal_name = details.get('nom', f"ID:{animal_id}")
        
        if action == "created":
            title = f"Nuevo animal registrado"
            message = f"Se ha registrado un nuevo animal: {animal_name}"
            icon = "üÜï"
        elif action == "updated":
            title = f"Animal actualizado"
            message = f"Se ha actualizado el animal: {animal_name}"
            icon = "üìù"
        elif action == "deleted":
            title = f"Animal eliminado"
            message = f"Se ha eliminado el animal: {animal_name}"
            icon = "üóëÔ∏è"
        else:
            title = f"Acci√≥n en animal"
            message = f"Se ha realizado la acci√≥n '{action}' en el animal: {animal_name}"
            icon = "üêÑ"
            
        return await cls.create_notification(
            user_id=user_id,
            type=NotificationType.ANIMAL,
            title=title,
            message=message,
            priority=NotificationPriority.LOW,
            icon=icon,
            related_entity_id=animal_id,
            related_entity_type="animal"
        )
