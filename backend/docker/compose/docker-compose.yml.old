version: '3.8'

services:
  # Servicio principal de la aplicación
  app:
    build: 
      context: ../..
      dockerfile: docker/Dockerfile
    container_name: masclet-app
    restart: unless-stopped
    depends_on:
      - db
    environment:
      - POSTGRES_HOST=db
      - TZ=Europe/Madrid
    volumes:
      - ../../:/app
      - ./logs:/logs

  # Base de datos PostgreSQL
  db:
    image: postgres:17
    platform: linux/amd64
    container_name: masclet-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Servicio de backup
  backup:
    build:
      context: ../..
      dockerfile: docker/Dockerfile.backup
    container_name: masclet-backup
    restart: unless-stopped
    depends_on:
      - db
    volumes:
      - ./backups:/backups
      - ./logs:/logs
      - ./config/backup/.env:/app/.env
      - ./scripts:/usr/local/bin
    environment:
      - POSTGRES_HOST=db
      - TZ=Europe/Madrid
    # Montar scripts como ejecutables
    entrypoint: ["/usr/local/bin/entrypoint.sh"]

  # Servidor de correo para notificaciones
  mailserver:
    image: postfix:latest
    container_name: masclet-mail
    restart: unless-stopped
    environment:
      - POSTFIX_HOSTNAME=mascletimperi.com
    volumes:
      - ./config/postfix:/etc/postfix
      - ./logs:/var/log/mail
    ports:
      - "25"
      - "587"

  # Servicio de monitorización
  prometheus:
    image: prom/prometheus:latest
    container_name: masclet-prometheus
    restart: unless-stopped
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Panel de monitorización
  grafana:
    image: grafana/grafana:latest
    container_name: masclet-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    volumes:
      - ./config/grafana:/etc/grafana
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    ports:
      - "3000:3000"

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: masclet_network
    driver: bridge
