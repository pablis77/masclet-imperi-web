---
import DefaultLayout from '../layouts/DefaultLayout.astro';
---

<DefaultLayout title="Test Login - Masclet Imperi">
  <div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
      <div>
        <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Iniciar sesión (Prueba de roles)
        </h2>
        <p class="mt-2 text-center text-sm text-gray-600">
          Selecciona el rol para probar los permisos
        </p>
      </div>
      <div class="mt-8 bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
        <form id="loginForm" class="space-y-6">
          <div>
            <label for="username" class="block text-sm font-medium text-gray-700">
              Usuario
            </label>
            <div class="mt-1">
              <input id="username" name="username" type="text" required class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" value="admin">
            </div>
          </div>

          <div>
            <label for="password" class="block text-sm font-medium text-gray-700">
              Contraseña
            </label>
            <div class="mt-1">
              <input id="password" name="password" type="password" required class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" value="admin123">
            </div>
          </div>

          <div>
            <label for="role" class="block text-sm font-medium text-gray-700">
              Rol para pruebas
            </label>
            <div class="mt-1">
              <select id="role" name="role" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                <option value="administrador">Administrador</option>
                <option value="gerente">Ramon</option>
                <option value="editor">Editor</option>
                <option value="usuario">Usuario (solo lectura)</option>
              </select>
            </div>
          </div>

          <div>
            <button type="submit" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
              Iniciar sesión como rol seleccionado
            </button>
          </div>
        </form>
        
        <div id="loginStatus" class="mt-4 text-sm hidden"></div>
        
        <div class="mt-6">
          <div class="relative">
            <div class="absolute inset-0 flex items-center">
              <div class="w-full border-t border-gray-300"></div>
            </div>
            <div class="relative flex justify-center text-sm">
              <span class="px-2 bg-white text-gray-500">
                Modo de prueba - Masclet Imperi
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</DefaultLayout>

<script>
  // Importar el servicio de API
  import { login } from '../services/apiService';
  
  document.addEventListener('DOMContentLoaded', () => {
    // Verificar si ya hay un token válido
    const token = localStorage.getItem('token');
    if (token) {
      // Limpiar el token existente si estamos en la página de prueba
      localStorage.removeItem('token');
      localStorage.removeItem('user_role');
    }
    
    const loginForm = document.getElementById('loginForm');
    const loginStatus = document.getElementById('loginStatus');
    
    loginForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const username = (document.getElementById('username') as HTMLInputElement)?.value;
      const password = (document.getElementById('password') as HTMLInputElement)?.value;
      const role = (document.getElementById('role') as HTMLSelectElement)?.value;
      
      if (!username || !password) {
        showStatus('Por favor, complete todos los campos', 'error');
        return;
      }
      
      showStatus('Iniciando sesión...', 'info');
      
      try {
        // Usar el servicio de API para iniciar sesión
        const data = await login(username, password);
        
        // Guardar el rol seleccionado para pruebas
        localStorage.setItem('user_role', role);
        
        showStatus(`Inicio de sesión exitoso como: ${role}. Redirigiendo...`, 'success');
        
        // Redirigir a la página principal después de 1 segundo
        setTimeout(() => {
          window.location.href = '/';
        }, 1000);
      } catch (error) {
        console.error('Error al iniciar sesión:', error);
        showStatus(`Error al iniciar sesión: ${error.message || 'Error desconocido'}`, 'error');
      }
    });
    
    // Función para mostrar mensajes de estado
    function showStatus(message: string, type: 'success' | 'error' | 'info') {
      if (!loginStatus) return;
      
      loginStatus.textContent = message;
      loginStatus.classList.remove('hidden', 'text-green-500', 'text-red-500', 'text-blue-500');
      
      switch (type) {
        case 'success':
          loginStatus.classList.add('text-green-500');
          break;
        case 'error':
          loginStatus.classList.add('text-red-500');
          break;
        case 'info':
          loginStatus.classList.add('text-blue-500');
          break;
      }
    }
  });
</script>
