---
// Importar el layout
import MainLayout from '../components/layout/MainLayout.astro';

// Importar funciones de i18n
import { getCurrentLanguage, t } from '../i18n';

// Definir rol de usuario (esto eventualmente vendrá de la autenticación)
const userRole = "administrador"; // Simulación de rol

// Obtener el idioma actual para el servidor
const currentLang = getCurrentLanguage();
---

<MainLayout title={t('settings.title')} userRole={userRole} currentPath="/settings">
  <div class="mx-auto px-4 py-6">
    <div class="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6">
      <!-- Formulario de configuración integrado directamente -->
      <div class="max-w-4xl mx-auto">
        <!-- Modal de notificación -->
        <div id="notification-modal" class="hidden fixed inset-0 z-50 overflow-auto bg-black bg-opacity-40 flex justify-center items-center">
          <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full mx-4 p-6">
            <div id="notification-content" class="flex items-center">
              <div id="notification-icon" class="mr-3 text-2xl"></div>
              <div id="notification-message" class="flex-1"></div>
            </div>
            <div class="mt-4 text-right">
              <button id="close-notification" class="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary-dark">
                Aceptar
              </button>
            </div>
          </div>
        </div>
      
        <div class="mb-8">
          <h2 class="text-xl font-semibold mb-4 text-primary border-b pb-2" id="title-user-preferences">Preferencias de usuario</h2>
          
          <!-- Preferencias de usuario: Idioma y tema visual -->
          <div class="space-y-6">
            <!-- Selección de Idioma -->
            <div class="flex flex-col md:flex-row md:items-center gap-4">
              <label for="language" class="font-medium w-48" id="label-language">Idioma:</label>
              <div class="flex-1">
                <select id="language" class="w-full md:w-64 p-2 border rounded-md bg-white dark:bg-gray-700 focus:ring-2 focus:ring-primary">
                  <option value="es" id="option-es">Español</option>
                  <option value="ca" id="option-ca">Catalán</option>
                </select>
              </div>
            </div>
      
            <!-- Selección de Tema -->
            <div class="flex flex-col md:flex-row md:items-center gap-4">
              <label for="theme" class="font-medium w-48" id="label-theme">Tema visual:</label>
              <div class="flex-1">
                <select id="theme" class="w-full md:w-64 p-2 border rounded-md bg-white dark:bg-gray-700 focus:ring-2 focus:ring-primary">
                  <option value="light" id="option-light">Claro</option>
                  <option value="dark" id="option-dark">Oscuro</option>
                  <option value="system" id="option-system">Usar preferencia del sistema</option>
                </select>
              </div>
            </div>
          </div>
        </div>
      
        <div class="mb-8">
          <h2 class="text-xl font-semibold mb-4 text-primary border-b pb-2" id="title-notifications">Notificaciones</h2>
          
          <!-- Configuración de notificaciones -->
          <div class="space-y-4">
            <div class="flex items-start gap-3">
              <input type="checkbox" id="notify_backups" class="mt-1 h-5 w-5 text-primary focus:ring-primary">
              <div>
                <label for="notify_backups" class="font-medium" id="label-backups">Avisos de copias de seguridad</label>
                <p class="text-gray-500 text-sm" id="desc-backups">Recibir notificación cuando se realicen copias de seguridad automáticas</p>
              </div>
            </div>
      
            <div class="flex items-start gap-3">
              <input type="checkbox" id="notify_imports" class="mt-1 h-5 w-5 text-primary focus:ring-primary">
              <div>
                <label for="notify_imports" class="font-medium" id="label-imports">Avisos de importaciones</label>
                <p class="text-gray-500 text-sm" id="desc-imports">Recibir notificación cuando se completen importaciones</p>
              </div>
            </div>
      
            <div class="flex items-start gap-3">
              <input type="checkbox" id="notify_animals" class="mt-1 h-5 w-5 text-primary focus:ring-primary">
              <div>
                <label for="notify_animals" class="font-medium" id="label-animals">Avisos sobre animales</label>
                <p class="text-gray-500 text-sm" id="desc-animals">Recibir notificación sobre cambios importantes en los animales</p>
              </div>
            </div>
          </div>
        </div>
      
        <!-- Botones de acción -->
        <div class="flex justify-end gap-3 mt-8 pt-4 border-t">
          <button type="button" id="btn-cancel" class="px-4 py-2 border rounded-md hover:bg-gray-100 dark:hover:bg-gray-700">
            Cancelar
          </button>
          <button type="button" id="btn-save" class="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary-dark">
            Guardar
          </button>
        </div>
      </div>

      <script>
        // Recuperar configuración actual del usuario
        document.addEventListener('DOMContentLoaded', () => {
          // Aquí se cargarían las preferencias guardadas
          // Por ahora, solo detectamos el idioma actual
          const currentLang = document.documentElement.lang || 'es';
          const languageSelect = document.getElementById('language');
          if (languageSelect) {
            languageSelect.value = currentLang;
          }
      
          // Detectar tema actual
          const themeSelect = document.getElementById('theme');
          const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
          const currentTheme = localStorage.getItem('theme') || (prefersDark ? 'dark' : 'light');
          if (themeSelect) {
            themeSelect.value = currentTheme;
          }
          
          // Cargar configuraciones de notificaciones guardadas
          try {
            const savedSettings = JSON.parse(localStorage.getItem('userSettings') || '{}');
            
            // Inicializar las casillas de notificaciones
            if (savedSettings.notifications) {
              const notifyBackupsCheckbox = document.getElementById('notify_backups');
              if (notifyBackupsCheckbox && savedSettings.notifications.backups !== undefined) {
                notifyBackupsCheckbox.checked = savedSettings.notifications.backups;
              }
              
              const notifyImportsCheckbox = document.getElementById('notify_imports');
              if (notifyImportsCheckbox && savedSettings.notifications.imports !== undefined) {
                notifyImportsCheckbox.checked = savedSettings.notifications.imports;
              }
              
              const notifyAnimalsCheckbox = document.getElementById('notify_animals');
              if (notifyAnimalsCheckbox && savedSettings.notifications.animals !== undefined) {
                notifyAnimalsCheckbox.checked = savedSettings.notifications.animals;
              }
            }
          } catch (error) {
            console.error('Error al cargar la configuración guardada:', error);
          }
      
          // Listeners para guardar cambios
          const saveButton = document.querySelector('button[type="button"]:last-child');
          if (saveButton) {
            saveButton.addEventListener('click', saveSettings);
          }
        });
      
        function saveSettings() {
          const language = document.getElementById('language')?.value;
          const theme = document.getElementById('theme')?.value;
          const notifyBackups = document.getElementById('notify_backups')?.checked;
          const notifyImports = document.getElementById('notify_imports')?.checked;
          const notifyAnimals = document.getElementById('notify_animals')?.checked;
      
          // Guardar en localStorage por ahora
          localStorage.setItem('userSettings', JSON.stringify({
            language,
            theme,
            notifications: {
              backups: notifyBackups,
              imports: notifyImports,
              animals: notifyAnimals
            }
          }));
      
          // Aplicar cambios de idioma
          if (language) {
            const currentUrl = new URL(window.location.href);
            currentUrl.searchParams.set('lang', language);
            window.location.href = currentUrl.toString();
          }
      
          // Aplicar cambios de tema
          if (theme) {
            if (theme === 'dark') {
              document.documentElement.classList.add('dark');
              localStorage.setItem('theme', 'dark');
            } else if (theme === 'light') {
              document.documentElement.classList.remove('dark');
              localStorage.setItem('theme', 'light');
            } else {
              // Sistema
              localStorage.removeItem('theme');
              if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
                document.documentElement.classList.add('dark');
              } else {
                document.documentElement.classList.remove('dark');
              }
            }
          }
      
          // Mostrar notificación de éxito
          showNotification('✅', 'Configuración guardada correctamente');
        }
      
        function showNotification(icon, message) {
          const modal = document.getElementById('notification-modal');
          const iconEl = document.getElementById('notification-icon');
          const messageEl = document.getElementById('notification-message');
          
          if (modal && iconEl && messageEl) {
            iconEl.textContent = icon;
            messageEl.textContent = message;
            modal.classList.remove('hidden');
          }
        }
      </script>
    </div>
  </div>
</MainLayout>
