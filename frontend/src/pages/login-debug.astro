---
import DefaultLayout from '../layouts/DefaultLayout.astro';
---

<DefaultLayout title="Login Debug - Masclet Imperi">
  <div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
      <div>
        <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Depuración de Autenticación
        </h2>
        <p class="mt-2 text-center text-sm text-gray-600">
          Herramienta para solucionar problemas de autenticación
        </p>
      </div>
      <div class="mt-8 bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
        <div id="status" class="mb-4 p-4 rounded-md text-sm"></div>
        
        <div class="grid grid-cols-1 gap-4">
          <button id="clearTokens" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700">
            Eliminar tokens de autenticación
          </button>
          
          <button id="loginAdmin" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700">
            Login directo (admin/admin123)
          </button>
          
          <button id="checkStatus" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700">
            Verificar estado de autenticación
          </button>
          
          <button id="goDashboard" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
            Ir al dashboard
          </button>
        </div>
      </div>
    </div>
  </div>
</DefaultLayout>

<script>
  import { login, getToken } from '../services/authService';
  import { setupApiToken } from '../services/apiService';
  
  document.addEventListener('DOMContentLoaded', () => {
    const statusEl = document.getElementById('status');
    const clearTokensBtn = document.getElementById('clearTokens');
    const loginAdminBtn = document.getElementById('loginAdmin');
    const checkStatusBtn = document.getElementById('checkStatus');
    const goDashboardBtn = document.getElementById('goDashboard');
    
    function showStatus(message, type = 'info') {
      if (!statusEl) return;
      
      statusEl.textContent = message;
      statusEl.className = 'mb-4 p-4 rounded-md text-sm';
      
      switch (type) {
        case 'success':
          statusEl.classList.add('bg-green-100', 'text-green-800');
          break;
        case 'error':
          statusEl.classList.add('bg-red-100', 'text-red-800');
          break;
        case 'warning':
          statusEl.classList.add('bg-yellow-100', 'text-yellow-800');
          break;
        default:
          statusEl.classList.add('bg-blue-100', 'text-blue-800');
      }
    }
    
    // Limpiar tokens
    clearTokensBtn?.addEventListener('click', () => {
      try {
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        sessionStorage.clear();
        showStatus('Tokens eliminados correctamente. El sistema se reiniciará en breve.', 'success');
        
        setTimeout(() => {
          window.location.reload();
        }, 1500);
      } catch (error) {
        showStatus(`Error al eliminar tokens: ${error.message}`, 'error');
      }
    });
    
    // Login directo con admin
    loginAdminBtn?.addEventListener('click', async () => {
      try {
        showStatus('Iniciando sesión como admin...', 'info');
        
        // Corregir formato de parámetros para login
        const response = await login('admin', 'admin123');
        showStatus('Login exitoso. Configurando token...', 'success');
        
        // Obtener y configurar token para API
        const token = getToken();
        if (token) {
          setupApiToken(token);
          showStatus(`Token configurado: ${token.substring(0, 20)}...`, 'success');
        } else {
          showStatus('No se pudo obtener el token', 'error');
        }
      } catch (error) {
        showStatus(`Error en login: ${error.message}`, 'error');
      }
    });
    
    // Verificar estado
    checkStatusBtn?.addEventListener('click', () => {
      try {
        const token = localStorage.getItem('token');
        const user = localStorage.getItem('user');
        
        if (token) {
          showStatus(`Token encontrado: ${token.substring(0, 20)}...
User: ${user ? JSON.stringify(JSON.parse(user)) : 'No hay datos de usuario'}`, 'info');
        } else {
          showStatus('No hay token de autenticación', 'warning');
        }
      } catch (error) {
        showStatus(`Error al verificar estado: ${error.message}`, 'error');
      }
    });
    
    // Ir al dashboard
    goDashboardBtn?.addEventListener('click', () => {
      window.location.href = '/';
    });
    
    // Verificar al cargar
    const token = localStorage.getItem('token');
    if (token) {
      showStatus(`Token encontrado al cargar página: ${token.substring(0, 20)}...`, 'info');
    } else {
      showStatus('No hay token de autenticación', 'warning');
    }
  });
</script>
