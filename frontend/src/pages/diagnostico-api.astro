---
import DefaultLayout from '../layouts/DefaultLayout.astro';

const userRole = 'admin';
const title = 'Diagnóstico de API - Masclet Imperi';

// Lista de endpoints a probar
const endpoints = [
  {
    name: "Estadísticas del Dashboard (/stats)",
    url: "/api/v1/dashboard/stats",
    description: "Estadísticas completas con datos reales de animales",
    viaProxy: true
  },
  {
    name: "Resumen del Dashboard",
    url: "/api/v1/dashboard/resumen",
    description: "Resumen general con estadísticas clave",
    viaProxy: true
  },
  {
    name: "Directamente al backend",
    url: "http://localhost:8000/api/v1/dashboard/stats",
    description: "Conexión directa al backend sin usar proxy",
    viaProxy: false
  },
  {
    name: "Listado de Animales",
    url: "/api/v1/animals",
    description: "Listado de todos los animales",
    viaProxy: true
  }
];
---

<DefaultLayout title={title} userRole={userRole} currentPath="/diagnostico-api">
  <main class="container mx-auto px-4 py-6">
    <div class="mb-6">
      <h1 class="text-2xl font-bold mb-2 text-gray-900 dark:text-white">Diagnóstico de API</h1>
      <p class="text-gray-600 dark:text-gray-300 mb-4">Esta página realiza pruebas de comunicación con el backend</p>
    </div>
    
    <div class="mb-4">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-xl font-semibold text-gray-800 dark:text-white">Endpoints a probar</h2>
        <button 
          id="test-all-button"
          class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md transition-colors"
        >
          Probar Todos
        </button>
      </div>
      
      <div id="endpoints-container" class="grid grid-cols-1 md:grid-cols-2 gap-4">
        {endpoints.map((endpoint, index) => (
          <div class="bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden p-4">
            <div class="mb-2">
              <div class="flex justify-between items-start">
                <h3 class="text-lg font-medium text-gray-800 dark:text-white">{endpoint.name}</h3>
                <span 
                  class={`px-2 py-1 text-xs rounded ${endpoint.viaProxy ? 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200' : 'bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200'}`}
                >
                  {endpoint.viaProxy ? 'Vía Proxy' : 'Directo'}
                </span>
              </div>
              <p class="text-sm text-gray-600 dark:text-gray-300 mt-1">{endpoint.description}</p>
              <div class="mt-2">
                <p class="text-xs text-gray-500 dark:text-gray-400">URL: <code class="bg-gray-100 dark:bg-gray-700 px-1 py-0.5 rounded">{endpoint.url}</code></p>
              </div>
            </div>
            
            <div class="mt-3 border-t border-gray-200 dark:border-gray-700 pt-3">
              <div class="flex items-center justify-between">
                <span class="endpoint-status text-sm text-gray-500 dark:text-gray-400">Sin probar</span>
                <button 
                  class="test-button bg-blue-500 hover:bg-blue-600 text-white px-3 py-1.5 text-sm rounded transition-colors"
                  data-url={endpoint.url}
                  data-index={index}
                >
                  Probar
                </button>
              </div>
              
              <div class="mt-2 hidden endpoint-result">
                <div class="bg-gray-50 dark:bg-gray-900 rounded p-2 text-xs text-gray-800 dark:text-gray-200 overflow-x-auto max-h-32"></div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
    
    <div class="mt-8 bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden p-4">
      <h2 class="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Registro de conexiones</h2>
      <pre id="connection-log" class="bg-gray-50 dark:bg-gray-900 p-3 rounded-lg text-xs text-gray-800 dark:text-gray-200 overflow-x-auto max-h-64">Esperando pruebas...</pre>
    </div>
    
    <div class="mt-8 bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden p-4">
      <h2 class="text-xl font-semibold mb-4 text-gray-800 dark:text-white">Información de configuración</h2>
      
      <div class="space-y-3">
        <div>
          <h3 class="text-md font-medium text-gray-700 dark:text-gray-300">Proxy configurado</h3>
          <pre class="bg-gray-50 dark:bg-gray-900 p-2 rounded text-xs mt-1">Astro proxy: /api/v1 → http://localhost:8000</pre>
        </div>
        
        <div>
          <h3 class="text-md font-medium text-gray-700 dark:text-gray-300">Configuración CORS en backend</h3>
          <pre class="bg-gray-50 dark:bg-gray-900 p-2 rounded text-xs mt-1">allow_origins=["*"], allow_credentials=True, allow_methods=["*"], allow_headers=["*"]</pre>
        </div>
      </div>
    </div>
  </main>
</DefaultLayout>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const testButtons = document.querySelectorAll('.test-button');
    const testAllButton = document.getElementById('test-all-button');
    const connectionLog = document.getElementById('connection-log');
    
    // Función para formatear JSON
    function formatJSON(obj) {
      return JSON.stringify(obj, null, 2);
    }
    
    // Función para añadir al log
    function appendToLog(message, isError = false) {
      const timestamp = new Date().toLocaleTimeString();
      const logClass = isError ? 'text-red-600 dark:text-red-400' : '';
      
      connectionLog.innerHTML = 
        `<span class="text-gray-500">[${timestamp}]</span> <span class="${logClass}">${message}</span>\n` + 
        connectionLog.innerHTML;
    }
    
    // Función para probar un endpoint
    async function testEndpoint(url, index) {
      const statusElem = document.querySelectorAll('.endpoint-status')[index];
      const resultElem = document.querySelectorAll('.endpoint-result')[index];
      const resultContentElem = resultElem.querySelector('div');
      
      // Actualizar estado
      statusElem.textContent = 'Probando...';
      statusElem.className = 'endpoint-status text-sm text-blue-500 dark:text-blue-400';
      
      // Registrar en el log
      appendToLog(`Iniciando petición a ${url}`);
      
      try {
        // Construir URL con caché buster
        const timestamp = new Date().getTime();
        const separator = url.includes('?') ? '&' : '?';
        const urlWithCache = `${url}${separator}_cache=${timestamp}`;
        
        // Configuración de la petición
        const options = {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer token-desarrollo-12345'
          }
        };
        
        // Realizar la petición con timeout
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 segundos timeout
        
        options.signal = controller.signal;
        
        appendToLog(`Enviando fetch: ${urlWithCache}`);
        const response = await fetch(urlWithCache, options);
        clearTimeout(timeoutId);
        
        appendToLog(`Respuesta recibida: Status ${response.status} ${response.statusText}`);
        
        // Procesar respuesta
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        
        // Actualizar estado a éxito
        statusElem.textContent = `Éxito (${response.status})`;
        statusElem.className = 'endpoint-status text-sm text-green-600 dark:text-green-400';
        
        // Mostrar resultado
        resultContentElem.textContent = formatJSON(data);
        resultElem.classList.remove('hidden');
        
        appendToLog(`Datos recibidos correctamente (${Object.keys(data).length} propiedades)`);
        return true;
      } catch (error) {
        // Verificar si es error de timeout
        const errorMessage = error.name === 'AbortError' 
          ? 'Tiempo de espera agotado (5s)'
          : error.message;
        
        // Actualizar estado a error
        statusElem.textContent = `Error: ${errorMessage}`;
        statusElem.className = 'endpoint-status text-sm text-red-600 dark:text-red-400';
        
        // Mostrar error
        resultContentElem.textContent = `Error: ${errorMessage}`;
        resultElem.classList.remove('hidden');
        
        appendToLog(`Error en petición: ${errorMessage}`, true);
        return false;
      }
    }
    
    // Añadir evento a cada botón
    testButtons.forEach(button => {
      button.addEventListener('click', function() {
        const url = this.getAttribute('data-url');
        const index = parseInt(this.getAttribute('data-index'));
        
        testEndpoint(url, index);
      });
    });
    
    // Añadir evento al botón de probar todos
    testAllButton.addEventListener('click', async function() {
      appendToLog('Iniciando prueba de todos los endpoints...');
      
      const endpoints = Array.from(testButtons).map(button => ({
        url: button.getAttribute('data-url'),
        index: parseInt(button.getAttribute('data-index'))
      }));
      
      let totalSuccess = 0;
      
      // Probar cada endpoint secuencialmente
      for (const endpoint of endpoints) {
        const success = await testEndpoint(endpoint.url, endpoint.index);
        if (success) totalSuccess++;
        
        // Pequeña pausa entre peticiones
        await new Promise(resolve => setTimeout(resolve, 500));
      }
      
      // Registrar resultado final
      appendToLog(`Prueba completa: ${totalSuccess} de ${endpoints.length} endpoints funcionando correctamente`);
    });
  });
</script>
