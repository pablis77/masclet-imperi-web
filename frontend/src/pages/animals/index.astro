---
// Importar el layout y componentes
import MainLayout from '../../components/layout/MainLayout.astro';
import AnimalTable from '../../components/animals/AnimalTable';
import AnimalFilters from '../../components/animals/AnimalFilters';
import authService from '../../services/authService';
import { getCurrentLanguage } from '../../i18n/config';

// Obtener el idioma actual en el servidor
const currentLang = getCurrentLanguage();

// Traducciones directas en variables simples para evitar problemas de hidrataci√≥n
let pageTitle = 'Gesti√≥n de Animales';
let newAnimalText = 'Nuevo Animal';
let refreshText = 'Actualizar';
let searchTitleText = 'B√∫squeda y Filtros';
let searchDescriptionText = 'Utiliza los filtros para encontrar animales espec√≠ficos. Puedes filtrar por explotaci√≥n, g√©nero, estado y m√°s.';
let listTitleText = 'Listado de Animales';
let loadingText = 'Cargando animales...';

// Establecer las traducciones basadas en el idioma
if (currentLang === 'ca') {
  pageTitle = 'Gesti√≥ d\'Animals';
  newAnimalText = 'Nou Animal';
  refreshText = 'Actualitzar';
  searchTitleText = 'Cerca i Filtres';
  searchDescriptionText = 'Utilitza els filtres per trobar animals espec√≠fics. Pots filtrar per explotaci√≥, g√®nere, estat i m√©s.';
  listTitleText = 'Llistat d\'Animals';
  loadingText = 'Carregant animals...';
}

// Comprobar autenticaci√≥n pero sin verificar permisos
const isLoggedIn = true; // Forzamos a true durante el desarrollo
// const isLoggedIn = isAuthenticated();

// Comprobaciones simplificadas - siempre permitir todo para desarrollo r√°pido
const canViewAnimals = true;
const canEditAnimals = true;
const canCreateAnimals = true;

// En modo desarrollo, no redirigimos
// if (!isLoggedIn) {
//   return Astro.redirect('/login');
// }

// Definir t√≠tulo y rol de usuario
const title = pageTitle;

// No definimos el rol aqu√≠ para componentes server-side
// El rol se detectar√° en el cliente con JavaScript
const userRole = 'pending'; // Este valor ser√° reemplazado por JS del cliente

---

<MainLayout title={title} userRole={userRole} currentPath="/animals">
  <div class="w-full max-w-full px-2 sm:px-4 py-4 sm:py-6">
    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 sm:mb-6 gap-3">
      <h1 class="text-xl sm:text-2xl font-bold text-gray-900 dark:text-white">
        {title}
      </h1>
      <div class="flex flex-wrap gap-2">
        <script is:inline>
          // Comprobar rol de usuario directamente aqu√≠
          (function() {
            try {
              const token = localStorage.getItem('token');
              if (token) {
                const payload = JSON.parse(atob(token.split('.')[1]));
                const role = payload.role.toLowerCase();
                
                // Variable global para que otros scripts sepan que ya est√° bloqueado
                window.newAnimalButtonBlocked = (role === 'editor' || role === 'usuario');
                
                document.addEventListener('DOMContentLoaded', function() {
                  // Si se ejecuta muy r√°pido, esperar un tick para asegurar que el DOM est√© listo
                  setTimeout(() => {
                    if (window.newAnimalButtonBlocked) {
                      console.log('BLOQUEANDO BOT√ìN NUEVO ANIMAL INMEDIATAMENTE PARA ROL:', role);
                      const btn = document.getElementById('new-animal-btn');
                      if (btn) {
                        btn.disabled = true;
                        btn.style.opacity = '0.5';
                        btn.style.cursor = 'not-allowed';
                        btn.style.pointerEvents = 'none';
                        btn.title = 'NO TIENES PERMISOS PARA CREAR NUEVOS ANIMALES';
                        
                        // A√±adir icono de candado
                        if (!btn.querySelector('.lock-icon')) {
                          const lockIcon = document.createElement('span');
                          lockIcon.textContent = ' üîí';
                          lockIcon.className = 'ml-1 lock-icon';
                          btn.appendChild(lockIcon);
                        }
                        
                        // Prevenir navegaci√≥n
                        btn.onclick = function(e) {
                          e.preventDefault();
                          e.stopPropagation();
                          alert('NO TIENES PERMISOS PARA CREAR NUEVOS ANIMALES');
                          return false;
                        };
                      }
                    }
                  }, 0);
                });
              }
            } catch (e) {
              console.error('Error al verificar permisos para bot√≥n Nuevo Animal:', e);
            }
          })();
        </script>
        
        {/* Bot√≥n sencillo - se bloquear√° por el script anterior si el rol es restringido */}
        <button 
           class="btn btn-primary flex items-center" 
           id="new-animal-btn"
           onclick="window.location.href='/animals/new';">
          <span class="mr-1">+</span>
          {newAnimalText}
        </button>
        <!-- Ya no usamos scripts en l√≠nea aqu√≠ - todo se maneja desde block-delete-button.js -->
        <button id="refreshBtn" class="btn btn-secondary flex items-center">
          <span class="mr-1">‚Üª</span>
          {refreshText}
        </button>
      </div>
    </div>

    <!-- Card de b√∫squeda y filtros -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-3 sm:p-4 mb-4 sm:mb-6">
      <div class="mb-3 sm:mb-4">
        <h2 class="text-base sm:text-lg font-medium text-gray-900 dark:text-white mb-2 sm:mb-3">
          {searchTitleText}
        </h2>
        <p class="text-xs sm:text-sm text-gray-600 dark:text-gray-300 mb-3 sm:mb-4">
          {searchDescriptionText}
        </p>
      </div>
      
      <!-- Componente de filtros -->
      <AnimalFilters id="animal-filters" client:load />
    </div>

    <!-- Tabla de animales -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-3 sm:p-4">
      <div class="mb-3 sm:mb-4 flex flex-col sm:flex-row justify-between items-start sm:items-center">
        <h2 class="text-base sm:text-lg font-medium text-gray-900 dark:text-white mb-2 sm:mb-0">
          {listTitleText}
        </h2>
        <div id="totalAnimalsContainer" class="text-xs sm:text-sm text-gray-500 dark:text-gray-400">
          {loadingText}
        </div>
      </div>
      <div class="overflow-x-auto">
        <AnimalTable 
          client:load 
          canEdit={canEditAnimals}
          canCreate={canCreateAnimals}
        />
      </div>
    </div>
  </div>
  <!-- SOLUCI√ìN RADICAL: Interceptor global de clics -->
  <script is:inline>
    // Esta funci√≥n se ejecuta INMEDIATAMENTE al cargar el script
    (function() {
      console.log('INTERCEPTOR GLOBAL INICIADO');
      
      // Obtener el rol del usuario (una sola vez al inicio)
      let userRoleGlobal = 'pending';
      
      try {
        const token = localStorage.getItem('token');
        if (token) {
          const payload = JSON.parse(atob(token.split('.')[1]));
          userRoleGlobal = (payload.role || 'guest').toLowerCase();
          console.log('ROL GLOBAL DETECTADO:', userRoleGlobal);
        }
      } catch (e) {
        console.error('Error obteniendo rol global:', e);
      }
      
      // Interceptar TODOS los clics en el documento
      document.addEventListener('click', function(event) {
        // Solo procesar para roles restringidos
        if (userRoleGlobal !== 'editor' && userRoleGlobal !== 'usuario') {
          return; // Permitir clics para administradores y Ramon
        }
        
        // Verificar si el clic es en un enlace a /animals/new
        let target = event.target;
        
        // Si el clic es en un span dentro del enlace, buscar el enlace padre
        while (target && target.tagName !== 'A') {
          target = target.parentElement;
        }
        
        // Si encontramos un enlace y va a /animals/new, bloquearlo
        if (target && target.tagName === 'A' && 
            (target.getAttribute('href') === '/animals/new' || 
             target.textContent.includes('Nuevo Animal') || 
             target.textContent.includes('Nou Animal'))) {
          
          console.log('¬°INTERCEPTADO CLIC EN BOT√ìN NUEVO ANIMAL!');
          event.preventDefault();
          event.stopPropagation();
          
          // Mostrar alerta
          alert('NO TIENES PERMISOS PARA CREAR NUEVOS ANIMALES');
          
          // Tambi√©n intentar bloquear visualmente el bot√≥n
          try {
            target.href = 'javascript:void(0);';
            target.style.opacity = '0.5';
            target.style.cursor = 'not-allowed';
            target.style.pointerEvents = 'none';
            
            // A√±adir candado si no existe
            if (!target.querySelector('.lock-icon')) {
              const lockIcon = document.createElement('span');
              lockIcon.textContent = ' üîí';
              lockIcon.className = 'ml-1 lock-icon';
              target.appendChild(lockIcon);
            }
          } catch (e) {
            console.error('Error modificando bot√≥n:', e);
          }
          
          return false;
        }
      }, true); // Usar fase de captura para interceptar antes de otros handlers
      
      console.log('INTERCEPTOR GLOBAL ACTIVADO EXITOSAMENTE');
    })();
  </script>
</MainLayout>

<style>
  .btn {
    @apply px-3 py-2 sm:px-4 sm:py-2 rounded-md text-xs sm:text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors;
  }
  
  .btn-primary {
    @apply bg-primary text-white hover:bg-primary/80 focus:ring-primary;
  }
  
  .btn-secondary {
    @apply bg-gray-200 text-gray-800 hover:bg-gray-300 focus:ring-gray-500 dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600;
  }
</style>

<script>
  // Script para manejar interacciones de la p√°gina
  document.addEventListener('DOMContentLoaded', () => {
    // Elementos del DOM
    const refreshBtn = document.getElementById('refreshBtn');
    const totalAnimalsContainer = document.getElementById('totalAnimalsContainer');
    
    // Volver a cargar la p√°gina cuando se pulse el bot√≥n de actualizar
    if (refreshBtn) {
      refreshBtn.addEventListener('click', () => {
        window.location.reload();
      });
    }
    
    // Escuchar eventos de la tabla de animales
    document.addEventListener('animals-loaded', (e) => {
      if (totalAnimalsContainer && e.detail && e.detail.total !== undefined) {
        // Obtener idioma actual
        const currentLang = localStorage.getItem('userLanguage') || 'es';
        const animalesText = currentLang === 'ca' ? 'animals' : 'animales';
        
        totalAnimalsContainer.innerHTML = `<span class="text-sm text-gray-500 dark:text-gray-400">
          Total: ${e.detail.total} ${animalesText} 
        </span>`;
      }
    });
    
    // Actualizar el t√≠tulo cuando se apliquen filtros
    document.addEventListener('filters-applied', (e) => {
      if (totalAnimalsContainer) {
        // Obtener idioma actual
        const currentLang = localStorage.getItem('userLanguage') || 'es';
        const filtrosText = currentLang === 'ca' ? 'Aplicant filtres...' : 'Aplicando filtros...';
        
        totalAnimalsContainer.innerHTML = `<span class="text-sm text-gray-500 dark:text-gray-400">
          ${filtrosText}
        </span>`;
      }
    });
    
    // TRADUCCI√ìN DIRECTA DE LOS TEXTOS FIJOS - NUEVO
    function translatePageTexts() {
      const currentLang = localStorage.getItem('userLanguage') || 'es';
      if (currentLang === 'ca') {
        // Traducir t√≠tulo principal
        const mainTitle = document.querySelector('[data-astro-source-loc="56:79"]');
        if (mainTitle) mainTitle.textContent = 'Gesti√≥ d\'Animals';
        
        // Traducir bot√≥n nuevo animal y aplicar restricciones seg√∫n rol
        const newAnimalBtn = document.querySelector('a[href="/animals/new"]');
        if (newAnimalBtn) {
          // Obtener rol del usuario
          try {
            const token = localStorage.getItem('token');
            let userRole = 'guest';
            
            if (token) {
              const payload = JSON.parse(atob(token.split('.')[1]));
              userRole = (payload.role || 'guest').toLowerCase();
              console.log('Rol detectado en script traducci√≥n:', userRole);
            }
            
            // Si es rol restringido, deshabilitar el bot√≥n
            if (userRole === 'editor' || userRole === 'usuario') {
              console.log('BLOQUEANDO BOT√ìN EN SCRIPT DE TRADUCCI√ìN');
              
              // Aplicar estrictamente bloqueo
              newAnimalBtn.href = 'javascript:void(0);';
              newAnimalBtn.disabled = true;
              newAnimalBtn.setAttribute('disabled', 'disabled');
              newAnimalBtn.style.opacity = '0.5';
              newAnimalBtn.style.pointerEvents = 'none';
              newAnimalBtn.style.cursor = 'not-allowed';
              newAnimalBtn.title = 'NO TIENES PERMISOS PARA CREAR NUEVOS ANIMALES';
              newAnimalBtn.classList.add('opacity-50', 'cursor-not-allowed');
              
              // Icono candado
              if (!newAnimalBtn.querySelector('.lock-icon')) {
                const lockIcon = document.createElement('span');
                lockIcon.textContent = ' üîí';
                lockIcon.className = 'ml-1 lock-icon';
                newAnimalBtn.appendChild(lockIcon);
              }
              
              // Manejador click
              newAnimalBtn.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                alert('NO TIENES PERMISOS PARA CREAR NUEVOS ANIMALES');
                return false;
              });
            }
          } catch (e) {
            console.error('Error aplicando restricciones en traducci√≥n:', e);
          }
          
          // Traducir el texto (independientemente del rol)
          const spanPlus = newAnimalBtn.querySelector('span');
          if (spanPlus && spanPlus.nextSibling) {
            spanPlus.nextSibling.textContent = ' Nou Animal';
          }
        }
        
        // Traducir bot√≥n actualizar
        const refreshBtn = document.getElementById('refreshBtn');
        if (refreshBtn) {
          // Mantener el icono pero cambiar el texto
          const spanRefresh = refreshBtn.querySelector('span');
          if (spanRefresh && spanRefresh.nextSibling) {
            spanRefresh.nextSibling.textContent = ' Actualitzar';
          }
        }
        
        // Traducir encabezado de b√∫squeda
        const searchHeader = document.querySelector('[data-astro-source-loc="74:97"]');
        if (searchHeader) searchHeader.textContent = 'Cerca i Filtres';
        
        // Traducir descripci√≥n de b√∫squeda
        const searchDesc = document.querySelector('[data-astro-source-loc="77:85"]');
        if (searchDesc) searchDesc.textContent = 'Utilitza els filtres per trobar animals espec√≠fics. Pots filtrar per explotaci√≥, g√®nere, estat i m√©s.';
        
        // Traducir encabezado de listado
        const listHeader = document.querySelector('[data-astro-source-loc="93:97"]');
        if (listHeader) listHeader.textContent = 'Llistat d\'Animals';
      }
    }
    
    // Ejecutar traducci√≥n al cargar la p√°gina
    translatePageTexts();
    
    // Escuchar cambios en el idioma (para cuando se cambia sin recargar)
    window.addEventListener('storage', () => {
      translatePageTexts();
    });
  });
</script>