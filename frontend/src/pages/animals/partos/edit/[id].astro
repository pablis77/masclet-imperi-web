---
import MainLayout from '../../../../components/layout/MainLayout.astro';
import MessageContainer from '../../../../components/ui/MessageContainer.astro';

// Obtener el ID del parto de los parámetros de la URL
const { id } = Astro.params;

// Obtener el rol del usuario de la sesión
const userRole = Astro.cookies.get('userRole')?.value || 'user';

// Estado inicial
let parto = null;
let animal = null;
let loading = true;
let error = null;
let title = 'Cargando parto...';

try {
  // Token para la autenticación (en producción, usar el almacenado en cookies/localStorage)
  const token = 'admin123';
  
  // Primero obtenemos los datos de todos los animales para buscar el parto
  const animalsResponse = await fetch(`http://localhost:8000/api/v1/animals/?limit=1000`, {
    headers: {
      'Authorization': `Bearer ${token}`
    }
  });
  
  if (!animalsResponse.ok) {
    throw new Error(`Error al cargar los animales: ${animalsResponse.statusText}`);
  }
  
  const animalsData = await animalsResponse.json();
  let animalId = null;
  
  // Buscar en todos los animales
  if (animalsData && animalsData.data) {
    for (const animalItem of animalsData.data) {
      // Buscar en partos.items (estructura habitual)
      if (animalItem.partos && animalItem.partos.items && Array.isArray(animalItem.partos.items)) {
        const foundParto = animalItem.partos.items.find(p => p.id == id);
        if (foundParto) {
          parto = foundParto;
          animal = animalItem;
          animalId = animalItem.id;
          break;
        }
      }
      // Buscar también en partos directo (estructura alternativa)
      else if (animalItem.partos && Array.isArray(animalItem.partos)) {
        const foundParto = animalItem.partos.find(p => p.id == id);
        if (foundParto) {
          parto = foundParto;
          animal = animalItem;
          animalId = animalItem.id;
          break;
        }
      }
    }
  }
  
  // Si no encontramos el parto en la lista general, intentar con el endpoint directo del animal
  if (!parto && !animalId) {
    // Como no tenemos el animal_id, esto es un problema.
    // Podríamos pedir al usuario que especifique el animal_id, pero por ahora mostraremos un error.
    throw new Error('No se pudo encontrar el parto en ninguno de los animales.');
  }
  
  title = parto ? `Editar Parto - ${animal?.nom || 'Animal'}` : 'Parto no encontrado';
  loading = false;
} catch (err) {
  console.error('Error al cargar los datos:', err);
  error = err.message || 'Error al cargar los datos del parto';
  loading = false;
  title = 'Error al cargar parto';
}
---

<MainLayout title={title} userRole={userRole} currentPath="/animals">
  <!-- Encabezado con botón de volver -->
  <div class="mb-6">
    <div class="flex items-center gap-2 mb-2">
      <a href={`/animals/${parto?.animal_id}`} class="flex items-center text-primary hover:text-primary/80 dark:text-primary-light dark:hover:text-primary transition-colors">
        <span class="mr-1">←</span> Volver al detalle del animal
      </a>
    </div>
    <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">{title}</h1>
    {animal && <p class="text-gray-600 dark:text-gray-300">Animal: {animal.nom} (ID: {animal.id})</p>}
  </div>

  <!-- Estado de carga -->
  {loading && (
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-100 dark:border-gray-700 p-6">
      <div class="flex justify-center items-center py-10">
        <div class="animate-spin rounded-full h-10 w-10 border-b-2 border-primary"></div>
        <span class="ml-3 text-gray-700 dark:text-gray-300">Cargando...</span>
      </div>
    </div>
  )}

  <!-- Mensaje de error -->
  {error && (
    <MessageContainer 
      type="error"
      title="Error"
      message={error}
    />
  )}

  {!loading && !error && parto && (
    <div class="grid grid-cols-1 gap-6">
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-100 dark:border-gray-700 p-6">
        <form id="edit-parto-form" class="space-y-6">
          <!-- Fecha del Parto -->
          <div>
            <label for="part" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Fecha del Parto</label>
            <input 
              type="date" 
              id="part" 
              name="part" 
              value={parto.part ? new Date(parto.part.split('/').reverse().join('-')).toISOString().split('T')[0] : ''} 
              class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white"
              required
            />
            <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Formato: DD/MM/YYYY</p>
          </div>

          <!-- Género de la Cría -->
          <div>
            <label for="GenereT" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Género de la Cría</label>
            <select 
              id="GenereT" 
              name="GenereT" 
              class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white"
              required
            >
              <option value="">Selecciona una opción</option>
              <option value="M" selected={parto.GenereT === 'M'}>Macho</option>
              <option value="F" selected={parto.GenereT === 'F'}>Hembra</option>
              <option value="esforrada" selected={parto.GenereT === 'esforrada'}>Esforrada</option>
            </select>
          </div>

          <!-- Estado de la Cría -->
          <div>
            <label for="EstadoT" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Estado de la Cría</label>
            <select 
              id="EstadoT" 
              name="EstadoT" 
              class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white"
              required
            >
              <option value="">Selecciona una opción</option>
              <option value="OK" selected={parto.EstadoT === 'OK'}>Vivo</option>
              <option value="DEF" selected={parto.EstadoT === 'DEF'}>Fallecido</option>
            </select>
          </div>

          <!-- Observaciones -->
          <div>
            <label for="observacions" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Observaciones</label>
            <textarea 
              id="observacions" 
              name="observacions" 
              rows="3" 
              class="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white"
            >{parto.observacions || ''}</textarea>
          </div>

          <!-- Campo oculto para visibilidad -->
          <div>
            <label for="visible" class="flex items-center">
              <input 
                type="checkbox" 
                id="visible" 
                name="visible" 
                class="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded"
                checked={parto.visible !== false}
              />
              <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">Mostrar en el historial de partos</span>
            </label>
            <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Desmarca esta opción para ocultar este parto del historial y recuentos.</p>
          </div>

          <!-- Botones de acción -->
          <div class="flex justify-end space-x-3 pt-4">
            <a 
              href={`/animals/${parto.animal_id}`}
              class="px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
            >
              Cancelar
            </a>
            <button 
              type="submit"
              class="px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary hover:bg-primary/80 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
            >
              Guardar Cambios
            </button>
          </div>
        </form>

        <!-- Debug para desarrollo -->
        <div id="debug-output" class="mt-8 p-4 border border-gray-200 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 hidden">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">Información de Depuración</h3>
          <pre id="debug-content" class="text-sm text-gray-800 dark:text-gray-200 whitespace-pre-wrap"></pre>
        </div>
      </div>
    </div>
  )}

  {!loading && !error && !parto && (
    <MessageContainer 
      type="info"
      title="Parto no encontrado"
      message="No se encontró el parto solicitado. Puede que haya sido eliminado o que no exista."
    />
  )}
</MainLayout>

<script is:inline define:vars={{ partoId: id, animalId: parto?.animal_id }}>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('edit-parto-form');
    const debugOutput = document.getElementById('debug-output');
    const debugContent = document.getElementById('debug-content');
    
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        try {
          // Obtener los valores del formulario
          const formData = new FormData(form);
          const partDate = formData.get('part');
          
          // Validar campos requeridos
          if (!partDate || !formData.get('GenereT') || !formData.get('EstadoT')) {
            alert('Por favor, completa todos los campos obligatorios.');
            return;
          }
          
          // Formatear fecha correctamente (de YYYY-MM-DD a DD/MM/YYYY)
          const dateParts = partDate.split('-');
          const formattedDate = `${dateParts[2]}/${dateParts[1]}/${dateParts[0]}`;
          
          // Crear objeto de datos para la API
          const apiData = {
            part: formattedDate,
            GenereT: formData.get('GenereT'),
            EstadoT: formData.get('EstadoT'),
            observacions: formData.get('observacions') || null,
            visible: formData.get('visible') === 'on' // Convertir checkbox a booleano
          };
          
          // Para desarrollo, mostrar los datos que se enviarán
          if (debugOutput && debugContent) {
            debugContent.textContent = JSON.stringify(apiData, null, 2);
            debugOutput.classList.remove('hidden');
          }
          
          // Obtener token de autenticación (en producción, usar localStorage o cookies)
          const token = localStorage.getItem('token') || 'admin123';
          
          // Enviar datos a la API
          // Intentar actualizar con PUT en lugar de PATCH
          const response = await fetch(`http://localhost:8000/api/v1/animals/${animal.id}/partos/${partoId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(apiData)
          });
          
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || 'Error al actualizar el parto');
          }
          
          const data = await response.json();
          console.log('Parto actualizado:', data);
          
          // Guardar mensaje de éxito en sessionStorage para mostrar en la página de detalles
          sessionStorage.setItem('partoUpdatedMessage', 'El parto ha sido actualizado correctamente');
          
          // Redirigir a la página de detalles del animal
          window.location.href = `/animals/${animalId}`;
        } catch (error) {
          console.error('Error:', error);
          alert('Error al actualizar el parto: ' + error.message);
        }
      });
    }
  });
</script>
