---
// Importar el layout y componentes
import MainLayout from '../../components/layout/MainLayout.astro';
import animalService from '../../services/animalService';

// Obtener el ID del animal de los par√°metros de la URL
const { id } = Astro.params;

// Definir t√≠tulo y rol de usuario
const title = "Ficha de Animal";
const userRole = "administrador"; // Simulaci√≥n de rol

// Variables para almacenar datos y estado
let animal = null;
let error = null;
let loading = true;

try {
  if (!id || isNaN(parseInt(id))) {
    throw new Error('ID de animal no v√°lido');
  }

  // Intentar cargar los datos del animal
  console.log(`Intentando cargar animal con ID: ${id}`);
  animal = await animalService.getAnimalById(parseInt(id));
  console.log('Animal cargado:', animal);
  
  if (!animal) {
    throw new Error('No se pudo encontrar el animal');
  }
  
  loading = false;
} catch (e) {
  console.error('Error al cargar datos del animal:', e);
  error = e.message || 'Error al cargar los datos del animal';
  loading = false;
}

// Variables para controlar pesta√±as
const showPartosTab = animal && animal.genere === 'F'; // Solo mostrar pesta√±a de partos para hembras

// Obtener el icono del animal
const icon = animal ? animalService.getAnimalIcon(animal) : 'üêÇ';

// Obtener la clase CSS para el estado del animal
const estadoClass = animal ? animalService.getAnimalStatusClass(animal.estado) : 'bg-gray-100 text-gray-800';

---

<MainLayout title={title} userRole={userRole} currentPath="/animals">
  <div class="mb-6">
    <div class="flex items-center gap-2 mb-2">
      <a href="/animals" class="flex items-center text-primary hover:text-primary/80 dark:text-primary-light dark:hover:text-primary transition-colors">
        <span class="mr-1">‚Üê</span> Volver al listado
      </a>
    </div>
    <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">{title}</h1>
    <p class="text-gray-600 dark:text-gray-300">ID Animal: {id}</p>
  </div>

  {loading && (
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-100 dark:border-gray-700 p-6 mb-6 flex justify-center items-center">
      <div class="flex items-center space-x-2">
        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
        <p>Cargando datos del animal...</p>
      </div>
    </div>
  )}

  {error && (
    <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 mb-6">
      <div class="flex items-start">
        <div class="flex-shrink-0">
          ‚ö†Ô∏è
        </div>
        <div class="ml-3">
          <h3 class="text-lg font-medium text-red-800 dark:text-red-300">Error</h3>
          <div class="mt-2 text-red-700 dark:text-red-200">
            <p>{error}</p>
          </div>
          <div class="mt-4">
            <button 
              id="retry-button"
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            >
              ‚Üª Reintentar
            </button>
          </div>
        </div>
      </div>
    </div>
  )}

  {animal && (
    <>
      <!-- Elemento oculto con datos del animal para el script -->
      <div id="animal-data" class="hidden" 
        data-genere={animal.genere}
        data-tiene-partos={
          (animal.partos && animal.partos.items && animal.partos.items.length > 0) || 
          (animal.partos && Array.isArray(animal.partos) && animal.partos.length > 0) || 
          (animal.parts && Array.isArray(animal.parts) && animal.parts.length > 0) ? 'true' : 'false'
        }
      ></div>
      <!-- Resumen del animal -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-100 dark:border-gray-700 p-6 mb-6">
        <div class="flex flex-col md:flex-row gap-6">
          <!-- Icono y estado -->
          <div class="flex flex-col items-center md:items-start">
            <div class="text-6xl mb-3">{icon}</div>
            <span class={`px-3 py-1 rounded-full ${estadoClass} text-sm font-medium`}>
              {animal.estat === 'ACT' ? 'Activo' : 'Baja'}
            </span>
          </div>
          
          <!-- Informaci√≥n b√°sica -->
          <div class="flex-grow">
            <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">{animal.nom}</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <p class="text-sm text-gray-500 dark:text-gray-400">C√≥digo</p>
                <p class="font-medium">{animal.cod || 'No disponible'}</p>
              </div>
              <div>
                <p class="text-sm text-gray-500 dark:text-gray-400">Sexo</p>
                <p class="font-medium">{animal.genere === 'M' ? 'Macho' : 'Hembra'}</p>
              </div>
              <div>
                <p class="text-sm text-gray-500 dark:text-gray-400">Fecha de nacimiento</p>
                <p class="font-medium">{animal.dob ? new Date(animal.dob).toLocaleDateString() : 'No disponible'}</p>
              </div>
              <div>
                <p class="text-sm text-gray-500 dark:text-gray-400">Explotaci√≥n</p>
                <p class="font-medium">{animal.explotacio || 'No disponible'}</p>
              </div>
              <div>
                <p class="text-sm text-gray-500 dark:text-gray-400">Cuadra</p>
                <p class="font-medium">{animal.quadra || 'No asignada'}</p>
              </div>
              {animal.genere === 'F' && (
                <div>
                  <p class="text-sm text-gray-500 dark:text-gray-400">Estado amamantamiento</p>
                  <p class="font-medium">
                    {animal.alletar === '0' ? 'No amamanta' : 
                     animal.alletar === '1' ? 'Amamanta un ternero' : 
                     animal.alletar === '2' ? 'Amamanta dos terneros' : 'No disponible'}
                  </p>
                </div>
              )}
            </div>
          </div>
          
          <!-- Acciones -->
          <div class="flex flex-col gap-2">
            <a href={`/animals/update/${id}`} class="flex items-center justify-center px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/80 transition-colors">
              ‚Üª Actualizar
            </a>
          </div>
        </div>
      </div>

      <!-- Pesta√±as de informaci√≥n detallada -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-100 dark:border-gray-700 overflow-hidden">
        <!-- Pesta√±as de navegaci√≥n -->
        <div class="flex border-b border-gray-200 dark:border-gray-700">
          <button id="tab-info" data-tab="info" class="px-6 py-3 text-primary border-b-2 border-primary font-medium active-tab" aria-selected="true">
            Informaci√≥n Completa
          </button>
          {showPartosTab && (
            <button id="tab-partos" data-tab="partos" class="px-6 py-3 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300">
              Historial de Partos
            </button>
          )}
          <button id="tab-changes" data-tab="changes" class="px-6 py-3 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300">
            Historial de Cambios
          </button>
        </div>

        <!-- Contenido de pesta√±as -->
        <div class="p-6">
          <!-- Pesta√±a 1: Informaci√≥n Completa -->
          <div id="content-info">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Datos de Identificaci√≥n</h3>
                <div class="space-y-3">
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">C√≥digo</p>
                    <p class="font-medium">{animal.cod || 'No disponible'}</p>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Nombre</p>
                    <p class="font-medium">{animal.nom}</p>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">N√∫mero de Serie</p>
                    <p class="font-medium">{animal.num_serie || 'No disponible'}</p>
                  </div>
                </div>
              </div>
              
              <div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Datos Generales</h3>
                <div class="space-y-3">
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Sexo</p>
                    <p class="font-medium">{animal.genere === 'M' ? 'Macho' : 'Hembra'}</p>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Fecha de nacimiento</p>
                    <p class="font-medium">
                      {animal.dob ? 
                        (() => {
                          try {
                            const fecha = new Date(animal.dob);
                            // Verificar si es una fecha v√°lida
                            if (!isNaN(fecha.getTime())) {
                              // Formatear DD/MM/YYYY
                              return fecha.toLocaleDateString('es-ES', {day: '2-digit', month: '2-digit', year: 'numeric'});
                            }
                            // Si es una cadena con formato DD/MM/YYYY, mostrarla directamente
                            if (typeof animal.dob === 'string' && new RegExp('^\\d{1,2}[/\\-]\\d{1,2}[/\\-]\\d{4}$').test(animal.dob)) {
                              return animal.dob;
                            }
                            return String(animal.dob);
                          } catch (e) {
                            return 'Fecha incorrecta';
                          }
                        })() 
                        : 'No disponible'
                      }
                    </p>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Estado</p>
                    <p class="font-medium">{animal.estado === 'OK' ? 'Activo' : 'Fallecido'}</p>
                  </div>
                </div>
              </div>
              
              <div>
                <!-- Eliminado encabezado de Ubicaci√≥n -->
                <div class="space-y-3">
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Explotaci√≥n</p>
                    <p class="font-medium">{animal.explotacio || 'No disponible'}</p>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Cuadra</p>
                    <p class="font-medium">{animal.quadra || 'No asignada'}</p>
                  </div>
                </div>
              </div>
              
              <div>
                <!-- Eliminado encabezado de Parentesco -->
                <div class="space-y-3">
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Padre</p>
                    <p class="font-medium">{animal.pare || 'No disponible'}</p>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Madre</p>
                    <p class="font-medium">{animal.mare || 'No disponible'}</p>
                  </div>
                  {animal.genere === 'F' && (
                    <div>
                      <p class="text-sm text-gray-500 dark:text-gray-400">Estado de amamantamiento</p>
                      <p class="font-medium">
                        {animal.alletar === '0' ? 'No amamanta' : 
                         animal.alletar === '1' ? 'Amamanta a un ternero' : 
                         animal.alletar === '2' ? 'Amamanta a dos terneros' : 'No disponible'}
                      </p>
                    </div>
                  )}
                </div>
              </div>
              
              <!-- Bot√≥n Volver al listado al final de la pesta√±a Informaci√≥n -->
              <div class="mt-6 text-center">
                <a href="/animals" class="inline-flex items-center justify-center px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/80 transition-colors">
                  <span class="mr-2">‚Üê</span> Volver al listado de animales
                </a>
              </div>
            </div>
          </div>

          <!-- Pesta√±a 2: Historial de Partos (oculta por defecto) -->
          <div id="content-partos" class="hidden">
            <div class="mb-4">
              <h3 class="text-lg font-medium text-gray-900 dark:text-white">Historial de Partos</h3>
              <p class="text-gray-500 dark:text-gray-400">Registro de todos los partos del animal</p>
            </div>
            {showPartosTab && (
              
              <div class="overflow-x-auto">
                <table id="tabla-partos" class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                  <thead class="bg-gray-50 dark:bg-gray-700">
                    <tr>
                      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer" id="sort-fecha">
                        Fecha <span class="ml-1 sort-indicator">‚Üë</span>
                      </th>
                      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer" id="sort-genero">G√©nero</th>
                      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer" id="sort-estado">Estado</th>
                      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Observaciones</th>
                      <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Acciones</th>
                    </tr>
                  </thead>
                  <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                    {animal && (() => {
                      // Manejar diferentes estructuras posibles de partos
                      let partosArray = [];
                      
                      if (animal.partos && animal.partos.items && animal.partos.items.length > 0) {
                        // Estructura esperada: animal.partos.items[]
                        partosArray = animal.partos.items;
                      } else if (animal.partos && Array.isArray(animal.partos) && animal.partos.length > 0) {
                        // Estructura alternativa: animal.partos[]
                        partosArray = animal.partos;
                      } else if (animal.parts && Array.isArray(animal.parts) && animal.parts.length > 0) {
                        // Estructura antigua: animal.parts[]
                        partosArray = animal.parts;
                      }
                      
                      if (partosArray.length > 0) {
                        // Eliminar partos duplicados (basados en la misma fecha)
                        // Usamos Map para mantener solo un parto para cada fecha, preferentemente el de n√∫mero de parto mayor
                        const fechaMap = new Map();
                        
                        partosArray.forEach(parto => {
                          if (!parto.part) return; // Ignorar partos sin fecha
                          
                          // Calcular una clave para agrupar por fecha
                          const fechaParto = parto.part.trim();
                          
                          // Si no tenemos un parto para esta fecha, o este tiene un n√∫mero de parto m√°s grande, lo guardamos
                          if (!fechaMap.has(fechaParto) || 
                              (parto.numero_part && fechaMap.get(fechaParto).numero_part && 
                               parto.numero_part > fechaMap.get(fechaParto).numero_part)) {
                            fechaMap.set(fechaParto, parto);
                          }
                        });
                        
                        // Convertir el Map a un array nuevamente
                        partosArray = Array.from(fechaMap.values());
                        
                        // Ordenar partos por fecha (de m√°s antiguo a m√°s reciente por defecto)
                        partosArray.sort((a, b) => {
                          const fechaA = a.part ? new Date(a.part) : new Date(0);
                          const fechaB = b.part ? new Date(b.part) : new Date(0);
                          return fechaA - fechaB; // Orden ascendente (m√°s antiguo primero)
                        });
                        
                        return partosArray.map((parto) => (
                          <tr>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                              {parto.part ? 
                                (() => {
                                  try {
                                    if (typeof parto.part === 'string') {
                                      const fecha = new Date(parto.part);
                                      // Verificar si es una fecha v√°lida
                                      if (!isNaN(fecha.getTime())) {
                                        // Formatear DD/MM/YYYY
                                        return fecha.toLocaleDateString('es-ES', {day: '2-digit', month: '2-digit', year: 'numeric'});
                                      }
                                      // Si es una cadena con formato DD/MM/YYYY, mostrarla directamente
                                      if (new RegExp('^\\d{1,2}[/\\-]\\d{1,2}[/\\-]\\d{4}$').test(parto.part)) {
                                        return parto.part;
                                      }
                                    }
                                    return String(parto.part);
                                  } catch (e) {
                                    return 'Fecha incorrecta';
                                  }
                                })() 
                                : 'N/A'
                              }
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                              {parto.GenereT === 'M' ? 'Macho' : 
                               parto.GenereT === 'F' ? 'Hembra' : 
                               parto.GenereT === 'esforrada' ? 'Esforr√°' : parto.GenereT || 'No disponible'}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                              <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                                parto.EstadoT === 'OK' ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100' : 
                                'bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100'
                              }`}>
                                {parto.EstadoT === 'OK' ? 'Vivo' : 'Fallecido'}
                              </span>
                            </td>
                            <td class="px-6 py-4 whitespace-normal text-sm text-gray-500 dark:text-gray-400 max-w-xs">
                              {parto.observacions || '-'}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-2">
                              <button 
                                class="text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-100 focus:outline-none"
                                data-parto-id={parto.id}
                                data-action="edit"
                              >
                                <span class="sr-only">Editar</span>
                                ‚úèÔ∏è
                              </button>
                              <button 
                                class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-100 focus:outline-none"
                                data-parto-id={parto.id}
                                data-action="delete"
                              >
                                <span class="sr-only">Eliminar</span>
                                üóëÔ∏è
                              </button>
                            </td>
                          </tr>
                        ));
                      } else {
                        return (
                          <tr>
                            <td colspan="4" class="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
                              No hay registros de partos para este animal
                            </td>
                          </tr>
                        );
                      }
                    })()}
                  </tbody>
                </table>
              </div>
            )}
            <div class="p-6 text-center text-gray-500 dark:text-gray-400">
              {!showPartosTab && (
                <p>Este animal no tiene partos registrados</p>
              )}
              
              <!-- Bot√≥n Volver al listado al final de la pesta√±a Partos -->
              <div class="mt-6 text-center">
                <a href="/animals" class="inline-flex items-center justify-center px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/80 transition-colors">
                  <span class="mr-2">‚Üê</span> Volver al listado de animales
                </a>
              </div>
            </div>
          </div>

          <!-- Pesta√±a 3: Historial de Cambios (oculta por defecto) -->
          <div id="content-changes" class="hidden">
            <div class="mb-4">
              <h3 class="text-lg font-medium text-gray-900 dark:text-white">Historial de Cambios</h3>
              <p class="text-gray-500 dark:text-gray-400">Actualmente no se registran cambios hist√≥ricos en la ficha del animal</p>
            </div>
            
            <div class="p-6 text-center text-gray-500 dark:text-gray-400">
              <p>No hay datos hist√≥ricos disponibles</p>
            </div>
            
            <!-- Bot√≥n Volver al listado al final de la pesta√±a Historial de Cambios -->
            <div class="mt-6 text-center">
              <a href="/animals" class="inline-flex items-center justify-center px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/80 transition-colors">
                <span class="mr-2">‚Üê</span> Volver al listado de animales
              </a>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Bot√≥n flotante para volver al listado -->
      <div class="fixed bottom-6 right-6 z-10">
        <a href="/animals" class="flex items-center justify-center w-12 h-12 rounded-full bg-primary text-white shadow-lg hover:bg-primary/80 transition-colors">
          <span class="text-xl">‚Üê</span>
        </a>
      </div>
    </>
  )}
</MainLayout>

<script is:inline>
  // Script simplificado para evitar errores 500
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM cargado: Inicializando funcionalidades de animal...');
    
    // Funcionalidad de las pesta√±as
    const tabs = document.querySelectorAll('[data-tab]');
    const tabInfo = document.querySelector('[data-tab="info"]');
    const tabPartos = document.querySelector('[data-tab="partos"]');
    const contentInfo = document.getElementById('content-info');
    const contentPartos = document.getElementById('content-partos');
    
    // Comprobamos que existen los elementos necesarios
    if (tabs && contentInfo && contentPartos) {
      // Inicialmente mostramos la info y ocultamos los partos
      contentInfo.classList.remove('hidden');
      contentPartos.classList.add('hidden');
      
      // Establecemos la primera pesta√±a como activa
      if (tabInfo) {
        tabInfo.classList.add('active-tab');
        tabInfo.setAttribute('aria-selected', 'true');
        // A√±adir clases de estilo activo
        tabInfo.classList.add('text-primary', 'border-b-2', 'border-primary', 'font-medium');
        tabInfo.classList.remove('text-gray-500', 'dark:text-gray-400', 'hover:text-gray-700', 'dark:hover:text-gray-300');
      }
      if (tabPartos) {
        tabPartos.classList.remove('active-tab');
        tabPartos.setAttribute('aria-selected', 'false');
        // Quitar clases de estilo activo
        tabPartos.classList.remove('text-primary', 'border-b-2', 'border-primary', 'font-medium');
        tabPartos.classList.add('text-gray-500', 'dark:text-gray-400', 'hover:text-gray-700', 'dark:hover:text-gray-300');
      }
      
      // A√±adimos eventos de click a cada pesta√±a
      tabs.forEach(function(tab) {
        tab.addEventListener('click', function() {
          const tabId = this.getAttribute('data-tab');
          
          // Ocultamos todos los contenidos
          contentInfo.classList.add('hidden');
          contentPartos.classList.add('hidden');
          
          // Quitamos la clase activa de todas las pesta√±as
          tabs.forEach(function(t) {
            t.classList.remove('active-tab');
            t.setAttribute('aria-selected', 'false');
            // Quitar estilos visuales de pesta√±a activa
            t.classList.remove('text-primary', 'border-b-2', 'border-primary', 'font-medium');
            t.classList.add('text-gray-500', 'dark:text-gray-400', 'hover:text-gray-700', 'dark:hover:text-gray-300');
          });
          
          // Activamos la pesta√±a y contenido seleccionados
          this.classList.add('active-tab');
          this.setAttribute('aria-selected', 'true');
          // A√±adir estilos visuales de pesta√±a activa
          this.classList.add('text-primary', 'border-b-2', 'border-primary', 'font-medium');
          this.classList.remove('text-gray-500', 'dark:text-gray-400', 'hover:text-gray-700', 'dark:hover:text-gray-300');
          
          if (tabId === 'info') {
            contentInfo.classList.remove('hidden');
          } else if (tabId === 'partos') {
            contentPartos.classList.remove('hidden');
          }
        });
      });
    }
    
    // Ordenamiento de la tabla de partos
    const sortFecha = document.getElementById('sort-fecha');
    const sortGenero = document.getElementById('sort-genero');
    const sortEstado = document.getElementById('sort-estado');
    const tablaPartos = document.getElementById('tabla-partos');
    
    if (sortFecha && tablaPartos) {
      // Establecer orden inicial
      let ordenActual = { columna: 'fecha', direccion: 'asc' };
      
      // Funci√≥n para ordenar la tabla
      function ordenarTabla(columna, direccion) {
        const tbody = tablaPartos.querySelector('tbody');
        if (!tbody) return;
        
        // Obtener todas las filas excepto la de "no hay datos"
        const filas = Array.from(tbody.querySelectorAll('tr:not([data-empty])'));
        if (filas.length <= 1) return;
        
        // Actualizar indicadores visuales
        document.querySelectorAll('.sort-indicator').forEach(function(el) {
          el.textContent = '';
        });
        
        // Mostrar indicador en la columna ordenada
        let indicador;
        if (columna === 'fecha') {
          indicador = sortFecha.querySelector('.sort-indicator');
        } else if (columna === 'genero' && sortGenero) {
          indicador = sortGenero.querySelector('.sort-indicator');
        } else if (columna === 'estado' && sortEstado) {
          indicador = sortEstado.querySelector('.sort-indicator');
        }
        
        if (indicador) {
          indicador.textContent = direccion === 'asc' ? '‚Üë' : '‚Üì';
        }
        
        // Ordenar las filas
        filas.sort(function(a, b) {
          let valorA, valorB;
          let idx = 0; // √çndice de columna
          
          if (columna === 'genero') idx = 1;
          else if (columna === 'estado') idx = 2;
          
          valorA = a.cells[idx] ? a.cells[idx].textContent.trim() : '';
          valorB = b.cells[idx] ? b.cells[idx].textContent.trim() : '';
          
          // Para fechas, intentamos convertir a objetos Date
          if (columna === 'fecha') {
            try {
              const partsA = valorA.split('/');
              const partsB = valorB.split('/');
              
              if (partsA.length === 3 && partsB.length === 3) {
                const fechaA = new Date(partsA[2], partsA[1]-1, partsA[0]);
                const fechaB = new Date(partsB[2], partsB[1]-1, partsB[0]);
                
                if (!isNaN(fechaA) && !isNaN(fechaB)) {
                  return direccion === 'asc' ? fechaA - fechaB : fechaB - fechaA;
                }
              }
            } catch (e) {
              console.log('Error al comparar fechas:', e);
            }
          }
          
          // Si no son fechas o hubo error, comparar como texto
          if (direccion === 'asc') {
            return valorA.localeCompare(valorB);
          } else {
            return valorB.localeCompare(valorA);
          }
        });
        
        // Reordenar las filas en el DOM
        filas.forEach(function(fila) {
          tbody.appendChild(fila);
        });
      }
      
      // A√±adir event listeners para ordenamiento
      if (sortFecha) {
        sortFecha.addEventListener('click', function() {
          if (ordenActual.columna === 'fecha') {
            ordenActual.direccion = ordenActual.direccion === 'asc' ? 'desc' : 'asc';
          } else {
            ordenActual = { columna: 'fecha', direccion: 'asc' };
          }
          ordenarTabla('fecha', ordenActual.direccion);
        });
      }
      
      if (sortGenero) {
        sortGenero.addEventListener('click', function() {
          if (ordenActual.columna === 'genero') {
            ordenActual.direccion = ordenActual.direccion === 'asc' ? 'desc' : 'asc';
          } else {
            ordenActual = { columna: 'genero', direccion: 'asc' };
          }
          ordenarTabla('genero', ordenActual.direccion);
        });
      }
      
      if (sortEstado) {
        sortEstado.addEventListener('click', function() {
          if (ordenActual.columna === 'estado') {
            ordenActual.direccion = ordenActual.direccion === 'asc' ? 'desc' : 'asc';
          } else {
            ordenActual = { columna: 'estado', direccion: 'asc' };
          }
          ordenarTabla('estado', ordenActual.direccion);
        });
      }
      
      // Ordenar inicialmente por fecha (ascendente)
      ordenarTabla('fecha', 'asc');
    }
    
    // Gestionar botones de editar/eliminar partos
    const botonesEditar = document.querySelectorAll('[data-action="edit"]');
    const botonesEliminar = document.querySelectorAll('[data-action="delete"]');
    
    // Funcionalidad para editar partos
    botonesEditar.forEach(function(boton) {
      boton.addEventListener('click', function() {
        const partoId = this.getAttribute('data-parto-id');
        alert('Edici√≥n de parto: Funcionalidad en desarrollo');
        console.log('Click en editar parto:', partoId);
      });
    });
    
    // Funcionalidad para eliminar partos
    botonesEliminar.forEach(function(boton) {
      boton.addEventListener('click', function() {
        const partoId = this.getAttribute('data-parto-id');
        const fila = this.closest('tr');
        
        if (confirm('¬øSeguro que desea eliminar este parto? Esta acci√≥n no se puede deshacer.')) {
          console.log('Eliminando parto:', partoId);
          
          const token = localStorage.getItem('token');
          if (!token) {
            alert('Error: No se ha encontrado el token de autenticaci√≥n');
            return;
          }

          // Vamos a intentar diferentes rutas de API ya que puede estar en diferentes formatos
          const apiUrls = [
            `http://localhost:8000/api/v1/partos/${partoId}`,
            `http://localhost:8000/api/v1/parts/${partoId}`,
            `http://localhost:8000/api/v1/animals/parts/${partoId}`
          ];
          
          // Probar con la primera ruta
          console.log(`Intentando eliminar parto con ID ${partoId} usando la primera ruta API`);
          fetch(apiUrls[0], {
            method: 'DELETE',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            }
          })
          .then(function(response) {
            if (!response.ok) {
              // Si la primera ruta falla, probar con la segunda
              console.log(`Primera ruta fall√≥ con ${response.status}, intentando segunda ruta...`);
              return fetch(apiUrls[1], {
                method: 'DELETE',
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json'
                }
              });
            }
            return response.json().catch(() => ({ success: true })); // Algunos endpoints no devuelven JSON
          })
          .then(function(responseOrData) {
            // Si es una respuesta de la segunda petici√≥n
            if (responseOrData instanceof Response) {
              const response = responseOrData;
              if (!response.ok) {
                // Si la segunda ruta falla, probar con la tercera
                console.log(`Segunda ruta fall√≥ con ${response.status}, intentando tercera ruta...`);
                return fetch(apiUrls[2], {
                  method: 'DELETE',
                  headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                  }
                });
              }
              return response.json().catch(() => ({ success: true }));
            }
            // Si es datos de una petici√≥n exitosa anterior
            return responseOrData;
          })
          .then(function(responseOrData) {
            // Verificar si es una respuesta de la tercera petici√≥n
            if (responseOrData instanceof Response) {
              const response = responseOrData;
              if (!response.ok) {
                throw new Error(`Todas las rutas de API fallaron, √∫ltimo error: ${response.status}`);
              }
              return response.json().catch(() => ({ success: true }));
            }
            return responseOrData;
          })
          .then(function(data) {
            console.log('Parto eliminado correctamente:', data);
            
            // Eliminar la fila de la tabla
            if (fila) {
              fila.remove();
              
              // Si no quedan filas, mostrar mensaje
              const filas = tablaPartos.querySelectorAll('tbody tr');
              if (filas.length === 0) {
                const tbody = tablaPartos.querySelector('tbody');
                if (tbody) {
                  const tr = document.createElement('tr');
                  tr.setAttribute('data-empty', 'true');
                  tr.innerHTML = `
                    <td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
                      No hay registros de partos para este animal
                    </td>
                  `;
                  tbody.appendChild(tr);
                }
              }
            }
            
            alert('Parto eliminado correctamente');
          })
          .catch(function(error) {
            console.error('Error al eliminar parto:', error);
            alert(`Error al eliminar parto: ${error.message}\n\nIntente m√°s tarde o contacte al administrador.`);
          });
        }
      });
    });
  });
</script>
