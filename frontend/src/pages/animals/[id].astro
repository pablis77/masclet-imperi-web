---
// Importar el layout y componentes necesarios
import DefaultLayout from '../../layouts/DefaultLayout.astro';
import animalService, { getAnimalById } from '../../services/animalService';
import { getAllExplotaciones } from '../../services/explotacionService';
import { getPartsByAnimalId } from '../../services/partService';
import { getCurrentUserRole } from '../../services/authService';

// Obtener el ID del animal desde los par√°metros de la URL
const { id } = Astro.params;
let animal: any = null;
let explotacion: any = null;
let parts: any[] = [];
let error: string | null = null;

try {
  if (id) {
    // Obtener los datos del animal
    animal = await getAnimalById(parseInt(id));
    
    // Obtener datos de su explotaci√≥n
    const explotaciones = await getAllExplotaciones();
    explotacion = explotaciones.find(exp => exp.id === animal.explotacio_id);
    
    // Obtener historial de partos si es hembra
    if (animal.genere === 'F') {
      parts = await getPartsByAnimalId(parseInt(id));
    }
  }
} catch (err) {
  console.error('Error al obtener datos del animal:', err);
  error = 'No se pudo cargar la informaci√≥n del animal';
}

// Preparar el t√≠tulo de la p√°gina
const title = animal ? `Animal: ${animal.nom}` : 'Detalle de Animal';

// EN DESARROLLO: Siempre simulamos estar autenticados como administrador
// No hacemos comprobaciones de permisos
const userRole = 'administrador';
const isLoggedIn = true; 
const canViewAnimals = true;
const canEditAnimals = true;
const canDeleteAnimals = true;

// Funci√≥n para formatear fecha
const formatDate = (dateString: string | null) => {
  if (!dateString) return 'No registrada';
  const date = new Date(dateString);
  return date.toLocaleDateString('es-ES', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
};

// Obtener icono seg√∫n tipo de animal
const getAnimalIcon = (animal: any) => {
  if (!animal) return 'üêÑ';
  return animalService.getAnimalIcon(animal);
};

// Funci√≥n para obtener clase de estado
const getEstadoClass = (estado: string) => {
  return animalService.getAnimalStatusClass(estado);
};

// Funci√≥n para obtener el texto de alletar
const getAlletarText = (alletar: string) => {
  return animalService.getAlletarText(alletar);
};
---

<DefaultLayout title={title} userRole={userRole}>
  <!-- Encabezado con bot√≥n de volver -->
  <div class="flex items-center mb-6">
    <a href="/animals" class="btn btn-outline-secondary mr-4 flex items-center">
      <span class="mr-1">‚Üê</span> Volver al listado
    </a>
    <h1 class="text-3xl font-bold text-gray-900 dark:text-dark-text flex items-center">
      {animal && (
        <>
          <span class="mr-2 text-3xl">{getAnimalIcon(animal)}</span>
          {animal.nom}
          <span class={`ml-3 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getEstadoClass(animal.estado)}`}>
            {animal.estado === 'OK' ? 'Activo' : 'Baja'}
          </span>
        </>
      )}
    </h1>
  </div>

  <!-- Mensaje de error -->
  {error && (
    <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6">
      <p>{error}</p>
      <p>Vuelve al <a href="/animals" class="underline">listado de animales</a></p>
    </div>
  )}

  <!-- Contenido principal -->
  {animal && (
    <div class="grid grid-cols-1 md:grid-cols-12 gap-6">
      <!-- Tarjeta principal de informaci√≥n -->
      <div class="col-span-1 md:col-span-8 bg-white dark:bg-dark-card rounded-lg shadow p-6">
        <h2 class="text-xl font-semibold mb-4 text-gray-800 dark:text-dark-text border-b pb-2">Informaci√≥n General</h2>
        
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <p class="text-sm text-gray-500 dark:text-dark-text-secondary">Explotaci√≥n</p>
            <p class="font-medium">{explotacion ? explotacion.nom : 'No especificada'}</p>
          </div>
          
          <div>
            <p class="text-sm text-gray-500 dark:text-dark-text-secondary">G√©nero</p>
            <p class="font-medium flex items-center">
              <span class="mr-2">{animal.genere === 'M' ? '‚ôÇÔ∏è' : '‚ôÄÔ∏è'}</span>
              {animal.genere === 'M' ? 'Macho' : 'Hembra'}
            </p>
          </div>
          
          <div>
            <p class="text-sm text-gray-500 dark:text-dark-text-secondary">Estado</p>
            <p class="font-medium flex items-center">
              <span class={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${getEstadoClass(animal.estado)} mr-2`}>
                {animal.estado === 'OK' ? 'Activo' : 'Baja'}
              </span>
              {animal.estado === 'DEF' && (
                <span class="text-lg">‚ö∞Ô∏è</span>
              )}
            </p>
          </div>
          
          <div>
            <p class="text-sm text-gray-500 dark:text-dark-text-secondary">Amamantando</p>
            <p class="font-medium flex items-center">
              {getAlletarText(animal.alletar)}
              {animal.alletar !== 'NO' && (
                <span class="ml-2 text-lg">{animal.alletar === '1' ? 'üçº' : 'ü•õ'}</span>
              )}
            </p>
          </div>
          
          <div>
            <p class="text-sm text-gray-500 dark:text-dark-text-secondary">C√≥digo</p>
            <p class="font-medium">{animal.cod || 'No asignado'}</p>
          </div>
          
          <div>
            <p class="text-sm text-gray-500 dark:text-dark-text-secondary">N√∫mero de Serie</p>
            <p class="font-medium">{animal.num_serie || 'No asignado'}</p>
          </div>
          
          <div>
            <p class="text-sm text-gray-500 dark:text-dark-text-secondary">Cuadra</p>
            <p class="font-medium">{animal.quadra || 'No asignada'}</p>
          </div>
          
          <div>
            <p class="text-sm text-gray-500 dark:text-dark-text-secondary">Fecha de Nacimiento</p>
            <p class="font-medium">{formatDate(animal.dob)}</p>
          </div>
        </div>
        
        <h3 class="text-lg font-semibold mt-6 mb-3 text-gray-800 dark:text-dark-text border-b pb-2">Parentesco</h3>
        
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <div>
            <p class="text-sm text-gray-500 dark:text-dark-text-secondary">Padre</p>
            {animal.pare_id ? (
              <a href={`/animals/${animal.pare_id}`} class="font-medium text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 flex items-center">
                <span class="mr-2 text-lg">üêÇ</span>
                {animal.pare_nom || `ID: ${animal.pare_id}`}
              </a>
            ) : (
              <p class="font-medium">No registrado</p>
            )}
          </div>
          
          <div>
            <p class="text-sm text-gray-500 dark:text-dark-text-secondary">Madre</p>
            {animal.mare_id ? (
              <a href={`/animals/${animal.mare_id}`} class="font-medium text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 flex items-center">
                <span class="mr-2 text-lg">üêÑ</span>
                {animal.mare_nom || `ID: ${animal.mare_id}`}
              </a>
            ) : (
              <p class="font-medium">No registrada</p>
            )}
          </div>
        </div>
        
        <div class="mt-6 pt-4 border-t">
          <p class="text-sm text-gray-500 dark:text-dark-text-secondary">Datos de registro</p>
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-2 text-xs">
            <p>Creado: {formatDate(animal.created_at)}</p>
            <p>Actualizado: {formatDate(animal.updated_at)}</p>
          </div>
        </div>
      </div>
      
      <!-- Acciones y tarjetas secundarias -->
      <div class="col-span-1 md:col-span-4 space-y-6">
        <!-- Tarjeta de acciones -->
        <div class="bg-white dark:bg-dark-card rounded-lg shadow p-6">
          <h2 class="text-xl font-semibold mb-4 text-gray-800 dark:text-dark-text">Acciones</h2>
          
          <div class="space-y-3">
            <a href={`/animals/edit/${animal.id}`} class="btn btn-primary block w-full text-center">
              Editar Animal
            </a>
            {animal.genere === 'F' && animal.estado === 'OK' && (
              <a href={`/animals/${animal.id}/registrar-parto`} class="btn btn-secondary block w-full text-center">
                Registrar Parto
              </a>
            )}
            {animal.estado === 'OK' ? (
              <button id="changeEstadoBtn" data-animal-id={animal.id} class="btn btn-outline-warning block w-full text-center">
                Dar de Baja
              </button>
            ) : (
              <button id="reactivateBtn" data-animal-id={animal.id} class="btn btn-outline-success block w-full text-center">
                Reactivar
              </button>
            )}
          </div>
        </div>
        
        <!-- Historial de partos (solo para hembras) -->
        {animal.genere === 'F' && (
          <div class="bg-white dark:bg-dark-card rounded-lg shadow p-6">
            <div class="flex justify-between items-center mb-4">
              <h2 class="text-xl font-semibold text-gray-800 dark:text-dark-text">
                Historial de Partos
              </h2>
              {animal.estado === 'OK' && (
                <a href={`/animals/${animal.id}/registrar-parto`} class="text-sm text-primary hover:text-primary-dark">
                  + Nuevo parto
                </a>
              )}
            </div>
            
            {parts.length === 0 ? (
              <div class="text-center py-8 border rounded-lg border-dashed border-gray-300 dark:border-dark-border">
                <span class="text-3xl block mb-2">üê£</span>
                <p class="text-gray-500 dark:text-dark-text-secondary text-sm">No hay partos registrados</p>
                {animal.estado === 'OK' && (
                  <a href={`/animals/${animal.id}/registrar-parto`} class="mt-3 inline-block text-sm text-primary hover:text-primary-dark">
                    Registrar primer parto
                  </a>
                )}
              </div>
            ) : (
              <div class="space-y-4">
                {parts.map((part) => (
                  <div class="border-b pb-3 last:border-b-0">
                    <div class="flex justify-between items-center">
                      <span class="font-medium">{formatDate(part.data)}</span>
                      <span class="text-sm bg-blue-100 text-blue-800 px-2 py-0.5 rounded-full dark:bg-blue-900 dark:text-blue-200">
                        {part.cries.length} {part.cries.length === 1 ? 'cr√≠a' : 'cr√≠as'}
                      </span>
                    </div>
                    {part.cries.length > 0 && (
                      <div class="mt-2">
                        <p class="text-sm text-gray-600 dark:text-dark-text-secondary">Cr√≠as:</p>
                        <ul class="mt-1 space-y-1 divide-y divide-gray-100 dark:divide-dark-border">
                          {part.cries.map((cria) => (
                            <li class="pt-1 first:pt-0">
                              <a href="/animals/${cria.id}" class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 flex items-center">
                                <span class="mr-2 text-lg">{cria.genere === 'M' ? 'üêÇ' : 'üêÑ'}</span>
                                <span>{cria.nom}</span>
                                <span class="ml-1 text-xs text-gray-500">({cria.genere === 'M' ? 'M' : 'H'})</span>
                              </a>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
        
        <!-- Tarjeta de descendencia (para todos) -->
        <div class="bg-white dark:bg-dark-card rounded-lg shadow p-6">
          <h2 class="text-xl font-semibold mb-4 text-gray-800 dark:text-dark-text">
            Descendencia
          </h2>
          
          <div id="descendenciaContainer" class="text-center py-4">
            <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary mx-auto"></div>
            <p class="text-sm text-gray-500 dark:text-dark-text-secondary mt-2">Cargando descendencia...</p>
          </div>
        </div>
      </div>
    </div>
  )}
</DefaultLayout>

<script define:vars={{ animalId: id }}>
  document.addEventListener('DOMContentLoaded', () => {
    const changeEstadoBtn = document.getElementById('changeEstadoBtn');
    const reactivateBtn = document.getElementById('reactivateBtn');
    const descendenciaContainer = document.getElementById('descendenciaContainer');
    
    // Funci√≥n para cargar descendencia
    const loadDescendencia = async () => {
      if (!descendenciaContainer) return;
      
      try {
        // Intentar obtener descendencia
        const response = await fetch(`/api/v1/animals/${animalId}/descendants`);
        
        if (!response.ok) {
          throw new Error('Error al cargar la descendencia');
        }
        
        const data = await response.json();
        
        if (data.length === 0) {
          descendenciaContainer.innerHTML = `
            <div class="text-center py-4 border rounded-lg border-dashed border-gray-300 dark:border-dark-border">
              <p class="text-gray-500 dark:text-dark-text-secondary text-sm">No hay descendencia registrada</p>
            </div>
          `;
          return;
        }
        
        // Mostrar descendencia
        let html = '<ul class="space-y-1 divide-y divide-gray-100 dark:divide-dark-border">';
        
        data.forEach(animal => {
          const icon = animal.genere === 'M' ? 'üêÇ' : 'üêÑ';
          const gender = animal.genere === 'M' ? 'M' : 'H';
          
          html += `
            <li class="pt-1 first:pt-0">
              <a href="/animals/${animal.id}" class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 flex items-center">
                <span class="mr-2 text-lg">${icon}</span>
                <span>${animal.nom}</span>
                <span class="ml-1 text-xs text-gray-500">(${gender})</span>
              </a>
            </li>
          `;
        });
        
        html += '</ul>';
        descendenciaContainer.innerHTML = html;
      } catch (error) {
        console.error('Error cargando descendencia:', error);
        descendenciaContainer.innerHTML = `
          <div class="bg-red-50 p-3 rounded-lg text-center">
            <p class="text-red-600 text-sm">Error al cargar la descendencia</p>
          </div>
        `;
      }
    };
    
    // Cargar descendencia al iniciar
    loadDescendencia();
    
    // Dar de baja al animal
    if (changeEstadoBtn) {
      changeEstadoBtn.addEventListener('click', async () => {
        if (confirm('¬øEst√°s seguro de que deseas dar de baja a este animal?')) {
          try {
            const animalId = changeEstadoBtn.getAttribute('data-animal-id');
            const response = await fetch(`/api/v1/animals/${animalId}`, {
              method: 'PATCH',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ estado: 'DEF' }),
            });
            
            if (!response.ok) {
              throw new Error('Error al dar de baja al animal');
            }
            
            // Recargar la p√°gina para mostrar los cambios
            window.location.reload();
          } catch (error) {
            console.error('Error:', error);
            alert('No se pudo dar de baja al animal. Por favor, int√©ntalo de nuevo.');
          }
        }
      });
    }
    
    // Reactivar animal
    if (reactivateBtn) {
      reactivateBtn.addEventListener('click', async () => {
        if (confirm('¬øEst√°s seguro de que deseas reactivar este animal?')) {
          try {
            const animalId = reactivateBtn.getAttribute('data-animal-id');
            const response = await fetch(`/api/v1/animals/${animalId}`, {
              method: 'PATCH',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ estado: 'OK' }),
            });
            
            if (!response.ok) {
              throw new Error('Error al reactivar el animal');
            }
            
            // Recargar la p√°gina para mostrar los cambios
            window.location.reload();
          } catch (error) {
            console.error('Error:', error);
            alert('No se pudo reactivar el animal. Por favor, int√©ntalo de nuevo.');
          }
        }
      });
    }
  });
</script>
