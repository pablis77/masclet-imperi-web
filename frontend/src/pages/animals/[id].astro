---
// Importar el layout y componentes
import MainLayout from '../../components/layout/MainLayout.astro';
import animalService from '../../services/animalService';
import { getCurrentLanguage } from '../../i18n/config';
import EditarPartoModal from '../../components/animals/EditarPartoModal';

// Obtener el ID del animal de los par√°metros de la URL
const { id } = Astro.params;

// Obtener el idioma actual para renderizado en servidor
const serverLang = getCurrentLanguage();

// Variables de traducci√≥n directas 
const txtMacho = serverLang === 'ca' ? 'Mascle' : 'Macho';
const txtHembra = serverLang === 'ca' ? 'Femella' : 'Hembra';
const txtNoDisponible = serverLang === 'ca' ? 'No disponible' : 'No disponible';
const txtObservaciones = serverLang === 'ca' ? 'Sense observacions' : 'Sin observaciones';
const txtVivo = serverLang === 'ca' ? 'Viu' : 'Vivo';
const txtMuerto = serverLang === 'ca' ? 'Mort' : 'Fallecido';

// Traducciones para la ficha de animal
const translations = {
  es: {
    title: "Ficha de Animal",
    back_to_list: "Volver al listado",
    animal_id: "ID Animal",
    loading: "Cargando datos del animal...",
    error_title: "Error",
    retry: "Reintentar",
    active: "Activo",
    inactive: "Baja",
    dead: "Fallecido",
    update: "Actualizar",
    code: "C√≥digo",
    name: "Nombre",
    serial_number: "N√∫mero de Serie",
    gender: "Sexo",
    male: "Macho",
    female: "Hembra",
    birth_date: "Fecha de nacimiento",
    not_available: "No disponible",
    incorrect_date: "Fecha incorrecta",
    status: "Estado",
    exploitation: "Explotaci√≥n",
    stable: "Origen",
    not_assigned: "No asignada",
    father: "Padre",
    mother: "Madre",
    nursing_status: "Estado de amamantamiento",
    not_nursing: "No amamanta",
    nursing_one: "Amamanta a un ternero",
    nursing_two: "Amamanta a dos terneros",
    back_to_animal_list: "Volver al listado de animales",
    complete_info_tab: "Informaci√≥n Completa",
    birth_history_tab: "Historial de Partos",
    changes_history_tab: "Historial de Cambios",
    identification_data: "Datos de Identificaci√≥n",
    general_data: "Datos Generales",
    birth_history: "Historial de Partos",
    birth_registry: "Registro de todos los partos del animal",
    no_births: "Este animal no tiene partos registrados",
    date: "Fecha",
    gender_label: "G√©nero",
    observations: "Observaciones",
    changes_history: "Historial de Cambios",
    changes_registry: "Registro de cambios realizados al animal",
    no_changes: "No hay cambios registrados para este animal",
    changes_date: "Fecha",
    changes_user: "Usuario",
    changes_field: "Campo",
    changes_old_value: "Valor anterior",
    changes_new_value: "Valor nuevo"
  },
  ca: {
    title: "Fitxa d'Animal",
    back_to_list: "Tornar al llistat",
    animal_id: "ID Animal",
    loading: "Carregant dades de l'animal...",
    error_title: "Error",
    retry: "Reintentar",
    active: "Actiu",
    inactive: "Baixa",
    dead: "Mort",
    update: "Actualitzar",
    code: "Codi",
    name: "Nom",
    serial_number: "N√∫mero de S√®rie",
    gender: "Sexe",
    male: "Mascle",
    female: "Femella",
    birth_date: "Data de naixement",
    not_available: "No disponible",
    incorrect_date: "Data incorrecta",
    status: "Estat",
    exploitation: "Explotaci√≥",
    stable: "Origen",
    not_assigned: "No assignada",
    father: "Pare",
    mother: "Mare",
    nursing_status: "Estat d'alletament",
    not_nursing: "No alleta",
    nursing_one: "Alleta un vedell",
    nursing_two: "Alleta dos vedells",
    back_to_animal_list: "Tornar al llistat d'animals",
    complete_info_tab: "Informaci√≥ Completa",
    birth_history_tab: "Historial de Parts",
    changes_history_tab: "Historial de Canvis",
    identification_data: "Dades d'Identificaci√≥",
    general_data: "Dades Generals",
    birth_history: "Historial de Parts",
    birth_registry: "Registre de tots els parts de l'animal",
    no_births: "Aquest animal no t√© parts registrats",
    date: "Data",
    gender_label: "G√®nere",
    observations: "Observacions",
    changes_history: "Historial de Canvis",
    changes_registry: "Registre de canvis realitzats a l'animal",
    no_changes: "No hi ha canvis registrats per a aquest animal",
    changes_date: "Data",
    changes_user: "Usuari",
    changes_field: "Camp",
    changes_old_value: "Valor anterior",
    changes_new_value: "Valor nou"
  }
};

// Funci√≥n para obtener traducci√≥n seg√∫n idioma
function t(key) {
  return translations[serverLang as 'es' | 'ca']?.[key] || key;
}

// Definir t√≠tulo y rol de usuario
const title = t('title');
const userRole = "administrador"; // Simulaci√≥n de rol

// Variables para almacenar datos y estado
let animal = null;
let error = null;
let loading = true;

try {
  if (!id || isNaN(parseInt(id))) {
    throw new Error('ID de animal no v√°lido');
  }

  // Intentar cargar los datos del animal
  console.log(`Intentando cargar animal con ID: ${id}`);
  animal = await animalService.getAnimalById(parseInt(id));
  console.log('Animal cargado:', animal);
  
  if (!animal) {
    throw new Error('No se pudo encontrar el animal');
  }
  
  loading = false;
} catch (e) {
  console.error('Error al cargar datos del animal:', e);
  error = e.message || 'Error al cargar los datos del animal';
  loading = false;
}

// Variables para controlar pesta√±as
const showPartosTab = animal && animal.genere === 'F'; // Solo mostrar pesta√±a de partos para hembras

// Obtener el icono del animal 
// En lugar de usar emojis, utilizaremos rutas a im√°genes PNG
let iconPath = '/images/toro_sin_borde_2.png'; // Valor por defecto

if (animal) {
  if (animal.genere === 'M') {
    iconPath = '/images/toro_sin_borde_2.png';
  } else {
    iconPath = animal.alletar !== '0' ? '/images/vaca azul.png' : '/images/vaca blanca.png';
  }
}

// Mantenemos el icono emoji para compatibilidad con otras partes del c√≥digo
const icon = animal ? animalService.getAnimalIcon(animal) : 'üêÇ';

// Obtener la clase CSS para el estado del animal
const estadoClass = animal ? animalService.getAnimalStatusClass(animal.estado) : 'bg-gray-100 text-gray-800';

---

<MainLayout title={title} userRole={userRole} currentPath="/animals">
  <div class="mb-6">
    <div class="flex justify-center items-center gap-2 mb-2 mt-4">
      <a href="/animals" id="back-to-list-link" class="inline-flex items-center justify-center px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/80 transition-colors">
        <span class="mr-2">‚Üê</span> Volver al listado de animales
      </a>
    </div>
    <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">{title}</h1>
    <p class="text-gray-600 dark:text-gray-300" id="animal-id-text">{t('animal_id')}: {id}</p>
  </div>

  {loading && (
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-100 dark:border-gray-700 p-6 mb-6 flex justify-center items-center">
      <div class="flex items-center space-x-2">
        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
        <p>{t('loading')}</p>
      </div>
    </div>
  )}

  {error && (
    <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 mb-6">
      <div class="flex items-start">
        <div class="flex-shrink-0">
          ‚ö†Ô∏è
        </div>
        <div class="ml-3">
          <h3 class="text-lg font-medium text-red-800 dark:text-red-300">{t('error_title')}</h3>
          <div class="mt-2 text-red-700 dark:text-red-200">
            <p>{error}</p>
          </div>
          <div class="mt-4">
            <button 
              id="retry-button"
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            >
              ‚Üª {t('retry')}
            </button>
          </div>
        </div>
      </div>
    </div>
  )}

  {animal && (
    <>
      <!-- Elemento oculto con datos del animal para el script -->
      <div id="animal-data" class="hidden" 
        data-genere={animal.genere}
        data-tiene-partos={
          (animal.partos && animal.partos.items && animal.partos.items.length > 0) || 
          (animal.partos && Array.isArray(animal.partos) && animal.partos.length > 0) || 
          (animal.parts && Array.isArray(animal.parts) && animal.parts.length > 0) ? 'true' : 'false'
        }
      ></div>
      <!-- Resumen del animal -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-100 dark:border-gray-700 p-6 mb-6">
        <div class="flex flex-col md:flex-row gap-6">
          <!-- Icono y estado -->
          <div class="flex flex-col items-center md:items-start">
            <!-- Usamos imagen en lugar de emoji para mejor visualizaci√≥n -->
            <div class="mb-3">
              <img src={iconPath} alt="Icono Animal" class="w-24 h-24 object-contain" />
            </div>
            {animal.estado === 'DEF' && (
              <span class="px-3 py-1 rounded-full bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200 text-sm font-medium">
                Baja
              </span>
            )}
          </div>
          
          <!-- Informaci√≥n b√°sica -->
          <div class="flex-grow">
            <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">{animal.nom}</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <p class="text-sm text-gray-500 dark:text-gray-400">{t('code')}</p>
                <p class="font-medium">{animal.cod || t('not_available')}</p>
              </div>
              <div>
                <p class="text-sm text-gray-500 dark:text-gray-400">{t('gender')}</p>
                <p class="font-medium">{animal.genere === 'M' ? t('male') : t('female')}</p>
              </div>
              <div>
                <p class="text-sm text-gray-500 dark:text-gray-400">{t('birth_date')}</p>
                <p class="font-medium">
                  {animal.dob ? 
                    (() => {
                      try {
                        // Primero verificar si ya viene en formato espa√±ol DD/MM/YYYY
                        if (typeof animal.dob === 'string' && new RegExp('^\\d{1,2}[/\\-]\\d{1,2}[/\\-]\\d{4}$').test(animal.dob)) {
                          // Interpretar como DD/MM/YYYY (formato espa√±ol)
                          const partes = animal.dob.split(/[\/\-]/);
                          if (partes.length === 3) {
                            // Asegurar que se interprete como d√≠a/mes/a√±o
                            const fecha = new Date(parseInt(partes[2]), parseInt(partes[1])-1, parseInt(partes[0]));
                            if (!isNaN(fecha.getTime())) {
                              return `${partes[0].padStart(2, '0')}/${partes[1].padStart(2, '0')}/${partes[2]}`;
                            }
                          }
                          // Si no pudimos procesar pero tiene el formato adecuado, lo mostramos como est√°
                          return animal.dob;
                        }
                        
                        // Intentar procesar otros formatos de fecha
                        const fecha = new Date(animal.dob);
                        if (!isNaN(fecha.getTime())) {
                          return fecha.toLocaleDateString('es-ES', {day: '2-digit', month: '2-digit', year: 'numeric'});
                        }
                        
                        return String(animal.dob);
                      } catch (e) {
                        return t('incorrect_date');
                      }
                    })() 
                    : t('not_available')
                  }
                </p>
              </div>
              <div>
                <p class="text-sm text-gray-500 dark:text-gray-400">{t('exploitation')}</p>
                <p class="font-medium">{animal.explotacio || t('not_available')}</p>
              </div>
              <div>
                <p class="text-sm text-gray-500 dark:text-gray-400">{t('stable')}</p>
                <p class="font-medium">{animal.origen || t('not_assigned')}</p>
              </div>
              {animal.genere === 'F' && (
                <div>
                  <p class="text-sm text-gray-500 dark:text-gray-400">{t('nursing_status')}</p>
                  <p class="font-medium">
                    {animal.alletar === '0' ? t('not_nursing') : 
                     animal.alletar === '1' ? t('nursing_one') : 
                     animal.alletar === '2' ? t('nursing_two') : t('not_available')}
                  </p>
                </div>
              )}
            </div>
          </div>
          
          <!-- Acciones -->
          <div class="flex flex-col gap-2">
            <a href={`/animals/update/${id}`} class="flex items-center justify-center px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/80 transition-colors">
              ‚Üª Actualizar
            </a>
          </div>
        </div>
      </div>

      <!-- Pesta√±as de informaci√≥n detallada -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-100 dark:border-gray-700 overflow-hidden">
        <!-- Pesta√±as de navegaci√≥n -->
        <div class="flex border-b border-gray-200 dark:border-gray-700">
          <button id="tab-info" class="px-6 py-3 text-primary border-b-2 border-primary font-medium">
            {t('complete_info_tab')}
          </button>
          {showPartosTab && (
            <button id="tab-partos" class="px-6 py-3 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300">
              {t('birth_history_tab')}
            </button>
          )}
          <button id="tab-changes" class="px-6 py-3 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300">
            {t('changes_history_tab')}
          </button>
        </div>

        <!-- Contenido de pesta√±as -->
        <div class="p-6">
          <!-- Pesta√±a 1: Informaci√≥n Completa -->
          <div id="content-info">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">{t('identification_data')}</h3>
                <div class="space-y-3">
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">{t('code')}</p>
                    <p class="font-medium">{animal.cod || t('not_available')}</p>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">{t('name')}</p>
                    <p class="font-medium">{animal.nom}</p>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">{t('serial_number')}</p>
                    <p class="font-medium">{animal.num_serie || t('not_available')}</p>
                  </div>
                </div>
              </div>
              
              <div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">{t('general_data')}</h3>
                <div class="space-y-3">
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">{t('gender')}</p>
                    <p class="font-medium">{animal.genere === 'M' ? t('male') : t('female')}</p>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">{t('birth_date')}</p>
                    <p class="font-medium">
                      {animal.dob ? 
                        (() => {
                          try {
                            // Primero verificar si ya viene en formato espa√±ol DD/MM/YYYY
                            if (typeof animal.dob === 'string' && new RegExp('^\\d{1,2}[\/\\-]\\d{1,2}[\/\\-]\\d{4}$').test(animal.dob)) {
                              // Interpretar como DD/MM/YYYY (formato espa√±ol)
                              const partes = animal.dob.split(/[\/\-]/);
                              if (partes.length === 3) {
                                // Asegurar que se interprete como d√≠a/mes/a√±o
                                const fecha = new Date(parseInt(partes[2]), parseInt(partes[1])-1, parseInt(partes[0]));
                                if (!isNaN(fecha.getTime())) {
                                  return `${partes[0].padStart(2, '0')}/${partes[1].padStart(2, '0')}/${partes[2]}`;
                                }
                              }
                              // Si no pudimos procesar pero tiene el formato adecuado, lo mostramos como est√°
                              return animal.dob;
                            }
                            
                            // Intentar procesar otros formatos de fecha
                            const fecha = new Date(animal.dob);
                            if (!isNaN(fecha.getTime())) {
                              return fecha.toLocaleDateString('es-ES', {day: '2-digit', month: '2-digit', year: 'numeric'});
                            }
                            
                            return String(animal.dob);
                          } catch (e) {
                            return t('incorrect_date');
                          }
                        })() 
                        : t('not_available')
                      }
                    </p>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">{t('status')}</p>
                    <p class="font-medium">{animal.estado === 'OK' ? t('active') : t('dead')}</p>
                  </div>
                </div>
              </div>
              
              <div>
                <!-- Eliminado encabezado de Ubicaci√≥n -->
                <div class="space-y-3">
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">{t('exploitation')}</p>
                    <p class="font-medium">{animal.explotacio || t('not_available')}</p>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">{t('stable')}</p>
                    <p class="font-medium">{animal.origen || t('not_assigned')}</p>
                  </div>
                </div>
              </div>
              
              <div>
                <!-- Eliminado encabezado de Parentesco -->
                <div class="space-y-3">
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">{t('father')}</p>
                    <p class="font-medium">{animal.pare || t('not_available')}</p>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">{t('mother')}</p>
                    <p class="font-medium">{animal.mare || t('not_available')}</p>
                  </div>
                  {animal.genere === 'F' && (
                    <div>
                      <p class="text-sm text-gray-500 dark:text-gray-400">{t('nursing_status')}</p>
                      <p class="font-medium">
                        {animal.alletar === '0' ? t('not_nursing') : 
                         animal.alletar === '1' ? t('nursing_one') : 
                         animal.alletar === '2' ? t('nursing_two') : t('not_available')}
                      </p>
                    </div>
                  )}
                </div>
              </div>
              
              <!-- Secci√≥n de Observaciones -->
              <div class="md:col-span-2 mt-4">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">{t('observations')}</h3>
                <div class="p-4 bg-gray-50 dark:bg-gray-700 rounded-md">
                  {animal.observaciones ? (
                    <p class="text-gray-800 dark:text-gray-200 whitespace-pre-wrap">{animal.observaciones}</p>
                  ) : (
                    <p class="text-gray-500 dark:text-gray-400 italic">{t('no_observations')}</p>
                  )}
                </div>
              </div>
              
            </div>
            
            <!-- Barra de ancho completo para los botones al final de la pesta√±a Informaci√≥n Completa -->
            <div class="w-full col-span-1 md:col-span-2 mt-10 py-4 border-t border-gray-100 dark:border-gray-700">
              <div class="container mx-auto px-4 flex justify-between items-center">
                <!-- Bot√≥n Volver al centro -->
                <div class="flex-1 text-center">
                  <a href="/animals" class="inline-flex items-center justify-center px-5 py-2.5 bg-lime-500 text-white rounded-md hover:bg-lime-600 transition-colors shadow-md">
                    <span class="mr-2">‚Üê</span> Volver al listado de animales
                  </a>
                </div>
                
                <!-- Bot√≥n Exportar PDF a la derecha -->
                <div class="flex-none">
                  <button id="export-animal-pdf" class="inline-flex items-center justify-center px-5 py-2.5 bg-lime-500 text-white rounded-md hover:bg-lime-600 transition-colors shadow-md">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                    Exportar PDF
                  </button>
                </div>
              </div>
            </div>
              
            </div>
          </div>
          
          <!-- Eliminados los botones de la parte superior -->

          <!-- Pesta√±a 2: Historial de Partos (oculta por defecto) -->
          <div id="content-partos" class="hidden">
            <div class="mb-4">
              <h3 class="text-lg font-medium text-gray-900 dark:text-white">{t('birth_history')}</h3>
              <p class="text-gray-500 dark:text-gray-400">{t('birth_registry')}</p>
            </div>
            {showPartosTab && (
              
              <div class="overflow-x-auto">
                <table id="tabla-partos" class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                  <thead class="bg-gray-50 dark:bg-gray-700">
                    <tr>
                      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer" id="sort-fecha">
                        {t('date')} <span class="ml-1 sort-indicator">‚Üë</span>
                      </th>
                      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer" id="sort-genero">{t('gender_label')}</th>
                      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider cursor-pointer" id="sort-estado">{t('status')}</th>
                      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">{t('observations')}</th>
                    </tr>
                  </thead>
                  <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                    {animal && (() => {
                      // Manejar diferentes estructuras posibles de partos
                      let partosArray = [];
                      
                      if (animal.partos && animal.partos.items && animal.partos.items.length > 0) {
                        // Estructura esperada: animal.partos.items[]
                        partosArray = animal.partos.items;
                      } else if (animal.partos && Array.isArray(animal.partos) && animal.partos.length > 0) {
                        // Estructura alternativa: animal.partos[]
                        partosArray = animal.partos;
                      } else if (animal.parts && Array.isArray(animal.parts) && animal.parts.length > 0) {
                        // Estructura antigua: animal.parts[]
                        partosArray = animal.parts;
                      }
                      
                      if (partosArray.length > 0) {
                        // Ordenar partos por fecha (de m√°s antiguo a m√°s reciente por defecto)
                        partosArray.sort((a, b) => {
                          const fechaA = a.part ? new Date(a.part) : new Date(0);
                          const fechaB = b.part ? new Date(b.part) : new Date(0);
                          return fechaA - fechaB; // Orden ascendente (m√°s antiguo primero)
                        });
                        
                        return partosArray.map((parto) => (
                          <tr data-id={parto.id}>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                              {parto.part ? 
                                (() => {
                                  try {
                                    if (typeof parto.part === 'string') {
                                      // Primero verificar si ya viene en formato espa√±ol DD/MM/YYYY
                                      if (new RegExp('^\\d{1,2}[/\\-]\\d{1,2}[/\\-]\\d{4}$').test(parto.part)) {
                                        // Interpretar como DD/MM/YYYY (formato espa√±ol)
                                        const partes = parto.part.split(/[\/\-]/);
                                        if (partes.length === 3) {
                                          // Asegurar que se interprete como d√≠a/mes/a√±o
                                          const fecha = new Date(parseInt(partes[2]), parseInt(partes[1])-1, parseInt(partes[0]));
                                          if (!isNaN(fecha.getTime())) {
                                            return `${partes[0].padStart(2, '0')}/${partes[1].padStart(2, '0')}/${partes[2]}`;
                                          }
                                        }
                                        // Si no pudimos procesar pero tiene el formato adecuado, lo mostramos como est√°
                                        return parto.part;
                                      } else {
                                        // Intentar procesar otros formatos de fecha
                                        const fecha = new Date(parto.part);
                                        if (!isNaN(fecha.getTime())) {
                                          return fecha.toLocaleDateString('es-ES', {day: '2-digit', month: '2-digit', year: 'numeric'});
                                        }
                                      }
                                    }
                                    return String(parto.part);
                                  } catch (e) {
                                    return 'Fecha incorrecta';
                                  }
                                })() 
                                : 'N/A'
                              }
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                              {parto.GenereT === 'M' ? txtMacho : 
                               parto.GenereT === 'F' ? txtHembra : 
                               parto.GenereT === 'esforrada' ? 'Esforr√°' : txtNoDisponible}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                              <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                                parto.EstadoT === 'OK' ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100' : 
                                'bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100'
                              }`}>
                                {parto.EstadoT === 'OK' ? txtVivo : txtMuerto}
                              </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                              {parto.observacions || parto.observaciones || parto.obs || txtObservaciones}
                            </td>
                          </tr>
                        ));
                      } else {
                        return (
                          <tr>
                            <td colspan="4" class="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
                              No hay registros de partos para este animal
                            </td>
                          </tr>
                        );
                      }
                    })()}
                  </tbody>
                </table>
              </div>
            )}
            <div class="p-6 text-center text-gray-500 dark:text-gray-400">
              {!showPartosTab && (
                <p>{t('no_births')}</p>
              )}
              
              <!-- Barra de ancho completo para los botones al final de la pesta√±a Partos -->
              <div class="w-full mt-6 py-4 border-t border-gray-100 dark:border-gray-700">
                <div class="container mx-auto px-4 flex justify-between items-center">
                  <!-- Bot√≥n Volver al centro -->
                  <div class="flex-1 text-center">
                    <a href="/animals" class="inline-flex items-center justify-center px-5 py-2.5 bg-lime-500 text-white rounded-md hover:bg-lime-600 transition-colors shadow-md">
                      <span class="mr-2">‚Üê</span> Volver al listado de animales
                    </a>
                  </div>
                  
                  <!-- Bot√≥n Exportar PDF a la derecha -->
                  <div class="flex-none">
                    <button id="export-partos-pdf" class="inline-flex items-center justify-center px-5 py-2.5 bg-lime-500 text-white rounded-md hover:bg-lime-600 transition-colors shadow-md">
                      <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                      </svg>
                      Exportar PDF
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Pesta√±a 3: Historial de Cambios (oculta por defecto) -->
          <div id="content-changes" class="hidden">
            <div class="mb-4">
              <h3 class="text-lg font-medium text-gray-900 dark:text-white">{t('changes_history')}</h3>
              <p class="text-gray-500 dark:text-gray-400">{t('changes_registry')}</p>
            </div>
            <div class="p-6 text-center text-gray-500 dark:text-gray-400">
              <p>{t('no_changes')}</p>
            </div>
            
            <!-- Barra de ancho completo para los botones al final de la pesta√±a Historial de Cambios -->
            <div class="w-full mt-6 py-4 border-t border-gray-100 dark:border-gray-700">
              <div class="container mx-auto px-4 flex justify-between items-center">
                <!-- Bot√≥n Volver al centro -->
                <div class="flex-1 text-center">
                  <a href="/animals" class="inline-flex items-center justify-center px-5 py-2.5 bg-lime-500 text-white rounded-md hover:bg-lime-600 transition-colors shadow-md">
                    <span class="mr-2">‚Üê</span> Volver al listado de animales
                  </a>
                </div>
                
                <!-- Bot√≥n Exportar PDF a la derecha -->
                <div class="flex-none">
                  <button id="export-changes-pdf" class="inline-flex items-center justify-center px-5 py-2.5 bg-lime-500 text-white rounded-md hover:bg-lime-600 transition-colors shadow-md">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                    Exportar PDF
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Bot√≥n flotante para volver al listado -->
      <div class="fixed bottom-6 right-6 z-10">
        <a href="/animals" class="flex items-center justify-center w-12 h-12 rounded-full bg-primary text-white shadow-lg hover:bg-primary/80 transition-colors">
          <span class="text-xl">‚Üê</span>
        </a>
      </div>
      

    </>
  )}
</MainLayout>

<!-- Importaciones para PDF (misma estructura que en ExplotacionesPage.tsx) -->
<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>

<!-- Script para bloquear el bot√≥n de eliminar animales para editores -->
<script is:inline src="/scripts/block-delete-button.js"></script>
<script is:inline>
  // Aseguramos que autoTable est√© disponible globalmente
  window.jsPDF = window.jspdf.jsPDF;
  window.autoTable = function() {
    const doc = arguments[0];
    if (typeof doc.autoTable === 'function') {
      doc.autoTable.apply(doc, Array.prototype.slice.call(arguments, 1));
    } else if (window.jspdf && window.jspdf.jspdf && typeof window.jspdf.jspdf.autoTable === 'function') {
      window.jspdf.jspdf.autoTable.apply(doc, Array.prototype.slice.call(arguments, 1));
    } else {
      console.error('autoTable function not found');
    }
  };
</script>

<script>
  // Script para manejar interacciones de la p√°gina y traducciones
  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM completamente cargado y analizado');
    
    // Configurar botones de exportar PDF para todas las pesta√±as
    const exportPdfBtn = document.getElementById('export-animal-pdf');
    const exportPartosPdfBtn = document.getElementById('export-partos-pdf');
    const exportChangesPdfBtn = document.getElementById('export-changes-pdf');
    
    if (exportPdfBtn) {
      exportPdfBtn.addEventListener('click', exportAnimalToPDF);
    }
    
    if (exportPartosPdfBtn) {
      exportPartosPdfBtn.addEventListener('click', exportAnimalToPDF);
    }
    
    if (exportChangesPdfBtn) {
      exportChangesPdfBtn.addEventListener('click', exportAnimalToPDF);
    }
    
    // Funci√≥n para exportar ficha del animal a PDF - estructura id√©ntica a ExplotacionesPage.tsx
    function exportAnimalToPDF() {
      try {
        // Obtener los datos del animal
        const animalName = document.querySelector('h2.text-2xl').textContent;
        const animalId = document.getElementById('animal-id-text').textContent.split(':')[1].trim();
        const currentLang = localStorage.getItem('userLanguage') || 'es';
        
        // Crear el documento PDF - igual que en ExplotacionesPage.tsx
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();
        
        // Configurar t√≠tulo del documento
        const title = currentLang === 'ca' ? `Fitxa d'Animal - ${animalName}` : `Ficha de Animal - ${animalName}`;
        
        // A√±adir fecha en la esquina superior derecha
        doc.setFontSize(10);
        doc.setTextColor(100, 100, 100);
        const date = new Date().toLocaleDateString(currentLang === 'ca' ? 'ca-ES' : 'es-ES');
        doc.text(
          currentLang === 'ca' ? `Data: ${date}` : `Fecha: ${date}`, 
          195, 15, { align: 'right' }
        );
        
        // Definimos la posici√≥n inicial para el resumen (usada en todo el documento)
        const logoY = 10; // Valor predeterminado por si falla la carga del logo
        const logoHeight = 35; // Valor predeterminado por si falla la carga del logo
        let contentStartY = logoY + logoHeight + 20; // Posici√≥n inicial del contenido
        
        // A√±adir logo oficial de Masclet Imperi
        try {
          // Intentamos cargar el logo oficial desde una imagen base64
          // La ruta es relativa a la ubicaci√≥n desde donde se sirve la aplicaci√≥n
          const logoUrl = '/images/logo_masclet.png';
          
          // Tama√±o y posicionamiento del logo (centrado arriba)
          const logoWidth = 45;
          const logoHeight = 35;
          const pageWidth = doc.internal.pageSize.getWidth();
          const logoX = (pageWidth / 2) - (logoWidth / 2); // Centrado horizontalmente
          
          // A√±adir la imagen al PDF
          doc.addImage(logoUrl, 'PNG', logoX, logoY, logoWidth, logoHeight);
          
          // A√±adir el t√≠tulo debajo del logo
          doc.setFontSize(20);
          doc.setTextColor(40, 40, 40);
          doc.text(title, pageWidth / 2, logoY + logoHeight + 10, { align: 'center' });
          
          // Actualizamos la posici√≥n inicial del contenido con los valores reales del logo
          contentStartY = logoY + logoHeight + 25;
        } catch (error) {
          console.error('Error al cargar el logo:', error);
          
          // Si hay error, usamos un t√≠tulo simple centrado sin logo
          const pageWidth = doc.internal.pageSize.getWidth();
          doc.setFontSize(20);
          doc.setTextColor(40, 40, 40);
          doc.text(title, pageWidth / 2, 30, { align: 'center' });
          
          // Ajustamos la posici√≥n inicial del contenido sin logo
          contentStartY = 45;
        }
        
        // A√±adir datos b√°sicos del animal
        doc.setFontSize(14);
        doc.setTextColor(50, 50, 50);
        doc.text(currentLang === 'ca' ? 'Dades de l\'animal:' : 'Datos del animal:', 20, contentStartY);
        
        // Recopilar datos del animal
        const datos = [];
        document.querySelectorAll('#content-info .space-y-3').forEach(section => {
          section.querySelectorAll('div').forEach(item => {
            const label = item.querySelector('p.text-sm')?.textContent;
            const value = item.querySelector('p.font-medium')?.textContent;
            if (label && value) {
              datos.push([label, value]);
            }
          });
        });
        
        // A√±adir tabla con datos del animal - usando autoTable como en ExplotacionesPage
        window.autoTable(doc, {
          startY: contentStartY + 10,
          head: [[currentLang === 'ca' ? 'Camp' : 'Campo', currentLang === 'ca' ? 'Valor' : 'Valor']],
          body: datos,
          theme: 'grid',
          styles: { 
            fontSize: 9, 
            cellPadding: 2,
            lineWidth: 0.1,
            lineColor: [200, 200, 200],
            minCellHeight: 8,
            valign: 'middle'
          },
          headStyles: { 
            fillColor: [126, 211, 33], // Color verde lima corporativo
            textColor: 255,
            fontStyle: 'bold',
            minCellHeight: 10
          },
          alternateRowStyles: {
            fillColor: [245, 245, 245]
          },
          columnStyles: {
            0: { cellWidth: 40, halign: 'left' }, // Columna de "Campo" m√°s estrecha
            1: { cellWidth: 'auto', halign: 'left' } // Columna de "Valor" usa el resto del espacio
          }
        });
        
        // Verificar si es una vaca (g√©nero F) para a√±adir tabla de partos
        const generoAnimal = datos.find(d => d[0].includes('Sexo') || d[0].includes('G√©nero'));
        const esVaca = generoAnimal && (generoAnimal[1] === 'Hembra' || generoAnimal[1] === 'Femella' || generoAnimal[1] === 'F');
        
        // Posici√≥n para el siguiente elemento (observaciones o tabla de partos)
        let nextY = doc.previousAutoTable.finalY + 15;
        
        // Si es una vaca, verificamos si tiene partos y a√±adimos la tabla
        if (esVaca) {
          // Obtener los datos de partos
          const partosRows = [];
          const partosContainer = document.querySelector('#content-partos table tbody');
          
          if (partosContainer) {
            const partosFilas = partosContainer.querySelectorAll('tr');
            let hayPartos = false;
            
            partosFilas.forEach(fila => {
              // Verificar si es una fila de datos (no de mensaje "no hay partos")
              const celdas = fila.querySelectorAll('td');
              if (celdas.length >= 3 && !fila.textContent.includes('No hay registros')) {
                hayPartos = true;
                // Extraer informaci√≥n de las celdas: fecha, g√©nero, estado, observaciones
                const fecha = celdas[0]?.textContent?.trim() || 'N/A';
                const genero = celdas[1]?.textContent?.trim() || 'N/A';
                const estado = celdas[2]?.querySelector('span')?.textContent?.trim() || 'N/A';
                const obs = celdas[3]?.textContent?.trim() || 'N/A';
                
                // A√±adir a los datos de la tabla
                partosRows.push([fecha, genero, estado, obs]);
              }
            });
            
            // Si hay partos, a√±adir la tabla
            if (hayPartos && partosRows.length > 0) {
              // T√≠tulo de la secci√≥n de partos
              doc.setFontSize(14);
              doc.setTextColor(50, 50, 50);
              doc.text(currentLang === 'ca' ? 'Historial de Parts:' : 'Historial de Partos:', 20, nextY);
              
              // Cabecera de la tabla de partos
              const partosHead = [
                currentLang === 'ca' ? 'Data' : 'Fecha', 
                currentLang === 'ca' ? 'G√®nere' : 'G√©nero', 
                currentLang === 'ca' ? 'Estat' : 'Estado', 
                currentLang === 'ca' ? 'Observacions' : 'Observaciones'
              ];
              
              // A√±adir tabla de partos
              window.autoTable(doc, {
                startY: nextY + 5,
                head: [partosHead],
                body: partosRows,
                theme: 'grid',
                styles: { 
                  fontSize: 8, 
                  cellPadding: 2,
                  lineWidth: 0.1,
                  lineColor: [200, 200, 200],
                  minCellHeight: 6,
                  valign: 'middle'
                },
                headStyles: { 
                  fillColor: [126, 211, 33], // Color verde lima corporativo
                  textColor: 255,
                  fontStyle: 'bold',
                  minCellHeight: 8
                },
                alternateRowStyles: {
                  fillColor: [245, 245, 245]
                },
                columnStyles: {
                  0: { cellWidth: 25, halign: 'center' }, // Fecha
                  1: { cellWidth: 30, halign: 'center' }, // G√©nero
                  2: { cellWidth: 25, halign: 'center' }, // Estado
                  3: { cellWidth: 'auto', halign: 'left' } // Observaciones
                }
              });
              
              // Actualizar la posici√≥n para las observaciones
              nextY = doc.previousAutoTable.finalY + 15;
            }
          }
        }
        
        // A√±adir observaciones si existen
        const observaciones = document.querySelector('.p-4.bg-gray-50 p')?.textContent;
        
        if (observaciones && observaciones !== (currentLang === 'ca' ? 'No hi ha observacions' : 'No hay observaciones')) {
          doc.setFontSize(14);
          doc.setTextColor(50, 50, 50);
          doc.text(currentLang === 'ca' ? 'Observacions:' : 'Observaciones:', 20, nextY);
          
          doc.setFontSize(10);
          doc.setTextColor(80, 80, 80);
          const observacionesText = doc.splitTextToSize(observaciones, 170);
          doc.text(observacionesText, 20, nextY + 10);
        }
        
        // Pie de p√°gina
        const pageCount = doc.internal.getNumberOfPages();
        for(let i = 1; i <= pageCount; i++) {
          doc.setPage(i);
          doc.setFontSize(8);
          doc.setTextColor(100, 100, 100);
          doc.text('Masclet Imperi - Sistema de Gesti√≥n Ganadera', 105, doc.internal.pageSize.height - 10, { align: 'center' });
          doc.text(`P√°gina ${i} de ${pageCount}`, 195, doc.internal.pageSize.height - 10, { align: 'right' });
        }
        
        // Guardar el PDF
        doc.save(`${animalName}_ficha_${date.replace(/\//g, '')}.pdf`);
        
      } catch (error) {
        console.error('Error al generar PDF:', error);
        alert(localStorage.getItem('userLanguage') === 'ca' ? 'Error en generar el PDF' : 'Error al generar el PDF');
      }
    }
    
    // Traducciones del lado del cliente
    const translations = {
      es: {
        title: "Ficha de Animal",
        back_to_list: "Volver al listado",
        animal_id: "ID Animal",
        loading: "Cargando datos del animal...",
        error_title: "Error",
        retry: "Reintentar",
        active: "Activo",
        inactive: "Baja",
        dead: "Fallecido",
        update: "Actualizar",
        code: "C√≥digo",
        name: "Nombre",
        serial_number: "N√∫mero de Serie",
        gender: "Sexo",
        male: "Macho",
        female: "Hembra",
        birth_date: "Fecha de nacimiento",
        not_available: "No disponible",
        incorrect_date: "Fecha incorrecta",
        status: "Estado",
        exploitation: "Explotaci√≥n",
        stable: "Origen",
        not_assigned: "No asignada",
        father: "Padre",
        mother: "Madre",
        nursing_status: "Estado de amamantamiento",
        not_nursing: "No amamanta",
        nursing_one: "Amamanta a un ternero",
        nursing_two: "Amamanta a dos terneros",
        back_to_animal_list: "Volver al listado de animales",
        complete_info_tab: "Informaci√≥n Completa",
        birth_history_tab: "Historial de Partos",
        changes_history_tab: "Historial de Cambios",
        identification_data: "Datos de Identificaci√≥n",
        general_data: "Datos Generales",
        birth_history: "Historial de Partos",
        birth_registry: "Registro de todos los partos del animal",
        no_births: "Este animal no tiene partos registrados",
        date: "Fecha",
        gender_label: "G√©nero",
        observations: "Observaciones",
        changes_history: "Historial de Cambios",
        changes_registry: "Registro de cambios realizados al animal",
        no_changes: "No hay cambios registrados para este animal",
        changes_date: "Fecha",
        changes_user: "Usuario",
        changes_field: "Campo",
        changes_old_value: "Valor anterior",
        changes_new_value: "Valor nuevo"
      },
      ca: {
        title: "Fitxa d'Animal",
        back_to_list: "Tornar al llistat",
        animal_id: "ID Animal",
        loading: "Carregant dades de l'animal...",
        error_title: "Error",
        retry: "Reintentar",
        active: "Actiu",
        inactive: "Baixa",
        dead: "Mort",
        update: "Actualitzar",
        code: "Codi",
        name: "Nom",
        serial_number: "N√∫mero de S√®rie",
        gender: "Sexe",
        male: "Mascle",
        female: "Femella",
        birth_date: "Data de naixement",
        not_available: "No disponible",
        incorrect_date: "Data incorrecta",
        status: "Estat",
        exploitation: "Explotaci√≥",
        stable: "Origen",
        not_assigned: "No assignada",
        father: "Pare",
        mother: "Mare",
        nursing_status: "Estat d'alletament",
        not_nursing: "No alleta",
        nursing_one: "Alleta un vedell",
        nursing_two: "Alleta dos vedells",
        back_to_animal_list: "Tornar al llistat d'animals",
        complete_info_tab: "Informaci√≥ Completa",
        birth_history_tab: "Historial de Parts",
        changes_history_tab: "Historial de Canvis",
        identification_data: "Dades d'Identificaci√≥",
        general_data: "Dades Generals",
        birth_history: "Historial de Parts",
        birth_registry: "Registre de tots els parts de l'animal",
        no_births: "Aquest animal no t√© parts registrats",
        date: "Data",
        gender_label: "G√®nere",
        observations: "Observacions",
        changes_history: "Historial de Canvis",
        changes_registry: "Registre de canvis realitzats a l'animal",
        no_changes: "No hi ha canvis registrats per a aquest animal",
        changes_date: "Data",
        changes_user: "Usuari",
        changes_field: "Camp",
        changes_old_value: "Valor anterior",
        changes_new_value: "Valor nou"
      }
    };

    // Funci√≥n para obtener traducci√≥n
    function t(key, lang) {
      return translations[lang]?.[key] || key;
    }

    // Funci√≥n para traducir la ficha de animal
    function translateAnimalFile() {
      const currentLang = localStorage.getItem('userLanguage') || 'es';
      
      // Traducir t√≠tulo y encabezados principales
      document.querySelector('h1.text-3xl').textContent = t('title', currentLang);
      
      // Mantener el texto completo "Volver al listado de animales" en el bot√≥n superior
      // Comentamos esta parte para que no sobrescriba el texto que ya establecimos
      /* 
      const backLink = document.getElementById('back-to-list-link');
      if (backLink) {
        backLink.innerHTML = `<span class="mr-1">‚Üê</span> ${t('back_to_list', currentLang)}`;
      }
      */
      
      // Corregir problema de ID duplicado
      const idElement = document.getElementById('animal-id-text');
      if (idElement) {
        // Obtener el ID de animal (desde la URL)
        const animalIdFromUrl = window.location.pathname.split('/').pop();
        // Actualizar el texto con el formato e ID correcto
        idElement.textContent = `${t('animal_id', currentLang)}: ${animalIdFromUrl}`;
      }
      
      // Traducir elementos b√°sicos
      const elements = [
        { selector: '.text-gray-600.dark\\:text-gray-300', key: 'animal_id', prefix: true },
        { selector: '.animate-spin + p', key: 'loading', prefix: false },
        { selector: '.text-lg.font-medium.text-red-800', key: 'error_title', prefix: false },
        { selector: '#retry-button', key: 'retry', prefix: true },
        { selector: 'a[href^="/animals/update"]', key: 'update', prefix: true },
      ];
      
      elements.forEach(el => {
        const element = document.querySelector(el.selector);
        if (element) {
          if (el.prefix) {
            // Si tiene un prefijo (como un √≠cono), preservarlo
            const text = element.innerHTML;
            const iconPrefix = text.match(/.*?[^\w\s]/); // Captura todo hasta el primer no alfanum√©rico
            if (iconPrefix) {
              element.innerHTML = iconPrefix[0] + ' ' + t(el.key, currentLang);
            } else {
              element.textContent = t(el.key, currentLang);
            }
          } else {
            element.textContent = t(el.key, currentLang);
          }
        }
      });

      // Traducir estado del animal
      const estadoElement = document.querySelector('.px-3.py-1.rounded-full');
      if (estadoElement) {
        // Determinar si est√° activo o inactivo basado en la clase CSS
        const isActive = estadoElement.classList.contains('bg-green-100') || 
                         estadoElement.classList.contains('text-green-800');
        estadoElement.textContent = isActive ? t('active', currentLang) : t('inactive', currentLang);
      }
      
      // Traducir informaci√≥n del animal (resumen y detalle)
      document.querySelectorAll('.text-sm.text-gray-500').forEach(label => {
        const labelText = label.textContent.trim();
        
        // Mapear etiquetas a claves de traducci√≥n
        let translationKey = '';
        if (labelText.includes('C√≥digo') || labelText.includes('Codi')) translationKey = 'code';
        else if (labelText.includes('Nombre') || labelText.includes('Nom')) translationKey = 'name';
        else if (labelText.includes('N√∫mero de Serie') || labelText.includes('N√∫mero de S√®rie')) translationKey = 'serial_number';
        else if (labelText.includes('Sexo') || labelText.includes('Sexe')) translationKey = 'gender';
        else if (labelText.includes('Fecha de nacimiento') || labelText.includes('Data de naixement')) translationKey = 'birth_date';
        else if (labelText.includes('Estado') || labelText.includes('Estat')) translationKey = 'status';
        else if (labelText.includes('Explotaci√≥n') || labelText.includes('Explotaci√≥')) translationKey = 'exploitation';
        else if (labelText.includes('Origen') || labelText.includes('Origen')) translationKey = 'stable';
        else if (labelText.includes('Padre') || labelText.includes('Pare')) translationKey = 'father';
        else if (labelText.includes('Madre') || labelText.includes('Mare')) translationKey = 'mother';
        else if (labelText.includes('amamantamiento') || labelText.includes('alletament')) translationKey = 'nursing_status';
        
        if (translationKey) {
          label.textContent = t(translationKey, currentLang);
        }
      });
      
      // Traducir pesta√±as de navegaci√≥n
      document.querySelectorAll('button[id^="tab-"]').forEach(tab => {
        if (tab.id === 'tab-info') {
          tab.textContent = t('complete_info_tab', currentLang);
        } else if (tab.id === 'tab-partos') {
          tab.textContent = t('birth_history_tab', currentLang);
        } else if (tab.id === 'tab-changes') {
          tab.textContent = t('changes_history_tab', currentLang);
        }
      });
      
      // Traducir encabezados de secciones
      document.querySelectorAll('h3.text-lg.font-medium').forEach(header => {
        const headerText = header.textContent.trim();
        
        let translationKey = '';
        if (headerText.includes('Datos de Identificaci√≥n') || headerText.includes('Dades d\'Identificaci√≥')) {
          translationKey = 'identification_data';
        } else if (headerText.includes('Datos Generales') || headerText.includes('Dades Generals')) {
          translationKey = 'general_data';
        } else if (headerText.includes('Historial de Partos') || headerText.includes('Historial de Parts')) {
          translationKey = 'birth_history';
        } else if (headerText.includes('Historial de Cambios') || headerText.includes('Historial de Canvis')) {
          translationKey = 'changes_history';
        }
        
        if (translationKey) {
          header.textContent = t(translationKey, currentLang);
        }
      });
      
      // Traducir descripciones de secciones
      document.querySelectorAll('.mb-4 p.text-gray-500, .p-6.text-center p').forEach(desc => {
        const descText = desc.textContent.trim();
        
        let translationKey = '';
        if (descText.includes('Registro de todos los partos') || descText.includes('Registre de tots els parts')) {
          translationKey = 'birth_registry';
        } else if (descText.includes('No tiene partos registrados') || descText.includes('no t√© parts registrats')) {
          translationKey = 'no_births';
        } else if (descText.includes('Registro de cambios') || descText.includes('Registre de canvis')) {
          translationKey = 'changes_registry';
        } else if (descText.includes('No hay cambios registrados') || descText.includes('No hi ha canvis registrats')) {
          translationKey = 'no_changes';
        }
        
        if (translationKey) {
          desc.textContent = t(translationKey, currentLang);
        }
      });
      
      // Traducir encabezados de tablas
      document.querySelectorAll('th.px-6.py-3').forEach(th => {
        const headerText = th.textContent.trim();
        let translationKey = '';
        
        if (headerText.includes('Fecha') || headerText.includes('Data')) {
          translationKey = 'date';
          // Conservar el indicador de ordenaci√≥n
          const sortIndicator = th.querySelector('.sort-indicator');
          if (sortIndicator) {
            th.innerHTML = t(translationKey, currentLang) + ' <span class="ml-1 sort-indicator">' + sortIndicator.innerHTML + '</span>';
            return;
          }
        } else if (headerText.includes('G√©nero') || headerText.includes('G√®nere')) {
          translationKey = 'gender_label';
        } else if (headerText.includes('Estado') || headerText.includes('Estat')) {
          translationKey = 'status';
        } else if (headerText.includes('Observaciones') || headerText.includes('Observacions')) {
          translationKey = 'observations';
        }
        
        if (translationKey) {
          th.textContent = t(translationKey, currentLang);
        }
      });
      
      // Traducir botones de volver al listado
      document.querySelectorAll('a[href="/animals"].inline-flex').forEach(button => {
        // Preservar el icono de flecha
        const arrowSpan = button.querySelector('span.mr-2');
        if (arrowSpan) {
          button.innerHTML = `<span class="mr-2">‚Üê</span> ${t('back_to_animal_list', currentLang)}`;
        }
      });
      
      // Traducir textos en el contenido din√°mico
      document.querySelectorAll('.font-medium').forEach(value => {
        const valueText = value.textContent.trim();
        
        // Solo traducir valores espec√≠ficos que sabemos que necesitan traducci√≥n
        if (valueText === 'No disponible') {
          value.textContent = t('not_available', currentLang);
        } else if (valueText === 'No asignada') {
          value.textContent = t('not_assigned', currentLang);
        } else if (valueText === 'Fecha incorrecta') {
          value.textContent = t('incorrect_date', currentLang);
        } else if (valueText === 'Macho') {
          value.textContent = t('male', currentLang);
        } else if (valueText === 'Hembra') {
          value.textContent = t('female', currentLang);
        } else if (valueText === 'Activo') {
          value.textContent = t('active', currentLang);
        } else if (valueText === 'Fallecido') {
          value.textContent = t('dead', currentLang);
        } else if (valueText === 'No amamanta') {
          value.textContent = t('not_nursing', currentLang);
        } else if (valueText.includes('Amamanta un ternero')) {
          value.textContent = t('nursing_one', currentLang);
        } else if (valueText.includes('Amamanta dos terneros')) {
          value.textContent = t('nursing_two', currentLang);
        }
      });
    }
    
    // Ejecutar traducci√≥n inicial
    translateAnimalFile();
    
    // Retraducir cuando cambie el idioma
    window.addEventListener('storage', function(e) {
      if (e.key === 'userLanguage') {
        translateAnimalFile();
        translateTableButtons();
      }
    });

    // SOLUCI√ìN AGRESIVA PARA FORZAR LAS TRADUCCIONES
    document.addEventListener('DOMContentLoaded', function() {
      // Funci√≥n de fuerza bruta para traducir todo, con selecci√≥n directa de elementos
      function traducirTodoForzado() {
        const currentLang = localStorage.getItem('userLanguage') || 'es';
        console.log('[DEBUG] Aplicando traducci√≥n forzada, idioma: ' + currentLang);
        
        // Botones de eliminar
        document.querySelectorAll('button').forEach(btn => {
          if (btn.textContent.trim() === 'Eliminar') {
            if (currentLang === 'ca') {
              btn.title = 'Eliminar part';
            } else {
              btn.title = 'Eliminar parto';
            }
          }
        });
        
        // Textos de g√©nero
        document.querySelectorAll('td').forEach(celda => {
          const texto = celda.textContent.trim();
          if (texto === 'Macho') {
            celda.innerHTML = currentLang === 'ca' ? 'Mascle' : 'Macho';
            console.log('[DEBUG] Traducido Macho‚ÜíMascle');
          } 
          if (texto === 'Hembra') {
            celda.innerHTML = currentLang === 'ca' ? 'Femella' : 'Hembra';
            console.log('[DEBUG] Traducido Hembra‚ÜíFemella');
          }
        });
        
        // Sin observaciones
        document.querySelectorAll('td').forEach(celda => {
          const texto = celda.textContent.trim();
          if (texto === 'Sin observaciones' || texto === 'animals.no_observations') {
            celda.innerHTML = currentLang === 'ca' ? 'Sense observacions' : 'Sin observaciones';
            console.log('[DEBUG] Traducido observaciones');
          }
        });
        
        // Estados (Vivo/Fallecido)
        document.querySelectorAll('span.inline-flex').forEach(span => {
          const texto = span.textContent.trim();
          if (texto === 'Vivo') {
            span.innerHTML = currentLang === 'ca' ? 'Viu' : 'Vivo';
            console.log('[DEBUG] Traducido Vivo‚ÜíViu');
          }
          if (texto === 'Fallecido') {
            span.innerHTML = currentLang === 'ca' ? 'Mort' : 'Fallecido';
            console.log('[DEBUG] Traducido Fallecido‚ÜíMort');
          }
        });
      }
      
      // Ejecutar inmediatamente
      traducirTodoForzado();
      
      // Repetir cada 500ms durante los primeros 10 segundos
      for (let i = 1; i <= 20; i++) {
        setTimeout(traducirTodoForzado, i * 500);
      }
      
      // Establecer un intervalo permanente para seguir traduci√©ndolo
      setInterval(traducirTodoForzado, 2000);
      
      // Cuando cambie el idioma
      window.addEventListener('storage', function(e) {
        if (e.key === 'userLanguage') {
          console.log('[DEBUG] Cambio de idioma detectado');
          // Aplicar inmediatamente y luego con retrasos
          traducirTodoForzado();
          for (let i = 1; i <= 10; i++) {
            setTimeout(traducirTodoForzado, i * 200);
          }
        }
      });
    });
    
    // Bot√≥n de reintentar carga
    const retryButton = document.getElementById('retry-button');
    if (retryButton) {
      retryButton.addEventListener('click', () => {
        window.location.reload();
      });
    }
    
    // Obtener todas las pesta√±as y contenidos
    const tabs = document.querySelectorAll('#tab-info, #tab-partos, #tab-changes');
    const contents = document.querySelectorAll('#content-info, #content-partos, #content-changes');
    
    console.log('Pesta√±as encontradas:', tabs.length);
    console.log('Contenidos encontrados:', contents.length);
    
    // Funci√≥n para mostrar pesta√±a y ocultar las dem√°s
    const showTab = (tabId) => {
      console.log('Cambiando a pesta√±a:', tabId);
      
      // Ocultar todos los contenidos
      contents.forEach(content => {
        content.classList.add('hidden');
      });
      
      // Resetear estilos de todas las pesta√±as
      tabs.forEach(tab => {
        tab.classList.remove('text-primary', 'border-b-2', 'border-primary', 'font-medium');
        tab.classList.add('text-gray-500', 'dark:text-gray-400', 'hover:text-gray-700', 'dark:hover:text-gray-300');
      });
      
      // Activar pesta√±a seleccionada
      const selectedTab = document.getElementById(tabId);
      if (selectedTab) {
        selectedTab.classList.remove('text-gray-500', 'dark:text-gray-400', 'hover:text-gray-700', 'dark:hover:text-gray-300');
        selectedTab.classList.add('text-primary', 'border-b-2', 'border-primary', 'font-medium');
      }
      
      // Mostrar contenido correspondiente
      const contentId = tabId.replace('tab-', 'content-');
      const selectedContent = document.getElementById(contentId);
      if (selectedContent) {
        selectedContent.classList.remove('hidden');
      }
    };
    
    // Inicializar con la pesta√±a de informaci√≥n abierta
    showTab('tab-info');
    
    // Eventos de clic para pesta√±as
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        showTab(tab.id);
        console.log('Clic en pesta√±a:', tab.id);
      });
    });

    // Ordenaci√≥n de la tabla de partos
    const sortColumns = document.querySelectorAll('#sort-fecha, #sort-genero, #sort-estado');
    let currentSortColumn = 'sort-fecha';
    let currentSortDirection = 'asc';

    // Funci√≥n para ordenar la tabla
    const sortTable = (columnId, direction) => {
      const table = document.getElementById('tabla-partos');
      if (!table) return;

      const tbody = table.querySelector('tbody');
      if (!tbody) return;

      const rows = Array.from(tbody.querySelectorAll('tr'));
      const sortedRows = [...rows];

      // Obtener el √≠ndice de la columna seg√∫n el ID del encabezado
      let columnIndex = 0;
      if (columnId === 'sort-genero') columnIndex = 1;
      if (columnId === 'sort-estado') columnIndex = 2;

      // Ordenar filas
      sortedRows.sort((a, b) => {
        const cellA = a.querySelectorAll('td')[columnIndex].textContent.trim();
        const cellB = b.querySelectorAll('td')[columnIndex].textContent.trim();
        
        if (columnId === 'sort-fecha') {
          // Para fechas, intentar convertir a objetos Date para comparaci√≥n
          const dateA = parseDate(cellA);
          const dateB = parseDate(cellB);
          
          if (direction === 'asc') {
            return dateA - dateB;
          } else {
            return dateB - dateA;
          }
        } else {
          // Para texto, comparar strings
          if (direction === 'asc') {
            return cellA.localeCompare(cellB, 'es');
          } else {
            return cellB.localeCompare(cellA, 'es');
          }
        }
      });

      // Limpiar y reconstruir la tabla
      while (tbody.firstChild) {
        tbody.removeChild(tbody.firstChild);
      }

      sortedRows.forEach(row => tbody.appendChild(row));

      // Actualizar indicadores de ordenaci√≥n
      sortColumns.forEach(col => {
        const indicator = col.querySelector('.sort-indicator');
        if (indicator) {
          indicator.textContent = '';
        }
      });

      const activeHeader = document.getElementById(columnId);
      const indicator = activeHeader.querySelector('.sort-indicator');
      if (indicator) {
        indicator.textContent = direction === 'asc' ? '‚Üë' : '‚Üì';
      }
    };

    // Ayudante para convertir texto de fecha a objeto Date
    const parseDate = (dateStr) => {
      if (dateStr === 'N/A' || dateStr === 'Fecha incorrecta') {
        return new Date(0); // Para valores no fechas, usar una fecha muy antigua
      }
      
      // Intenta analizar la fecha en formato DD/MM/YYYY
      const parts = dateStr.split(/[\/\-]/);
      if (parts.length === 3) {
        // Asumir formato DD/MM/YYYY
        return new Date(parts[2], parts[1] - 1, parts[0]);
      }
      
      // Como √∫ltimo recurso, intentar crear fecha directamente
      return new Date(dateStr);
    };

    // Agregar eventos de clic a las columnas
    sortColumns.forEach(col => {
      col.addEventListener('click', () => {
        // Si es la misma columna, cambiar direcci√≥n
        if (col.id === currentSortColumn) {
          currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';
        } else {
          // Si es una nueva columna, establecer como ascendente
          currentSortColumn = col.id;
          currentSortDirection = 'asc';
        }
        
        sortTable(currentSortColumn, currentSortDirection);
      });
    });

    // Ordenar por fecha ascendente al cargar la p√°gina
    sortTable('sort-fecha', 'asc');
    

  });
  // Crear un modal personalizado para interacciones con el usuario
  function crearModalPersonalizado() {
    // Comprobar si ya existe un modal
    let modal = document.getElementById('modal-personalizado');
    if (modal) return modal;
    
    // Crear el modal
    modal = document.createElement('div');
    modal.id = 'modal-personalizado';
    modal.className = 'fixed inset-0 flex items-center justify-center z-50 hidden';
    modal.innerHTML = `
      <div class="fixed inset-0 bg-black bg-opacity-25" onclick="document.getElementById('modal-personalizado').classList.add('hidden')"></div>
      <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full mx-auto z-50 relative shadow-lg">
        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4" id="modal-titulo"></h3>
        <p class="text-gray-600 dark:text-gray-300 mb-6" id="modal-mensaje"></p>
        <div class="flex justify-end space-x-4">
          <button id="modal-btn-cancelar" class="px-4 py-2 bg-gray-200 text-gray-800 dark:bg-gray-700 dark:text-gray-200 rounded hover:bg-gray-300 dark:hover:bg-gray-600 focus:outline-none">Cancelar</button>
          <button id="modal-btn-confirmar" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 focus:outline-none">Confirmar</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Configurar el bot√≥n Cancelar
    const btnCancelar = modal.querySelector('#modal-btn-cancelar');
    btnCancelar.addEventListener('click', function() {
      modal.classList.add('hidden');
    });
    
    return modal;
  }
  
  // Funci√≥n para mostrar una notificaci√≥n
  function mostrarNotificacion(mensaje, tipo = 'success') {
    // Crear elemento de notificaci√≥n
    const notificacion = document.createElement('div');
    notificacion.className = `fixed bottom-4 right-4 p-4 rounded-lg shadow-lg text-white ${tipo === 'success' ? 'bg-green-500' : 'bg-red-500'} z-50 animate-fadeIn`;
    notificacion.textContent = mensaje;
    document.body.appendChild(notificacion);
    
    // Eliminar despu√©s de 3 segundos
    setTimeout(() => {
      notificacion.classList.add('animate-fadeOut');
      setTimeout(() => {
        notificacion.remove();
      }, 500);
    }, 3000);
  }
  
  // A√±adir botones de acciones a la tabla de partos
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM cargado: Inicializando funcionalidades de animal...');
    
    // Agregar estilos para animaciones
    const style = document.createElement('style');
    style.textContent = `
      @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
      }
      @keyframes fadeOut {
        from { opacity: 1; transform: translateY(0); }
        to { opacity: 0; transform: translateY(10px); }
      }
      .animate-fadeIn {
        animation: fadeIn 0.3s ease-out forwards;
      }
      .animate-fadeOut {
        animation: fadeOut 0.3s ease-in forwards;
      }
    `;
    document.head.appendChild(style);
    
    // Crear modal personalizado
    const modal = crearModalPersonalizado();
    
    const tablaPartos = document.getElementById('tabla-partos');
    if (!tablaPartos) return;
    
    const tbody = tablaPartos.querySelector('tbody');
    if (!tbody) return;
    
    // No a√±adir botones si no hay partos (solo hay mensaje de 'no hay registros')
    const filasVacias = tbody.querySelectorAll('tr[data-empty="true"]');
    if (filasVacias.length > 0) return;
    
    // A√±adir columna de acciones al encabezado
    const thead = tablaPartos.querySelector('thead tr');
    if (thead) {
      const thAcciones = document.createElement('th');
      thAcciones.scope = 'col';
      thAcciones.className = 'px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider';
      thAcciones.textContent = 'Acciones';
      thead.appendChild(thAcciones);
    }
    
    // A√±adir botones a cada fila
    const filas = tbody.querySelectorAll('tr');
    filas.forEach(function(fila) {
      // Si es una fila vac√≠a, no a√±adir botones
      if (fila.getAttribute('data-empty') === 'true') return;
      
      // Extraer el ID del parto - intentaremos obtenerlo de un atributo data-id
      // Si no est√° disponible, usaremos un ID generado
      const partoId = fila.getAttribute('data-id') || `parto-${Math.floor(Math.random() * 1000000)}`;
      
      // Crear celda para botones
      const tdAcciones = document.createElement('td');
      tdAcciones.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400';
      
      // Bot√≥n editar
      const btnEditar = document.createElement('button');
      btnEditar.className = 'bg-gray-100 text-blue-600 py-1 px-3 rounded-md mr-2 text-xs font-medium hover:bg-gray-200 dark:bg-gray-700 dark:text-blue-400 dark:hover:bg-gray-600';
      btnEditar.title = 'Editar informaci√≥n del parto';
      btnEditar.textContent = 'Editar';
      btnEditar.setAttribute('data-id', partoId);
      
      // Bot√≥n eliminar
      const btnEliminar = document.createElement('button');
      btnEliminar.className = 'bg-gray-100 text-red-600 py-1 px-3 rounded-md text-xs font-medium hover:bg-gray-200 dark:bg-gray-700 dark:text-red-400 dark:hover:bg-gray-600';
      btnEliminar.textContent = 'Eliminar';
      btnEliminar.setAttribute('data-id', partoId);
      btnEliminar.title = 'Eliminar parto';
      
      // A√±adir botones a la celda
      tdAcciones.appendChild(btnEditar);
      tdAcciones.appendChild(btnEliminar);
      
      // A√±adir celda a la fila
      fila.appendChild(tdAcciones);
      
      // Evento para editar parto
      btnEditar.addEventListener('click', function(event) {
        const partoId = this.getAttribute('data-id');
        const fila = this.closest('tr');
        console.log('Editando parto:', partoId);
        
        // Usar la funci√≥n del script editar-parto-v4.js
        if (window.editarPartoV4 && window.editarPartoV4.mostrarModal) {
          window.editarPartoV4.mostrarModal(partoId, fila);
        } else {
          console.error('No se ha cargado correctamente el script de edici√≥n de partos v4');
          mostrarNotificacion('Error al cargar el editor de partos', 'error');
        }
      });
      
      // Evento para eliminar parto
      btnEliminar.addEventListener('click', function(event) {
        const partoId = this.getAttribute('data-id');
        const fila = this.closest('tr');
        const rect = this.getBoundingClientRect();
        
        // Configurar el modal
        document.getElementById('modal-titulo').textContent = 'Eliminar parto';
        document.getElementById('modal-mensaje').textContent = '¬øSeguro que desea eliminar este parto? Esta acci√≥n no se puede deshacer.';
        
        // Mostrar el modal
        modal.classList.remove('hidden');
        
        // Configurar el bot√≥n Confirmar
        const btnConfirmar = modal.querySelector('#modal-btn-confirmar');
        btnConfirmar.onclick = function() {
          modal.classList.add('hidden');
          console.log('Eliminando parto:', partoId);
          
          const token = localStorage.getItem('token');
          if (!token) {
            mostrarNotificacion('Error: No se ha encontrado el token de autenticaci√≥n', 'error');
            return;
          }
          
          // Obtener el ID del animal de la URL
          const animalIdMatch = window.location.pathname.match(/\/animals\/([0-9]+)/);
          const animalId = animalIdMatch ? animalIdMatch[1] : null;
          
          if (!animalId) {
            alert('Error: No se pudo determinar el ID del animal');
            return;
          }
          
          // Vamos a intentar diferentes rutas de API en orden de prioridad
          const apiUrls = [
            `http://localhost:8000/api/v1/animals/${animalId}/partos/${partoId}`, // Ruta preferida con ID de animal
            `http://localhost:8000/api/v1/partos/${partoId}` // Ruta alternativa
          ];
          
          // Probar con el endpoint principal (animal_id/partos/parto_id)
          console.log(`Intentando eliminar parto ${partoId} del animal ${animalId}`);
          fetch(apiUrls[0], {
            method: 'DELETE',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            }
          })
          .then(function(response) {
            if (!response.ok) {
              // Si el primer endpoint falla, probar con el endpoint alternativo
              console.log(`Endpoint principal fall√≥ con ${response.status}, intentando endpoint alternativo...`);
              return fetch(apiUrls[1], {
                method: 'DELETE',
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json'
                }
              });
            }
            
            // Algunos endpoints no devuelven JSON v√°lido
            return response.json().catch(() => ({ success: true }));
          })
          .then(function(responseOrData) {
            // Si es una respuesta HTTP de la segunda petici√≥n
            if (responseOrData instanceof Response) {
              const response = responseOrData;
              if (!response.ok) {
                throw new Error(`Error en la API: ${response.status}`);
              }
              
              // Algunos endpoints no devuelven JSON v√°lido
              return response.json().catch(() => ({ success: true }));
            }
            
            // Si son datos de una petici√≥n exitosa anterior
            return responseOrData;
          })
          .then(function(data) {
            console.log('Parto eliminado correctamente:', data);
            
            // Eliminar la fila de la tabla
            if (fila) {
              fila.remove();
              
              // Si no quedan filas, mostrar mensaje
              const filas = tablaPartos.querySelectorAll('tbody tr');
              if (filas.length === 0) {
                const tbody = tablaPartos.querySelector('tbody');
                if (tbody) {
                  const tr = document.createElement('tr');
                  tr.setAttribute('data-empty', 'true');
                  tr.innerHTML = `
                    <td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
                      No hay registros de partos para este animal
                    </td>
                  `;
                  tbody.appendChild(tr);
                }
              }
            }
            
            mostrarNotificacion('Parto eliminado correctamente', 'success');
          })
          .catch(function(error) {
            console.error('Error al eliminar parto:', error);
            
            // Intentar mostrar un mensaje m√°s descriptivo basado en el error
            let mensajeError = error.message || 'Error desconocido';
            
            // Si es un error espec√≠fico de API, intentar extraer m√°s informaci√≥n
            if (mensajeError.includes('500')) {
              mensajeError = 'Error interno del servidor. Posible problema con la base de datos.';
            } else if (mensajeError.includes('404')) {
              mensajeError = 'No se encontr√≥ el recurso. Es posible que el parto ya haya sido eliminado.';
            } else if (mensajeError.includes('403')) {
              mensajeError = 'No tiene permisos para eliminar este parto.';
            } else if (mensajeError.includes('401')) {
              mensajeError = 'Su sesi√≥n ha expirado. Por favor, inicie sesi√≥n nuevamente.';
            }
            
            mostrarNotificacion(`Error al eliminar parto: ${mensajeError}`, 'error');
          });
        }
      });
    });
  });
</script>

<!-- Script para edici√≥n de partos -->
<script>
  // Importar el script de edici√≥n de partos (versi√≥n 4 - usando PATCH en lugar de PUT)
  const scriptPartos = document.createElement('script');
  scriptPartos.src = '/scripts/editar-parto-v4.js';
  scriptPartos.type = 'text/javascript';
  document.head.appendChild(scriptPartos);
</script>

<!-- Script para cargar el historial de cambios -->
<script>
  // Importar el script que maneja la carga del historial de cambios
  const scriptHistorial = document.createElement('script');
  scriptHistorial.src = '/scripts/animal-history.js';
  scriptHistorial.type = 'text/javascript';
  document.head.appendChild(scriptHistorial);
  
  // Escribir directamente al console log para verificar que el script se ejecuta
  console.log('üîç VERIFICACI√ìN: Script interno ejecut√°ndose correctamente');
  
  // Agregar funci√≥n para detectar cuando se hace clic en la pesta√±a de historial
  document.addEventListener('DOMContentLoaded', function() {
    const tabChanges = document.getElementById('tab-changes');
    if (tabChanges) {
      console.log('üîç Encontrada pesta√±a de historial, agregando event listener');
      tabChanges.addEventListener('click', function() {
        console.log('üîÑ REGISTRADO: Clic en pesta√±a de historial desde script principal');
      });
    } else {
      console.warn('‚ö†Ô∏è No se encontr√≥ la pesta√±a de historial');
    }
  });
</script>
