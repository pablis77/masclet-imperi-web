---
// Importar el layout y componentes
import MainLayout from '../../components/layout/MainLayout.astro';
import animalService from '../../services/animalService';

// Obtener el ID del animal de los par√°metros de la URL
const { id } = Astro.params;

// Definir t√≠tulo y rol de usuario
const title = "Ficha de Animal";
const userRole = "administrador"; // Simulaci√≥n de rol

// Variables para almacenar datos y estado
let animal = null;
let error = null;
let loading = true;

try {
  if (!id || isNaN(parseInt(id))) {
    throw new Error('ID de animal no v√°lido');
  }

  // Intentar cargar los datos del animal
  console.log(`Intentando cargar animal con ID: ${id}`);
  animal = await animalService.getAnimalById(parseInt(id));
  console.log('Animal cargado:', animal);
  
  if (!animal) {
    throw new Error('No se pudo encontrar el animal');
  }
  
  loading = false;
} catch (e) {
  console.error('Error al cargar datos del animal:', e);
  error = e.message || 'Error al cargar los datos del animal';
  loading = false;
}

// Variables para controlar pesta√±as
const showPartosTab = animal && animal.genere === 'F'; // Solo mostrar pesta√±a de partos para hembras

// Obtener el icono del animal
const icon = animal ? animalService.getAnimalIcon(animal) : 'üêÇ';

// Obtener la clase CSS para el estado del animal
const estadoClass = animal ? animalService.getAnimalStatusClass(animal.estat) : 'bg-gray-100 text-gray-800';

---

<MainLayout title={title} userRole={userRole} currentPath="/animals">
  <div class="mb-6">
    <div class="flex items-center gap-2 mb-2">
      <a href="/animals" class="flex items-center text-primary hover:text-primary/80 dark:text-primary-light dark:hover:text-primary transition-colors">
        <span class="mr-1">‚Üê</span> Volver al listado
      </a>
    </div>
    <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">{title}</h1>
    <p class="text-gray-600 dark:text-gray-300">ID Animal: {id}</p>
  </div>

  {loading && (
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-100 dark:border-gray-700 p-6 mb-6 flex justify-center items-center">
      <div class="flex items-center space-x-2">
        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
        <p>Cargando datos del animal...</p>
      </div>
    </div>
  )}

  {error && (
    <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 mb-6">
      <div class="flex items-start">
        <div class="flex-shrink-0">
          ‚ö†Ô∏è
        </div>
        <div class="ml-3">
          <h3 class="text-lg font-medium text-red-800 dark:text-red-300">Error</h3>
          <div class="mt-2 text-red-700 dark:text-red-200">
            <p>{error}</p>
          </div>
          <div class="mt-4">
            <button 
              id="retry-button"
              class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            >
              ‚Üª Reintentar
            </button>
          </div>
        </div>
      </div>
    </div>
  )}

  {animal && (
    <>
      <!-- Elemento oculto con datos del animal para el script -->
      <div id="animal-data" class="hidden" 
        data-genere={animal.genere}
        data-tiene-partos={
          (animal.partos && animal.partos.items && animal.partos.items.length > 0) || 
          (animal.partos && Array.isArray(animal.partos) && animal.partos.length > 0) || 
          (animal.parts && Array.isArray(animal.parts) && animal.parts.length > 0) ? 'true' : 'false'
        }
      ></div>
      <!-- Resumen del animal -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-100 dark:border-gray-700 p-6 mb-6">
        <div class="flex flex-col md:flex-row gap-6">
          <!-- Icono y estado -->
          <div class="flex flex-col items-center md:items-start">
            <div class="text-6xl mb-3">{icon}</div>
            <span class={`px-3 py-1 rounded-full ${estadoClass} text-sm font-medium`}>
              {animal.estat === 'ACT' ? 'Activo' : 'Baja'}
            </span>
          </div>
          
          <!-- Informaci√≥n b√°sica -->
          <div class="flex-grow">
            <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-2">{animal.nom}</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <p class="text-sm text-gray-500 dark:text-gray-400">C√≥digo</p>
                <p class="font-medium">{animal.cod || 'No disponible'}</p>
              </div>
              <div>
                <p class="text-sm text-gray-500 dark:text-gray-400">Sexo</p>
                <p class="font-medium">{animal.genere === 'M' ? 'Macho' : 'Hembra'}</p>
              </div>
              <div>
                <p class="text-sm text-gray-500 dark:text-gray-400">Fecha de nacimiento</p>
                <p class="font-medium">{animal.dob ? new Date(animal.dob).toLocaleDateString() : 'No disponible'}</p>
              </div>
              <div>
                <p class="text-sm text-gray-500 dark:text-gray-400">Explotaci√≥n</p>
                <p class="font-medium">{animal.explotacio || 'No disponible'}</p>
              </div>
              <div>
                <p class="text-sm text-gray-500 dark:text-gray-400">Cuadra</p>
                <p class="font-medium">{animal.quadra || 'No asignada'}</p>
              </div>
              {animal.genere === 'F' && (
                <div>
                  <p class="text-sm text-gray-500 dark:text-gray-400">Estado amamantamiento</p>
                  <p class="font-medium">
                    {animal.alletar === '0' ? 'No amamanta' : 
                     animal.alletar === '1' ? 'Amamanta un ternero' : 
                     animal.alletar === '2' ? 'Amamanta dos terneros' : 'No disponible'}
                  </p>
                </div>
              )}
            </div>
          </div>
          
          <!-- Acciones -->
          <div class="flex flex-col gap-2">
            <a href={`/animals/update/${id}`} class="flex items-center justify-center px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/80 transition-colors">
              ‚Üª Actualizar
            </a>
          </div>
        </div>
      </div>

      <!-- Pesta√±as de informaci√≥n detallada -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-100 dark:border-gray-700 overflow-hidden">
        <!-- Pesta√±as de navegaci√≥n -->
        <div class="flex border-b border-gray-200 dark:border-gray-700">
          <button id="tab-info" class="px-6 py-3 text-primary border-b-2 border-primary font-medium">
            Informaci√≥n Completa
          </button>
          {showPartosTab && (
            <button id="tab-partos" class="px-6 py-3 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300">
              Historial de Partos
            </button>
          )}
          <button id="tab-changes" class="px-6 py-3 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300">
            Historial de Cambios
          </button>
        </div>

        <!-- Contenido de pesta√±as -->
        <div class="p-6">
          <!-- Pesta√±a 1: Informaci√≥n Completa -->
          <div id="content-info">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Datos de Identificaci√≥n</h3>
                <div class="space-y-3">
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">C√≥digo</p>
                    <p class="font-medium">{animal.cod || 'No disponible'}</p>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Nombre</p>
                    <p class="font-medium">{animal.nom}</p>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">N√∫mero de Serie</p>
                    <p class="font-medium">{animal.num_serie || 'No disponible'}</p>
                  </div>
                </div>
              </div>
              
              <div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Datos Generales</h3>
                <div class="space-y-3">
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Sexo</p>
                    <p class="font-medium">{animal.genere === 'M' ? 'Macho' : 'Hembra'}</p>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Fecha de nacimiento</p>
                    <p class="font-medium">{animal.dob ? new Date(animal.dob).toLocaleDateString() : 'No disponible'}</p>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Estado</p>
                    <p class="font-medium">{animal.estado === 'OK' ? 'Activo' : 'Fallecido'}</p>
                  </div>
                </div>
              </div>
              
              <div>
                <!-- Eliminado encabezado de Ubicaci√≥n -->
                <div class="space-y-3">
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Explotaci√≥n</p>
                    <p class="font-medium">{animal.explotacio || 'No disponible'}</p>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Cuadra</p>
                    <p class="font-medium">{animal.quadra || 'No asignada'}</p>
                  </div>
                </div>
              </div>
              
              <div>
                <!-- Eliminado encabezado de Parentesco -->
                <div class="space-y-3">
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Padre</p>
                    <p class="font-medium">{animal.pare || 'No disponible'}</p>
                  </div>
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">Madre</p>
                    <p class="font-medium">{animal.mare || 'No disponible'}</p>
                  </div>
                  {animal.genere === 'F' && (
                    <div>
                      <p class="text-sm text-gray-500 dark:text-gray-400">Estado de amamantamiento</p>
                      <p class="font-medium">
                        {animal.alletar === '0' ? 'No amamanta' : 
                         animal.alletar === '1' ? 'Amamanta a un ternero' : 
                         animal.alletar === '2' ? 'Amamanta a dos terneros' : 'No disponible'}
                      </p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>

          <!-- Pesta√±a 2: Historial de Partos (oculta por defecto) -->
          {showPartosTab && (
            <div id="content-partos" class="hidden">
              <div class="mb-4">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white">Historial de Partos</h3>
                <p class="text-gray-500 dark:text-gray-400">Registro de todos los partos del animal</p>
              </div>
              
              <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                  <thead class="bg-gray-50 dark:bg-gray-700">
                    <tr>
                      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Fecha</th>
                      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">G√©nero</th>
                      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Estado</th>
                      <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Ficha Ternero</th>
                    </tr>
                  </thead>
                  <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                    {animal && (() => {
                      // Manejar diferentes estructuras posibles de partos
                      let partosArray = [];
                      
                      if (animal.partos && animal.partos.items && animal.partos.items.length > 0) {
                        // Estructura esperada: animal.partos.items[]
                        partosArray = animal.partos.items;
                      } else if (animal.partos && Array.isArray(animal.partos) && animal.partos.length > 0) {
                        // Estructura alternativa: animal.partos[]
                        partosArray = animal.partos;
                      } else if (animal.parts && Array.isArray(animal.parts) && animal.parts.length > 0) {
                        // Estructura antigua: animal.parts[]
                        partosArray = animal.parts;
                      }
                      
                      if (partosArray.length > 0) {
                        return partosArray.map((parto) => (
                          <tr>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                              {parto.part ? (typeof parto.part === 'string' ? new Date(parto.part).toLocaleDateString() : parto.part) : 'N/A'}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                              {parto.GenereT === 'M' ? 'Macho' : 
                               parto.GenereT === 'F' ? 'Hembra' : 
                               parto.GenereT === 'esforrada' ? 'Esforr√°' : parto.GenereT || 'No disponible'}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                              <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                                parto.EstadoT === 'OK' ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100' : 
                                'bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100'
                              }`}>
                                {parto.EstadoT === 'OK' ? 'Vivo' : 'Fallecido'}
                              </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                              No disponible
                            </td>
                          </tr>
                        ));
                      } else {
                        return (
                          <tr>
                            <td colspan="4" class="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
                              No hay registros de partos para este animal
                            </td>
                          </tr>
                        );
                      }
                    })()}
                  </tbody>
                </table>
              </div>
            </div>
          )}

          <!-- Pesta√±a 3: Historial de Cambios (oculta por defecto) -->
          <div id="content-changes" class="hidden">
            <div class="mb-4">
              <h3 class="text-lg font-medium text-gray-900 dark:text-white">Historial de Cambios</h3>
              <p class="text-gray-500 dark:text-gray-400">Actualmente no se registran cambios hist√≥ricos en la ficha del animal</p>
            </div>
            
            <div class="p-6 text-center text-gray-500 dark:text-gray-400">
              <p>No hay datos hist√≥ricos disponibles</p>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Bot√≥n flotante para volver al listado -->
      <div class="fixed bottom-6 right-6 z-10">
        <a href="/animals" class="flex items-center justify-center w-12 h-12 rounded-full bg-primary text-white shadow-lg hover:bg-primary/80 transition-colors">
          <span class="text-xl">‚Üê</span>
        </a>
      </div>
    </>
  )}
</MainLayout>

<script>
  // Script para manejar interacciones de la p√°gina
  document.addEventListener('DOMContentLoaded', () => {
    // Bot√≥n de reintentar carga
    const retryButton = document.getElementById('retry-button');
    if (retryButton) {
      retryButton.addEventListener('click', () => {
        window.location.reload();
      });
    }
    
    // Obtenemos datos del animal pero NO activamos autom√°ticamente pesta√±as
    const animalData = document.getElementById('animal-data');
    // Ya no necesitamos este flag porque siempre mostraremos Informaci√≥n Completa primero
    let autoOpenPartos = false;
    
    // Elementos de pesta√±as
    const tabInfo = document.getElementById('tab-info');
    const tabPartos = document.getElementById('tab-partos');
    const tabChanges = document.getElementById('tab-changes');
    
    const contentInfo = document.getElementById('content-info');
    const contentPartos = document.getElementById('content-partos');
    const contentChanges = document.getElementById('content-changes');
    
    // Funci√≥n para cambiar entre pesta√±as
    function switchTab(activeTab, activeContent) {
      // Desactivar todas las pesta√±as
      [tabInfo, tabPartos, tabChanges].forEach(tab => {
        if (tab) {
          tab.classList.remove('text-primary', 'border-b-2', 'border-primary');
          tab.classList.add('text-gray-500', 'dark:text-gray-400', 'hover:text-gray-700', 'dark:hover:text-gray-300');
        }
      });
      
      // Ocultar todos los contenidos
      [contentInfo, contentPartos, contentChanges].forEach(content => {
        if (content) {
          content.classList.add('hidden');
        }
      });
      
      // Activar la pesta√±a seleccionada
      activeTab.classList.remove('text-gray-500', 'dark:text-gray-400', 'hover:text-gray-700', 'dark:hover:text-gray-300');
      activeTab.classList.add('text-primary', 'border-b-2', 'border-primary');
      
      // Mostrar el contenido seleccionado
      activeContent.classList.remove('hidden');
    }
    
    // Configurar eventos de clic para las pesta√±as
    if (tabInfo) {
      tabInfo.addEventListener('click', () => switchTab(tabInfo, contentInfo));
    }
    
    if (tabPartos) {
      tabPartos.addEventListener('click', () => switchTab(tabPartos, contentPartos));
      // Ya no mostramos autom√°ticamente la pesta√±a de partos
    }
    
    if (tabChanges) {
      tabChanges.addEventListener('click', () => switchTab(tabChanges, contentChanges));
    }
  });
</script>
