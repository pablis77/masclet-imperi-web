    // Función para cargar y mostrar los partos en la tabla
    function cargarPartos() {
      // Verificar si ya están cargados
      const tablaPartosBody = document.getElementById('partos-table-body');
      if (!tablaPartosBody || tablaPartosBody.innerHTML.trim() !== '<tr><td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">Cargando partos...</td></tr>') {
        return;
      }
      
      // Obtenemos los datos del animal
      const animalData = document.getElementById('animal-data');
      if (!animalData || animalData.dataset.tienePartos !== 'true') {
        tablaPartosBody.innerHTML = '<tr><td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">No hay registros de partos para este animal</td></tr>';
        return;
      }
      
      // ID del animal actual
      const animalId = window.location.pathname.split('/').pop();
      
      // Obtener los partos desde localStorage si están marcados para ocultar
      const partosOcultos = JSON.parse(localStorage.getItem('partosOcultos') || '[]');
      
      // Fetch de los partos desde la API
      fetch(`${window.location.origin}/api/animals/${animalId}`)
        .then(function(response) {
          if (!response.ok) {
            throw new Error('Error al cargar los partos');
          }
          return response.json();
        })
        .then(function(data) {
          const animal = data.data || data;
          
          // Determinar la estructura correcta para acceder a los partos
          let partosArray = [];
          if (animal.partos && animal.partos.items && animal.partos.items.length > 0) {
            partosArray = animal.partos.items;
          } else if (animal.partos && Array.isArray(animal.partos) && animal.partos.length > 0) {
            partosArray = animal.partos;
          } else if (animal.parts && Array.isArray(animal.parts) && animal.parts.length > 0) {
            partosArray = animal.parts;
          }
          
          if (partosArray.length === 0) {
            tablaPartosBody.innerHTML = '<tr><td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">No hay registros de partos para este animal</td></tr>';
            return;
          }
          
          // Filtrar partos marcados como reemplazados, duplicados o en localStorage
          const filteredPartos = partosArray.filter(function(parto) {
            // Verificar si está en la lista de ocultados en localStorage
            if (partosOcultos.includes(parto.id)) {
              return false;
            }
            
            // Verificar si tiene etiquetas de ocultación en las observaciones
            if (parto.observacions) {
              const textoOcultar = ['[REEMPLAZADO POR NUEVO REGISTRO]', '[REGISTRO DUPLICADO - IGNORAR]'];
              if (textoOcultar.some(function(texto) { return parto.observacions.includes(texto); })) {
                return false;
              }
            }
            
            // Si pasa todas las verificaciones, mostrar el parto
            return true;
          });
          
          // Ordenar partos por fecha (de más antiguo a más reciente por defecto)
          filteredPartos.sort(function(a, b) {
            const fechaA = a.part ? new Date(a.part) : new Date(0);
            const fechaB = b.part ? new Date(b.part) : new Date(0);
            return fechaA - fechaB; // Orden ascendente (más antiguo primero)
          });
          
          // Crear las filas de la tabla
          const rows = filteredPartos.map(function(parto) {
            // Formatear la fecha
            let fechaFormateada;
            try {
              if (parto.part) {
                // Si es una fecha válida, formatearla como DD/MM/YYYY
                if (parto.part instanceof Date || !isNaN(new Date(parto.part).getTime())) {
                  const fecha = new Date(parto.part);
                  fechaFormateada = fecha.toLocaleDateString('es-ES', {day: '2-digit', month: '2-digit', year: 'numeric'});
                } else if (typeof parto.part === 'string' && /^\d{1,2}[/\-]\d{1,2}[/\-]\d{4}$/.test(parto.part)) {
                  // Si ya está en formato DD/MM/YYYY, usarla directamente
                  fechaFormateada = parto.part;
                } else {
                  fechaFormateada = String(parto.part);
                }
              } else {
                fechaFormateada = 'N/A';
              }
            } catch (e) {
              fechaFormateada = 'Fecha incorrecta';
            }
            
            // Crear la fila HTML
            return `
              <tr>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">${fechaFormateada}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                  ${parto.GenereT === 'M' ? 'Macho' : 
                    parto.GenereT === 'F' ? 'Hembra' : 
                    parto.GenereT === 'esforrada' ? 'Esforrá' : parto.GenereT || 'No disponible'}
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                    parto.EstadoT === 'OK' ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100' : 
                    'bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100'
                  }">
                    ${parto.EstadoT === 'OK' ? 'Vivo' : 'Fallecido'}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                  ${parto.observacions || '-'}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white flex space-x-2">
                  <button 
                    class="edit-parto-btn bg-blue-100 text-blue-700 dark:bg-blue-700 dark:text-blue-100 p-1 rounded hover:bg-blue-200 dark:hover:bg-blue-600" 
                    data-parto-id="${parto.id}"
                    title="Editar parto">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                    </svg>
                  </button>
                  <button 
                    class="delete-parto-btn bg-red-100 text-red-700 dark:bg-red-700 dark:text-red-100 p-1 rounded hover:bg-red-200 dark:hover:bg-red-600" 
                    data-parto-id="${parto.id}"
                    title="Eliminar parto">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                  </button>
                </td>
              </tr>
            `;
          }).join('');
          
          // Actualizar la tabla
          tablaPartosBody.innerHTML = rows || '<tr><td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">No hay registros de partos para este animal</td></tr>';
          
          // Activar los botones de edición y eliminación
          setUpEditButtons();
          setUpDeleteButtons();
        })
        .catch(function(error) {
          console.error('Error:', error);
          tablaPartosBody.innerHTML = `
            <tr>
              <td colspan="5" class="px-6 py-4 text-center text-sm text-red-500">
                Error al cargar los partos: ${error.message}
              </td>
            </tr>
          `;
        });
    }
    
    // Configuración para ordenar la tabla de partos
    const sortFechaBtn = document.getElementById('sort-fecha');
    const sortGeneroBtn = document.getElementById('sort-genero');
    const sortEstadoBtn = document.getElementById('sort-estado');
    
    if (sortFechaBtn) {
      sortFechaBtn.addEventListener('click', function() {
        sortTable('fecha');
      });
    }
    
    if (sortGeneroBtn) {
      sortGeneroBtn.addEventListener('click', function() {
        sortTable('genero');
      });
    }
    
    if (sortEstadoBtn) {
      sortEstadoBtn.addEventListener('click', function() {
        sortTable('estado');
      });
    }
    
    function sortTable(column) {
      const table = document.getElementById('tabla-partos');
      const tbody = table.querySelector('tbody');
      const rows = Array.from(tbody.querySelectorAll('tr'));
      
      // Si solo hay una fila con mensaje de "No hay registros", no hacer nada
      if (rows.length === 1 && rows[0].querySelector('td').colSpan === 5) {
        return;
      }
      
      // Determinar dirección actual
      const sortIndicator = document.querySelector(`#sort-${column} .sort-indicator`);
      const ascending = sortIndicator.textContent === '↑';
      
      // Ordenar filas
      rows.sort(function(a, b) {
        let valueA, valueB;
        
        if (column === 'fecha') {
          valueA = a.cells[0].textContent.trim();
          valueB = b.cells[0].textContent.trim();
          
          // Intentar convertir a fecha si es posible
          const dateA = new Date(valueA.split('/').reverse().join('-'));
          const dateB = new Date(valueB.split('/').reverse().join('-'));
          
          if (!isNaN(dateA) && !isNaN(dateB)) {
            return ascending ? dateB - dateA : dateA - dateB;
          }
        } else if (column === 'genero') {
          valueA = a.cells[1].textContent.trim();
          valueB = b.cells[1].textContent.trim();
        } else if (column === 'estado') {
          valueA = a.cells[2].textContent.trim();
          valueB = b.cells[2].textContent.trim();
        }
        
        // Comparación de texto
        if (ascending) {
          return valueB.localeCompare(valueA);
        } else {
          return valueA.localeCompare(valueB);
        }
      });
      
      // Actualizar indicador de dirección
      sortIndicator.textContent = ascending ? '↓' : '↑';
      
      // Restablecer otros indicadores
      document.querySelectorAll('.sort-indicator').forEach(function(indicator) {
        if (indicator !== sortIndicator) {
          indicator.textContent = '↑';
        }
      });
      
      // Volver a añadir filas ordenadas
      rows.forEach(function(row) {
        tbody.appendChild(row);
      });
    }
