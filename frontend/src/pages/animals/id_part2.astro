---
// Este archivo contiene el código del cliente para cargar los partos
// No es una página completa, sino un fragmento que se incluye en otras páginas
---

<script>
    // Función para cargar y mostrar los partos en la tabla
    function cargarPartos() {
      // Verificar si ya están cargados
      const tablaPartosBody = document.getElementById('partos-table-body');
      if (!tablaPartosBody || tablaPartosBody.innerHTML.trim() !== '<tr><td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">Cargando partos...</td></tr>') {
        return;
      }
      
      // Obtenemos los datos del animal
      const animalData = document.getElementById('animal-data');
      if (!animalData || animalData.dataset.tienePartos !== 'true') {
        tablaPartosBody.innerHTML = '<tr><td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">No hay registros de partos para este animal</td></tr>';
        return;
      }
      
      // Obtener ID del animal de la URL
      const animalId = window.location.pathname.split('/').pop();
      
      // Cargar lista de partos desde API
      fetch(`/api/v1/animals/${animalId}/partos`)
        .then(response => {
          if (!response.ok) {
            throw new Error(`Error al cargar partos: ${response.status} ${response.statusText}`);
          }
          return response.json();
        })
        .then(data => {
          const partos = data.data || data;
          console.log('Partos cargados:', partos);
          
          // Verificar si tenemos partos para mostrar
          if (!partos || partos.length === 0) {
            tablaPartosBody.innerHTML = '<tr><td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">No hay registros de partos para este animal</td></tr>';
            return;
          }
          
          // Obtener lista de partos ocultos del localStorage
          let partosOcultos = [];
          try {
            partosOcultos = JSON.parse(localStorage.getItem('partosOcultos') || '[]');
          } catch (e) {
            console.warn('Error al cargar partos ocultos del localStorage:', e);
          }
          
          // Filtrar partos ocultos
          const partosVisibles = partos.filter(parto => !partosOcultos.includes(parto.id.toString()));
          
          // Si todos los partos están ocultos, mostrar mensaje
          if (partosVisibles.length === 0) {
            tablaPartosBody.innerHTML = '<tr><td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">No hay registros de partos visibles para este animal</td></tr>';
            return;
          }
          
          // Crear filas para cada parto
          const filas = partosVisibles.map(parto => {
            // Formatear fecha
            let fechaFormateada = 'Sin fecha';
            if (parto.part) {
              const fecha = new Date(parto.part);
              fechaFormateada = fecha.toLocaleDateString('es-ES');
            }
            
            // Determinar género
            let genero = 'No especificado';
            let badgeClass = 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
            
            if (parto.genereT === 'M') {
              genero = 'Macho';
              badgeClass = 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';
            } else if (parto.genereT === 'F') {
              genero = 'Hembra';
              badgeClass = 'bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-200';
            } else if (parto.genereT === 'esforrada') {
              genero = 'Esforrada';
              badgeClass = 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200';
            }
            
            // Determinar estado
            let estado = 'No especificado';
            let estadoBadgeClass = 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300';
            
            if (parto.estadoT === 'OK') {
              estado = 'Activo';
              estadoBadgeClass = 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
            } else if (parto.estadoT === 'DEF') {
              estado = 'Fallecido';
              estadoBadgeClass = 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
            }
            
            // Crear fila HTML
            return `
              <tr class="bg-white dark:bg-gray-800 border-b dark:border-gray-700">
                <td class="px-6 py-4 text-sm text-gray-900 dark:text-white">${fechaFormateada}</td>
                <td class="px-6 py-4 text-sm">
                  <span class="px-2 py-1 text-xs font-medium rounded-full ${badgeClass}">
                    ${genero}
                  </span>
                </td>
                <td class="px-6 py-4 text-sm">
                  <span class="px-2 py-1 text-xs font-medium rounded-full ${estadoBadgeClass}">
                    ${estado}
                  </span>
                </td>
                <td class="px-6 py-4 text-right text-sm font-medium">
                  <button 
                    class="edit-parto-btn text-blue-600 dark:text-blue-500 hover:underline mr-3"
                    data-parto-id="${parto.id}"
                  >
                    Editar
                  </button>
                  <button 
                    class="delete-parto-btn text-red-600 dark:text-red-500 hover:underline"
                    data-parto-id="${parto.id}"
                  >
                    Eliminar
                  </button>
                </td>
              </tr>
            `;
          }).join('');
          
          // Actualizar la tabla
          tablaPartosBody.innerHTML = filas;
          
          // Configurar botones de acción
          setUpEditButtons();
          setUpDeleteButtons();
        })
        .catch(error => {
          console.error('Error al cargar partos:', error);
          tablaPartosBody.innerHTML = `<tr><td colspan="5" class="px-6 py-4 text-center text-sm text-red-500">Error al cargar partos: ${error.message}</td></tr>`;
        });
    }

    // Configurar evento para cargar partos cuando se muestra la pestaña
    document.addEventListener('DOMContentLoaded', function() {
      const tabPartos = document.getElementById('tab-partos');
      
      if (tabPartos) {
        tabPartos.addEventListener('click', function() {
          cargarPartos();
        });
      }
      
      // Si la pestaña de partos está activa al cargar, cargar partos
      if (tabPartos && tabPartos.classList.contains('text-primary')) {
        cargarPartos();
      }
    });
</script>
