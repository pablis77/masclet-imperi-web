---
// [id].astro - Página principal de detalle de animal refactorizada para usar componentes
import MainLayout from '../../components/layout/MainLayout.astro';
import AnimalDetails from '../../components/animals/AnimalDetails.astro';
import AnimalTabs from '../../components/animals/AnimalTabs.astro';

// Obtener datos del animal
const { id } = Astro.params;
const userRole = Astro.cookies.get('userRole')?.value || 'user';
let animal = null;
let loading = true;
let error = null;
let title = 'Cargando animal...';

// Variable para mostrar o no la pestaña de partos
let showPartosTab = false;

try {
  // Obtener detalles del animal desde la API
  const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/animals/${id}`);
  if (!response.ok) {
    throw new Error(`Error al cargar el animal: ${response.status} ${response.statusText}`);
  }
  
  // Parsear la respuesta
  const responseData = await response.json();
  animal = responseData.data || responseData;
  
  // Configurar el título de la página
  title = `Detalle de ${animal.nom}`;
  
  // Mostrar pestaña de partos solo para vacas
  showPartosTab = animal.genere === 'F';
  
  loading = false;
} catch (e) {
  console.error('Error al cargar el animal:', e);
  error = e.message;
  loading = false;
}
---

<MainLayout title={title} currentPath={`/animals/${id}`}>
  <div class="container mx-auto px-4 py-6">
    {loading && (
      <div class="flex justify-center items-center h-64">
        <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
      </div>
    )}
    
    {error && (
      <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4" role="alert">
        <p class="font-bold">Error</p>
        <p>{error}</p>
        <button 
          id="retry-button"
          class="mt-2 bg-red-500 hover:bg-red-600 text-white py-1 px-3 rounded text-sm"
        >
          Reintentar
        </button>
      </div>
    )}
    
    {animal && (
      <div>
        <AnimalDetails animal={animal} userRole={userRole} />
        
        <div class="mt-8">
          <AnimalTabs showPartosTab={showPartosTab} id={id} />
        </div>
      </div>
    )}
  </div>
</MainLayout>

<script>
  // Función para cargar partos
  function cargarPartos() {
    console.log('Cargando partos...');
    // Esta función se implementa en id_part2.astro
  }

  // Esta función se ejecuta cuando el DOM está listo
  document.addEventListener('DOMContentLoaded', function() {
    // Configurar botón de reintentar
    const retryButton = document.getElementById('retry-button');
    if (retryButton) {
      retryButton.addEventListener('click', function() {
        window.location.reload();
      });
    }
    
    // Pestañas
    const tabInfo = document.getElementById('tab-info');
    const tabPartos = document.getElementById('tab-partos');
    const tabChanges = document.getElementById('tab-changes');
    
    const contentInfo = document.getElementById('content-info');
    const contentPartos = document.getElementById('content-partos');
    const contentChanges = document.getElementById('content-changes');
    
    if (tabInfo && contentInfo) {
      tabInfo.addEventListener('click', function() {
        // Activar esta pestaña
        tabInfo.classList.add('text-primary', 'border-b-2', 'border-primary');
        tabInfo.classList.remove('text-gray-500', 'dark:text-gray-400', 'hover:text-gray-700', 'dark:hover:text-gray-300');
        
        // Desactivar otras pestañas
        if (tabPartos) {
          tabPartos.classList.remove('text-primary', 'border-b-2', 'border-primary');
          tabPartos.classList.add('text-gray-500', 'dark:text-gray-400', 'hover:text-gray-700', 'dark:hover:text-gray-300');
        }
        if (tabChanges) {
          tabChanges.classList.remove('text-primary', 'border-b-2', 'border-primary');
          tabChanges.classList.add('text-gray-500', 'dark:text-gray-400', 'hover:text-gray-700', 'dark:hover:text-gray-300');
        }
        
        // Mostrar este contenido y ocultar otros
        contentInfo.classList.remove('hidden');
        if (contentPartos) contentPartos.classList.add('hidden');
        if (contentChanges) contentChanges.classList.add('hidden');
      });
    }
    
    if (tabPartos && contentPartos) {
      tabPartos.addEventListener('click', function() {
        // Activar esta pestaña
        tabPartos.classList.add('text-primary', 'border-b-2', 'border-primary');
        tabPartos.classList.remove('text-gray-500', 'dark:text-gray-400', 'hover:text-gray-700', 'dark:hover:text-gray-300');
        
        // Desactivar otras pestañas
        if (tabInfo) {
          tabInfo.classList.remove('text-primary', 'border-b-2', 'border-primary');
          tabInfo.classList.add('text-gray-500', 'dark:text-gray-400', 'hover:text-gray-700', 'dark:hover:text-gray-300');
        }
        if (tabChanges) {
          tabChanges.classList.remove('text-primary', 'border-b-2', 'border-primary');
          tabChanges.classList.add('text-gray-500', 'dark:text-gray-400', 'hover:text-gray-700', 'dark:hover:text-gray-300');
        }
        
        // Mostrar este contenido y ocultar otros
        contentPartos.classList.remove('hidden');
        if (contentInfo) contentInfo.classList.add('hidden');
        if (contentChanges) contentChanges.classList.add('hidden');
        
        // Cargar los partos si es necesario
        cargarPartos();
      });
    }
    
    if (tabChanges && contentChanges) {
      tabChanges.addEventListener('click', function() {
        // Activar esta pestaña
        tabChanges.classList.add('text-primary', 'border-b-2', 'border-primary');
        tabChanges.classList.remove('text-gray-500', 'dark:text-gray-400', 'hover:text-gray-700', 'dark:hover:text-gray-300');
        
        // Desactivar otras pestañas
        if (tabInfo) {
          tabInfo.classList.remove('text-primary', 'border-b-2', 'border-primary');
          tabInfo.classList.add('text-gray-500', 'dark:text-gray-400', 'hover:text-gray-700', 'dark:hover:text-gray-300');
        }
        if (tabPartos) {
          tabPartos.classList.remove('text-primary', 'border-b-2', 'border-primary');
          tabPartos.classList.add('text-gray-500', 'dark:text-gray-400', 'hover:text-gray-700', 'dark:hover:text-gray-300');
        }
        
        // Mostrar este contenido y ocultar otros
        contentChanges.classList.remove('hidden');
        if (contentInfo) contentInfo.classList.add('hidden');
        if (contentPartos) contentPartos.classList.add('hidden');
      });
    }
  });
</script>
