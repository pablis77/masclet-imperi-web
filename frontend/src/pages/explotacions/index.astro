---
import MainLayout from '../../components/layout/MainLayout.astro';

// Obtener datos de la sesi√≥n del usuario
const userRole = Astro.cookies.get('userRole')?.value || 'admin';
const title = 'Explotaciones';
---

<MainLayout title={title} userRole={userRole} currentPath="/explotacions">
  <div class="container mx-auto px-4 py-4 sm:py-6">
    <div class="mb-4 sm:mb-6">
      <h1 class="text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white">{title}</h1>
      <p class="text-sm text-gray-600 dark:text-gray-300">Gesti√≥n de explotaciones ganaderas</p>
    </div>

    <!-- Buscador y filtros -->
    <div class="mb-4 sm:mb-6 bg-white dark:bg-gray-800 p-3 sm:p-4 rounded-lg shadow border border-gray-100 dark:border-gray-700">
      <div class="flex flex-col sm:flex-row sm:items-center gap-3 sm:gap-4">
        <div class="flex-grow">
          <div class="relative">
            <span class="absolute inset-y-0 left-0 flex items-center pl-3 text-gray-500 dark:text-gray-400">
              üîç
            </span>
            <input 
              id="search-explotacion"
              type="text" 
              placeholder="Buscar explotaci√≥n..." 
              class="w-full pl-10 pr-4 py-2 text-sm border border-gray-200 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 focus:outline-none focus:ring-2 focus:ring-primary"
            />
          </div>
        </div>
        <div class="flex flex-wrap items-center gap-2 mt-3 sm:mt-0">
          <select 
            id="region-filter"
            class="text-sm border border-gray-200 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200 py-2 px-3 focus:outline-none focus:ring-2 focus:ring-primary"
          >
            <option value="">Todas las regiones</option>
            <!-- Las regiones se cargar√°n din√°micamente desde el backend -->
          </select>
          <button 
            id="filter-button"
            class="bg-primary text-white px-3 py-2 text-sm rounded-md hover:bg-primary/80 transition-colors"
          >
            Filtrar
          </button>
        </div>
      </div>
    </div>

    <!-- Informaci√≥n y estad√≠sticas -->
    <div class="mb-4 sm:mb-6 flex flex-col sm:flex-row justify-between sm:items-center gap-2">
      <div>
        <span class="text-xs sm:text-sm text-gray-500 dark:text-gray-400">Total: <span id="total-count" class="font-semibold">0</span> explotaciones</span>
      </div>
      <div class="flex space-x-2">
        <button id="export-button" class="flex items-center text-xs sm:text-sm text-primary hover:text-primary-dark dark:text-primary-light dark:hover:text-primary transition-colors">
          <span class="mr-1">‚Üì</span> Exportar datos
        </button>
      </div>
    </div>

    <!-- Listado de explotaciones (cards) -->
    <div id="explotacions-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6">
      <!-- Placeholder para cuando no hay explotaciones -->
      <div id="no-results" class="col-span-full py-8 sm:py-10 text-center text-gray-500 dark:text-gray-400 bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-100 dark:border-gray-700">
        <div class="flex flex-col items-center justify-center">
          <div class="text-3xl sm:text-4xl mb-3 sm:mb-4">üè°</div>
          <p class="mb-2 text-sm sm:text-base">No hay explotaciones registradas.</p>
          <p class="text-xs sm:text-sm">Las explotaciones se crear√°n al registrar un animal o al importar datos.</p>
        </div>
      </div>
      
      <!-- Template para cuando haya explotaciones (se llenar√° con JavaScript) -->
    </div>

    <div id="loading-explotacions" style="display: none;">Cargando...</div>
  </div>
</MainLayout>


<script>
  import { getExplotacions } from '../../services/explotacioService';
  import { getAnimalsByExplotacion } from '../../services/animalService';
  
  // Funci√≥n para renderizar una explotaci√≥n
  const renderExplotacion = (explotacion, animalesCount = 0) => {
    console.log('Renderizando explotaci√≥n:', explotacion);
    
    // Crear elemento contenedor
    const card = document.createElement('div');
    card.className = 'bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-100 dark:border-gray-700 overflow-hidden hover:shadow-md transition-shadow';
    
    // Determinar estado y clase CSS
    const estadoText = explotacion.activa ? 'Activa' : 'Inactiva';
    const estadoClass = explotacion.activa 
      ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' 
      : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
    
    // Crear contenido HTML
    card.innerHTML = `
      <div class="p-4">
        <div class="flex justify-between items-start mb-2">
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white">${explotacion.nom || explotacion.nombre || 'Sin nombre'}</h3>
          <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${estadoClass}">
            ${estadoText}
          </span>
        </div>
        <p class="text-sm text-gray-500 dark:text-gray-400 mb-2">
          <span class="font-medium">C√≥digo:</span> ${explotacion.explotaci || explotacion.codigo || '-'}
        </p>
        <p class="text-sm text-gray-500 dark:text-gray-400 mb-2">
          <span class="font-medium">Responsable:</span> ${explotacion.responsable || '-'}
        </p>
        <p class="text-sm text-gray-500 dark:text-gray-400 mb-2">
          <span class="font-medium">Regi√≥n:</span> ${explotacion.region ? explotacion.region.charAt(0).toUpperCase() + explotacion.region.slice(1) : '-'}
        </p>
        <p class="text-sm text-gray-500 dark:text-gray-400 mb-4">
          <span class="font-medium">Animales:</span> <span class="font-semibold text-primary dark:text-primary-light">${animalesCount}</span>
        </p>
        <div class="flex justify-end">
          <a href="/explotacions/${explotacion.id}" class="inline-flex items-center px-3 py-1.5 bg-primary text-white rounded hover:bg-primary-dark transition-colors text-sm">
            Ver detalles
          </a>
        </div>
      </div>
    `;
    
    return card;
  };
  
  // Cargar explotaciones al cargar la p√°gina
  document.addEventListener('DOMContentLoaded', async () => {
    const container = document.getElementById('explotacions-container');
    const loadingEl = document.getElementById('loading-explotacions');
    const noResultsEl = document.getElementById('no-results');
    const totalCountEl = document.getElementById('total-count');
    const searchInput = document.getElementById('search-explotacion');
    const exportButton = document.getElementById('export-button');
    
    if (!container) {
      console.error('No se encontr√≥ el contenedor de explotaciones');
      return;
    }
    
    let explotaciones = [];
    let animalesPorExplotacion = {};
    
    // Funci√≥n para cargar explotaciones
    const loadExplotaciones = async (search = '') => {
      try {
        // Mostrar loading
        if (loadingEl) loadingEl.style.display = 'block';
        if (noResultsEl) noResultsEl.style.display = 'none';
        
        // Limpiar contenedor excepto elementos fijos
        const childrenToRemove = Array.from(container.children).filter(
          child => child.id !== 'loading-explotacions' && child.id !== 'no-results'
        );
        childrenToRemove.forEach(child => container.removeChild(child));
        
        // Obtener explotaciones
        const filters = search ? { search } : {};
        console.log('Solicitando explotaciones con filtros:', filters);
        const response = await getExplotacions(filters);
        console.log('Respuesta de explotaciones:', response);
        
        // Determinar si la respuesta es un array o un objeto paginado
        if (Array.isArray(response)) {
          explotaciones = response;
          console.log(`Recibidas ${explotaciones.length} explotaciones como array`);
        } else if (response && response.items) {
          explotaciones = response.items;
          console.log(`Recibidas ${explotaciones.length} explotaciones paginadas (${response.total} total)`);
        } else if (response && typeof response === 'object') {
          // Intentar extraer datos si es un objeto con estructura desconocida
          if ('data' in response && Array.isArray(response.data)) {
            explotaciones = response.data;
            console.log(`Recibidas ${explotaciones.length} explotaciones desde response.data`);
          } else {
            // Si es un objeto √∫nico, convertirlo a array
            explotaciones = [response];
            console.log('Recibida una √∫nica explotaci√≥n como objeto');
          }
        } else {
          console.error('Formato de respuesta desconocido:', response);
          explotaciones = [];
        }
        
        // Actualizar contador total
        if (totalCountEl) {
          totalCountEl.textContent = explotaciones.length.toString();
        }
        
        if (!explotaciones || explotaciones.length === 0) {
          if (noResultsEl) noResultsEl.style.display = 'block';
          console.log('No se encontraron explotaciones');
        } else {
          // Cargar conteo de animales para cada explotaci√≥n
          await Promise.all(explotaciones.map(async (explotacion) => {
            try {
              if (!explotacion || !explotacion.id) {
                console.error('Explotaci√≥n sin ID:', explotacion);
                animalesPorExplotacion[explotacion?.id || 'unknown'] = 0;
                return;
              }
              
              console.log(`Solicitando animales para explotaci√≥n ${explotacion.id}`);
              const animales = await getAnimalsByExplotacion(explotacion.id);
              
              if (Array.isArray(animales)) {
                animalesPorExplotacion[explotacion.id] = animales.length;
                console.log(`Explotaci√≥n ${explotacion.id}: ${animales.length} animales`);
              } else if (animales && typeof animales === 'object' && 'items' in animales) {
                animalesPorExplotacion[explotacion.id] = animales.items.length;
                console.log(`Explotaci√≥n ${explotacion.id}: ${animales.items.length} animales (paginados)`);
              } else {
                console.warn(`Formato de respuesta desconocido para animales de explotaci√≥n ${explotacion.id}:`, animales);
                animalesPorExplotacion[explotacion.id] = 0;
              }
            } catch (error) {
              console.error(`Error al cargar animales para explotaci√≥n ${explotacion.id}:`, error);
              animalesPorExplotacion[explotacion.id] = 0;
            }
          }));
          
          // Renderizar cada explotaci√≥n
          explotaciones.forEach(explotacion => {
            if (!explotacion || !explotacion.id) {
              console.error('Intentando renderizar explotaci√≥n inv√°lida:', explotacion);
              return;
            }
            
            const animalesCount = animalesPorExplotacion[explotacion.id] || 0;
            const card = renderExplotacion(explotacion, animalesCount);
            container.appendChild(card);
          });
          
          console.log('Explotaciones renderizadas correctamente');
        }
      } catch (error) {
        console.error('Error al cargar explotaciones:', error);
        if (noResultsEl) {
          noResultsEl.style.display = 'block';
          const firstP = noResultsEl.querySelector('p:first-of-type');
          const lastP = noResultsEl.querySelector('p:last-of-type');
          if (firstP) firstP.textContent = 'Error al cargar explotaciones.';
          if (lastP) lastP.textContent = 'Intente nuevamente m√°s tarde.';
        }
      } finally {
        // Ocultar loading
        if (loadingEl) loadingEl.style.display = 'none';
      }
    };
    
    // Cargar explotaciones inicialmente
    await loadExplotaciones();
    
    // Configurar b√∫squeda
    if (searchInput) {
      searchInput.addEventListener('input', debounce((e) => {
        loadExplotaciones(e.target.value);
      }, 500));
    }
    
    // Configurar exportaci√≥n
    if (exportButton) {
      exportButton.addEventListener('click', () => {
        if (explotaciones.length === 0) {
          alert('No hay datos para exportar');
          return;
        }
        
        // Crear CSV
        const headers = ['ID', 'Nombre', 'C√≥digo', 'Responsable', 'Regi√≥n', 'Activa', 'Animales'];
        const csvRows = [
          headers.join(','),
          ...explotaciones.map(e => [
            e.id,
            `"${e.nom || e.nombre || ''}"`,
            `"${e.explotaci || e.codigo || ''}"`,
            `"${e.responsable || ''}"`,
            `"${e.region || ''}"`,
            e.activa ? 'S√≠' : 'No',
            animalesPorExplotacion[e.id] || 0
          ].join(','))
        ];
        
        const csvContent = csvRows.join('\n');
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        
        const link = document.createElement('a');
        link.setAttribute('href', url);
        link.setAttribute('download', `explotaciones_${new Date().toISOString().split('T')[0]}.csv`);
        link.style.display = 'none';
        
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      });
    }
  });
  
  // Funci√≥n para limitar la frecuencia de ejecuci√≥n (debounce)
  function debounce(func, wait) {
    let timeout;
    return function(...args) {
      const context = this;
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(context, args), wait);
    };
  }
</script>