---
// Redirección a la nueva ruta de explotaciones
return Astro.redirect('/explotaciones-react');
---

    <!-- Controles y filtros -->
    <div class="mb-4 grid grid-cols-1 md:grid-cols-3 gap-4">
      <!-- Filtrado -->
      <div class="col-span-1 md:col-span-2">
        <div class="flex flex-wrap items-center gap-2">
          <div class="relative grow max-w-md">
            <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
              <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
              </svg>
            </div>
            <input 
              type="search" 
              id="search-input"
              class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" 
              placeholder="Buscar por nombre o código de explotación" 
            />
          </div>
        </div>
      </div>

      <!-- Información y estadísticas -->
      <div class="col-span-1 flex justify-end items-center whitespace-nowrap">
        <div class="text-sm text-gray-600 dark:text-gray-400">
          <span id="total-count">0</span> explotaciones encontradas
        </div>
      </div>
    </div>

    <!-- Loading indicator -->
    <div id="loading" class="hidden fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50">
      <div class="bg-white rounded-lg p-6 max-w-sm w-full">
        <div class="flex items-center justify-center">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
        </div>
        <p class="text-center mt-4 text-gray-700">Cargando datos...</p>
      </div>
    </div>

    <!-- Sin resultados -->
    <div id="no-results" class="hidden">
      <div class="bg-gray-50 dark:bg-gray-800 rounded-lg shadow-sm p-4 mb-4">
        <p class="text-center py-4">No se encontraron explotaciones que coincidan con tu búsqueda.</p>
      </div>
    </div>

    <!-- Vista de explotaciones en tarjetas -->
    <div id="explotacionCards" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-6"></div>

    <!-- Vista de detalle de explotación -->
    <div id="explotacion-detail" class="hidden mb-6 bg-white dark:bg-gray-800 rounded-lg shadow p-4">
      <div class="flex items-center justify-between mb-4 text-lg font-medium">
        <h3 class="text-gray-900 dark:text-white">Animales de <span id="explotacion-code"></span></h3>
        <div class="flex gap-2">
          <button id="back-button" class="btn btn-secondary text-sm flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
            Volver
          </button>
        </div>
      </div>

      <!-- Pestañas para categorías de animales -->
      <div class="border-b border-gray-200 dark:border-gray-700 mb-4">
        <ul class="flex flex-wrap -mb-px text-sm font-medium text-center">
          <li class="mr-2">
            <button data-category="toros" class="animal-tab inline-flex items-center justify-center p-3 border-b-2 border-transparent rounded-t-lg hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300 group active">
              <span class="text-blue-600 dark:text-blue-500">Toros</span>
              <span id="count-toros" class="inline-flex items-center justify-center w-4 h-4 ml-2 text-xs font-semibold text-blue-800 bg-blue-100 rounded-full">0</span>
            </button>
          </li>
          <li class="mr-2">
            <button data-category="vacas" class="animal-tab inline-flex items-center justify-center p-3 border-b-2 border-transparent rounded-t-lg hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300 group">
              <span class="text-pink-600 dark:text-pink-500">Vacas</span>
              <span id="count-vacas" class="inline-flex items-center justify-center w-4 h-4 ml-2 text-xs font-semibold text-pink-800 bg-pink-100 rounded-full">0</span>
            </button>
          </li>
          <li class="mr-2">
            <button data-category="terneros" class="animal-tab inline-flex items-center justify-center p-3 border-b-2 border-transparent rounded-t-lg hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300 group">
              <span class="text-yellow-600 dark:text-yellow-500">Terneros</span>
              <span id="count-terneros" class="inline-flex items-center justify-center w-4 h-4 ml-2 text-xs font-semibold text-yellow-800 bg-yellow-100 rounded-full">0</span>
            </button>
          </li>
        </ul>
      </div>

      <!-- Lista de animales -->
      <div id="animal-list" class="bg-white dark:bg-gray-800 rounded-lg"></div>
    </div>
  </div>
</MainLayout>

<script>
  // Usar exactamente el mismo servicio que se usa en animals/index
  import animalService from '../../services/animalService';
  
  // Elementos del DOM
  const searchInput = document.getElementById('search-input');
  const totalCountElement = document.getElementById('total-count');
  const noResultsElement = document.getElementById('no-results');
  const loadingElement = document.getElementById('loading');
  const explotacionCardsContainer = document.getElementById('explotacionCards');
  
  // Cargar datos iniciales
  document.addEventListener('DOMContentLoaded', async () => {
    try {
      console.log('Cargando datos iniciales');
      
      // Mostrar indicador de carga
      if (loadingElement) {
        loadingElement.style.display = 'flex';
      }
      
      // Cargar datos iniciales
      await loadInitialData();
      
      // Configurar eventos
      setupEventListeners();
      
    } catch (error) {
      console.error('Error al cargar datos iniciales:', error);
      
      // Mostrar mensaje de error
      if (noResultsElement) {
        noResultsElement.style.display = 'block';
        noResultsElement.innerHTML = `<p class="text-center py-4">Error al cargar datos: ${error.message}</p>`;
      }
    } finally {
      // Ocultar indicador de carga
      if (loadingElement) {
        loadingElement.style.display = 'none';
      }
    }
  });
  
  // Cargar datos iniciales
  async function loadInitialData() {
    try {
      // Mostrar indicador de carga
      if (loadingElement) {
        loadingElement.style.display = 'flex';
      }
      if (noResultsElement) {
        noResultsElement.style.display = 'none';
      }
      
      console.log('Cargando datos de explotaciones');
      
      // 1. Cargar lista de explotaciones
      const response = await fetch('http://127.0.0.1:8000/api/v1/dashboard/explotacions');
      
      if (!response.ok) {
        throw new Error(`Error al obtener explotaciones: ${response.status} ${response.statusText}`);
      }
      
      // Parsear respuesta JSON
      const explotacionesBasicas = await response.json();
      console.log('Lista de explotaciones obtenida:', explotacionesBasicas);
      
      // Si no hay datos, mostrar mensaje
      if (!explotacionesBasicas || !Array.isArray(explotacionesBasicas) || explotacionesBasicas.length === 0) {
        console.warn('No hay datos de explotaciones');
        if (noResultsElement) {
          noResultsElement.style.display = 'block';
          noResultsElement.innerHTML = '<p class="text-center py-4">No se encontraron explotaciones</p>';
        }
        if (loadingElement) {
          loadingElement.style.display = 'none';
        }
        if (totalCountElement) {
          totalCountElement.textContent = '0';
        }
        return [];
      }
      
      // Actualizar contador total
      if (totalCountElement) {
        totalCountElement.textContent = explotacionesBasicas.length;
      }
      
      // 2. Para cada explotación, cargar sus estadísticas detalladas
      const explotacionesCompletas = await Promise.all(explotacionesBasicas.map(async (exp) => {
        try {
          // Obtener código de explotación
          const codigo = exp.explotacio;
          
          // Obtener token de autenticación
          const token = localStorage.getItem('token');
          if (!token) {
            console.error('No hay token de autenticación');
            return exp; // Devolver explotación básica sin estadísticas
          }
          
          // Cargar estadísticas desde el endpoint específico con autenticación
          const statsResponse = await fetch(`http://127.0.0.1:8000/api/v1/dashboard/explotacions/${encodeURIComponent(codigo)}/stats`, {
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            }
          });
          
          if (!statsResponse.ok) {
            console.warn(`Error al obtener estadísticas para ${codigo}: ${statsResponse.status}`);
            return exp; // Devolver explotación básica sin estadísticas
          }
          
          const stats = await statsResponse.json();
          console.log(`Estadísticas para ${codigo}:`, stats);
          
          // Extraer datos correctamente según la estructura real de la respuesta
          const animales = stats.animales || {};
          const partos = stats.partos || {};
          
          // Mostrar en consola para depuración los datos exactos
          console.log(`Datos detallados para ${codigo}:`, {
            total: animales.total,
            toros: animales.toros,
            vacas: animales.vacas,
            terneros: animales.terneros,
            amam: animales.vacas_amamantando,
            noAmam: animales.vacas_no_amamantando,
            partos: partos.total
          });
          
          // Actualizar objeto de explotación con las estadísticas
          return {
            ...exp,
            totalAnimales: animales.total || 0,
            toros: animales.toros || 0,
            vacas: animales.vacas || 0,
            terneros: animales.terneros || 0,
            vacasAmam: animales.vacas_amamantando || 0,
            vacasNoAmam: animales.vacas_no_amamantando || 0,
            partos: partos.total || 0
          };
        } catch (error) {
          console.error(`Error al procesar explotación ${exp.explotacio}:`, error);
          return exp; // Devolver explotación básica en caso de error
        }
      }));
      
      // Ocultar indicador de carga
      if (loadingElement) {
        loadingElement.style.display = 'none';
      }
      
      // 3. Renderizar tarjetas con los datos completos
      console.log('Datos completos de explotaciones:', explotacionesCompletas);
      renderExplotacionCards(explotacionesCompletas);
      
      return explotacionesCompletas;
    } catch (error) {
      console.error('Error al cargar datos iniciales:', error);
      
      // Ocultar indicador de carga
      if (loadingElement) {
        loadingElement.style.display = 'none';
      }
      
      // Mostrar mensaje de error
      if (noResultsElement) {
        noResultsElement.style.display = 'block';
        noResultsElement.innerHTML = `<p class="text-center py-4">Error al cargar datos: ${error.message}</p>`;
      }
      
      return [];
    }
  }
  
  // Configurar eventos
  function setupEventListeners() {
    // Escuchar eventos del componente AnimalFilters
    document.addEventListener('filters-applied', (event) => {
      const filters = event.detail;
      handleSearch(filters.search || '');
    });
    
    // Escuchar evento para recargar datos
    document.addEventListener('reload-animals', () => {
      handleSearch('');
    });
    
    // Configurar evento de click en tarjetas
    if (explotacionCardsContainer) {
      explotacionCardsContainer.addEventListener('click', (event) => {
        const card = event.target.closest('.explotacion-card');
        if (card) {
          const explotacionCode = card.getAttribute('data-explotacion');
          if (explotacionCode) {
            showExplotacionDetail(explotacionCode);
          }
        }
      });
    }
    
    // Configurar evento de click en botón de volver
    const backButton = document.getElementById('back-button');
    if (backButton) {
      backButton.addEventListener('click', () => {
        // Ocultar vista de detalle
        if (explotacionDetail) {
          explotacionDetail.style.display = 'none';
        }
        
        // Mostrar vista de tarjetas
        if (explotacionCardsContainer) {
          explotacionCardsContainer.style.display = 'grid';
        }
      });
    }
    
    // Configurar evento de click en pestañas de animales
    const animalTabs = document.querySelectorAll('.animal-tab');
    if (animalTabs) {
      animalTabs.forEach(tab => {
        tab.addEventListener('click', (event) => {
          // Remover clase active de todas las pestañas
          animalTabs.forEach(t => t.classList.remove('active'));
          
          // Añadir clase active a la pestaña clickeada
          event.currentTarget.classList.add('active');
          
          // Obtener categoría
          const category = event.currentTarget.getAttribute('data-category');
          
          // Mostrar animales de la categoría seleccionada
          showAnimalsByCategory(category);
        });
      });
    }
  }
  
  // Función para manejar la búsqueda
  function handleSearch(event) {
    const searchTerm = event.target.value.trim().toLowerCase();
    console.log(`Buscando: "${searchTerm}"`);
    
    // Obtener todas las tarjetas
    const cards = document.querySelectorAll('.explotacion-card');
    
    // Si no hay término de búsqueda, mostrar todas las tarjetas
    if (!searchTerm) {
      cards.forEach(card => {
        card.style.display = 'block';
      });
      
      // Actualizar contador
      if (totalCountElement) {
        totalCountElement.textContent = cards.length;
      }
      
      // Ocultar mensaje de sin resultados
      if (noResultsElement) {
        noResultsElement.style.display = 'none';
      }
      
      return;
    }
    
    // Buscar coincidencia exacta
    const exactMatch = findExactExplotacion(searchTerm);
    if (exactMatch) {
      console.log(`Búsqueda exacta encontrada para: ${exactMatch}`);
      showExplotacionDetail(exactMatch);
      return;
    }
    
    // Filtrar tarjetas según término de búsqueda
    let visibleCards = 0;
    
    cards.forEach(card => {
      const title = card.querySelector('.card-title')?.textContent.toLowerCase() || '';
      const code = card.getAttribute('data-explotacion')?.toLowerCase() || '';
      
      if (title.includes(searchTerm) || code.includes(searchTerm)) {
        card.style.display = 'block';
        visibleCards++;
      } else {
        card.style.display = 'none';
      }
    });
    
    // Actualizar contador
    if (totalCountElement) {
      totalCountElement.textContent = visibleCards;
    }
    
    // Mostrar mensaje de sin resultados si no hay coincidencias
    if (noResultsElement) {
      noResultsElement.style.display = visibleCards === 0 ? 'block' : 'none';
    }
  }
  
  // Renderizar tarjetas de explotaciones
  function renderExplotacionCards(explotacionesData) {
    // Obtener el contenedor donde se renderizarán las tarjetas
    const cardsContainer = document.getElementById('explotacionCards');
    if (!cardsContainer) {
      console.error('No se encontró el contenedor para las tarjetas');
      return;
    }
    
    // Limpiar el contenedor
    cardsContainer.innerHTML = '';
    
    console.log('Datos para renderizar tarjetas:', explotacionesData);
    
    // Iterar sobre los datos y crear tarjetas
    explotacionesData.forEach(explotacion => {
      // Verificar que existe la propiedad explotacio
      if (!explotacion.explotacio) {
        console.warn('Elemento de explotación sin código de explotación:', explotacion);
        return;
      }
      
      // Extraer datos o usar valores por defecto
      const codigo = explotacion.explotacio;
      const totalAnimales = explotacion.totalAnimales || 0;
      const partos = explotacion.partos || 0;
      const toros = explotacion.toros || 0;
      const vacas = explotacion.vacas || 0;
      const terneros = explotacion.terneros || 0;
      const vacasAmam = explotacion.vacasAmam || 0;
      const vacasNoAmam = explotacion.vacasNoAmam || 0;
      
      // Crear el elemento de tarjeta
      const card = document.createElement('div');
      card.className = 'explotacion-card rounded-lg shadow overflow-hidden cursor-pointer';
      card.setAttribute('data-explotacion', codigo);
      
      // Crear contenido de la tarjeta 
      card.innerHTML = `
        <div class="bg-primary p-4">
          <h3 class="card-title text-lg font-semibold text-white">${codigo}</h3>
        </div>
        <!-- Búsqueda y filtros -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 mb-6">
          <div class="mb-3 sm:mb-4">
            <h2 class="text-base sm:text-lg font-medium text-gray-900 dark:text-white mb-2 sm:mb-3">
              Búsqueda y Filtros
            </h2>
            <p class="text-xs sm:text-sm text-gray-600 dark:text-gray-300 mb-3 sm:mb-4">
              Utiliza los filtros para encontrar animales específicos. Puedes buscar por nombre, código o explotación.
            </p>
          </div>
          
          <!-- Componente de filtros - Exactamente igual que en animals/index.astro -->
          <AnimalFilters id="animal-filters" client:load />

          <div class="flex justify-between items-center mt-4">
            <div id="total-count" class="text-sm text-gray-600 dark:text-gray-400">
              Total: <span id="total-counter">0</span> explotaciones
            </div>
          </div>
        </div>
        
        <div class="border-t border-gray-200 my-2 pt-2">
          <div class="grid grid-cols-2 gap-2 mb-2">
            <div>
              <p class="text-xs text-gray-600">Total Animales</p>
              <p class="text-xl font-bold text-primary">${totalAnimales}</p>
            </div>
            <div>
              <p class="text-xs text-gray-600">Partos</p>
              <p class="text-xl font-bold text-primary">${partos}</p>
            </div>
          </div>
          <div class="border-t border-gray-200 my-2 pt-2">
            <div class="grid grid-cols-3 gap-2">
              <div>
                <p class="text-xs text-gray-600">Toros</p>
                <p class="text-lg font-bold text-blue-600">${toros}</p>
              </div>
              <div>
                <p class="text-xs text-gray-600">Vacas</p>
                <p class="text-lg font-bold text-pink-600">${vacas}</p>
              </div>
              <div>
                <p class="text-xs text-gray-600">Terneros</p>
                <p class="text-lg font-bold text-yellow-600">${terneros}</p>
              </div>
            </div>
          </div>
          
          <div class="border-t border-gray-200 mt-2 pt-2">
            <div class="grid grid-cols-2 gap-2">
              <div>
                <p class="text-xs text-gray-600">Vacas Amamantando</p>
                <p class="text-lg font-bold text-green-600">${vacasAmam}</p>
              </div>
              <div>
                <p class="text-xs text-gray-600">Vacas No Amamantando</p>
                <p class="text-lg font-bold text-gray-600">${vacasNoAmam}</p>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Añadir evento de clic a la tarjeta
      card.addEventListener('click', () => {
        viewExplotacionDetail(codigo);
      });
      
      // Añadir la tarjeta al contenedor
      cardsContainer.appendChild(card);
    });
    
    console.log(`Renderizadas ${explotacionesData.length} tarjetas de explotaciones`);
    
    // Actualizar contador
    if (totalCountElement) {
      totalCountElement.textContent = explotacionesData.length;
    }
  }
  
  // Variables globales para estado de explotaciones
  let allAnimals = [];
  let currentExplotacion = null;
  let currentCategory = 'toros';
  
  // Elementos adicionales del DOM
  const explotacionDetail = document.getElementById('explotacion-detail');
  const explotacionCodeElement = document.getElementById('explotacion-code');
  const countTorosElement = document.getElementById('count-toros');
  const countVacasElement = document.getElementById('count-vacas');
  const countTernerosElement = document.getElementById('count-terneros');
  const animalList = document.getElementById('animal-list');
  const animalTabs = document.querySelectorAll('.animal-tab');
  const backButton = document.getElementById('back-button');
  
  // Buscar coincidencia exacta de explotación
  function findExactExplotacion(searchTerm) {
    if (!searchTerm) return null;
    
    const cards = document.querySelectorAll('.explotacion-card');
    for (const card of cards) {
      const title = card.querySelector('.card-title')?.textContent || '';
      if (title.toLowerCase() === searchTerm.toLowerCase()) {
        return title;
      }
    }
    
    return null;
  }
  
  // Redirigir a la página de detalle de explotación (si es necesario implementar esta funcionalidad)
  function viewExplotacionDetail(explotacionCode) {
    if (!explotacionCode) return;
    
    // Redirigir a página de detalle (puedes implementar esta lógica si es necesario)
    console.log(`Ver detalles de explotación: ${explotacionCode}`);
    // window.location.href = `/explotacions/${explotacionCode}`;
  }
  
  // Función para mostrar detalles de explotación usando animalService
  async function showExplotacionDetail(explotacionCode) {
    try {
      // Mostrar indicador de carga
      if (loadingElement) {
        loadingElement.style.display = 'flex';
      }

      console.log(`Obteniendo animales de la explotación: ${explotacionCode} usando animalService`);
      
      // Usar animalService como en la página de animales para obtener DATOS REALES
      const animalsResponse = await animalService.getAnimals({
        // Filtrar por el código de explotación
        explotacio: explotacionCode,
        page: 1,
        limit: 1000 // Pedir muchos para tenerlos todos
      });
      
      // Obtener los animales de la respuesta
      const animalsData = animalsResponse.items || [];
      
      console.log(`Obtenidos ${animalsData.length} animales REALES para la explotación ${explotacionCode}`);

      // Contar animales por categoría para actualizar las pestañas
      const toros = animalsData.filter(a => a.genere === 'M' && a.estado !== 'DEF').length;
      const vacas = animalsData.filter(a => a.genere === 'F' && a.estado !== 'DEF').length;
      const vacasAmam = animalsData.filter(a => a.genere === 'F' && (a.alletar === '1' || a.alletar === '2') && a.estado !== 'DEF').length;
      const vacasNoAmam = animalsData.filter(a => a.genere === 'F' && a.alletar === '0' && a.estado !== 'DEF').length;
      
      console.log('Información de animales encontrados:', {
        total: animalsData.length,
        toros,
        vacas,
        vacasAmam,
        vacasNoAmam
      });
      
      // Mostrar vista de detalle
      if (explotacionDetail) {
        // Actualizar código de explotación en la vista
        const explotacionCodeElement = document.getElementById('explotacion-code');
        if (explotacionCodeElement) {
          explotacionCodeElement.textContent = explotacionCode;
        }
        
        // Ocultar contenedor de tarjetas
        if (explotacionCardsContainer) {
          explotacionCardsContainer.style.display = 'none';
        }
        
        // Mostrar vista de detalle
        explotacionDetail.style.display = 'block';
        
        // Mostrar lista de animales con datos REALES
        renderAnimalsList(animalsData, 'toros');
      }
    } catch (error) {
      console.error('Error al obtener detalles de la explotación:', error);
      // Mostrar mensaje de error
      if (noResultsElement) {
        noResultsElement.style.display = 'block';
        noResultsElement.innerHTML = `<p class="text-center py-4">Error al obtener animales: ${error.message}</p>`;
      }
    } finally {
      // Ocultar indicador de carga
      if (loadingElement) {
        loadingElement.style.display = 'none';
      }
    }
  }
  
  // Función para renderizar la lista de animales con datos REALES
  function renderAnimalsList(animalsData, category = 'todos') {
    const animalList = document.getElementById('animal-list');
    if (!animalList) return;
    
    // Limpiar lista actual
    animalList.innerHTML = '';
    
    // Filtrar animales según la categoría seleccionada
    let filteredAnimals = [];
    
    switch (category) {
      case 'toros':
        filteredAnimals = animalsData.filter(a => a.genere === 'M' && a.estado !== 'DEF');
        break;
      case 'vacas':
        filteredAnimals = animalsData.filter(a => a.genere === 'F' && a.estado !== 'DEF');
        break;
      case 'terneros':
        // En este ejemplo, consideramos terneros a los animales con parte = 0
        filteredAnimals = animalsData.filter(a => a.parte === 0 && a.estado !== 'DEF');
        break;
      default:
        filteredAnimals = animalsData.filter(a => a.estado !== 'DEF');
    }
    
    // Actualizar contadores en pestañas
    if (countTorosElement) {
      countTorosElement.textContent = animalsData.filter(a => a.genere === 'M' && a.estado !== 'DEF').length;
    }
    
    if (countVacasElement) {
      countVacasElement.textContent = animalsData.filter(a => a.genere === 'F' && a.estado !== 'DEF').length;
    }
    
    if (countTernerosElement) {
      countTernerosElement.textContent = animalsData.filter(a => a.parte === 0 && a.estado !== 'DEF').length;
    }
    
    // Si no hay animales en la categoría seleccionada
    if (filteredAnimals.length === 0) {
      animalList.innerHTML = `<p class="text-center py-4">No hay animales en esta categoría</p>`;
      return;
    }
    
    // Crear tabla de animales
    const table = document.createElement('table');
    table.className = 'min-w-full divide-y divide-gray-200 dark:divide-gray-700';
    
    // Crear encabezado
    const thead = document.createElement('thead');
    thead.className = 'bg-gray-50 dark:bg-gray-800';
    
    thead.innerHTML = `
      <tr>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Nombre</th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Género</th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Amamantando</th>
        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Estado</th>
      </tr>
    `;
    
    // Crear cuerpo de la tabla
    const tbody = document.createElement('tbody');
    tbody.className = 'bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700';
    
    // Iterar sobre los animales filtrados
    filteredAnimals.forEach((animal, index) => {
      const row = document.createElement('tr');
      row.className = index % 2 === 0 ? 'bg-white dark:bg-gray-800' : 'bg-gray-50 dark:bg-gray-700';
      
      row.innerHTML = `
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="text-sm font-medium text-gray-900 dark:text-white">${animal.nom}</div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="text-sm text-gray-500 dark:text-gray-400">${animal.genere === 'M' ? 'Macho' : 'Hembra'}</div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="text-sm text-gray-500 dark:text-gray-400">
            ${animal.genere === 'F' ? (animal.alletar === '1' || animal.alletar === '2' ? 'Sí' : 'No') : '-'}
          </div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${animal.estado === 'OK' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
            ${animal.estado === 'OK' ? 'Activo' : 'Fallecido'}
          </span>
        </td>
      `;
      
      tbody.appendChild(row);
    });
    
    // Añadir encabezado y cuerpo a la tabla
    table.appendChild(thead);
    table.appendChild(tbody);
    
    // Añadir tabla al contenedor
    animalList.appendChild(table);
    
    console.log(`Encontrados ${filteredAnimals.length} animales para la explotación ${currentExplotacion}`);
  }
  
  // Función para mostrar animales por categoría
  function showAnimalsByCategory(category) {
    if (!animalList) return;
    
    currentCategory = category;
    let filteredAnimals = [];
    
    switch (category) {
      case 'toros':
        filteredAnimals = allAnimals.filter(a => a.genere === 'M' && a.estado !== 'DEF');
        break;
      case 'vacas':
        filteredAnimals = allAnimals.filter(a => a.genere === 'F' && a.estado !== 'DEF');
        break;
      case 'terneros':
        filteredAnimals = allAnimals.filter(a => a.parte === 0 && a.estado !== 'DEF');
        break;
      default:
        filteredAnimals = allAnimals.filter(a => a.estado !== 'DEF');
    }
    
    // Renderizar lista de animales
    renderAnimalsList(filteredAnimals, category);
  }
</script>
