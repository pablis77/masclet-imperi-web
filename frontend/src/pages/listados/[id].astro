---
import MainLayout from '../../components/layout/MainLayout.astro';
import { getCurrentLanguage } from '../../i18n/config';
import listadosService from '../../services/listados-service';

// Obtener el idioma actual
const currentLang = getCurrentLanguage();

// Obtener el ID del listado de los parámetros de la URL
const { id } = Astro.params;

// Traducciones
const translations = {
  es: {
    title: "Detalles del Listado",
    loading: "Cargando detalles del listado...",
    error: "Error al cargar los detalles del listado.",
    empty: "No hay animales en este listado.",
    back: "Volver a Listados",
    edit: "Editar Listado",
    delete: "Eliminar Listado",
    export: "Exportar",
    confirmDelete: "¿Estás seguro de que quieres eliminar este listado?",
    category: "Categoría",
    animals: "Animales",
    createdAt: "Creado el",
    table: {
      name: "Nombre",
      explotacion: "Explotación",
      gender: "Género",
      status: "Estado",
      actions: "Acciones"
    }
  },
  ca: {
    title: "Detalls del Llistat",
    loading: "Carregant detalls del llistat...",
    error: "Error al carregar els detalls del llistat.",
    empty: "No hi ha animals en aquest llistat.",
    back: "Tornar a Llistats",
    edit: "Editar Llistat",
    delete: "Eliminar Llistat",
    export: "Exportar",
    confirmDelete: "Estàs segur que vols eliminar aquest llistat?",
    category: "Categoria",
    animals: "Animals",
    createdAt: "Creat el",
    table: {
      name: "Nom",
      explotacion: "Explotació",
      gender: "Gènere",
      status: "Estat",
      actions: "Accions"
    }
  }
};

// Función para traducir (simplificada)
function t(key) {
  return translations[currentLang][key] || key;
}

// Función para traducir claves anidadas (simplificada)
function tNested(parent, key) {
  if (translations[currentLang] && translations[currentLang][parent] && translations[currentLang][parent][key]) {
    return translations[currentLang][parent][key];
  }
  return key;
}

// Intentar obtener el listado (esto se ejecuta en el servidor)
let listado = null;
try {
  if (id) {
    // Intentar obtener el listado
    const response = await listadosService.getListado(id);
    if (response && response.id) {
      listado = response;
    }
  }
} catch (error) {
  console.error(`Error al obtener el listado ${id}:`, error);
}
---

<MainLayout title={listado ? listado.nombre : t('title')}>
  <div class="px-4 py-6 sm:px-6 lg:px-8">
    <div class="mb-6 flex flex-col sm:flex-row sm:items-center sm:justify-between">
      <div>
        <h1 class="text-2xl font-semibold text-gray-900 dark:text-white">
          {listado ? listado.nombre : t('title')}
        </h1>
        {listado && listado.descripcion && (
          <p class="mt-2 text-sm text-gray-700 dark:text-gray-300">
            {listado.descripcion}
          </p>
        )}
      </div>
      
      <div class="mt-4 sm:mt-0 flex space-x-3">
        <a 
          href="/listados" 
          class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
        >
          {t('back')}
        </a>
        
        {listado && (
          <a 
            href={`/listados/editar/${id}`} 
            class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
          >
            {t('edit')}
          </a>
        )}
      </div>
    </div>
    
    <div class="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg">
      {!listado && (
        <div class="p-4 flex justify-center items-center min-h-[200px]">
          <p class="text-gray-500" id="loading-message">
            {t('loading')}
          </p>
        </div>
      )}
      
      {listado && (
        <div class="p-4">
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            {listado.categoria && (
              <div>
                <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">{t('category')}</h3>
                <p class="mt-1 text-sm text-gray-900 dark:text-white">{listado.categoria}</p>
              </div>
            )}
            
            <div>
              <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">{t('animals')}</h3>
              <p class="mt-1 text-sm text-gray-900 dark:text-white">
                {listado.animales ? listado.animales.length : 0}
              </p>
            </div>
            
            <div>
              <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">{t('createdAt')}</h3>
              <p class="mt-1 text-sm text-gray-900 dark:text-white">
                {new Date(listado.created_at).toLocaleDateString()}
              </p>
            </div>
          </div>
          
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-3">{t('animals')}</h3>
          
          {(!listado.animales || listado.animales.length === 0) ? (
            <div class="py-8 text-center">
              <p class="text-gray-500">{t('empty')}</p>
            </div>
          ) : (
            <div class="overflow-x-auto">
              <table class="min-w-full divide-y divide-gray-300 dark:divide-gray-700">
                <thead class="bg-gray-50 dark:bg-gray-700">
                  <tr>
                    <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 dark:text-white sm:pl-6">
                      {tNested('table', 'name')}
                    </th>
                    <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white">
                      {tNested('table', 'explotacion')}
                    </th>
                    <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white">
                      {tNested('table', 'gender')}
                    </th>
                    <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white">
                      {tNested('table', 'status')}
                    </th>
                  </tr>
                </thead>
                <tbody class="divide-y divide-gray-200 dark:divide-gray-700 bg-white dark:bg-gray-800" id="animals-container">
                  <!-- Los animales se cargarán con JavaScript -->
                </tbody>
              </table>
            </div>
          )}
        </div>
      )}
    </div>
  </div>
</MainLayout>

<script>
  // Importar el servicio de listados
  import listadosService from '../../services/listados-service';
  
  document.addEventListener('DOMContentLoaded', async () => {
    // Obtener el ID del listado de la URL
    const urlParts = window.location.pathname.split('/');
    const listadoId = urlParts[urlParts.length - 1];
    
    // Referencias a elementos del DOM
    const loadingMessage = document.getElementById('loading-message');
    const animalsContainer = document.getElementById('animals-container');
    
    if (!animalsContainer) return;
    
    try {
      // Obtener los detalles del listado
      const listado = await listadosService.getListado(listadoId);
      
      // Si hay animales, mostrarlos en la tabla
      if (listado && listado.animales && listado.animales.length > 0) {
        // Limpiar el contenedor
        animalsContainer.innerHTML = '';
        
        // Crear una fila para cada animal
        listado.animales.forEach(animal => {
          const row = document.createElement('tr');
          
          // Determinar el género en formato legible
          const genero = animal.genere === 'M' ? 'Toro' : 'Vaca';
          
          // Determinar el estado en formato legible
          const estado = animal.estado === 'OK' ? 'Activo' : 'Inactivo';
          
          // Crear las celdas
          row.innerHTML = `
            <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 dark:text-white sm:pl-6">
              ${animal.nom || ''}
            </td>
            <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400">
              ${animal.explotacio || ''}
            </td>
            <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400">
              ${genero}
            </td>
            <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400">
              ${estado}
            </td>
          `;
          
          // Añadir la fila a la tabla
          animalsContainer.appendChild(row);
        });
      }
    } catch (error) {
      console.error('Error al cargar los detalles del listado:', error);
      if (loadingMessage) {
        loadingMessage.textContent = 'Error al cargar los detalles del listado.';
        loadingMessage.classList.add('text-red-500');
      }
    }
  });
</script>
