---
import MainLayout from '../../components/layout/MainLayout.astro';
import { getCurrentLanguage } from '../../i18n/config';

// Obtener el idioma actual
const currentLang = getCurrentLanguage();

// Obtener el ID del listado de los parámetros de la URL
const { id } = Astro.params;

// Traducciones simples sin objetos anidados
const titulo = currentLang === 'es' ? "Detalles del Listado" : "Detalls del Llistat";
const cargando = currentLang === 'es' ? "Cargando detalles del listado..." : "Carregant detalls del llistat...";
const volver = currentLang === 'es' ? "Volver a Listados" : "Tornar a Llistats";
const editar = currentLang === 'es' ? "Editar Listado" : "Editar Llistat";
const categoria = currentLang === 'es' ? "Categoría" : "Categoria";
const animales = currentLang === 'es' ? "Animales" : "Animals";
const creado = currentLang === 'es' ? "Creado el" : "Creat el";
const vacio = currentLang === 'es' ? "No hay animales en este listado." : "No hi ha animals en aquest llistat.";
const colNombre = currentLang === 'es' ? "Nombre" : "Nom";
const colCodigo = currentLang === 'es' ? "Código" : "Codi";
const colExplotacion = currentLang === 'es' ? "Explotación" : "Explotació";
const colGenero = currentLang === 'es' ? "Género" : "Gènere";
const colEstado = currentLang === 'es' ? "Confirmación" : "Confirmació";
const colObservaciones = currentLang === 'es' ? "Observaciones" : "Observacions";
const exportarPdf = currentLang === 'es' ? "Exportar a PDF" : "Exportar a PDF";
---

<MainLayout title={titulo}>
  <div class="px-4 py-6 sm:px-6 lg:px-8">
    <div class="mb-6 flex flex-col sm:flex-row sm:items-center sm:justify-between">
      <div>
        <h1 class="text-2xl font-semibold text-gray-900 dark:text-white" id="listado-title">
          {titulo}
        </h1>
        <p class="mt-2 text-sm text-gray-700 dark:text-gray-300" id="listado-descripcion"></p>
      </div>
      
      <div class="mt-4 sm:mt-0 flex space-x-3">
        <a 
          href="/listados" 
          class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
        >
          {volver}
        </a>

        <button 
          id="export-listado-pdf"
          class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
        >
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          <span id="export-btn-text">{exportarPdf}</span>
        </button>
        
        <!-- Mensaje de estado para la exportación -->
        <div id="pdf-export-status" class="hidden mt-2 text-sm font-medium"></div>
      </div>
    </div>
    
    <div class="bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg">
      <div class="p-4">
        <div id="loading-message" class="p-4 flex justify-center items-center min-h-[200px]">
          <div class="flex flex-col items-center">
            <div class="animate-spin rounded-full h-10 w-10 border-b-2 border-primary"></div>
            <p class="mt-2 text-sm text-gray-500">{cargando}</p>
          </div>
        </div>
        
        <div id="listado-content" class="hidden">
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <div>
              <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">{categoria}</h3>
              <p class="mt-1 text-sm text-gray-900 dark:text-white" id="listado-categoria"></p>
            </div>
            
            <div>
              <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">{animales}</h3>
              <p class="mt-1 text-sm text-gray-900 dark:text-white" id="listado-animales-count">0</p>
            </div>
            
            <div>
              <h3 class="text-sm font-medium text-gray-500 dark:text-gray-400">{creado}</h3>
              <p class="mt-1 text-sm text-gray-900 dark:text-white" id="listado-fecha"></p>
            </div>
          </div>
          
          <div class="flex justify-between items-center mb-3">
            <h3 class="text-lg font-medium text-gray-900 dark:text-white">{animales}</h3>
            <button id="guardar-cambios" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              Guardar confirmaciones
            </button>
          </div>
          
          <!-- Mensaje de éxito al guardar -->
          <div id="mensaje-exito" class="mb-3 p-2 bg-green-100 text-green-700 rounded-md hidden">
            Cambios guardados correctamente
          </div>
          
          <!-- Mensaje de error al guardar -->
          <div id="mensaje-error" class="mb-3 p-2 bg-red-100 text-red-700 rounded-md hidden">
            Error al guardar los cambios
          </div>
          
          <div id="empty-message" class="py-8 text-center hidden">
            <p class="text-gray-500">{vacio}</p>
          </div>
          
          <div id="animals-table" class="overflow-x-auto hidden">
            <table class="min-w-full divide-y divide-gray-300 dark:divide-gray-700">
              <thead class="bg-gray-50 dark:bg-gray-700">
                <tr>
                  <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 dark:text-white sm:pl-6">
                    {colNombre}
                  </th>
                  <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white">
                    {colCodigo}
                  </th>
                  <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white">
                    {colExplotacion}
                  </th>
                  <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white">
                    {colGenero}
                  </th>
                  <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white">
                    {colEstado}
                  </th>
                  <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white">
                    {colObservaciones}
                  </th>
                </tr>
              </thead>
              <tbody class="divide-y divide-gray-200 dark:divide-gray-700 bg-white dark:bg-gray-800" id="animals-container">
                <!-- Los animales se cargarán con JavaScript -->
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</MainLayout>

<!-- Importaciones para PDF (misma estructura que en la ficha de animal) -->
<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>
<script is:inline>
  // Aseguramos que autoTable esté disponible globalmente
  window.jsPDF = window.jspdf.jsPDF;
  window.autoTable = function() {
    const doc = arguments[0];
    if (typeof doc.autoTable === 'function') {
      doc.autoTable.apply(doc, Array.prototype.slice.call(arguments, 1));
    } else if (window.jspdf && window.jspdf.jspdf && typeof window.jspdf.jspdf.autoTable === 'function') {
      window.jspdf.jspdf.autoTable.apply(doc, Array.prototype.slice.call(arguments, 1));
    } else {
      console.error('autoTable function not found');
    }
  };
</script>

<script>
  // Importar el servicio de listados
  import * as listadosService from '../../services/listados-service';
  
  document.addEventListener('DOMContentLoaded', async () => {
    // Obtener el ID del listado de la URL
    const urlParts = window.location.pathname.split('/');
    const listadoId = urlParts[urlParts.length - 1];
    
    // Referencias a elementos del DOM
    const loadingMessage = document.getElementById('loading-message');
    const listadoContent = document.getElementById('listado-content');
    const listadoTitle = document.getElementById('listado-title');
    const listadoDescripcion = document.getElementById('listado-descripcion');
    const listadoCategoria = document.getElementById('listado-categoria');
    const listadoAnimalesCount = document.getElementById('listado-animales-count');
    const listadoFecha = document.getElementById('listado-fecha');
    const emptyMessage = document.getElementById('empty-message');
    const animalsTable = document.getElementById('animals-table');
    const animalsContainer = document.getElementById('animals-container');
    
    try {
      // Obtener los detalles del listado
      const listado = await listadosService.getListado(listadoId);
      
      if (listado) {
        // Actualizar el título y descripción
        if (listadoTitle) listadoTitle.textContent = listado.nombre || '';
        if (listadoDescripcion) listadoDescripcion.textContent = listado.descripcion || '';
        
        // Actualizar los detalles del listado
        if (listadoCategoria) {
          // Convertir la categoría a un nombre legible en español
          let categoriaTexto = '-';
          switch(listado.categoria) {
            case 'vaccination':
            case 'vacunacion':
              categoriaTexto = 'Vacunación';
              break;
            case 'treatment':
            case 'tratamiento':
              categoriaTexto = 'Tratamiento';
              break;
            case 'inspection':
            case 'inspeccion':
              categoriaTexto = 'Inspección';
              break;
            case 'other':
            case 'otro':
              categoriaTexto = 'Otro';
              break;
            default:
              categoriaTexto = listado.categoria || '-';
          }
          listadoCategoria.textContent = categoriaTexto;
        }
        if (listadoAnimalesCount) listadoAnimalesCount.textContent = listado.animales?.length || 0;
        if (listadoFecha) listadoFecha.textContent = listado.created_at ? new Date(listado.created_at).toLocaleDateString() : '-';
        
        // Mostrar los animales si hay
        if (listado.animales && listado.animales.length > 0) {
          if (emptyMessage) emptyMessage.classList.add('hidden');
          if (animalsTable) animalsTable.classList.remove('hidden');
          
          // Limpiar el contenedor
          if (animalsContainer) animalsContainer.innerHTML = '';
          
          // Crear una fila para cada animal
          listado.animales.forEach(animal => {
            const row = document.createElement('tr');
            
            // Determinar el género en formato legible
            const genero = animal.genere === 'M' ? 'Toro' : 'Vaca';
            
            // Determinar el estado en formato legible
            const estado = animal.estado === 'OK' ? 'Activo' : 'Inactivo';
            
            // Crear las celdas
            row.innerHTML = `
              <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 dark:text-white sm:pl-6">
                ${animal.nom || ''}
              </td>
              <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400">
                ${animal.id || ''}
              </td>
              <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400">
                ${animal.explotacio || ''}
              </td>
              <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400">
                ${genero}
              </td>
              <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400">
                <select class="estado-animal border-gray-300 rounded-md text-sm" data-animal-id="${animal.id}">
                  <option value="OK">OK</option>
                  <option value="NO" selected>NO</option>
                </select>
              </td>
              <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400">
                <input type="text" class="observaciones-animal border-gray-300 rounded-md text-sm w-full" data-animal-id="${animal.id}" placeholder="Observaciones" value="${animal.observaciones || ''}">
              </td>
            `;
            
            // Añadir la fila a la tabla
            if (animalsContainer) animalsContainer.appendChild(row);
          });
        } else {
          // Mostrar mensaje de que no hay animales
          if (emptyMessage) emptyMessage.classList.remove('hidden');
          if (animalsTable) animalsTable.classList.add('hidden');
        }
        
        // Ocultar el mensaje de carga y mostrar el contenido
        if (loadingMessage) loadingMessage.classList.add('hidden');
        if (listadoContent) listadoContent.classList.remove('hidden');
        
        // Configurar el botón de guardar cambios
        const guardarCambiosBtn = document.getElementById('guardar-cambios');
        const mensajeExito = document.getElementById('mensaje-exito');
        const mensajeError = document.getElementById('mensaje-error');
        
        if (guardarCambiosBtn) {
          guardarCambiosBtn.addEventListener('click', async () => {
            try {
              // Recopilar los datos de los animales
              const animalesActualizados = [];
              
              // Obtener todos los elementos de estado y observaciones
              const estadoSelects = document.querySelectorAll('.estado-animal');
              const observacionesInputs = document.querySelectorAll('.observaciones-animal');
              
              // Crear array con los datos de los animales
              estadoSelects.forEach((select, index) => {
                const animalId = parseInt(select.getAttribute('data-animal-id'));
                const estado = select.value;
                const observaciones = observacionesInputs[index]?.value || '';
                
                animalesActualizados.push({
                  id: animalId,
                  estado: estado,
                  observaciones: observaciones
                });
                
                console.log(`Animal ${animalId}: estado=${estado}, observaciones=${observaciones}`);
              });
              
              // Enviar los datos al servidor
              const response = await listadosService.updateListadoAnimales(listadoId, animalesActualizados);
              
              // Mostrar mensaje de éxito
              if (mensajeExito) {
                mensajeExito.classList.remove('hidden');
                mensajeError.classList.add('hidden');
                
                // Actualizar el contador de animales confirmados
                const confirmados = animalesActualizados.filter(a => a.estado === 'OK').length;
                const total = animalesActualizados.length;
                const listadoAnimalesCount = document.getElementById('listado-animales-count');
                if (listadoAnimalesCount) {
                  listadoAnimalesCount.innerHTML = `<span class="text-green-600 font-medium">${confirmados}</span>/${total}`;
                }
                
                // Ocultar mensaje después de 3 segundos
                setTimeout(() => {
                  mensajeExito.classList.add('hidden');
                }, 3000);
              }
            } catch (error) {
              console.error('Error al guardar los cambios:', error);
              
              // Mostrar mensaje de error
              if (mensajeError) {
                mensajeError.classList.remove('hidden');
                mensajeExito.classList.add('hidden');
                
                // Ocultar mensaje después de 3 segundos
                setTimeout(() => {
                  mensajeError.classList.add('hidden');
                }, 3000);
              }
            }
          });
        }
        
        // Manejar la exportación a PDF
        const exportPdfBtn = document.getElementById('export-listado-pdf');
        if (exportPdfBtn) {
          exportPdfBtn.addEventListener('click', async () => {
            // Referencias a elementos de estado
            const statusEl = document.getElementById('pdf-export-status');
            const btnTextEl = document.getElementById('export-btn-text');
            const originalBtnText = btnTextEl.textContent;
            
            // Mostrar estado de carga
            if (statusEl) {
              statusEl.textContent = 'Generando PDF...';
              statusEl.className = 'mt-2 text-sm font-medium text-blue-600';
              statusEl.classList.remove('hidden');
            }
            
            // Cambiar texto del botón
            if (btnTextEl) {
              btnTextEl.textContent = 'Procesando...';
            }
            
            // Deshabilitar botón durante la generación
            exportPdfBtn.disabled = true;
            exportPdfBtn.classList.add('opacity-70', 'cursor-not-allowed');
            
            try {
              // Verificar si jsPDF está disponible
              if (typeof window.jspdf === 'undefined' || typeof window.jsPDF === 'undefined') {
                throw new Error('No se pudo cargar la librería jsPDF. Por favor, recargue la página e inténtelo de nuevo.');
              }

              // Obtener el idioma actual
              const currentLang = localStorage.getItem('userLanguage') || 'es';
              
              // Crear un nuevo documento PDF - igual que en la ficha de animal
              const { jsPDF } = window.jspdf;
              const doc = new jsPDF();
              
              // Obtener el nombre del listado
              const listadoTitle = document.getElementById('listado-title');
              const listadoName = listadoTitle ? listadoTitle.textContent.replace('Detalles del Listado: ', '').trim() : 'Listado';
              
              // Título del PDF
              const title = currentLang === 'ca' ? `Llistat - ${listadoName}` : `Listado - ${listadoName}`;
              
              // Añadir fecha en la esquina superior derecha
              doc.setFontSize(10);
              doc.setTextColor(100, 100, 100);
              const date = new Date().toLocaleDateString(currentLang === 'ca' ? 'ca-ES' : 'es-ES');
              doc.text(
                currentLang === 'ca' ? `Data: ${date}` : `Fecha: ${date}`, 
                195, 15, { align: 'right' }
              );
              
              // Definimos la posición inicial para el resumen
              const logoY = 10;
              const logoHeight = 35;
              let contentStartY = logoY + logoHeight + 20;
              
              // Añadir logo oficial de Masclet Imperi
              try {
                // Cargar el logo desde la ruta pública
                const img = new Image();
                img.crossOrigin = 'Anonymous';
                img.src = '/images/logo_masclet.png';
                
                // Esperar a que la imagen se cargue
                await new Promise((resolve, reject) => {
                  img.onload = resolve;
                  img.onerror = (e) => {
                    console.error('Error al cargar la imagen:', e);
                    reject(e);
                  };
                });
                
                // Tamaño y posicionamiento del logo (centrado arriba)
                const pageWidth = doc.internal.pageSize.getWidth();
                const logoWidth = 60; // Ancho del logo
                const logoHeight = 35; // Altura proporcional
                const logoX = (pageWidth / 2) - (logoWidth / 2); // Centrado
                
                // Añadir la imagen al PDF
                doc.addImage(img, 'PNG', logoX, logoY, logoWidth, logoHeight);
                
                // Añadir el título debajo del logo
                doc.setFontSize(20);
                doc.setTextColor(40, 40, 40);
                doc.text(title, pageWidth / 2, logoY + logoHeight + 10, { align: 'center' });
                
                contentStartY = logoY + logoHeight + 25;
              } catch (error) {
                console.error('Error al cargar el logo:', error);
                
                // Si hay error, usamos un título simple centrado sin logo
                const pageWidth = doc.internal.pageSize.getWidth();
                doc.setFontSize(20);
                doc.setTextColor(40, 40, 40);
                doc.text(title, pageWidth / 2, 30, { align: 'center' });
                
                contentStartY = 45;
              }
              
              // Añadir datos básicos del listado
              doc.setFontSize(14);
              doc.setTextColor(50, 50, 50);
              doc.text(currentLang === 'ca' ? 'Dades del llistat:' : 'Datos del listado:', 20, contentStartY);
              
              // Recopilar datos del listado
              const listadoCategoria = document.getElementById('listado-categoria');
              const listadoAnimalesCount = document.getElementById('listado-animales-count');
              const listadoFecha = document.getElementById('listado-fecha');
              const listadoDescripcion = document.getElementById('listado-descripcion');
              
              const datos = [
                [currentLang === 'ca' ? 'Nom' : 'Nombre', listadoName],
                [currentLang === 'ca' ? 'Categoria' : 'Categoría', listadoCategoria ? listadoCategoria.textContent : '-'],
                [currentLang === 'ca' ? 'Animals' : 'Animales', listadoAnimalesCount ? listadoAnimalesCount.textContent : '0'],
                [currentLang === 'ca' ? 'Data de creació' : 'Fecha de creación', listadoFecha ? listadoFecha.textContent : '-'],
                [currentLang === 'ca' ? 'Descripció' : 'Descripción', listadoDescripcion ? listadoDescripcion.textContent : '-']
              ];
              
              // Añadir tabla con datos del listado
              window.autoTable(doc, {
                startY: contentStartY + 10,
                head: [[currentLang === 'ca' ? 'Camp' : 'Campo', currentLang === 'ca' ? 'Valor' : 'Valor']],
                body: datos,
                theme: 'grid',
                styles: { 
                  fontSize: 9, 
                  cellPadding: 2,
                  lineWidth: 0.1,
                  lineColor: [200, 200, 200],
                  minCellHeight: 8,
                  valign: 'middle'
                },
                headStyles: { 
                  fillColor: [126, 211, 33], // Color verde lima corporativo
                  textColor: 255,
                  fontStyle: 'bold',
                  minCellHeight: 10
                },
                alternateRowStyles: {
                  fillColor: [245, 245, 245]
                },
                columnStyles: {
                  0: { cellWidth: 40, halign: 'left' }, // Columna de "Campo" más estrecha
                  1: { cellWidth: 'auto', halign: 'left' } // Columna de "Valor" usa el resto del espacio
                }
              });
              
              // Posición para la tabla de animales
              let nextY = doc.previousAutoTable.finalY + 15;
              
              // Obtener los datos de los animales
              const animalesRows = [];
              const animalesContainer = document.querySelector('#animals-table tbody');
              
              if (animalesContainer) {
                const animalesFilas = animalesContainer.querySelectorAll('tr');
                let hayAnimales = false;
                
                animalesFilas.forEach(fila => {
                  // Verificar si es una fila de datos (no de mensaje "no hay animales")
                  const celdas = fila.querySelectorAll('td');
                  if (celdas.length >= 4 && !fila.textContent.includes('No hay animales')) {
                    hayAnimales = true;
                    // Extraer información de las celdas: nombre, código, explotación, género, confirmación y observaciones
                    const nombre = celdas[0]?.textContent?.trim() || 'N/A';
                    const codigo = celdas[1]?.textContent?.trim() || 'N/A';
                    const explotacion = celdas[2]?.textContent?.trim() || 'N/A';
                    const genero = celdas[3]?.textContent?.trim() || 'N/A';
                    // Ponemos NO/OK en la columna de confirmación para que el operario solo tenga que marcar la opción correcta
                    const confirmacion = 'NO/OK';
                    // Dejamos observaciones vacía para que puedan rellenarla manualmente
                    const observaciones = '';
                    
                    // Añadir a los datos de la tabla
                    animalesRows.push([nombre, codigo, explotacion, genero, confirmacion, observaciones]);
                  }
                });
                
                // Si hay animales, añadir la tabla
                if (hayAnimales && animalesRows.length > 0) {
                  // Título de la sección de animales
                  doc.setFontSize(14);
                  doc.setTextColor(50, 50, 50);
                  doc.text(currentLang === 'ca' ? 'Animals al llistat:' : 'Animales en el listado:', 20, nextY);
                  
                  // Cabecera de la tabla de animales
                  const animalesHead = [
                    currentLang === 'ca' ? 'Nom' : 'Nombre', 
                    currentLang === 'ca' ? 'Codi' : 'Código', 
                    currentLang === 'ca' ? 'Explotació' : 'Explotación', 
                    currentLang === 'ca' ? 'Gènere' : 'Género',
                    currentLang === 'ca' ? 'Confirmació' : 'Confirmación',
                    currentLang === 'ca' ? 'Observacions' : 'Observaciones'
                  ];
                  
                  // Añadir tabla de animales con anchos de columna ajustados
                  window.autoTable(doc, {
                    startY: nextY + 5,
                    head: [animalesHead],
                    body: animalesRows,
                    theme: 'grid',
                    styles: { 
                      fontSize: 8, 
                      cellPadding: 2,
                      lineWidth: 0.1,
                      lineColor: [200, 200, 200],
                      minCellHeight: 8,
                      valign: 'middle'
                    },
                    headStyles: { 
                      fillColor: [126, 211, 33], // Color verde lima corporativo
                      textColor: 255,
                      fontStyle: 'bold',
                      minCellHeight: 10
                    },
                    alternateRowStyles: {
                      fillColor: [245, 245, 245]
                    },
                    columnStyles: {
                      0: { cellWidth: 25 }, // Nombre - ancho ajustado
                      1: { cellWidth: 20 }, // Código - ancho ajustado
                      2: { cellWidth: 25 }, // Explotación - ancho ajustado
                      3: { cellWidth: 15 }, // Género - ancho más pequeño
                      4: { cellWidth: 25 }, // Confirmación - espacio para marcar
                      5: { cellWidth: 'auto' } // Observaciones - usa el resto del espacio disponible
                    }
                  });
                  
                  nextY = doc.previousAutoTable.finalY + 10;
                }
              }
              
              // Añadir pie de página
              const pageCount = doc.internal.getNumberOfPages();
              for (let i = 1; i <= pageCount; i++) {
                doc.setPage(i);
                doc.setFontSize(8);
                doc.setTextColor(150, 150, 150);
                const pageWidth = doc.internal.pageSize.getWidth();
                doc.text(
                  'Masclet Imperi - Sistema de Gestión Ganadera', 
                  pageWidth / 2, 
                  doc.internal.pageSize.getHeight() - 10, 
                  { align: 'center' }
                );
                doc.text(
                  `Página ${i} de ${pageCount}`, 
                  pageWidth / 2, 
                  doc.internal.pageSize.getHeight() - 5, 
                  { align: 'center' }
                );
              }
              
              // Guardar el PDF
              doc.save(`listado_${listadoName.replace(/\s+/g, '_').toLowerCase()}_${new Date().toISOString().split('T')[0]}.pdf`);
              
              // Mostrar mensaje de éxito
              if (statusEl) {
                statusEl.textContent = 'PDF generado correctamente';
                statusEl.className = 'mt-2 text-sm font-medium text-green-600';
              }
                          } catch (error) {
                console.error('Error al generar el PDF:', error);
                
                // Mostrar error en la interfaz
                if (statusEl) {
                  statusEl.textContent = `Error: ${error.message || 'No se pudo generar el PDF'}`;
                  statusEl.className = 'mt-2 text-sm font-medium text-red-600';
                }
              } finally {
                // Restaurar botón
                if (btnTextEl) {
                  btnTextEl.textContent = originalBtnText;
                }
                
                // Habilitar botón
                exportPdfBtn.disabled = false;
                exportPdfBtn.classList.remove('opacity-70', 'cursor-not-allowed');
                
                // Ocultar mensaje de estado después de 5 segundos si fue exitoso
                if (statusEl && statusEl.classList.contains('text-green-600')) {
                  setTimeout(() => {
                    statusEl.classList.add('hidden');
                  }, 5000);
                }
              }
          });
        }
      }
    } catch (error) {
      console.error('Error al cargar los detalles del listado:', error);
      if (loadingMessage) {
        loadingMessage.innerHTML = '<p class="text-red-500">Error al cargar los detalles del listado. Por favor, intenta nuevamente.</p>';
      }
    }
  });
</script>
