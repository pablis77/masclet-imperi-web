---
// Importar el layout
import MainLayout from '../components/layout/MainLayout.astro';
import { t } from '../i18n/config';

// Definir rol de usuario (esto eventualmente vendrá de la autenticación)
const userRole = "administrador"; // Simulación de rol
---

<MainLayout title={t('notification.system_alerts')} userRole={userRole}>
  <div class="container mx-auto px-4 py-6">
    <div class="mb-6">
      <h1 class="text-2xl font-bold text-gray-800 dark:text-white">{t('notification.system_alerts')}</h1>
      <p class="text-gray-500 dark:text-gray-400">{t('notification.view_all_description')}</p>
    </div>

    <div class="bg-white dark:bg-gray-800 shadow-md rounded-lg p-6">
      <div class="flex justify-between items-center mb-6">
        <div>
          <span class="text-gray-700 dark:text-gray-300">{t('notification.filter_by')}:</span>
          <select id="filter-type" class="ml-2 p-2 border border-gray-300 dark:border-gray-700 rounded-md bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300">
            <option value="all">{t('notification.all_types')}</option>
            <option value="system">{t('notification.types.system')}</option>
            <option value="backup">{t('notification.types.backup')}</option>
            <option value="animal">{t('notification.types.animal')}</option>
            <option value="import">{t('notification.types.import')}</option>
          </select>
        </div>
        <div>
          <button id="mark-all-read-btn" class="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary-dark">
            {t('notification.mark_all_read')}
          </button>
          <button id="clear-all-btn" class="ml-2 px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600">
            {t('notification.clear_all')}
          </button>
        </div>
      </div>

      <div id="notifications-container" class="divide-y divide-gray-100 dark:divide-gray-700">
        <!-- Las notificaciones se cargarán dinámicamente desde el backend -->
        <div class="text-center py-12 text-gray-500 dark:text-gray-400">
          <div class="animate-spin inline-block w-8 h-8 border-4 border-current border-t-transparent rounded-full mb-4" role="status">
            <span class="sr-only">Cargando...</span>
          </div>
          <p>{t('notification.loading')}</p>
        </div>
      </div>

      <div class="mt-6 flex justify-between items-center">
        <div class="text-sm text-gray-500 dark:text-gray-400">
          <span id="notifications-count">0</span> {t('notification.total_count')}
        </div>
        <div>
          <button id="load-more-btn" class="px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600 hidden">
            {t('notification.load_more')}
          </button>
        </div>
      </div>
    </div>
  </div>

  <script>
    import { notificationService } from '../services/notificationService';

    // Estado para la paginación y filtrado
    let currentSkip = 0;
    let currentLimit = 20;
    let currentFilter = 'all';
    let hasMore = false;

    // Referencias a elementos DOM
    const container = document.getElementById('notifications-container');
    const countElement = document.getElementById('notifications-count');
    const loadMoreBtn = document.getElementById('load-more-btn');
    const filterSelect = document.getElementById('filter-type');
    const markAllReadBtn = document.getElementById('mark-all-read-btn');
    const clearAllBtn = document.getElementById('clear-all-btn');

    // Crear elemento HTML para una notificación
    function createNotificationElement(notification) {
      const notificationEl = document.createElement('div');
      notificationEl.className = `p-4 hover:bg-gray-50 dark:hover:bg-gray-700 ${notification.read ? 'opacity-70' : ''}`;
      
      // Definir color de fondo según tipo
      let bgColorClass = 'bg-blue-100 dark:bg-blue-900/30';
      let textColorClass = 'text-blue-600 dark:text-blue-400';
      
      switch (notification.type) {
        case 'system':
          bgColorClass = 'bg-amber-100 dark:bg-amber-900/30';
          textColorClass = 'text-amber-600 dark:text-amber-400';
          break;
        case 'backup':
          bgColorClass = 'bg-green-100 dark:bg-green-900/30';
          textColorClass = 'text-green-600 dark:text-green-400';
          break;
        case 'animal':
          bgColorClass = 'bg-blue-100 dark:bg-blue-900/30';
          textColorClass = 'text-blue-600 dark:text-blue-400';
          break;
        case 'import':
          bgColorClass = 'bg-purple-100 dark:bg-purple-900/30';
          textColorClass = 'text-purple-600 dark:text-purple-400';
          break;
        default:
          break;
      }

      notificationEl.innerHTML = `
        <div class="flex items-start">
          <div class="flex-shrink-0 ${bgColorClass} p-3 rounded-full">
            <span class="${textColorClass} text-lg">${notification.icon}</span>
          </div>
          <div class="ml-4 flex-1">
            <div class="flex justify-between">
              <h3 class="text-sm font-medium text-gray-800 dark:text-white">${notification.title}</h3>
              <span class="text-xs text-gray-500 dark:text-gray-400">${notification.relative_time}</span>
            </div>
            <p class="mt-1 text-sm text-gray-600 dark:text-gray-300">${notification.message}</p>
            <div class="mt-2 flex">
              <button class="text-xs text-primary hover:underline mr-3 mark-read-btn" data-id="${notification.id}">
                ${notification.read ? 'Ya leído' : 'Marcar como leído'}
              </button>
              <button class="text-xs text-red-500 hover:underline delete-btn" data-id="${notification.id}">
                Eliminar
              </button>
            </div>
          </div>
        </div>
      `;

      // Añadir event listeners
      const markReadBtn = notificationEl.querySelector('.mark-read-btn');
      if (markReadBtn) {
        markReadBtn.addEventListener('click', async () => {
          const id = parseInt(markReadBtn.getAttribute('data-id'));
          await notificationService.markAsRead(id);
          loadNotifications(currentSkip, currentLimit, currentFilter);
        });
      }

      const deleteBtn = notificationEl.querySelector('.delete-btn');
      if (deleteBtn) {
        deleteBtn.addEventListener('click', async () => {
          const id = parseInt(deleteBtn.getAttribute('data-id'));
          await notificationService.deleteNotification(id);
          loadNotifications(0, currentLimit, currentFilter);
        });
      }

      return notificationEl;
    }

    // Cargar notificaciones
    async function loadNotifications(skip = 0, limit = 20, type = 'all') {
      if (container) {
        // Mostrar estado de carga solo en la primera carga
        if (skip === 0) {
          container.innerHTML = `
            <div class="text-center py-12 text-gray-500 dark:text-gray-400">
              <div class="animate-spin inline-block w-8 h-8 border-4 border-current border-t-transparent rounded-full mb-4" role="status">
                <span class="sr-only">Cargando...</span>
              </div>
              <p>Cargando notificaciones...</p>
            </div>
          `;
        }

        try {
          // Determinar si se debe filtrar por tipo
          const unreadOnly = false; // Mostrar todas, no solo las no leídas
          
          // Obtener notificaciones
          const response = await notificationService.getNotifications(unreadOnly, limit, skip);
          
          // Verificar que la respuesta es válida
          if (!response || typeof response !== 'object') {
            console.error('La respuesta del servidor no es válida:', response);
            container.innerHTML = `
              <div class="text-center py-12 text-gray-500 dark:text-gray-400">
                <p>Error al cargar notificaciones. Respuesta inválida.</p>
              </div>
            `;
            return;
          }
          
          // Si es la primera carga (skip=0), limpiar el contenedor
          if (skip === 0) {
            container.innerHTML = '';
          }

          // Asegurar que items existe y es un array
          const items = response.items || [];
          
          // Actualizar contador
          if (countElement) {
            countElement.textContent = response.total || 0;
          }

          // Mostrar botón de cargar más si hay más notificaciones
          if (loadMoreBtn) {
            if (response.has_more) {
              loadMoreBtn.classList.remove('hidden');
              hasMore = true;
            } else {
              loadMoreBtn.classList.add('hidden');
              hasMore = false;
            }
          }

          // Si no hay notificaciones, mostrar mensaje
          if (items.length === 0 && skip === 0) {
            container.innerHTML = `
              <div class="text-center py-12 text-gray-500 dark:text-gray-400">
                <p>No hay notificaciones para mostrar</p>
              </div>
            `;
            return;
          }

          // Filtrar notificaciones por tipo si es necesario
          let filteredItems = items;
          if (type !== 'all') {
            filteredItems = items.filter(item => item && item.type === type);
          }

          // Si después de filtrar no hay notificaciones, mostrar mensaje
          if (filteredItems.length === 0 && skip === 0) {
            container.innerHTML = `
              <div class="text-center py-12 text-gray-500 dark:text-gray-400">
                <p>No hay notificaciones de este tipo</p>
              </div>
            `;
            return;
          }

          // Añadir notificaciones al contenedor
          filteredItems.forEach(notification => {
            const notificationElement = createNotificationElement(notification);
            container.appendChild(notificationElement);
          });

        } catch (error) {
          console.error('Error al cargar notificaciones:', error);
          container.innerHTML = `
            <div class="text-center py-12 text-red-500">
              <p>Error al cargar notificaciones. Por favor, inténtalo de nuevo.</p>
            </div>
          `;
        }
      }
    }

    // Event listeners
    document.addEventListener('DOMContentLoaded', () => {
      // Cargar notificaciones iniciales
      loadNotifications(0, currentLimit, currentFilter);

      // Filtrar por tipo
      if (filterSelect) {
        filterSelect.addEventListener('change', () => {
          currentFilter = filterSelect.value;
          currentSkip = 0; // Resetear paginación
          loadNotifications(0, currentLimit, currentFilter);
        });
      }

      // Cargar más notificaciones
      if (loadMoreBtn) {
        loadMoreBtn.addEventListener('click', () => {
          if (hasMore) {
            currentSkip += currentLimit;
            loadNotifications(currentSkip, currentLimit, currentFilter);
          }
        });
      }

      // Marcar todas como leídas
      if (markAllReadBtn) {
        markAllReadBtn.addEventListener('click', async () => {
          await notificationService.markAllAsRead();
          loadNotifications(0, currentLimit, currentFilter);
        });
      }

      // Limpiar todas las notificaciones
      if (clearAllBtn) {
        clearAllBtn.addEventListener('click', async () => {
          if (confirm('¿Estás seguro de que quieres eliminar todas las notificaciones?')) {
            // Aquí iría la llamada al servicio para eliminar todas las notificaciones
            // Por ahora, simplemente recargamos la página
            loadNotifications(0, currentLimit, currentFilter);
          }
        });
      }
    });

    // Iniciar el servicio de notificaciones
    notificationService.startPolling(60000); // Actualizar cada minuto
  </script>
</MainLayout>
