---
import LoginLayout from '../layouts/LoginLayout.astro';
import PasswordErrorModal from '../components/modals/PasswordErrorModal';
---

<LoginLayout title="Login - Masclet Imperi">
  <div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
      {/* Modal de error de contraseña */}
      <PasswordErrorModal client:only="react" isOpen={false} onClose={() => {}} id="passwordErrorModal" />
      <div class="flex flex-col items-center">
        <!-- Logo grande -->        
        <img src="/images/logo_masclet.jpg" alt="Logo Masclet Imperi" class="w-48 h-auto mb-6">
        
        <h2 class="mt-2 text-center text-3xl font-extrabold text-gray-900">
          Iniciar sesión
        </h2>
        <p class="mt-2 text-center text-sm text-gray-600">
          Accede a la plataforma de gestión
        </p>
      </div>
      <div class="mt-8 bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
        <form id="loginForm" class="space-y-6">
          <div>
            <label for="username" class="block text-sm font-medium text-gray-700">
              Usuario
            </label>
            <div class="mt-1">
              <input id="username" name="username" type="text" required class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" value="admin">
            </div>
          </div>

          <div>
            <label for="password" class="block text-sm font-medium text-gray-700">
              Contraseña
            </label>
            <div class="mt-1">
              <input id="password" name="password" type="password" required class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" value="admin123">
            </div>
          </div>

          <div>
            <button type="submit" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
              Iniciar sesión
            </button>
          </div>
        </form>
        
        <div id="loginStatus" class="mt-4 text-sm hidden"></div>
        
        <div class="mt-6">
          <div class="relative">
            <div class="absolute inset-0 flex items-center">
              <div class="w-full border-t border-gray-300"></div>
            </div>
            <div class="relative flex justify-center text-sm">
              <span class="px-2 bg-white text-gray-500">
                Masclet Imperi
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</LoginLayout>

<script>
  // Importar el servicio de API
  import apiService from '../services/apiService';

  // Definimos una variable global para el estado del modal
  window.showPasswordErrorModal = function() {
    // Acceder al componente React directamente mediante eventos personalizados
    document.dispatchEvent(new CustomEvent('show-password-error'));
  };
  
  // Función para manejar el inicio de sesión
  document.addEventListener('DOMContentLoaded', () => {
    const loginForm = document.getElementById('loginForm');
    
    // Crear un script que maneje la interacción con el componente React
    const script = document.createElement('script');
    script.textContent = `
      // Esta función se ejecutará cuando el componente React esté listo
      document.addEventListener('astro:page-load', () => {
        // Escuchar el evento personalizado para mostrar el modal
        document.addEventListener('show-password-error', () => {
          // Buscar el elemento modal por su ID
          const modal = document.getElementById('passwordErrorModal');
          if (modal) {
            // Enviar mensaje al componente React para cambiar su estado
            const event = new CustomEvent('update-modal-state', { 
              detail: { isOpen: true } 
            });
            modal.dispatchEvent(event);
          }
        });
      });
    `;
    document.head.appendChild(script);
    
    loginForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const username = document.getElementById('username').value;
      const password = document.getElementById('password').value;
      
      try {
        const response = await apiService.login(username, password);
        
        // Verificar la estructura de la respuesta para obtener el token
        const token = response.data?.access_token || response.access_token;
        
        if (token) {
          console.log('Login exitoso, token recibido:', token);
          // Guardar el token y redirigir al dashboard
          localStorage.setItem('token', token);
          
          // Guardar info del usuario si está disponible
          if (response.data?.user || response.user) {
            const userData = response.data?.user || response.user;
            localStorage.setItem('user', JSON.stringify(userData));
          }
          
          // Redireccionar al dashboard principal
          console.log('Redirigiendo a la página principal (dashboard)');
          window.location.href = '/';
          return; // Importante: salir de la función para evitar ejecutar código después de la redirección
        } else {
          console.error('Error de autenticación: No se encontró token en la respuesta:', response);
          // Mostrar el modal con el perro de Ramon
          window.showPasswordErrorModal();
        }
      } catch (error) {
        console.error('Error al iniciar sesión:', error);
        // Mostrar el modal con el perro de Ramon
        window.showPasswordErrorModal();
      }
    });
    
    // Función para mostrar mensajes de estado
    function showStatus(message: string, type: 'success' | 'error' | 'info') {
      if (!loginStatus) return;
      
      loginStatus.textContent = message;
      loginStatus.classList.remove('hidden', 'text-green-500', 'text-red-500', 'text-blue-500');
      
      switch (type) {
        case 'success':
          loginStatus.classList.add('text-green-500');
          break;
        case 'error':
          loginStatus.classList.add('text-red-500');
          break;
        case 'info':
          loginStatus.classList.add('text-blue-500');
          break;
      }
    }
  });
</script>
