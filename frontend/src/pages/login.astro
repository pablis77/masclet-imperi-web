---
import LoginLayout from '../layouts/LoginLayout.astro';
import PasswordErrorModal from '../components/modals/PasswordErrorModal';
---

<LoginLayout title="Login - Masclet Imperi">
  <div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
      {/* Modal de error de contraseña */}
      <PasswordErrorModal client:only="react" isOpen={false} onClose={() => {}} id="passwordErrorModal" />
      <div class="flex flex-col items-center">
        <!-- Logo grande -->        
        <img src="/images/logo_masclet.jpg" alt="Logo Masclet Imperi" class="w-48 h-auto mb-6">
        
        <h2 class="mt-2 text-center text-3xl font-extrabold text-gray-900">
          Iniciar sesión
        </h2>
        <p class="mt-2 text-center text-sm text-gray-600">
          Accede a la plataforma de gestión
        </p>
      </div>
      <div class="mt-8 bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
        <form id="loginForm" class="space-y-6">
          <div>
            <label for="username" class="block text-sm font-medium text-gray-700">
              Usuario
            </label>
            <div class="mt-1">
              <input id="username" name="username" type="text" required class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" value="admin">
            </div>
          </div>

          <div>
            <label for="password" class="block text-sm font-medium text-gray-700">
              Contraseña
            </label>
            <div class="mt-1">
              <input id="password" name="password" type="password" required class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" value="admin123">
            </div>
          </div>

          <div>
            <button type="submit" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
              Iniciar sesión
            </button>
          </div>
        </form>
        
        <div id="loginStatus" class="mt-4 text-sm hidden"></div>
        
        <div class="mt-6">
          <div class="relative">
            <div class="absolute inset-0 flex items-center">
              <div class="w-full border-t border-gray-300"></div>
            </div>
            <div class="relative flex justify-center text-sm">
              <span class="px-2 bg-white text-gray-500">
                Masclet Imperi
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</LoginLayout>

<script>
  // Importar servicio de autenticación centralizado
  import { login } from '../services/authService.centralizado';

  // Definimos una variable global para el estado del modal
  window.showPasswordErrorModal = function() {
    // Acceder al componente React directamente mediante eventos personalizados
    document.dispatchEvent(new CustomEvent('show-password-error'));
  };
  
  // Función para manejar el inicio de sesión
  document.addEventListener('DOMContentLoaded', () => {
    const loginForm = document.getElementById('loginForm');
    
    // Crear un script que maneje la interacción con el componente React
    const script = document.createElement('script');
    script.textContent = `
      // Esta función se ejecutará cuando el componente React esté listo
      document.addEventListener('astro:page-load', () => {
        // Escuchar el evento personalizado para mostrar el modal
        document.addEventListener('show-password-error', () => {
          // Buscar el elemento modal por su ID
          const modal = document.getElementById('passwordErrorModal');
          if (modal) {
            // Enviar mensaje al componente React para cambiar su estado
            const event = new CustomEvent('update-modal-state', { 
              detail: { isOpen: true } 
            });
            modal.dispatchEvent(event);
          }
        });
      });
    `;
    document.head.appendChild(script);
    
    loginForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const username = document.getElementById('username').value;
      const password = document.getElementById('password').value;
      
      try {
        const response = await login({ username, password });
        
        // Verificar la estructura de la respuesta para obtener el token
        const token = response.data?.access_token || response.access_token;
        
        if (token) {
          console.log('Login exitoso, token recibido:', token);
          // Guardar el token y redirigir al dashboard
          localStorage.setItem('token', token);
          
          // Guardar info del usuario si está disponible
          if (response.data?.user || response.user) {
            const userData = response.data?.user || response.user;
            
            // SOLUCIÓN MEJORADA: Corregir el rol para Ramon
            if (userData.username && userData.username.toLowerCase() === 'ramon') {
              console.log('🔴 Usuario Ramon detectado, FORZANDO rol Ramon');
              userData.role = 'Ramon';
              
              // También guardar el rol por separado para mayor seguridad
              localStorage.setItem('userRole', 'Ramon');
              console.log('🔴 Rol Ramon guardado separadamente para mayor seguridad');
              
              // Añadir un indicador especial para verificaciones futuras
              localStorage.setItem('ramonFix', 'true');
            } else if (userData.role === 'gerente') {
              console.log('Rol gerente detectado, convirtiendo a Ramon');
              userData.role = 'Ramon';
              localStorage.setItem('userRole', 'Ramon');
            }
            
            // Guardar el usuario actualizado
            localStorage.setItem('user', JSON.stringify(userData));
            
            // También guardar el rol por separado para mayor seguridad
            if (userData.role) {
              localStorage.setItem('userRole', userData.role);
            }
          }
          
          // Redireccionar al dashboard principal
          console.log('Redirigiendo a la página principal (dashboard)');
          window.location.href = '/';
          return; // Importante: salir de la función para evitar ejecutar código después de la redirección
        } else {
          console.error('Error de autenticación: No se encontró token en la respuesta:', response);
          // Mostrar el modal con el perro de Ramon
          window.showPasswordErrorModal();
        }
      } catch (error) {
        console.error('Error al iniciar sesión:', error);
        // Mostrar el modal con el perro de Ramon
        window.showPasswordErrorModal();
      }
    });
    
    // Función para mostrar mensajes de estado
    function showStatus(message: string, type: 'success' | 'error' | 'info') {
      if (!loginStatus) return;
      
      loginStatus.textContent = message;
      loginStatus.classList.remove('hidden', 'text-green-500', 'text-red-500', 'text-blue-500');
      
      switch (type) {
        case 'success':
          loginStatus.classList.add('text-green-500');
          break;
        case 'error':
          loginStatus.classList.add('text-red-500');
          break;
        case 'info':
          loginStatus.classList.add('text-blue-500');
          break;
      }
    }
  });

  // Funciones agregadas para el test de permisos de Ramon
  
  /**
   * Extrae el rol del token JWT
   * @returns Rol del usuario o 'usuario' si no se puede extraer
   */
  function extractRoleFromToken() {
    console.log('extractRoleFromToken llamada desde login.astro');
    
    // Verificar primero por localStorage (prioridad más alta)
    const userJson = localStorage.getItem('user');
    if (userJson) {
      try {
        const user = JSON.parse(userJson);
        
        // Verificación especial para Ramon
        if (user.username && user.username.toLowerCase() === 'ramon') {
          console.log('Usuario Ramon detectado en extractRoleFromToken de login.astro');
          return 'Ramon';
        }
        
        // Si hay un rol definido, usarlo
        if (user.role) {
          // Convertir 'gerente' a 'Ramon' por compatibilidad
          if (user.role === 'gerente') {
            console.log('Rol gerente detectado, convirtiendo a Ramon');
            return 'Ramon';
          }
          return user.role;
        }
      } catch (e) {
        console.error('Error al parsear usuario:', e);
      }
    }
    
    // Verificar por rol explícito
    const explicitRole = localStorage.getItem('userRole');
    if (explicitRole) {
      if (explicitRole === 'gerente') {
        return 'Ramon'; // Compatibilidad
      }
      return explicitRole;
    }
    
    return 'usuario'; // Valor por defecto
  }
  
  /**
   * Obtiene el rol del usuario actual
   * @returns Rol del usuario actual
   */
  function getCurrentUserRole() {
    console.log('getCurrentUserRole llamada desde login.astro');
    
    // Verificar el indicador especial de Ramon
    const ramonFix = localStorage.getItem('ramonFix');
    if (ramonFix === 'true') {
      console.log('Indicador ramonFix encontrado, retornando rol Ramon');
      return 'Ramon';
    }
    
    // Usar extractRoleFromToken como fallback
    return extractRoleFromToken();
  }
  
  /**
   * Obtiene el objeto de usuario almacenado
   * @returns El objeto de usuario o null si no existe
   */
  function getStoredUser() {
    console.log('getStoredUser llamada desde login.astro');
    
    const userJson = localStorage.getItem('user');
    if (!userJson) {
      return null;
    }
    
    try {
      const user = JSON.parse(userJson);
      
      // Verificación especial para Ramon
      if (user.username && user.username.toLowerCase() === 'ramon') {
        if (user.role !== 'Ramon') {
          console.log('Corrigiendo rol de Ramon en getStoredUser de login.astro');
          user.role = 'Ramon';
          localStorage.setItem('user', JSON.stringify(user));
          localStorage.setItem('userRole', 'Ramon');
        }
      }
      
      return user;
    } catch (e) {
      console.error('Error al obtener usuario:', e);
      return null;
    }
  }
</script>
