/**
 * Formulario para cambios habituales en animales
 */
interface Props {
  animal: any;
}

const { animal } = Astro.props;
---

<form id="form-habituales" class="space-y-6">
  <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">Estado y Amamantamiento</h3>
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <!-- Columna 1 -->
    <div class="space-y-4">
      <div>
        <label for="estado_hab" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Estado</label>
        <select 
          id="estado_hab" 
          name="estado_hab" 
          class="w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
          data-original-value={animal.estado || ''}
          onchange="this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';"
          disabled={animal.estado === 'DEF'}
        >
          <option value="OK" selected={animal.estado === 'OK'}>Activo</option>
          <option value="DEF" selected={animal.estado === 'DEF'}>Fallecido</option>
        </select>
        {animal.estado === 'DEF' && (
          <div class="text-xs text-red-500 mt-1">No se puede cambiar el estado de un animal fallecido a activo</div>
        )}
      </div>
    </div>
    
    <!-- Columna 2 -->
    <div class="space-y-4">
      {animal.genere === 'F' && (
        <div>
          <label for="alletar" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Estado de amamantamiento</label>
          <select 
            id="alletar" 
            name="alletar" 
            class="w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            data-original-value={animal.alletar !== null ? animal.alletar.toString() : ''}
            onchange="this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';"
          >
            <option value="0" selected={animal.alletar === 0}>No amamanta</option>
            <option value="1" selected={animal.alletar === 1}>Un ternero</option>
            <option value="2" selected={animal.alletar === 2}>Dos terneros</option>
          </select>
        </div>
      )}
    </div>
  </div>
  
  <div class="mt-6 mb-2">
    <button type="submit" class="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50">
      Guardar Cambios
    </button>
  </div>

  {animal.genere === 'F' && (
    <div class="mt-10 pt-6 border-t border-gray-200 dark:border-gray-700">
      <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-4">Registrar Nuevo Parto</h3>
      
      <div class="space-y-4">
        <div>
          <label for="part" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Fecha del parto <span class="text-red-500">*</span></label>
          <input 
            type="date" 
            id="part" 
            name="part" 
            class="w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            required
          />
        </div>
        
        <div>
          <label for="GenereT" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Género de la cría <span class="text-red-500">*</span></label>
          <select 
            id="GenereT" 
            name="GenereT" 
            class="w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            required
          >
            <option value="">Seleccionar género</option>
            <option value="M">Macho</option>
            <option value="F">Hembra</option>
            <option value="esforrada">Esforrada</option>
          </select>
        </div>
        
        <div>
          <label for="EstadoT" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Estado de la cría <span class="text-red-500">*</span></label>
          <select 
            id="EstadoT" 
            name="EstadoT" 
            class="w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            required
          >
            <option value="">Seleccionar estado</option>
            <option value="OK">Vivo</option>
            <option value="DEF">Fallecido</option>
          </select>
        </div>
        
        <div>
          <label for="observacions" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Observaciones</label>
          <textarea 
            id="observacions" 
            name="observacions" 
            rows="3" 
            class="w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            placeholder="Observaciones adicionales sobre el parto..."
          ></textarea>
        </div>
        
        <div class="mt-4">
          <button 
            id="registrar-parto-btn" 
            type="button" 
            class="px-4 py-2 bg-secondary text-white rounded-md hover:bg-secondary-dark focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-opacity-50"
          >
            Registrar Parto
          </button>
        </div>
      </div>
    </div>
  )}
</form>

<script>
  // Configurar el botón para registrar nuevo parto
  document.addEventListener('DOMContentLoaded', function() {
    // Usamos una bandera para asegurarnos de que la configuración solo ocurra una vez
    if (window.partoButtonConfigured) return;
    window.partoButtonConfigured = true;
    
    console.log('Configurando botón de registro de partos...');
    
    // Obtener referencia al botón
    const registrarPartoBtn = document.getElementById('registrar-parto-btn');
    if (!registrarPartoBtn) {
      console.error('Botón de registrar parto no encontrado');
      return;
    }
    
    // Eliminar cualquier listener existente reemplazando el botón con un clon
    const nuevoBoton = registrarPartoBtn.cloneNode(true);
    registrarPartoBtn.parentNode.replaceChild(nuevoBoton, registrarPartoBtn);
    
    // Agregar un único listener al botón nuevo
    nuevoBoton.addEventListener('click', async function(event) {
      // Prevenir comportamiento por defecto y propagación
      event.preventDefault();
      event.stopPropagation();
      
      console.log('Botón de registrar parto clickeado');
      
      // Deshabilitar el botón para evitar doble envío
      nuevoBoton.disabled = true;
      const originalText = nuevoBoton.innerHTML;
      nuevoBoton.innerHTML = '<span class="spinner"></span> Procesando...';
      
      try {
        // Obtener datos del formulario
        const part = document.getElementById('part')?.value;
        const genereT = document.getElementById('GenereT')?.value;
        const estadoT = document.getElementById('EstadoT')?.value;
        const observacions = document.getElementById('observacions')?.value;
        
        console.log('Datos del parto:', { part, genereT, estadoT, observacions });
        
        // Validar campos obligatorios
        if (!part || !genereT || !estadoT) {
          window.mostrarMensaje('Por favor, completa todos los campos obligatorios (fecha, género y estado)', 'error');
          nuevoBoton.disabled = false;
          nuevoBoton.innerHTML = originalText;
          return;
        }
        
        // Formatear fecha si es necesario (YYYY-MM-DD a DD/MM/YYYY)
        let fechaFormateada = part;
        if (part.match(/^\d{4}-\d{2}-\d{2}$/)) {
          const [year, month, day] = part.split('-');
          fechaFormateada = `${day}/${month}/${year}`;
        }
        
        // Preparar datos para envío
        const datosParto = {
          part: fechaFormateada,
          GenereT: genereT,
          EstadoT: estadoT
        };
        
        // Añadir observaciones si existen
        if (observacions) {
          datosParto.observacions = observacions;
        }
        
        // Obtener ID animal y token
        const token = localStorage.getItem('token') || 'admin123';
        const animalId = window.animalId;
        
        if (!animalId) {
          window.mostrarMensaje('Error: No se pudo determinar el ID del animal', 'error');
          nuevoBoton.disabled = false;
          nuevoBoton.innerHTML = originalText;
          return;
        }
        
        // Determinar URL base según entorno
        let apiBaseUrl = '';
        const hostname = window.location.hostname;
        const isTunnel = hostname.includes('loca.lt');
        
        if (isTunnel) {
          apiBaseUrl = 'https://api-masclet-imperi.loca.lt/api/v1';
        } else {
          apiBaseUrl = 'http://localhost:8000/api/v1';
        }
        
        console.log(`Usando URL API: ${apiBaseUrl} (${isTunnel ? 'tunnel' : 'local'})`);
        
        // Mostrar mensaje de proceso
        window.mostrarMensaje('Registrando nuevo parto...', 'info');
        
        // Realizar petición API
        const response = await fetch(`${apiBaseUrl}/animals/${animalId}/partos`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(datosParto)
        });
        
        console.log(`Respuesta: ${response.status} ${response.statusText}`);
        
        // Reactivar botón
        nuevoBoton.disabled = false;
        nuevoBoton.innerHTML = originalText;
        
        // Procesar respuesta
        if (response.ok) {
          try {
            const data = await response.json();
            console.log('Parto registrado exitosamente:', data);
            
            // Mostrar mensaje de éxito
            window.mostrarMensaje('Parto registrado correctamente', 'success');
            
            // Limpiar formulario
            document.getElementById('part').value = '';
            document.getElementById('observacions').value = '';
            
            // Recargar página
            setTimeout(() => window.location.reload(), 1500);
          } catch (error) {
            console.warn('Respuesta OK pero error al procesar JSON:', error);
            window.mostrarMensaje('Parto registrado correctamente', 'success');
            setTimeout(() => window.location.reload(), 1500);
          }
        } else {
          // Manejar error
          let mensajeError = 'Error al registrar el parto';
          
          try {
            const errorData = await response.json();
            mensajeError = errorData.message || errorData.detail || mensajeError;
          } catch (error) {
            console.error('Error al procesar respuesta de error:', error);
          }
          
          window.mostrarMensaje(`Error: ${mensajeError}`, 'error');
        }
      } catch (error) {
        // Manejar errores generales
        console.error('Error al procesar petición:', error);
        window.mostrarMensaje('Error al conectar con el servidor. Intenta de nuevo más tarde.', 'error');
        
        // Reactivar botón
        nuevoBoton.disabled = false;
        nuevoBoton.innerHTML = originalText;
      }
    });
  });
</script>
