---
/**
 * Formulario general para actualización de datos de animales
 */
import { t, getCurrentLanguage } from '../../i18n/config';

interface Props {
  animal: any;
}

const { animal } = Astro.props;

// Obtener el idioma actual
const lang = getCurrentLanguage();
console.log('[AnimalForm] Idioma detectado:', lang);

// Función para convertir fecha de cualquier formato a YYYY-MM-DD para inputs HTML
function formatDateForInput(dob) {
  if (!dob || typeof dob !== 'string') return '';
  
  // Si ya está en formato YYYY-MM-DD, devolverlo tal cual
  if (/^\d{4}-\d{2}-\d{2}$/.test(dob)) {
    return dob;
  }
  
  // Si está en formato DD/MM/YYYY, convertirlo a YYYY-MM-DD
  const match = dob.match(/^([0-9]{2})\/([0-9]{2})\/([0-9]{4})$/);
  if (match) {
    return `${match[3]}-${match[2]}-${match[1]}`;
  }
  
  // Intentar parsear como fecha
  try {
    const fecha = new Date(dob);
    if (!isNaN(fecha.getTime())) {
      const year = fecha.getFullYear();
      const month = (fecha.getMonth() + 1).toString().padStart(2, '0');
      const day = fecha.getDate().toString().padStart(2, '0');
      return `${year}-${month}-${day}`;
    }
  } catch (e) {
    console.error('Error al parsear fecha:', e);
  }
  
  // Si no coincide con ningún formato conocido, devolver cadena vacía
  return '';
}
---

<form id="form-general" class="space-y-6" data-id={animal.id}>
  <div class="flex justify-end mb-4">
    <button id="show-debug" class="text-xs bg-gray-200 hover:bg-gray-300 text-gray-700 px-2 py-1 rounded" type="button" style="display: none;">{t('animals.form.show_debug', lang)}</button>
  </div>
  <!-- Panel de depuración oculto -->
  <div id="debug-info" class="p-4 mb-4 bg-yellow-50 border border-yellow-200 rounded-lg text-xs sticky top-0 z-50 overflow-auto" style="display: none;">
    <div class="flex justify-between items-center mb-2">
      <p class="font-bold text-red-700">{t('animals.form.debug_mode', lang)}</p>
      <button id="clear-debug" class="text-xs bg-red-200 hover:bg-red-300 text-red-800 px-2 py-1 rounded" type="button">{t('animals.form.clear', lang)}</button>
    </div>
    <div id="debug-content" class="whitespace-pre-wrap overflow-auto h-60 border border-yellow-300 p-2 bg-white"></div>
  </div>
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <!-- Columna 1 -->
    <div class="space-y-4">
      <div>
        <label for="nombre" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{t('animals.form.name', lang)}</label>
        <input 
          type="text" 
          id="nombre" 
          name="nombre" 
          class="w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white" 
          value={animal.nom || ''} 
          data-original-value={animal.nom || ''}
          oninput="this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';"
        >
      </div>
      
      <div>
        <label for="genere" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{t('animals.form.gender', lang)}</label>
        <select 
          id="genere" 
          name="genere" 
          class="w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
          data-original-value={animal.genere || ''}
          onchange="this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';"
        >
          <option value="M" selected={animal.genere === 'M'}>{t('animals.form.male', lang)}</option>
          <option value="F" selected={animal.genere === 'F'}>{t('animals.form.female', lang)}</option>
        </select>
      </div>
      
      <div>
        <label for="dob" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{t('animals.form.birth_date', lang)}</label>
        <input 
          type="date" 
          id="dob" 
          name="dob" 
          class="w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white" 
          value={formatDateForInput(animal.dob)} 
          data-original-value={formatDateForInput(animal.dob)}
          oninput="this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';"
        >
      </div>
      
      <div>
        <label for="codigo" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{t('animals.form.code', lang)}</label>
        <input 
          type="text" 
          id="codigo" 
          name="codigo" 
          class="w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white" 
          value={animal.cod || ''} 
          data-original-value={animal.cod || ''}
          oninput="this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';"
        >
      </div>
      
      <div>
        <label for="num_serie" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{t('animals.form.serial_number', lang)}</label>
        <input 
          type="text" 
          id="num_serie" 
          name="num_serie" 
          class="w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white" 
          value={animal.num_serie || ''} 
          data-original-value={animal.num_serie || ''}
          oninput="this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';"
        >
      </div>
    </div>
    
    <!-- Columna 2 -->
    <div class="space-y-4">
      <div>
        <label for="explotacio" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{t('animals.form.exploitation', lang)}</label>
        <input 
          type="text" 
          id="explotacio" 
          name="explotacio" 
          class="w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white" 
          value={animal.explotacio || ''} 
          data-original-value={animal.explotacio || ''}
          oninput="this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';"
        >
      </div>
      
      <div>
        <label for="origen" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{t('animals.form.origin', lang)}</label>
        <input 
          type="text" 
          id="origen" 
          name="origen" 
          class="w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white" 
          value={animal.origen || animal.quadra || ''} 
          data-original-value={animal.origen || animal.quadra || ''}
          oninput="this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';"
        >
      </div>
      
      <div>
        <label for="pare" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{t('animals.form.father', lang)}</label>
        <input 
          type="text" 
          id="pare" 
          name="pare" 
          class="w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white" 
          value={animal.pare || ''} 
          data-original-value={animal.pare || ''}
          oninput="this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';"
        >
      </div>
      
      <div>
        <label for="mare" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{t('animals.form.mother', lang)}</label>
        <input 
          type="text" 
          id="mare" 
          name="mare" 
          class="w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white" 
          value={animal.mare || ''} 
          data-original-value={animal.mare || ''}
          oninput="this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';"
        >
        <div class="text-xs text-gray-500 mt-1">{t('animals.form.mother_hint', lang)}</div>
      </div>
      

    </div>
  </div>
  
  <!-- Campo de Observaciones (ancho completo) -->
  <div class="space-y-2">
    <label for="observaciones" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">{t('animals.form.observations', lang)}</label>
    <textarea
      id="observaciones"
      name="observaciones"
      rows="4"
      maxlength="2000"
      class="w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
      data-original-value={animal.observaciones || ''}
      oninput="this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';"
    >{animal.observaciones || ''}</textarea>
    <div class="text-xs text-gray-500 mt-1">{t('animals.form.observations_hint', lang)}</div>
  </div>
  
  <!-- Leyenda para campos obligatorios -->
  <div class="text-sm text-gray-500 dark:text-gray-400 mt-2 mb-4">
    {t('animals.form.pending_changes', lang)}
  </div>
  
  <!-- Navegación y botones secundarios -->
  <div class="flex space-x-2 mt-6">
    <a href="/animals" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors flex items-center">
      <span class="mr-1">←</span> {t('animals.form.back', lang)}
    </a>
    <a href={`/animals/${animal.id}`} class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors">
      {t('animals.form.view_detail', lang)}
    </a>
  </div>
  
  <!-- Botones de acción principales -->
  <div class="flex justify-between items-center mt-8">
    <!-- Espacio vacío a la izquierda para mantener el botón eliminar a la derecha -->
    <div></div>
    
    <!-- Contenedor central para el botón de guardar cambios -->
    <div class="flex justify-center">
      <!-- Botón para guardar cambios (verde lima, centrado) -->
      <button type="submit" id="submit-button" class="px-4 py-2 bg-lime-500 text-white rounded-md hover:bg-lime-600 transition-colors shadow-md">
        {t('animals.form.save_changes', lang)}
      </button>
    </div>
    
    <!-- Script para bloquear el botón de eliminar animal para roles restringidos -->
    <script is:inline>
      // Comprobar rol de usuario directamente aquí
      (function() {
        try {
          const token = localStorage.getItem('token');
          if (token) {
            const payload = JSON.parse(atob(token.split('.')[1]));
            const role = payload.role.toLowerCase();
            
            // Variable global para que otros scripts sepan que ya está bloqueado
            window.deleteAnimalButtonBlocked = (role === 'editor' || role === 'usuario');
            
            document.addEventListener('DOMContentLoaded', function() {
              // Si se ejecuta muy rápido, esperar un tick para asegurar que el DOM esté listo
              setTimeout(() => {
                if (window.deleteAnimalButtonBlocked) {
                  console.log('BLOQUEANDO BOTÓN ELIMINAR ANIMAL INMEDIATAMENTE PARA ROL:', role);
                  const btn = document.getElementById('delete-animal-btn');
                  if (btn) {
                    btn.disabled = true;
                    btn.style.opacity = '0.5';
                    btn.style.cursor = 'not-allowed';
                    btn.style.pointerEvents = 'none';
                    btn.title = 'NO TIENES PERMISOS PARA ELIMINAR ANIMALES';
                    
                    // Añadir icono de candado
                    if (!btn.querySelector('.lock-icon')) {
                      const lockIcon = document.createElement('span');
                      lockIcon.textContent = ' 🔒';
                      lockIcon.className = 'ml-1 lock-icon';
                      btn.appendChild(lockIcon);
                    }
                    
                    // Prevenir navegación
                    btn.onclick = function(e) {
                      e.preventDefault();
                      e.stopPropagation();
                      alert('NO TIENES PERMISOS PARA ELIMINAR ANIMALES');
                      return false;
                    };
                  }
                }
              }, 0);
            });
          }
        } catch (e) {
          console.error('Error al verificar permisos para botón Eliminar Animal:', e);
        }
      })();
    </script>
    
    <!-- Botón para eliminar animal (rojo, a la derecha) -->
    <button type="button" id="delete-animal-btn" class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors flex items-center shadow-md">
      <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
      </svg>
      Eliminar Animal
    </button>
  </div>
</form>

<script>
  // El script se carga desde el archivo principal [id].astro
</script>
