---
import { t } from '../../i18n/config';
---

<div class="max-w-4xl mx-auto">
  <!-- Modal de notificación -->
  <div id="notification-modal" class="hidden fixed inset-0 z-50 overflow-auto bg-black bg-opacity-40 flex justify-center items-center">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full mx-4 p-6">
      <div id="notification-content" class="flex items-center">
        <div id="notification-icon" class="mr-3 text-2xl"></div>
        <div id="notification-message" class="flex-1"></div>
      </div>
      <div class="mt-4 text-right">
        <button id="close-notification" class="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary-dark">
          Aceptar
        </button>
      </div>
    </div>
  </div>

  <div class="mb-8">
    <h2 class="text-xl font-semibold mb-4 text-primary border-b pb-2" id="title-user-preferences">Preferencias de usuario</h2>
    
    <!-- Preferencias de usuario: Idioma y tema visual -->
    <div class="space-y-6">
      <!-- Selección de Idioma -->
      <div class="flex flex-col md:flex-row md:items-center gap-4">
        <label for="language" class="font-medium w-48" id="label-language">Idioma:</label>
        <div class="flex-1">
          <select id="language" class="w-full md:w-64 p-2 border rounded-md bg-white dark:bg-gray-700 focus:ring-2 focus:ring-primary">
            <option value="es" id="option-es">Español</option>
            <option value="ca" id="option-ca">Catalán</option>
          </select>
        </div>
      </div>

      <!-- Selección de Tema -->
      <div class="flex flex-col md:flex-row md:items-center gap-4">
        <label for="theme" class="font-medium w-48" id="label-theme">Tema visual:</label>
        <div class="flex-1">
          <select id="theme" class="w-full md:w-64 p-2 border rounded-md bg-white dark:bg-gray-700 focus:ring-2 focus:ring-primary">
            <option value="light" id="option-light">Claro</option>
            <option value="dark" id="option-dark">Oscuro</option>
            <option value="system" id="option-system">Usar preferencia del sistema</option>
          </select>
        </div>
      </div>
    </div>
  </div>

  <div class="mb-8">
    <h2 class="text-xl font-semibold mb-4 text-primary border-b pb-2" id="title-notifications">Notificaciones</h2>
    
    <!-- Configuración de notificaciones -->
    <div class="space-y-4">
      <div class="flex items-start gap-3">
        <input type="checkbox" id="notify_backups" class="mt-1 h-5 w-5 text-primary focus:ring-primary">
        <div>
          <label for="notify_backups" class="font-medium" id="label-backups">Avisos de copias de seguridad</label>
          <p class="text-gray-500 text-sm" id="desc-backups">Recibir notificación cuando se realicen copias de seguridad automáticas</p>
        </div>
      </div>

      <div class="flex items-start gap-3">
        <input type="checkbox" id="notify_imports" class="mt-1 h-5 w-5 text-primary focus:ring-primary">
        <div>
          <label for="notify_imports" class="font-medium" id="label-imports">Avisos de importaciones</label>
          <p class="text-gray-500 text-sm" id="desc-imports">Recibir notificación cuando se completen importaciones</p>
        </div>
      </div>

      <div class="flex items-start gap-3">
        <input type="checkbox" id="notify_animals" class="mt-1 h-5 w-5 text-primary focus:ring-primary">
        <div>
          <label for="notify_animals" class="font-medium" id="label-animals">Avisos sobre animales</label>
          <p class="text-gray-500 text-sm" id="desc-animals">Recibir notificación sobre cambios importantes en los animales</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Botones de acción -->
  <div class="flex justify-end gap-3 mt-8 pt-4 border-t">
    <button type="button" id="btn-cancel" class="px-4 py-2 border rounded-md hover:bg-gray-100 dark:hover:bg-gray-700">
      Cancelar
    </button>
    <button type="button" id="btn-save" class="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary-dark">
      Guardar
    </button>
  </div>
</div>

<script>
  // Recuperar configuración actual del usuario
  document.addEventListener('DOMContentLoaded', () => {
    // Aquí se cargarían las preferencias guardadas
    // Por ahora, solo detectamos el idioma actual
    const currentLang = document.documentElement.lang || 'es';
    const languageSelect = document.getElementById('language');
    if (languageSelect) {
      languageSelect.value = currentLang;
    }

    // Detectar tema actual
    const themeSelect = document.getElementById('theme');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const currentTheme = localStorage.getItem('theme') || (prefersDark ? 'dark' : 'light');
    if (themeSelect) {
      themeSelect.value = currentTheme;
    }
    
    // Cargar configuraciones de notificaciones guardadas
    try {
      const savedSettings = JSON.parse(localStorage.getItem('userSettings') || '{}');
      
      // Inicializar las casillas de notificaciones
      if (savedSettings.notifications) {
        const notifyBackupsCheckbox = document.getElementById('notify_backups');
        if (notifyBackupsCheckbox && savedSettings.notifications.backups !== undefined) {
          notifyBackupsCheckbox.checked = savedSettings.notifications.backups;
        }
        
        const notifyImportsCheckbox = document.getElementById('notify_imports');
        if (notifyImportsCheckbox && savedSettings.notifications.imports !== undefined) {
          notifyImportsCheckbox.checked = savedSettings.notifications.imports;
        }
        
        const notifyAnimalsCheckbox = document.getElementById('notify_animals');
        if (notifyAnimalsCheckbox && savedSettings.notifications.animals !== undefined) {
          notifyAnimalsCheckbox.checked = savedSettings.notifications.animals;
        }
      }
    } catch (error) {
      console.error('Error al cargar la configuración guardada:', error);
    }

    // Listeners para guardar cambios
    const saveButton = document.querySelector('button[type="button"]:last-child');
    if (saveButton) {
      saveButton.addEventListener('click', saveSettings);
    }
  });

  function saveSettings() {
    const language = document.getElementById('language')?.value;
    const theme = document.getElementById('theme')?.value;
    const notifyBackups = document.getElementById('notify_backups')?.checked;
    const notifyImports = document.getElementById('notify_imports')?.checked;
    const notifyAnimals = document.getElementById('notify_animals')?.checked;

    // Guardar en localStorage por ahora
    localStorage.setItem('userSettings', JSON.stringify({
      language,
      theme,
      notifications: {
        backups: notifyBackups,
        imports: notifyImports,
        animals: notifyAnimals
      }
    }));

    // Aplicar cambios de idioma
    if (language) {
      const currentUrl = new URL(window.location.href);
      currentUrl.searchParams.set('lang', language);
      window.location.href = currentUrl.toString();
    }

    // Aplicar cambios de tema
    if (theme) {
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
        localStorage.setItem('theme', 'dark');
      } else if (theme === 'light') {
        document.documentElement.classList.remove('dark');
        localStorage.setItem('theme', 'light');
      } else {
        // Sistema
        localStorage.removeItem('theme');
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
      }
    }

    // Mostrar mensaje de éxito en modal personalizado
    showNotification('success', 'Configuración guardada correctamente');
  }
  // Función para obtener traducciones desde el cliente
  function getTranslation(key) {
    // Obtener el idioma actual
    const lang = document.documentElement.lang || 'es';
    
    // Traducciones en español
    const es = {
      'settings.user_preferences': 'Preferencias de usuario',
      'settings.notifications': 'Notificaciones',
      'settings.language': 'Idioma',
      'settings.theme': 'Tema visual'
    };
    
    // Traducciones en catalán
    const ca = {
      'settings.user_preferences': 'Preferències d\'usuari',
      'settings.notifications': 'Notificacions',
      'settings.language': 'Idioma',
      'settings.theme': 'Tema visual'
    };
    
    // Seleccionar diccionario según idioma
    const dict = lang === 'ca' ? ca : es;
    
    // Devolver traducción o la clave si no se encuentra
    return dict[key] || key;
  }
  
  // Actualizar todos los textos traducibles en la interfaz
  document.addEventListener('DOMContentLoaded', () => {
    // Actualizar el título en la barra de navegación
    const pageTitle = document.getElementById('page-title');
    if (pageTitle) {
      pageTitle.textContent = getTranslation('settings.title');
    }
    
    // Actualizar títulos de secciones
    const titleUserPrefs = document.getElementById('title-user-preferences');
    if (titleUserPrefs) {
      titleUserPrefs.textContent = getTranslation('settings.user_preferences');
    }
    
    const titleNotifications = document.getElementById('title-notifications');
    if (titleNotifications) {
      titleNotifications.textContent = getTranslation('settings.notifications');
    }
    
    // Actualizar etiquetas de idioma
    const labelLanguage = document.getElementById('label-language');
    if (labelLanguage) {
      labelLanguage.textContent = getTranslation('settings.language') + ':';
    }
    
    const optionEs = document.getElementById('option-es');
    if (optionEs) {
      optionEs.textContent = getTranslation('settings.languages.spanish');
    }
    
    const optionCa = document.getElementById('option-ca');
    if (optionCa) {
      optionCa.textContent = getTranslation('settings.languages.catalan');
    }
    
    // Actualizar etiquetas de tema
    const labelTheme = document.getElementById('label-theme');
    if (labelTheme) {
      labelTheme.textContent = getTranslation('settings.theme') + ':';
    }
    
    const optionLight = document.getElementById('option-light');
    if (optionLight) {
      optionLight.textContent = getTranslation('settings.themes.light');
    }
    
    const optionDark = document.getElementById('option-dark');
    if (optionDark) {
      optionDark.textContent = getTranslation('settings.themes.dark');
    }
    
    const optionSystem = document.getElementById('option-system');
    if (optionSystem) {
      optionSystem.textContent = getTranslation('settings.themes.system');
    }
    
    // Actualizar etiquetas de notificaciones
    const labelBackups = document.getElementById('label-backups');
    if (labelBackups) {
      labelBackups.textContent = getTranslation('settings.notify_backups');
    }
    
    const descBackups = document.getElementById('desc-backups');
    if (descBackups) {
      descBackups.textContent = getTranslation('settings.notify_backups_desc');
    }
    
    const labelImports = document.getElementById('label-imports');
    if (labelImports) {
      labelImports.textContent = getTranslation('settings.notify_imports');
    }
    
    const descImports = document.getElementById('desc-imports');
    if (descImports) {
      descImports.textContent = getTranslation('settings.notify_imports_desc');
    }
    
    const labelAnimals = document.getElementById('label-animals');
    if (labelAnimals) {
      labelAnimals.textContent = getTranslation('settings.notify_animals');
    }
    
    const descAnimals = document.getElementById('desc-animals');
    if (descAnimals) {
      descAnimals.textContent = getTranslation('settings.notify_animals_desc');
    }
    
    // Actualizar botón del modal
    const closeBtn = document.getElementById('close-notification');
    if (closeBtn) {
      closeBtn.textContent = getTranslation('common.accept') || 'Aceptar';
    }
    
    // Actualizar botones de acción
    const btnCancel = document.getElementById('btn-cancel');
    if (btnCancel) {
      btnCancel.textContent = getTranslation('common.cancel');
    }
    
    const btnSave = document.getElementById('btn-save');
    if (btnSave) {
      btnSave.textContent = getTranslation('common.save');
    }
    
    // Configurar el modal de notificación
    const closeNotificationBtn = document.getElementById('close-notification');
    if (closeNotificationBtn) {
      closeNotificationBtn.addEventListener('click', () => {
        const modal = document.getElementById('notification-modal');
        if (modal) modal.classList.add('hidden');
      });
    }
  });
  
  // Función para mostrar notificaciones elegantes
  function showNotification(type, message) {
    const modal = document.getElementById('notification-modal');
    const content = document.getElementById('notification-content');
    const messageEl = document.getElementById('notification-message');
    const iconEl = document.getElementById('notification-icon');
    
    if (!modal || !content || !messageEl || !iconEl) return;
    
    // Configurar apariencia según tipo
    if (type === 'success') {
      content.classList.remove('bg-red-100', 'text-red-800', 'border-red-300');
      content.classList.add('bg-green-100', 'text-green-800', 'border-green-300');
      iconEl.textContent = '✓';
      iconEl.classList.remove('text-red-500');
      iconEl.classList.add('text-green-500');
    } else {
      content.classList.remove('bg-green-100', 'text-green-800', 'border-green-300');
      content.classList.add('bg-red-100', 'text-red-800', 'border-red-300');
      iconEl.textContent = '✗';
      iconEl.classList.remove('text-green-500');
      iconEl.classList.add('text-red-500');
    }
    
    // Establecer mensaje
    messageEl.textContent = message;
    
    // Mostrar modal
    modal.classList.remove('hidden');
  }
</script>
