---
// Este componente gestiona los permisos de UI basados en el rol del usuario
// Se ejecuta en todas las páginas que lo incluyen y bloquea el acceso a páginas restringidas para roles no autorizados

// Obtener la ruta actual
const currentPath = Astro.url.pathname;

// Verificar si es una ruta restringida (que solo debe ser accesible por administradores)
const isRestrictedPath = [
  '/imports',
  '/backup',
  '/users'
].some(path => currentPath.startsWith(path));
---

<!-- Bloqueo de acceso para páginas restringidas -->
{isRestrictedPath && (
  <script is:inline>
    // Este script se ejecuta inmediatamente al cargar la página, antes de mostrar el contenido
    (function() {
      try {
        // Obtener el token del localStorage
        const token = localStorage.getItem('token');
        if (token) {
          // Decodificar el payload del JWT
          const payload = JSON.parse(atob(token.split('.')[1]));
          const userRole = payload.role || 'guest';
          
          // Si el usuario es editor o user, redirigir a la página principal
          if (userRole.toLowerCase() === 'editor' || userRole.toLowerCase() === 'user') {
            console.log('Acceso denegado para rol:', userRole);
            window.location.href = '/';
          }
        } else {
          // Si no hay token, redirigir a login
          window.location.href = '/login';
        }
      } catch (e) {
        console.error('Error al verificar permisos:', e);
        window.location.href = '/';
      }
    })();
  </script>
)}

<!-- Scripts para restricciones de UI basados en rol -->
<script src="/scripts/block-delete-button.js" is:inline></script>
<!-- Script desactivado temporalmente para evitar conflictos -->
<!-- <script src="/scripts/block-new-animal-button.js" is:inline></script> -->

<!-- Script para inicialización inmediata -->
<script is:inline>
/**
 * Inicialización del sistema de permisos
 */

// Función principal para gestionar permisos en la UI
function setupPermissionsUI() {
  console.log("Inicializando gestión de permisos en UI...");
  
  // 1. Verificar el rol del usuario desde localStorage
  const token = localStorage.getItem('token');
  if (!token) return;
  
  try {
    // Obtener el rol del usuario
    const payload = JSON.parse(atob(token.split('.')[1]));
    const userRole = payload.role;
    
    console.log(`Rol detectado: ${userRole}`);
    
    // 2. Aplicar restricciones específicas según la página actual
    const currentPath = window.location.pathname;
    
    // Página de importaciones
    if (currentPath.includes('/imports') && userRole === 'Ramon') {
      handleImportPageRestrictions();
    }
    
    // Página de backup/restore
    if (currentPath.includes('/backup') && userRole === 'Ramon') {
      handleBackupPageRestrictions();
    }
    
  } catch (e) {
    console.error('Error al procesar permisos de UI:', e);
  }
}

// Gestionar restricciones en la página de importaciones
function handleImportPageRestrictions() {
  // Evitar ejecutar múltiples veces
  if (window.ramonImportRestrictionApplied) return;
  window.ramonImportRestrictionApplied = true;
  
  console.log("Aplicando restricciones a la página de importaciones para Ramon...");
  
  // Eliminar todos los mensajes de advertencia existentes para evitar duplicados
  document.querySelectorAll('.bg-yellow-50.border-l-4.border-yellow-400.p-4.mb-4').forEach(el => {
    el.remove();
  });
  
  // Ocultar botones de importación excepto los de descarga
  document.querySelectorAll('.import-btn:not(.download-btn)').forEach(btn => {
    btn.style.display = 'none';
  });
  
  // También podemos ocultar el formulario de carga si existe
  const uploadForm = document.querySelector('#import-form');
  if (uploadForm) {
    uploadForm.style.display = 'none';
  }
  
  // Añadir un único mensaje informativo
  const container = document.querySelector('.import-container');
  if (container) {
    const infoMsg = document.createElement('div');
    infoMsg.id = 'mensaje-restriccion-ramon';
    infoMsg.className = 'bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-4';
    infoMsg.innerHTML = `
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <p class="text-sm text-yellow-700">
            Esta función de importación solo está disponible para administradores. Puedes ver el historial de importaciones pero no iniciar nuevas.
          </p>
        </div>
      </div>
    `;
    
    // Insertar al principio del contenedor
    const titleElement = container.querySelector('h2');
    if (titleElement) {
      container.insertBefore(infoMsg, titleElement.nextSibling);
    } else {
      container.prepend(infoMsg);
    }
  }
}

// Gestionar restricciones en la página de backup/restore
function handleBackupPageRestrictions() {
  // Evitar ejecutar múltiples veces
  if (window.ramonBackupRestrictionApplied) return;
  window.ramonBackupRestrictionApplied = true;
  
  console.log("Aplicando restricciones a la página de backup para Ramon...");
  
  // Función para deshabilitar completamente un elemento
  function deshabilitarElemento(elemento, mensaje) {
    // 1. Modificar atributos
    elemento.disabled = true;
    elemento.setAttribute('disabled', 'true');
    
    // 2. Modificar estilos
    elemento.style.opacity = '0.5';
    elemento.style.cursor = 'not-allowed';
    elemento.style.pointerEvents = 'none';
    elemento.title = mensaje || 'Solo disponible para administradores';
    
    // 3. Añadir clases visuales
    elemento.classList.add('opacity-50', 'cursor-not-allowed');
    elemento.classList.remove('hover:bg-gray-300', 'dark:hover:bg-gray-600');
    
    // 4. Evitar eventos de clic
    elemento.addEventListener('click', function(e) {
      e.preventDefault();
      e.stopPropagation();
      return false;
    }, true);
    
    // 5. Añadir texto de candado si no existe
    if (!elemento.querySelector('.lock-icon')) {
      const lockIcon = document.createElement('span');
      lockIcon.textContent = ' \ud83d\udd12';
      lockIcon.className = 'lock-icon ml-2';
      elemento.appendChild(lockIcon);
    }
  }
  
  // 1. Deshabilitar botón de selección de backup específicamente
  const selectBackupBtn = document.getElementById('select-backup-btn');
  if (selectBackupBtn) {
    deshabilitarElemento(selectBackupBtn, 'No tienes permisos para restaurar copias de seguridad');
    console.log('Botón de selección de backup deshabilitado correctamente');
  } else {
    console.log('Botón de selección de backup no encontrado, buscando con retraso...');
    // Intentar encontrarlo con retraso (a veces se carga dinámicamente)
    setTimeout(() => {
      const btnDelayed = document.getElementById('select-backup-btn');
      if (btnDelayed) {
        deshabilitarElemento(btnDelayed, 'No tienes permisos para restaurar copias de seguridad');
        console.log('Botón de selección de backup encontrado y deshabilitado con retraso');
      }
    }, 500);
  }

  // 2. Deshabilitar todos los elementos con data-requires-admin="true"
  document.querySelectorAll('[data-requires-admin="true"]').forEach(element => {
    deshabilitarElemento(element);
  });

  // 3. Deshabilitar botones de restauración y eliminación en la tabla
  document.querySelectorAll('.restore-btn, .delete-btn').forEach(btn => {
    deshabilitarElemento(btn);
  });
  
  // 4. Añadir mensaje informativo en la sección de restauración
  const restoreSection = document.getElementById('restore-section');
  if (restoreSection) {
    const container = restoreSection.closest('.bg-white');
    if (container && !container.querySelector('.bg-yellow-50')) {
      const infoMsg = document.createElement('div');
      infoMsg.id = 'mensaje-restauracion-ramon';
      infoMsg.className = 'bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-4';
      infoMsg.innerHTML = `
        <div class="flex">
          <div class="flex-shrink-0">
            <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
            </svg>
          </div>
          <div class="ml-3">
            <p class="text-sm text-yellow-700">
              Esta función de restauración solo está disponible para administradores.
            </p>
          </div>
        </div>
      `;
      const titleElement = container.querySelector('h2');
      if (titleElement) {
        container.insertBefore(infoMsg, titleElement.nextSibling);
      } else {
        container.prepend(infoMsg);
      }
    }
  }
  
  // 5. Observar cambios en el DOM para seguir aplicando restricciones a elementos nuevos
  const observer = new MutationObserver(() => {
    // Volver a buscar botones que necesiten ser deshabilitados
    const newBtn = document.getElementById('select-backup-btn');
    if (newBtn && !newBtn.disabled) {
      deshabilitarElemento(newBtn, 'No tienes permisos para restaurar copias de seguridad');
    }
    
    // Revisar nuevos elementos con data-requires-admin
    document.querySelectorAll('[data-requires-admin="true"]:not([disabled])').forEach(element => {
      deshabilitarElemento(element);
    });
  });
  
  // Observar todo el documento para detectar nuevos elementos
  observer.observe(document.documentElement, { 
    childList: true, 
    subtree: true 
  });
}

// Inicializar cuando el DOM esté cargado
document.addEventListener('DOMContentLoaded', setupPermissionsUI);

// También ejecutar cuando se navegue mediante SPA (si aplica)
document.addEventListener('astro:page-load', setupPermissionsUI);
</script>
