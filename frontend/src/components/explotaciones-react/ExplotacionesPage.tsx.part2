  // Función para exportar a CSV
  const exportToCSV = () => {
    if (!filteredAnimals || !filteredAnimals.length) return;
    
    // Preparar datos para el CSV
    const headers = ['ID', 'Nombre', 'Género', 'Estado', 'Fecha Nacimiento', 'Amamantando'];
    
    // Convertir los datos a formato CSV
    const csvContent = [
      headers.join(','),
      ...filteredAnimals.map(animal => [
        animal.id,
        animal.nom,
        animal.genere === 'M' ? 'Toro' : 'Vaca',
        animal.estado === 'OK' ? 'Activo' : 'Fallecido',
        animal.dob || 'No disponible',
        animal.genere === 'F' ? 
          (animal.alletar === '1' ? '1 ternero' : 
          animal.alletar === '2' ? '2 terneros' : 
          'No amamantando') : 'N/A'
      ].join(','))
    ].join('\n');
    
    // Crear el objeto Blob para la descarga
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    
    // Crear un elemento <a> para la descarga
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', `animales_${currentExplotacion || 'todas'}_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Renderizar el componente principal
  return (
    <div className="container mx-auto px-4 py-6">
      {/* 1. Sección de búsqueda y filtros - exactamente igual al HTML existente */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-3 sm:p-4 mb-4 sm:mb-6">
        <div className="mb-3 sm:mb-4">
          <h2 className="text-base sm:text-lg font-medium text-gray-900 dark:text-white mb-2 sm:mb-3">
            Búsqueda y Filtros
          </h2>
          <p className="text-xs sm:text-sm text-gray-600 dark:text-gray-300 mb-3 sm:mb-4">
            Utiliza los filtros para encontrar explotaciones específicas. Puedes buscar por código de explotación.
          </p>
        </div>
        
        {/* Buscador con botones */}
        <div>
          <div className="mb-3">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Buscar
            </label>
            <div className="relative">
              <input 
                type="text" 
                id="search-explotacion" 
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                placeholder="Buscar por código de explotación..." 
                className="w-full px-3 py-2 pl-9 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary dark:bg-gray-700 dark:text-white" 
              />
              <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                <svg className="w-4 h-4 text-gray-500 dark:text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
            </div>
          </div>
          
          <div className="flex space-x-2">
            <button 
              onClick={handleSearch}
              className="btn btn-primary"
            >
              Buscar
            </button>
            <button 
              onClick={handleClear}
              className="btn btn-secondary"
            >
              Limpiar
            </button>
          </div>
        </div>
      </div>
      
      {/* Mostrar spinner durante la carga */}
      {loading && (
        <div className="flex justify-center items-center py-10">
          <div className="spinner"></div>
        </div>
      )}
      
      {/* Mostrar error si ocurre */}
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md mb-4">
          <p>{error}</p>
        </div>
      )}
      
      {/* 2. Lista de explotaciones (cards) - inicialmente visible */}
      {!loading && !error && (
        <>
          {/* Vista de tarjetas de explotaciones */}
          <div 
            id="explotacionCards" 
            className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 mb-6"
            style={{ display: currentExplotacion ? 'none' : 'grid' }}
          >
            {explotacionesData.map((exp) => (
              <div 
                key={exp.explotacio} 
                className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 hover:shadow-lg transition-shadow cursor-pointer"
                onClick={() => showExplotacionDetail(exp.explotacio)}
              >
                <h3 className="text-lg font-semibold mb-2 text-gray-900 dark:text-white">{exp.explotacio}</h3>
                
                <div className="grid grid-cols-2 gap-2 mb-3">
                  <div className="bg-gray-50 dark:bg-gray-700 p-2 rounded">
                    <div className="text-xs text-gray-500 dark:text-gray-400">Total animales</div>
                    <div className="font-medium text-gray-900 dark:text-white">{exp.total || 0}</div>
                  </div>
                  
                  <div className="bg-gray-50 dark:bg-gray-700 p-2 rounded">
                    <div className="text-xs text-gray-500 dark:text-gray-400">Toros</div>
                    <div className="font-medium text-gray-900 dark:text-white">{exp.toros || 0}</div>
                  </div>
                  
                  <div className="bg-gray-50 dark:bg-gray-700 p-2 rounded">
                    <div className="text-xs text-gray-500 dark:text-gray-400">Vacas</div>
                    <div className="font-medium text-gray-900 dark:text-white">{exp.vacas || 0}</div>
                  </div>
                  
                  <div className="bg-gray-50 dark:bg-gray-700 p-2 rounded">
                    <div className="text-xs text-gray-500 dark:text-gray-400">Partos</div>
                    <div className="font-medium text-gray-900 dark:text-white">{exp.partos || 0}</div>
                  </div>
                </div>
                
                <div className="mt-2 flex justify-between items-center">
                  <span className="text-xs text-gray-500 dark:text-gray-400">
                    Amamantando: <b>{exp.amamantando || 0}</b>
                  </span>
                  <button 
                    className="text-primary hover:underline dark:text-primary-light text-sm"
                    onClick={(e) => {
                      e.stopPropagation();
                      showExplotacionDetail(exp.explotacio);
                    }}
                  >
                    Ver detalles &rarr;
                  </button>
                </div>
              </div>
            ))}
          </div>
          
          {/* 3. Vista detallada de explotación - inicialmente oculta */}
          <div 
            id="explotacion-detail" 
            className="hidden mb-6 bg-white dark:bg-gray-800 rounded-lg shadow p-4"
            style={{ display: currentExplotacion ? 'block' : 'none' }}
          >
            <div className="flex items-center justify-between mb-4 text-lg font-medium">
              <h3 className="text-gray-900 dark:text-white">
                Animales de <span id="explotacion-code">{currentExplotacion}</span>
              </h3>
              
              <div className="flex gap-2">
                <button 
                  id="export-csv" 
                  className="btn btn-primary text-sm flex items-center"
                  onClick={exportToCSV}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  Exportar CSV
                </button>
                
                <button 
                  id="back-button" 
                  className="btn btn-secondary text-sm flex items-center"
                  onClick={handleBack}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 17l-5-5m0 0l5-5m-5 5h12" />
                  </svg>
                  Volver
                </button>
              </div>
            </div>
            
            {/* Tabs para filtrar por categoría */}
            <ul className="flex flex-wrap -mb-px text-sm font-medium text-center">
              <li className="mr-2">
                <button 
                  className={`animal-tab inline-block p-2 border-b-2 ${activeCategory === 'todos' ? 'border-primary text-primary dark:text-primary-light' : 'border-transparent hover:border-primary hover:text-primary dark:hover:text-primary-light'}`}
                  data-category="todos"
                  onClick={() => filterAnimalsByCategory('todos')}
                >
                  Todos los animales <span className="tab-count ml-1 bg-primary-light/20 px-1.5 py-0.5 rounded-full text-xs">{allAnimals.length}</span>
                </button>
              </li>
              
              <li className="mr-2">
                <button 
                  className={`animal-tab inline-block p-2 border-b-2 ${activeCategory === 'toros' ? 'border-primary text-primary dark:text-primary-light' : 'border-transparent hover:border-primary hover:text-primary dark:hover:text-primary-light'}`}
                  data-category="toros"
                  onClick={() => filterAnimalsByCategory('toros')}
                >
                  Toros <span className="tab-count ml-1 bg-primary-light/20 px-1.5 py-0.5 rounded-full text-xs">{stats.toros}</span>
                </button>
              </li>
              
              <li className="mr-2">
                <button 
                  className={`animal-tab inline-block p-2 border-b-2 ${activeCategory === 'vacas-amam' ? 'border-primary text-primary dark:text-primary-light' : 'border-transparent hover:border-primary hover:text-primary dark:hover:text-primary-light'}`}
                  data-category="vacas-amam"
                  onClick={() => filterAnimalsByCategory('vacas-amam')}
                >
                  Vacas amamantando
                </button>
              </li>
              
              <li className="mr-2">
                <button 
                  className={`animal-tab inline-block p-2 border-b-2 ${activeCategory === 'vacas-no-amam' ? 'border-primary text-primary dark:text-primary-light' : 'border-transparent hover:border-primary hover:text-primary dark:hover:text-primary-light'}`}
                  data-category="vacas-no-amam"
                  onClick={() => filterAnimalsByCategory('vacas-no-amam')}
                >
                  Vacas no amamantando
                </button>
              </li>
            </ul>
            
            {/* Área para la tabla de animales */}
            <div className="mt-4">
              {renderAnimalTable()}
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default ExplotacionesPage;
