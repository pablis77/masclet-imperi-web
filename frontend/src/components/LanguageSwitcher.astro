---
// Importamos las funciones de idioma que creamos
import { getCurrentLanguage, setLanguage, supportedLanguages } from '../i18n/config';
---

<div class="language-switcher">
  <select
    id="language-selector"
    class="bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 text-gray-800 dark:text-white rounded py-1 px-2 text-sm"
  >
    <option value="es" selected={getCurrentLanguage() === 'es'}>Español</option>
    <option value="ca" selected={getCurrentLanguage() === 'ca'}>Català</option>
  </select>
  <div id="current-lang-indicator" class="hidden text-xs mt-1 text-white p-1 rounded bg-green-600">
    Idioma: {getCurrentLanguage()}
  </div>
</div>

<script>
  // Importar las utilidades de acceso seguro al DOM
  import { safeGetElement, onDOMReady } from '../utils/dom-safe-access';

  // Script mejorado para manejar el cambio de idioma usando acceso seguro al DOM
  onDOMReady(() => {
    // Usar acceso seguro al DOM
    const selector = safeGetElement('#language-selector');
    const indicator = safeGetElement('#current-lang-indicator');
    
    if (selector) {
      // Establecer el valor inicial desde localStorage
      const currentLang = localStorage.getItem('userLanguage') || 'es';
      selector.value = currentLang;
      
      console.log('[LanguageSwitcher] Idioma detectado:', currentLang);
      
      // Mostrar el indicador en modo desarrollo
      if (indicator) {
        indicator.textContent = `Idioma actual: ${currentLang}`;
        // Descomentar para debugging
        // indicator.classList.remove('hidden');
      }
      
      // Añadir un parámetro URL para forzar el idioma (para debugging)
      const url = new URL(window.location.href);
      url.searchParams.set('lang', currentLang);
      
      // Escuchar cambios en el selector
      selector.addEventListener('change', () => {
        const newLang = selector.value;
        console.log('[LanguageSwitcher] Cambiando idioma a:', newLang);
        
        // Guardar en localStorage
        localStorage.setItem('userLanguage', newLang);
        
        // Indicar que estamos cambiando de idioma para que otras partes de la aplicación lo detecten
        localStorage.setItem('languageChanging', 'true');
        
        // Añadir parámetros a la URL para forzar la recarga completa
        const redirectUrl = new URL(window.location.href);
        redirectUrl.searchParams.set('lang', newLang);
        redirectUrl.searchParams.set('t', Date.now()); // Añadir timestamp para evitar caché
        
        // Recargar para aplicar el nuevo idioma
        console.log('[LanguageSwitcher] Forzando recarga completa con idioma:', newLang);
        window.location.href = redirectUrl.toString();
      });
      
      // Verificar si hay un parámetro de idioma en la URL
      const urlParams = new URLSearchParams(window.location.search);
      const urlLang = urlParams.get('lang');
      
      if (urlLang && urlLang !== currentLang && (urlLang === 'es' || urlLang === 'ca')) {
        console.log('[LanguageSwitcher] Detectado idioma en URL:', urlLang);
        localStorage.setItem('userLanguage', urlLang);
        
        // Recargar sin el parámetro lang para no entrar en bucle
        const cleanUrl = new URL(window.location.href);
        cleanUrl.searchParams.delete('lang');
        window.location.href = cleanUrl.toString();
      }
    } else {
      // Mensaje informativo en lugar de error (podría ser normal que no esté en todas las páginas)
      console.info('[LanguageSwitcher] Selector de idioma no disponible en esta página');
    }
  });
</script>

<style>
  .language-switcher {
    display: inline-block;
    margin-left: 1rem;
  }
</style>
