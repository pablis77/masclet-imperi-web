---
// Importar función de traducción
import { t } from '../../i18n/config';

// Props que pueden ser pasados al componente
interface Props {
  userRole?: string;
  currentPath?: string;
  title?: string;
}

// Valores por defecto
const { 
  userRole = "administrador",
  currentPath = "/",
  title = "Masclet Imperi"
} = Astro.props;

// Importar componentes
import { LogoutButton } from '../auth/LogoutButton';
import LanguageSwitcher from '../LanguageSwitcher.astro';
import { getCurrentLanguage } from '../../i18n/config';

// Obtener el idioma actual en el servidor para la renderización inicial
const serverLang = getCurrentLanguage();

// Traducciones integradas ampliadas
const translations = {
  es: {
    dashboard: "Dashboard Masclet Imperi",
    animals: "Animales",
    exploitations: "Explotaciones",
    users: "Usuarios",
    imports: "Importación",
    backup: "Copias de seguridad",
    navigation: "NAVEGACIÓN",
    admin: "ADMINISTRACIÓN",
    management_system: "Sistema de Gestión Ganadera",
    profile: "Perfil",
    logout: "Cerrar sesión",
    listings: "Listados Personalizados",
    listings_detail: "Detalles del Listado",
    listings_edit: "Editar Listado",
    listings_new: "Nuevo Listado"
  },
  ca: {
    dashboard: "Tauler de control Masclet Imperi",
    animals: "Animals",
    exploitations: "Explotacions",
    users: "Usuaris",
    imports: "Importació",
    backup: "Còpies de seguretat",
    navigation: "NAVEGACIÓ",
    admin: "ADMINISTRACIÓ",
    management_system: "Sistema de Gestió Ramadera",
    profile: "Perfil",
    logout: "Tancar sessió",
    listings: "Llistats Personalitzats",
    listings_detail: "Detalls del Llistat",
    listings_edit: "Editar Llistat",
    listings_new: "Nou Llistat"
  }
};

// Menú de navegación según rol
const menuItems = [
  { name: "Dashboard", url: "/", icon: "📊", roles: ["administrador", "gerente", "editor", "usuario"] },
  { name: "Explotaciones", url: "/explotaciones-react", icon: "🏡", roles: ["administrador", "gerente", "editor", "usuario"] },
  { name: "Animales", url: "/animals", icon: "🐄", roles: ["administrador", "gerente", "editor", "usuario"] },
  { name: "Usuarios", url: "/users", icon: "👥", roles: ["administrador", "gerente"] },
  { name: "Importación", url: "/imports", icon: "📥", roles: ["administrador"] },
  { name: "Backup", url: "/backup", icon: "💾", roles: ["administrador"] },
];

// Mostrar todos los elementos del menú independientemente del rol para el administrador
const filteredMenu = menuItems; 

// Función para determinar si un elemento está activo
const isActive = (itemUrl: string) => {
  if (itemUrl === '/' && currentPath === '/') return true;
  if (itemUrl !== '/' && currentPath.startsWith(itemUrl)) return true;
  return false;
};
---

<header class="bg-primary text-white shadow-md relative z-30">
  <div class="container mx-auto px-3 py-3 flex justify-between items-center">
    <!-- Título de la página actual -->
    <div class="font-bold text-xl" id="page-title" data-current-path={currentPath}>
      {(() => {
        if (currentPath === '/animals/[id]') {
          return t('animal_file');
        } else if (currentPath === '/' || currentPath === '/dashboard') {
          return serverLang === 'ca' ? translations.ca.dashboard : translations.es.dashboard;
        } else if (currentPath === '/listados') {
          return serverLang === 'ca' ? translations.ca.listings : translations.es.listings;
        } else if (currentPath === '/listados/[id]') {
          return serverLang === 'ca' ? translations.ca.listings_detail : translations.es.listings_detail;
        } else if (currentPath === '/listados/edit/[id]') {
          return serverLang === 'ca' ? translations.ca.listings_edit : translations.es.listings_edit;
        } else if (currentPath === '/listados/new') {
          return serverLang === 'ca' ? translations.ca.listings_new : translations.es.listings_new;
        } else {
          return title || 'Masclet Imperi';
        }
      })()}
    </div>

    <!-- Menú de navegación (visible solo en escritorio) -->
    <nav class="hidden md:flex space-x-2 lg:space-x-4">
      {filteredMenu.map(item => (
        <a 
          href={item.url} 
          class:list={[
            "flex items-center transition-colors duration-150 px-2 py-2 rounded-md text-sm font-medium",
            {
              "bg-primary-dark text-white": isActive(item.url),
              "hover:bg-primary/20": !isActive(item.url)
            }
          ]}
        >
          <span class="text-xl mr-1">{item.icon}</span>
          {item.name}
        </a>
      ))}
    </nav>

    <!-- Controles de la derecha -->
    <div class="flex items-center">
      <!-- Botón de menú móvil -->
      <button id="mobile-menu-button" class="text-white text-2xl p-2 mr-2 md:hidden">
        ☰
      </button>
      
      <!-- Controles siempre visibles (incluso en móvil) -->
      <div class="flex items-center space-x-2 sm:space-x-4">
        <!-- Selector de idiomas -->
        <LanguageSwitcher />
        
        <!-- Toggle de tema - Visible en todos los tamaños -->
        <button id="theme-toggle" class="text-white hover:text-gray-200 transition-colors p-2 rounded-full hover:bg-primary/20">
          <span id="theme-toggle-light-icon" class="hidden">🌞</span>
          <span id="theme-toggle-dark-icon">🌙</span>
        </button>
        
        <!-- Notificaciones - Visible en todos los tamaños -->
        <button id="notifications-button" class="relative text-white hover:text-gray-200 transition-colors p-2 rounded-full hover:bg-primary/20" title={t('notification.system_alerts')}>
          <span class="text-xl">🔔</span>
          <span class="absolute top-0 right-0 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center hidden">0</span>
        </button>
        
        <!-- Menú de notificaciones (oculto por defecto) -->
        <div id="notifications-menu" class="absolute right-24 mt-12 w-80 bg-white dark:bg-gray-800 rounded-md shadow-lg overflow-hidden z-50 hidden">
          <div class="p-3 border-b border-gray-100 dark:border-gray-700 flex justify-between items-center">
            <span class="font-bold text-gray-800 dark:text-white">{t('notification.system_alerts')}</span>
            <button id="mark-all-read" class="text-xs text-primary dark:text-primary-light hover:underline">
              {t('notification.mark_all_read')}
            </button>
          </div>
          <div class="max-h-80 overflow-y-auto">
            <!-- Las notificaciones se cargarán dinámicamente desde el backend -->
          </div>
          <div class="p-2 border-t border-gray-100 dark:border-gray-700 text-center">
            <a href="/notifications" class="text-sm text-primary dark:text-primary-light hover:underline">
              {t('notification.view_all')}
            </a>
          </div>
        </div>
        
        <!-- Indicador de rol - Visible en tablets y escritorio -->
        <span class="hidden sm:inline-block text-sm capitalize bg-primary-dark/30 px-3 py-1 rounded-full" id="user-role-display">
          {userRole}
        </span>
        
        <!-- Script para actualizar el rol desde localStorage (Versión optimizada) -->
        <script>
          // Variable para evitar mensajes de log repetitivos
          let lastRoleLoggedTime = 0;
          let lastRoleValue = '';
          
          // Función para actualizar el rol del usuario en la barra de navegación
          function actualizarRolUsuario(forzarLimpieza = false, logLevel = 'silent') {
            const rolSpan = document.getElementById('user-role-display');
            if (!rolSpan) {
              return;
            }
            
            // Obtener token JWT actual
            const token = localStorage.getItem('token');
            
            // Si se solicita limpieza forzada o no hay token, mostrar placeholder
            if (forzarLimpieza || !token) {
              rolSpan.textContent = '---';
              return;
            }
            
            // Evitar procesar múltiples veces si el rol no ha cambiado
            if (rolSpan.textContent && rolSpan.dataset.processed === 'true') {
              // Solo ejecutar verificaciones ocasionales después de la carga inicial
              return;
            }
            
            // Intentar decodificar el token JWT para obtener información real y actualizada
            try {
              // Función para decodificar JWT sin librerías externas
              function parseJwt(token) {
                const base64Url = token.split('.')[1];
                const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                const jsonPayload = decodeURIComponent(
                  atob(base64).split('').map(c => {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                  }).join('')
                );
                return JSON.parse(jsonPayload);
              }
              
              // Obtener datos reales del token
              const decoded = parseJwt(token);
              const tokenUsername = decoded.sub || '';
              const tokenRole = decoded.role || '';
              
              // Reducir logs (solo si ha cambiado o es un log forzado)
              if (logLevel === 'verbose' || (lastRoleValue !== tokenRole && Date.now() - lastRoleLoggedTime > 5000)) {
                lastRoleLoggedTime = Date.now();
                lastRoleValue = tokenRole;
              }
              
              // Prioridad 1: Usar siempre los datos del token JWT (fuente única de verdad)
              if (tokenRole) {
                rolSpan.textContent = tokenRole;
                localStorage.setItem('userRole', tokenRole);
                localStorage.setItem('username', tokenUsername);
                rolSpan.dataset.processed = 'true';
                return;
              }
            } catch (e) {
              // Error silencioso para evitar spam en consola
            }
            
            // Si fallamos al decodificar, intentar con localStorage como fallback
            const username = localStorage.getItem('username');
            const storedRole = localStorage.getItem('userRole');
            const storedUser = localStorage.getItem('user');
            
            // Verificar si es Ramon
            const isRamon = username === 'Ramon' || storedRole === 'Ramon';
            if (isRamon) {
              rolSpan.textContent = 'Ramon';
              localStorage.setItem('userRole', 'Ramon');
              rolSpan.dataset.processed = 'true';
              return;
            }
            
            // Último recurso: extraer de user almacenado
            if (storedRole) {
              rolSpan.textContent = storedRole;
              rolSpan.dataset.processed = 'true';
            } else if (storedUser) {
              try {
                const userData = JSON.parse(storedUser);
                rolSpan.textContent = userData.role || 'usuario';
                rolSpan.dataset.processed = 'true';
              } catch (e) {
                rolSpan.textContent = 'usuario';
              }
            } else {
              rolSpan.textContent = 'usuario';
            }
          }
          
          // Al cargar la página - una sola vez es suficiente
          document.addEventListener('DOMContentLoaded', () => {
            actualizarRolUsuario(false, 'verbose');
          });
          
          // Verificar cambios en localStorage
          window.addEventListener('storage', (event) => {
            if (event.key === 'token' || event.key === 'user' || event.key === 'userRole' || event.key === 'username') {
              actualizarRolUsuario(false, 'verbose');
            }
          });
          
          // IMPORTANTE: Detectar si estamos en la página justo después del login
          const isFromLogin = document.referrer.includes('/login');
          if (isFromLogin) {
            // Solo actualizar una vez si venimos del login
            actualizarRolUsuario(false, 'verbose');
            // Y una actualización adicional por seguridad tras un breve retraso
            setTimeout(() => actualizarRolUsuario(false, 'verbose'), 500);
          }
          
          // Actualizar una única vez al hacer clic
          let clickTimer;
          document.addEventListener('click', () => {
            clearTimeout(clickTimer);
            clickTimer = setTimeout(() => actualizarRolUsuario(), 100);
          });
        </script>
        
        <!-- Perfil de usuario - Visible en todos los tamaños -->
        <div class="relative group">
          <button id="profile-button" class="flex items-center space-x-2 text-white hover:text-gray-200 transition-colors p-2 rounded-full hover:bg-primary/20">
            <div class="w-8 h-8 bg-gray-200 rounded-full overflow-hidden flex items-center justify-center text-primary">
              <span>A</span>
            </div>
          </button>
          
          <!-- Menú desplegable de perfil (escritorio) -->
          <div id="profile-dropdown" class="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-md shadow-lg overflow-hidden z-50 hidden md:block opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300">
            <div class="py-2">
              <a href="/profile" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700">
                Mi Perfil
              </a>
              <a href="/settings" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700">
                Configuración
              </a>
              <div class="border-t border-gray-100 dark:border-gray-700 my-1"></div>
              <a href="/logout" class="block px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-gray-100 dark:hover:bg-gray-700">
                Cerrar Sesión
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>

<!-- Menú móvil (oculto por defecto) -->
<div id="mobile-menu" class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden">
  <div class="bg-white dark:bg-gray-800 w-3/4 max-w-xs h-full overflow-y-auto shadow-xl transform transition-transform duration-300 translate-x-0">
    <!-- Cabecera del menú móvil -->
    <div class="p-4 border-b border-gray-100 dark:border-gray-700 flex justify-between items-center">
      <span class="font-bold text-lg text-gray-800 dark:text-white">Menú</span>
      <button id="close-mobile-menu" class="text-gray-500 hover:text-gray-700 dark:text-gray-300 dark:hover:text-white">
        ✕
      </button>
    </div>
    
    <!-- Información de usuario en móvil -->
    <div class="p-4 border-b border-gray-100 dark:border-gray-700">
      <div class="flex items-center space-x-3">
        <div class="w-10 h-10 bg-gray-200 rounded-full overflow-hidden flex items-center justify-center text-primary text-lg">
          <span>A</span>
        </div>
        <div>
          <p class="font-medium text-gray-800 dark:text-white">Admin Usuario</p>
          <p class="text-sm text-gray-500 dark:text-gray-400 capitalize">{userRole}</p>
        </div>
      </div>
      <div class="mt-3 flex space-x-2">
        <a href="/profile" class="flex-1 text-center text-xs bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 py-2 rounded-md hover:bg-gray-200 dark:hover:bg-gray-600">
          Mi Perfil
        </a>
        <a href="/settings" class="flex-1 text-center text-xs bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 py-2 rounded-md hover:bg-gray-200 dark:hover:bg-gray-600">
          Configuración
        </a>
      </div>
    </div>
    
    <!-- Navegación en móvil -->
    <nav class="p-4">
      {filteredMenu.map(item => (
        <a 
          href={item.url} 
          class:list={[
            "flex items-center py-3 px-4 text-gray-700 dark:text-gray-200 rounded-md mb-1",
            {
              "bg-primary/10 text-primary dark:bg-primary-dark/20 dark:text-primary-light": isActive(item.url),
              "hover:bg-gray-100 dark:hover:bg-gray-700": !isActive(item.url)
            }
          ]}
        >
          <span class="text-xl mr-3">{item.icon}</span>
          {item.name}
        </a>
      ))}
    </nav>
    
    <!-- Opciones adicionales en móvil -->
    <div class="p-4 border-t border-gray-100 dark:border-gray-700">
      <!-- Selector de idioma en móvil -->
      <div class="flex justify-between items-center mb-4">
        <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Idioma</span>
        <select
          id="mobile-language-selector"
          class="bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 text-gray-800 dark:text-white rounded py-1 px-2 text-sm"
        >
          <option value="es">Español</option>
          <option value="ca">Català</option>
        </select>
      </div>
      
      <!-- Modo oscuro -->
      <div class="flex justify-between items-center mb-4">
        <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Modo oscuro</span>
        <button id="mobile-theme-toggle" class="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200">
          <span id="mobile-theme-toggle-light-icon" class="hidden">🌞</span>
          <span id="mobile-theme-toggle-dark-icon">🌙</span>
        </button>
      </div>
      <a href="/logout" class="block w-full text-center py-2 px-4 bg-red-100 dark:bg-red-900/20 text-red-600 dark:text-red-400 rounded-md hover:bg-red-200 dark:hover:bg-red-800/30 text-sm">
        Cerrar Sesión
      </a>
    </div>
  </div>
</div>

<script>
  // Script para manejar el menú móvil y las traducciones
  document.addEventListener('DOMContentLoaded', () => {
    // Traducciones para el cliente (igual que en el servidor)
    const translations = {
      es: {
        dashboard: "Dashboard",
        animals: "Animales",
        exploitations: "Explotaciones",
        users: "Usuarios",
        imports: "Importación",
        backup: "Copias de seguridad",
        navigation: "NAVEGACIÓN",
        admin: "ADMINISTRACIÓN",
        management_system: "Sistema de Gestión Ganadera",
        profile: "Perfil",
        logout: "Cerrar sesión",
        animal_file: "Ficha de Animal"
      },
      ca: {
        dashboard: "Tauler de control",
        animals: "Animals",
        exploitations: "Explotacions",
        users: "Usuaris",
        imports: "Importació",
        backup: "Còpies de seguretat",
        navigation: "NAVEGACIÓ",
        admin: "ADMINISTRACIÓ",
        management_system: "Sistema de Gestió Ramadera",
        profile: "Perfil",
        logout: "Tancar sessió",
        animal_file: "Fitxa d'Animal"
      }
    };

    // Función para obtener traducciones
    function t(key, lang) {
      return translations[lang]?.[key] || key;
    }

    // Función para traducir la navegación
    function translateNavigation() {
      const currentLang = localStorage.getItem('userLanguage') || 'es';
      
      // Traducir título de la página en el Navbar
      const navbarTitle = document.getElementById('page-title');
      
      // Traducir títulos según la página actual
      if (navbarTitle) {
        // Para página de detalle de animal
        if (window.location.pathname.includes('/animals/')) {
          navbarTitle.textContent = t('animal_file', currentLang);
        } 
        // Para página de dashboard
        else if (window.location.pathname === '/' || window.location.pathname === '/dashboard') {
          navbarTitle.textContent = currentLang === 'ca' ? 
            "Tauler de control Masclet Imperi" : 
            "Dashboard Masclet Imperi";
        }
        // Para página de explotaciones
        else if (window.location.pathname.includes('/explotaciones')) {
          navbarTitle.textContent = currentLang === 'ca' ? 
            "Explotacions" : 
            "Explotaciones";
        }
        // Para página de importación
        else if (window.location.pathname.includes('/imports')) {
          navbarTitle.textContent = currentLang === 'ca' ? 
            "Importació de Dades" : 
            "Importación de Datos";
        }
        // Para página de backup
        else if (window.location.pathname.includes('/backup')) {
          navbarTitle.textContent = currentLang === 'ca' ? 
            "Còpies de seguretat del Sistema" : 
            "Backup del Sistema";
        }
      }
      
      // Verificar si hay elementos ocultos y restaurarlos
      document.querySelectorAll('nav a').forEach(link => {
        // Eliminar cualquier estilo de display:none que pueda haberse aplicado
        if (link.style.display === 'none') {
          link.style.display = '';
        }
        
        // Eliminar el atributo data-roles si existe
        if (link.hasAttribute('data-roles')) {
          link.removeAttribute('data-roles');
        }
        
        const text = link.textContent.trim();
        // Extraer el emoji si existe
        const emoji = text.match(/^([\u{1F300}-\u{1F5FF}\u{1F900}-\u{1F9FF}\u{1F600}-\u{1F64F}\u{1F680}-\u{1F6FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}\u{1F1E6}-\u{1F1FF}\u{1F191}-\u{1F251}\u{1F004}\u{1F0CF}\u{1F170}-\u{1F171}\u{1F17E}-\u{1F17F}\u{1F18E}\u{3030}\u{2B50}\u{2B55}\u{2934}-\u{2935}\u{2B05}-\u{2B07}\u{2B1B}-\u{2B1C}\u{3297}\u{3299}\u{303D}\u{00A9}\u{00AE}\u{2122}\u{23F3}\u{24C2}\u{23E9}-\u{23EF}\u{25B6}\u{23F8}-\u{23FA}]+)/u);
        const emojiPrefix = emoji ? emoji[0] + ' ' : '';
        
        // Mapear los nombres del menú a claves de traducción
        let translationKey = '';
        if (text.includes('Dashboard')) translationKey = 'dashboard';
        else if (text.includes('Animales')) translationKey = 'animals';
        else if (text.includes('Explotaciones')) translationKey = 'exploitations';
        else if (text.includes('Usuarios')) translationKey = 'users';
        else if (text.includes('Importación')) translationKey = 'imports';
        else if (text.includes('Backup')) translationKey = 'backup';
        
        if (translationKey) {
          link.innerHTML = emojiPrefix + t(translationKey, currentLang);
        }
      });
      
      // Traducir el título de la página en la barra superior
      const pageTitle = document.querySelector('.font-bold.text-xl');
      if (pageTitle && pageTitle.textContent.includes('Gestión de Animales')) {
        pageTitle.textContent = currentLang === 'ca' ? 'Gestió d\'Animals' : 'Gestión de Animales';
      }
    }
    
    // Ejecutar traducción inicial
    translateNavigation();
    
    // Retraducir cuando cambie el idioma
    window.addEventListener('storage', function(e) {
      if (e.key === 'userLanguage') {
        translateNavigation();
      }
    });
    
    // Elementos de UI del menú móvil
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const closeMobileMenuButton = document.getElementById('close-mobile-menu');
    const mobileMenu = document.getElementById('mobile-menu');
    const profileButton = document.getElementById('profile-button');
    const notificationsButton = document.getElementById('notifications-button');
    
    // Referencias a los selectores de idioma
    const languageSelector = document.getElementById('language-selector');
    const mobileLanguageSelector = document.getElementById('mobile-language-selector');
    const notificationsMenu = document.getElementById('notifications-menu');
    
    // Función para abrir el menú móvil
    const openMobileMenu = () => {
      if (mobileMenu) {
        mobileMenu.classList.remove('hidden');
        document.body.classList.add('overflow-hidden');
      }
    };
    
    // Función para cerrar el menú móvil
    const closeMobileMenu = () => {
      if (mobileMenu) {
        mobileMenu.classList.add('hidden');
        document.body.classList.remove('overflow-hidden');
      }
    };
    
    // Evento para abrir el menú móvil
    if (mobileMenuButton) {
      mobileMenuButton.addEventListener('click', openMobileMenu);
    }
    
    // Evento para cerrar el menú móvil
    if (closeMobileMenuButton) {
      closeMobileMenuButton.addEventListener('click', closeMobileMenu);
    }
    
    // Cerrar menú móvil al hacer clic fuera
    if (mobileMenu) {
      mobileMenu.addEventListener('click', (e) => {
        if (e.target === mobileMenu) {
          closeMobileMenu();
        }
      });
    }
    
    // Manejar notificaciones
    if (notificationsButton && notificationsMenu) {
      notificationsButton.addEventListener('click', (e) => {
        e.stopPropagation();
        notificationsMenu.classList.toggle('hidden');
      });
      
      // Cerrar menú de notificaciones al hacer clic fuera
      document.addEventListener('click', (e) => {
        if (!notificationsButton.contains(e.target) && !notificationsMenu.contains(e.target)) {
          notificationsMenu.classList.add('hidden');
        }
      });
    }
    
    // Toggle de tema
    const handleThemeToggle = () => {
      const isDark = document.documentElement.classList.contains('dark');
      const lightIcon = document.getElementById('theme-toggle-light-icon');
      const darkIcon = document.getElementById('theme-toggle-dark-icon');
      const mobileLightIcon = document.getElementById('mobile-theme-toggle-light-icon');
      const mobileDarkIcon = document.getElementById('mobile-theme-toggle-dark-icon');
      
      if (isDark) {
        document.documentElement.classList.remove('dark');
        localStorage.setItem('theme', 'light');
        if (lightIcon) lightIcon.classList.remove('hidden');
        if (darkIcon) darkIcon.classList.add('hidden');
        if (mobileLightIcon) mobileLightIcon.classList.remove('hidden');
        if (mobileDarkIcon) mobileDarkIcon.classList.add('hidden');
      } else {
        document.documentElement.classList.add('dark');
        localStorage.setItem('theme', 'dark');
        if (lightIcon) lightIcon.classList.add('hidden');
        if (darkIcon) darkIcon.classList.remove('hidden');
        if (mobileLightIcon) mobileLightIcon.classList.add('hidden');
        if (mobileDarkIcon) mobileDarkIcon.classList.remove('hidden');
      }
    };
    
    // Aplicar tema guardado
    const savedTheme = localStorage.getItem('theme');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const isDark = savedTheme === 'dark' || (!savedTheme && prefersDark);
    
    if (isDark) {
      document.documentElement.classList.add('dark');
      const lightIcon = document.getElementById('theme-toggle-light-icon');
      const darkIcon = document.getElementById('theme-toggle-dark-icon');
      const mobileLightIcon = document.getElementById('mobile-theme-toggle-light-icon');
      const mobileDarkIcon = document.getElementById('mobile-theme-toggle-dark-icon');
      
      if (lightIcon) lightIcon.classList.add('hidden');
      if (darkIcon) darkIcon.classList.remove('hidden');
      if (mobileLightIcon) mobileLightIcon.classList.add('hidden');
      if (mobileDarkIcon) mobileDarkIcon.classList.remove('hidden');
    } else {
      document.documentElement.classList.remove('dark');
      const lightIcon = document.getElementById('theme-toggle-light-icon');
      const darkIcon = document.getElementById('theme-toggle-dark-icon');
      const mobileLightIcon = document.getElementById('mobile-theme-toggle-light-icon');
      const mobileDarkIcon = document.getElementById('mobile-theme-toggle-dark-icon');
      
      if (lightIcon) lightIcon.classList.remove('hidden');
      if (darkIcon) darkIcon.classList.add('hidden');
      if (mobileLightIcon) mobileLightIcon.classList.remove('hidden');
      if (mobileDarkIcon) mobileDarkIcon.classList.add('hidden');
    }
    
    // Eventos de toggle de tema
    const themeToggle = document.getElementById('theme-toggle');
    const mobileThemeToggle = document.getElementById('mobile-theme-toggle');
    
    if (themeToggle) {
      themeToggle.addEventListener('click', handleThemeToggle);
    }
    
    if (mobileThemeToggle) {
      mobileThemeToggle.addEventListener('click', handleThemeToggle);
    }
    
    // Configurar selectores de idioma
    function setupLanguageSelectors() {
      // Obtener el idioma guardado en localStorage
      const currentLang = localStorage.getItem('userLanguage') || 'es';
      
      // Configurar selector de escritorio
      if (languageSelector) {
        languageSelector.value = currentLang;
        
        languageSelector.addEventListener('change', () => {
          const newLang = languageSelector.value;
          localStorage.setItem('userLanguage', newLang);
          window.location.reload();
        });
      }
      
      // Configurar selector móvil
      if (mobileLanguageSelector) {
        mobileLanguageSelector.value = currentLang;
        
        mobileLanguageSelector.addEventListener('change', () => {
          const newLang = mobileLanguageSelector.value;
          localStorage.setItem('userLanguage', newLang);
          window.location.reload();
        });
      }
    }
    
    // Iniciar configuración de idioma
    setupLanguageSelectors();
  });
</script>