---
// Props que pueden ser pasados al componente
interface Props {
  userRole?: string;
  currentPath?: string;
}

// Valores por defecto
const { 
  userRole = "administrador",
  currentPath = "/"
} = Astro.props;

// Importar config de idioma
import { getCurrentLanguage } from '../../i18n/config';

// Obtener el idioma actual en el servidor para la renderizaci√≥n inicial
const serverLang = getCurrentLanguage();

// Traducciones para t√≠tulos de secciones
const sectionTitles = {
  es: {
    navigation: "NAVEGACI√ìN",
    admin: "ADMINISTRACI√ìN"
  },
  ca: {
    navigation: "NAVEGACI√ì",
    admin: "ADMINISTRACI√ì"
  }
};

// Traducciones para items del men√∫
const menuTranslations = {
  es: {
    dashboard: "Dashboard",
    animals: "Animales",
    exploitations: "Explotaciones",
    users: "Usuarios",
    imports: "Importaci√≥n",
    backup: "Copias de seguridad",
    management_system: "Sistema de Gesti√≥n Ganadera"
  },
  ca: {
    dashboard: "Tauler de control",
    animals: "Animals",
    exploitations: "Explotacions",
    users: "Usuaris",
    imports: "Importaci√≥",
    backup: "C√≤pies de seguretat",
    management_system: "Sistema de Gesti√≥ Ramadera"
  }
};

// Funci√≥n para obtener traducci√≥n
function t(key: string, section = 'menu'): string {
  if (section === 'section') {
    return sectionTitles[serverLang as 'es' | 'ca']?.[key] || key;
  }
  return menuTranslations[serverLang as 'es' | 'ca']?.[key] || key;
}

// Definir las secciones del men√∫ seg√∫n roles
const menuSections = [
  {
    title: t("navigation", 'section'),
    key: "navigation",
    items: [
      { name: t("dashboard"), key: "dashboard", url: "/", icon: "üìä", roles: ["administrador", "gerente", "editor", "usuario"] },
      { name: t("exploitations"), key: "exploitations", url: "/explotaciones-react", icon: "üè°", roles: ["administrador", "gerente", "editor", "usuario"] },
      { name: t("animals"), key: "animals", url: "/animals", icon: "üêÑ", roles: ["administrador", "gerente", "editor", "usuario"] },
    ]
  },
  {
    title: t("admin", 'section'),
    key: "admin",
    items: [
      { name: t("imports"), key: "imports", url: "/imports", icon: "üì•", roles: ["administrador"] },
      { name: t("users"), key: "users", url: "/users", icon: "üë•", roles: ["administrador", "gerente"] },
      { name: t("backup"), key: "backup", url: "/backup", icon: "üíæ", roles: ["administrador"] },
    ]
  }
];

// Mostrar todas las secciones y elementos sin filtrar por rol
const filteredSections = menuSections;

// Funci√≥n para determinar si un elemento est√° activo
const isActive = (itemUrl: string) => {
  if (itemUrl === '/' && currentPath === '/') return true;
  if (itemUrl !== '/' && currentPath.startsWith(itemUrl)) return true;
  return false;
};
---

<aside class="masclet-sidebar w-64 bg-white dark:bg-gray-800 min-h-screen shadow-md border-r border-gray-100 dark:border-gray-800 z-40">
  <!-- Cabecera del sidebar con logo -->
  <div class="p-4 border-b border-gray-100 dark:border-gray-700 flex flex-col items-center justify-center">
    <div class="w-24 h-24 mb-3">
      <img src="/images/logo_masclet.png" alt="Masclet Imperi Logo" class="w-full h-full object-contain">
    </div>
    <p class="text-sm text-gray-500 dark:text-gray-300 text-center">Sistema de Gesti√≥n Ganadera</p>
  </div>

  <!-- Bot√≥n para cerrar el sidebar en m√≥vil -->
  <button id="close-sidebar" class="md:hidden absolute top-4 right-4 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200">
    <span class="text-2xl">‚úï</span>
  </button>

  <!-- Navegaci√≥n -->
  <nav class="py-4 overflow-y-auto max-h-[calc(100vh-200px)]">
    {filteredSections.map((section) => (
      <div class="mb-6">
        <h3 class="px-6 mb-2 text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider">
          {section.title}
        </h3>
        <div class="space-y-1">
          {section.items.map((item) => (
            <a 
              href={item.url} 
              class:list={[
                "flex items-center px-6 py-3 text-sm font-medium transition-colors duration-150",
                {
                  "text-primary-dark bg-primary/10 dark:text-primary-light dark:bg-primary-dark/20 border-r-4 border-primary dark:border-primary-light": isActive(item.url),
                  "text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700": !isActive(item.url)
                }
              ]}
            >
              <span class="text-xl mr-3">{item.icon}</span>
              {item.name}
            </a>
          ))}
        </div>
      </div>
    ))}
  </nav>

  <!-- Eliminado banner de versi√≥n -->
</aside>

<script>
  // Script para manejar el cierre del sidebar en m√≥vil y traducir elementos
  document.addEventListener('DOMContentLoaded', () => {
    // Traducciones del men√∫ para cliente
    const translations = {
      es: {
        dashboard: "Dashboard",
        animals: "Animales",
        exploitations: "Explotaciones",
        users: "Usuarios",
        imports: "Importaci√≥n",
        backup: "Copias de seguridad",
        management_system: "Sistema de Gesti√≥n Ganadera",
        navigation: "NAVEGACI√ìN",
        admin: "ADMINISTRACI√ìN"
      },
      ca: {
        dashboard: "Tauler de control",
        animals: "Animals",
        exploitations: "Explotacions",
        users: "Usuaris",
        imports: "Importaci√≥",
        backup: "C√≤pies de seguretat",
        management_system: "Sistema de Gesti√≥ Ramadera",
        navigation: "NAVEGACI√ì",
        admin: "ADMINISTRACI√ì"
      }
    };

    // Funci√≥n para traducir
    function t(key, lang) {
      return translations[lang]?.[key] || key;
    }

    // Funci√≥n para traducir la barra lateral
    function translateSidebar() {
      const currentLang = localStorage.getItem('userLanguage') || 'es';

      // Traducir los t√≠tulos de secciones
      document.querySelectorAll('h3.px-6.mb-2.text-xs.font-semibold').forEach(header => {
        const text = header.textContent.trim();
        if (text === "NAVEGACI√ìN") {
          header.textContent = t('navigation', currentLang);
        } else if (text === "ADMINISTRACI√ìN") {
          header.textContent = t('admin', currentLang);
        }
      });

      // Traducir los elementos del men√∫ lateral
      document.querySelectorAll('nav a').forEach(link => {
        const text = link.textContent.trim();
        // Extraer el emoji si existe
        const emoji = text.match(/^([\u{1F300}-\u{1F5FF}\u{1F900}-\u{1F9FF}\u{1F600}-\u{1F64F}\u{1F680}-\u{1F6FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}\u{1F1E6}-\u{1F1FF}\u{1F191}-\u{1F251}\u{1F004}\u{1F0CF}\u{1F170}-\u{1F171}\u{1F17E}-\u{1F17F}\u{1F18E}\u{3030}\u{2B50}\u{2B55}\u{2934}-\u{2935}\u{2B05}-\u{2B07}\u{2B1B}-\u{2B1C}\u{3297}\u{3299}\u{303D}\u{00A9}\u{00AE}\u{2122}\u{23F3}\u{24C2}\u{23E9}-\u{23EF}\u{25B6}\u{23F8}-\u{23FA}]+)/u);
        const emojiPrefix = emoji ? emoji[0] + ' ' : '';

        // Mapear los nombres del men√∫ a claves de traducci√≥n
        let translationKey = '';
        if (text.includes('Dashboard')) translationKey = 'dashboard';
        else if (text.includes('Animales')) translationKey = 'animals';
        else if (text.includes('Explotaciones')) translationKey = 'exploitations';
        else if (text.includes('Usuarios')) translationKey = 'users';
        else if (text.includes('Importaci√≥n')) translationKey = 'imports';
        else if (text.includes('Backup') || text.includes('Copias')) translationKey = 'backup';

        if (translationKey) {
          link.innerHTML = `${emojiPrefix} ${t(translationKey, currentLang)}`;
        }
      });

      // Traducir el texto del sistema de gesti√≥n
      const systemText = document.querySelector('p.text-sm.text-gray-500.dark\\:text-gray-300.text-center');
      if (systemText) {
        systemText.textContent = t('management_system', currentLang);
      }
    }

    // Ejecutar traducci√≥n inicial
    translateSidebar();

    // Retraducir cuando cambie el idioma
    window.addEventListener('storage', function(e) {
      if (e.key === 'userLanguage') {
        translateSidebar();
      }
    });

    // Funci√≥n para cerrar sidebar en m√≥vil
    const closeSidebarButton = document.getElementById('close-sidebar');
    
    if (closeSidebarButton) {
      closeSidebarButton.addEventListener('click', () => {
        // Disparar un evento personalizado para cerrar el sidebar
        document.dispatchEvent(new CustomEvent('close-sidebar'));
      });
    }
  });
</script>

<style>
  /* Estilos espec√≠ficos del sidebar */
  .masclet-sidebar {
    transition: transform 0.3s ease-in-out;
  }
  
  @media (max-width: 768px) {
    .masclet-sidebar {
      position: fixed;
      left: 0;
      top: 0;
      width: 80%; /* Reducir ancho en m√≥vil para mejor usabilidad */
      max-width: 280px;
    }
  }
</style>