/**
 * DashboardV2.tsx
 * ======================
 * SOLO SON VALIDOS LOS DATOS DINAMICOS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * 
 * [DASHBOARDV2] Nueva versi√≥n del Dashboard completamente redise√±ada para solucionar problemas
 * de rendimiento y visualizaci√≥n de datos. Esta versi√≥n es m√°s modular, limpia
 * y f√°cil de mantener.
 * 
 * Caracter√≠sticas principales:
 * - Dise√±o m√°s modular con componentes de tarjetas independientes
 * - Mejor manejo de errores y estados de carga
 * - Logs de diagn√≥stico para facilitar la depuraci√≥n
 * - Optimizaci√≥n del consumo de API
 * - Compatible con temas claro/oscuro
 * - Navegaci√≥n entre versiones del dashboard
 * - Integraci√≥n con Tremor para visualizaciones m√°s avanzadas
 */

import React, { useState, useEffect, useCallback } from 'react';
import apiService from '../../services/apiService';

// Importar y registrar los componentes de Chart.js
import { registerChartComponents } from '../../utils/chartConfig';

// Registrar los componentes al inicio para asegurar que est√©n disponibles
registerChartComponents();

// Importar componentes UI reutilizables
import { SectionTitle } from '../dashboard/components/UIComponents';

// Importar componente PartosSection
import PartosSection from '../dashboard/sections/PartosSection';

// Importar ResumenOriginalCard
import ResumenOriginalCard from './cards/ResumenOriginalCard';

// Importar componente de diagn√≥stico para visualizar datos crudos
import DiagnosticoDataCard from './cards/DiagnosticoDataCard';

// Importar componentes de Skeleton Loader
import { 
  StatsSectionSkeleton, 
  PartosSectionSkeleton 
} from './components/SkeletonLoader';

// Importar tipos
import type { 
  DashboardStats, 
  PartosStats
} from '../dashboard/types/dashboard';

/**
 * DashboardV2 - Versi√≥n optimizada y modular
 * 
 * Implementaci√≥n desde cero con √©nfasis en simplicidad y rendimiento.
 * Consume directamente los endpoints necesarios sin middleware.
 */
/**
 * [DASHBOARDV2] Componente principal de la nueva versi√≥n del dashboard
 * 
 * Implementado desde cero como una nueva versi√≥n alternativa que puede
 * coexistir con el Dashboard original sin afectarlo.
 */
const DashboardV2: React.FC = () => {
  console.log('üü¢ DASHBOARD V2 CARGADO - VERSI√ìN NUEVA');
  // Este es el dashboard nuevo que reemplazar√° al original
  // [DASHBOARDV2] No usamos useNavigate() porque puede causar problemas si se renderiza fuera del Router
  // Estado para almacenar datos de la API
  const [statsData, setStatsData] = useState<DashboardStats | null>(null);
  const [partosData, setPartosData] = useState<PartosStats | null>(null);
  
  // Estados para gestionar la carga y errores
  const [loading, setLoading] = useState({
    stats: true,
    partos: true
  });
  const [error, setError] = useState({
    stats: null as string | null,
    partos: null as string | null
  });

  // Estado para el tema oscuro/claro
  const [darkMode, setDarkMode] = useState<boolean>(false);
  
  // Logs para diagn√≥stico
  const [logs, setLogs] = useState<string[]>([]);

  // Funci√≥n para agregar logs
  const addLog = (message: string, isError: boolean = false) => {
    const timestamp = new Date().toISOString();
    const formattedMessage = `[${timestamp}] ${isError ? '‚ùå ' : ''}${message}`;
    setLogs(prev => [formattedMessage, ...prev]);
    
    if (isError) {
      console.error(`[DashboardV2] ${message}`);
    } else {
      console.log(`[DashboardV2] ${message}`);
    }
  };

  // Funci√≥n para mostrar skeleton loader mientras se cargan los datos
  const showSkeletonLoader = () => {
    setLoading({
      stats: true,
      partos: true
    });
  };

  // Funci√≥n para cargar datos desde sessionStorage si existen
  const loadFromCache = () => {
    try {
      const cachedData = sessionStorage.getItem('dashboardData');
      if (cachedData) {
        const parsedData = JSON.parse(cachedData);
        const cacheTime = parsedData.timestamp || 0;
        const now = new Date().getTime();
        
        // Comprobar si la cach√© es reciente (menos de 5 minutos)
        if (now - cacheTime < 5 * 60 * 1000) {
          addLog('‚úÖ Usando datos en cach√© (< 5min)');
          if (parsedData.stats) setStatsData(parsedData.stats);
          if (parsedData.partos) setPartosData(parsedData.partos);
          return true;
        }
      }
    } catch (err) {
      // Si hay error al leer la cach√©, simplemente ignoramos y cargamos nuevos datos
      console.warn('Error leyendo cach√©:', err);
    }
    return false;
  };

  // Funci√≥n para guardar datos en sessionStorage
  const saveToCache = (data: any) => {
    try {
      const cacheData = {
        stats: data.stats,
        partos: data.partos,
        timestamp: new Date().getTime()
      };
      sessionStorage.setItem('dashboardData', JSON.stringify(cacheData));
    } catch (err) {
      // Si hay error al guardar la cach√©, simplemente lo ignoramos
      console.warn('Error guardando cach√©:', err);
    }
  };

  // Efecto para cargar datos al montar el componente
  useEffect(() => {
    const loadDashboardData = async () => {
      try {
        // 1. Mostrar skeleton loaders inmediatamente
        showSkeletonLoader();
        
        // 2. Intentar cargar datos cacheados si existen
        const usedCache = loadFromCache();
        if (usedCache) {
          // Actualizar estado de carga para reflejar datos de cach√©
          setLoading({
            stats: false,
            partos: false
          });
        }
        
        // 3. Cargar datos frescos en paralelo (incluso si usamos cach√©)
        try {
          addLog('Obteniendo datos del dashboard...');
          
          // Hacer peticiones en paralelo
          const [statsResponse, partosResponse] = await Promise.all([
            apiService.get('/dashboard/stats'),
            apiService.get('/dashboard/partos')
          ]);
          
          // Guardar resultados
          setStatsData(statsResponse);
          setPartosData(partosResponse);
          
          // Actualizar estados
          setLoading({
            stats: false,
            partos: false
          });
          
          setError({
            stats: null,
            partos: null
          });
          
          // Guardar en cach√©
          saveToCache({
            stats: statsResponse,
            partos: partosResponse
          });
          
          addLog('‚úÖ Datos del dashboard cargados correctamente');
        } catch (err) {
          const errorMsg = err instanceof Error ? err.message : 'Error desconocido';
          addLog(`Error cargando datos: ${errorMsg}`, true);
          
          setError({
            stats: errorMsg,
            partos: errorMsg
          });
          
          setLoading({
            stats: false,
            partos: false
          });
        }
        
      } catch (error) {
        console.error('Error general cargando datos:', error);
      }
    };
    
    loadDashboardData();
    
    // Detectar tema oscuro
    const isDarkMode = document.documentElement.classList.contains('dark');
    setDarkMode(isDarkMode);
    
    // Observer para cambios en el tema
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === 'class') {
          const isDark = document.documentElement.classList.contains('dark');
          setDarkMode(isDark);
        }
      });
    });
    
    observer.observe(document.documentElement, { attributes: true });
    
    return () => {
      observer.disconnect();
    };
  }, []);

  // Funci√≥n para cambiar tema
  const toggleTheme = () => {
    const isDark = document.documentElement.classList.contains('dark');
    if (isDark) {
      document.documentElement.classList.remove('dark');
    } else {
      document.documentElement.classList.add('dark');
    }
  };

  return (
    <div 
      className={`dashboard-container ${darkMode ? 'theme-dark' : 'theme-light'}`}
      data-component-name="DashboardV2"
    >
      {/* Bot√≥n para volver al Dashboard original eliminado - Ya no es necesario */}
      
      {/* [DASHBOARDV2] Bot√≥n para cambiar tema */}
      <button 
        onClick={toggleTheme} 
        style={{
          position: 'fixed',
          bottom: '6rem',
          left: '1rem',
          backgroundColor: darkMode ? '#374151' : '#e5e7eb',
          color: darkMode ? 'white' : 'black',
          padding: '0.75rem',
          borderRadius: '9999px',
          boxShadow: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
          zIndex: 20,
          border: 'none',
          cursor: 'pointer',
          fontSize: '1.2rem',
        }}
      >
        {darkMode ? '‚òÄÔ∏è' : 'üåô'}
      </button>
      
      {/* Cabecera */}
      <div className="dashboard-header">
        {/* T√≠tulo eliminado para evitar duplicaci√≥n */}
      </div>
      
      {/* SECCI√ìN 1: Resumen General (Con estilo original) */}
      <SectionTitle number="1" title="Resumen General" darkMode={darkMode} translationKey="dashboard.summary" />
      <div className="stats-grid-lg">
        {/* Mostrar skeleton loader mientras carga o componente normal si ya hay datos */}
        {loading.stats ? (
          <StatsSectionSkeleton darkMode={darkMode} />
        ) : (
          <ResumenOriginalCard
            darkMode={darkMode}
          />
        )}
      </div>
      
      {/* SECCI√ìN 2: An√°lisis de Partos */}
      <SectionTitle number="2" title="An√°lisis de Partos" darkMode={darkMode} translationKey="dashboard.partos_analysis" />
      <div className="combined-stats-grid">
        {/* Wrapper para que el PartosSection ocupe la mitad del ancho */}
        <div style={{ display: 'contents' }}>
          {loading.partos ? (
            <PartosSectionSkeleton darkMode={darkMode} />
          ) : (
            <PartosSection 
              statsData={statsData} 
              partosData={partosData}
              darkMode={darkMode} 
              loading={loading.stats || loading.partos} 
              error={error.stats || error.partos} 
            />
          )}
        </div>
        {/* Espacio vac√≠o para equilibrar la cuadr√≠cula */}
        <div></div>
      </div>

      {/* Espacio para posibles secciones adicionales en el futuro */}
      
    </div>
  );
};

export default DashboardV2;
