// Servicio para gestionar las importaciones
import { get, post, del } from './apiService';
import { mockImportHistory } from './mockData';

// URL base para las peticiones API utilizando el proxy configurado en Astro
const API_PATH = '/api/v1';

// Interfaces
export interface ImportResult {
  success: boolean;
  message: string;
  total_processed?: number;
  total_imported?: number;
  total_errors?: number;
  errors?: string[];
  imported_ids?: number[];
}

export interface ImportHistoryItem {
  id: number;
  filename: string;
  user_id: number;
  user_name?: string;
  import_type: string;
  total_records: number;
  successful_records: number;
  failed_records: number;
  status: 'completed' | 'failed' | 'processing' | 'pending';
  created_at: string;
  updated_at: string;
}

export interface ImportHistoryFilters {
  status?: string;
  page?: number;
  limit?: number;
}

export interface PaginatedResponse<T> {
  items: T[];
  total: number;
  page: number;
  limit: number;
  pages: number;
}

// Enumeración para estados de importación (debe coincidir con el backend)
export enum ImportStatus {
  PENDING = "pending",
  PROCESSING = "processing",
  COMPLETED = "completed",
  FAILED = "failed"
}

/**
 * Verifica si el usuario está autenticado y tiene permisos para importar
 */
export const checkAuthStatus = (): { isAuthenticated: boolean; canImport: boolean; message: string } => {
  // En desarrollo asumimos que el usuario está autenticado y tiene permiso
  return { 
    isAuthenticated: true,
    canImport: true,
    message: ''
  };
};

// Obtener token de autenticación
const getAuthToken = (): string | null => {
  try {
    return localStorage.getItem('auth_token');
  } catch (error) {
    console.error('Error al obtener token:', error);
    return null;
  }
};
