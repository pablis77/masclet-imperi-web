/**
 * M√≥dulo para organizar y cargar scripts por secciones
 * Organiza la carga de scripts seg√∫n la estructura de la aplicaci√≥n Masclet Imperi
 */

/**
 * Configuraci√≥n de las secciones con sus rutas y dependencias
 * Rutas actualizadas seg√∫n configuraci√≥n real de la aplicaci√≥n
 */
const SECTIONS = {
  // Core (siempre cargado)
  CORE: {
    pattern: null, // No tiene patr√≥n URL, siempre se carga
    jsPattern: /(vendor|client|main|apiConfig\.centralizado|apiService|apiConfigAdapter|auth|notificationService)/i,
    cssPattern: /(index|global|lemon-squeezy)/i,
    priority: 0 // Prioridad m√°xima (se carga primero)
  },

  // Login (p√°gina de entrada)
  LOGIN: {
    pattern: '/login',
    jsPattern: /(login|auth|PasswordErrorModal)/i,
    cssPattern: /(login)/i,
    priority: 1
  },

  // Dashboard (principal tras login)
  DASHBOARD: {
    pattern: ['/', '/dashboard', '/index', '/dashboard-direct', '/dashboard-simple', '/dashboard-test', '/dashboard2'],
    jsPattern: /(dashboardv2|partossection|chartcomponents|uicomponents|resumenoriginalcard)/i,
    cssPattern: /(dashboard|index)/i,
    priority: 2
  },

  // Explotaciones
  EXPLOTACIONES: {
    pattern: ['/explotaciones', '/explotaciones-react'], 
    jsPattern: /(explotacion|ExplotacionesPage)/i,
    cssPattern: /(explotacion)/i,
    priority: 3
  },

  // Animales
  ANIMALES: {
    pattern: ['/animals', '/animal'], 
    jsPattern: /(animal|AnimalTable|AnimalFilters)/i,
    cssPattern: /(animal)/i,
    priority: 3
  },

  // Listados
  LISTADOS: {
    pattern: '/listados',
    jsPattern: /(listados?|reports?|ListadosContainer|ListadosTable)/i,
    cssPattern: /(listado)/i,
    priority: 3
  },

  // Usuarios
  USUARIOS: {
    pattern: ['/users', '/user'],
    jsPattern: /(users?|RoleGuard|ConfirmDialog|Pagination|userServices)/i,
    cssPattern: /(user)/i,
    priority: 4
  },

  // Importaci√≥n
  IMPORTACION: {
    pattern: ['/imports', '/import'],
    jsPattern: /(import|ImportContainer|ImportForm|ImportHistory|ResetDatabaseButton)/i,
    cssPattern: /(import)/i,
    priority: 4
  },

  // Backups
  BACKUPS: {
    pattern: '/backup',
    jsPattern: /(backup|restore|block-delete-button)/i,
    cssPattern: /(backup)/i,
    priority: 4
  },
  
  // Notificaciones
  NOTIFICACIONES: {
    pattern: '/notifications',
    jsPattern: /(notifi|alert)/i,
    cssPattern: /(notifi|alert)/i,
    priority: 5
  },
  
  // Mi perfil
  PERFIL: {
    pattern: '/profile',
    jsPattern: /(profile|account|user)/i,
    cssPattern: /(profile|account)/i,
    priority: 5
  },
  
  // Configuraci√≥n
  AJUSTES: {
    pattern: '/settings',
    jsPattern: /(settings|config|configuracion)/i,
    cssPattern: /(settings|config)/i,
    priority: 5
  }
};

/**
 * Detecta la secci√≥n actual basada en la URL
 * @param {string} url - URL actual
 * @returns {string} - Nombre de la secci√≥n
 */
function detectSection(url) {
  // Si no hay URL, asumimos dashboard como principal
  if (!url) return 'DASHBOARD';
  
  // Normalizar la URL para comparaci√≥n
  const cleanUrl = url.trim();
  const pathname = cleanUrl.startsWith('/') ? cleanUrl : `/${cleanUrl}`;
  
  // Mensaje de diagn√≥stico (con la URL real para verificar)
  console.log(`üîç Detectando secci√≥n para URL: '${pathname}' (original: '${url}')`);
  
  // IMPORTANTE: USAR EXACTAMENTE LA MISMA L√ìGICA QUE EN INDEX.HTML
  if (pathname.includes('/login')) {
    console.log('‚úÖ Secci√≥n encontrada: LOGIN');
    return 'LOGIN';
  } else if (pathname.includes('/explotacion')) {
    console.log('‚úÖ Secci√≥n encontrada: EXPLOTACIONES');
    return 'EXPLOTACIONES';
  } else if (pathname.includes('/animal')) {
    console.log('‚úÖ Secci√≥n encontrada: ANIMALES');
    return 'ANIMALES';
  } else if (pathname.includes('/listado')) {
    console.log('‚úÖ Secci√≥n encontrada: LISTADOS');
    return 'LISTADOS';
  } else if (pathname.includes('/user')) {
    console.log('‚úÖ Secci√≥n encontrada: USUARIOS');
    return 'USUARIOS';
  } else if (pathname.includes('/import')) {
    console.log('‚úÖ Secci√≥n encontrada: IMPORTACION');
    return 'IMPORTACION';
  } else if (pathname.includes('/backup')) {
    console.log('‚úÖ Secci√≥n encontrada: BACKUPS');
    return 'BACKUPS';
  } else {
    // Si no coincide con ninguna secci√≥n especifica, es DASHBOARD
    console.log('‚úÖ Secci√≥n encontrada: DASHBOARD (por defecto)');
    return 'DASHBOARD';
  }
}

/**
 * Clasifica scripts por secci√≥n para cargarlos en orden adecuado
 * @param {Object} assets - Objeto con los assets detectados
 * @param {string} currentSection - Secci√≥n actual del usuario
 * @returns {Object} - Assets organizados por secci√≥n y prioridad
 */
function organizeSectionAssets(assets, currentSection = 'DASHBOARD') {
  const result = {
    core: {
      js: [],
      css: []
    },
    current: {
      js: [],
      css: []
    },
    other: {
      js: [],
      css: []
    }
  };

  // 1. Procesar scripts CORE (siempre cargan)
  const coreConfig = SECTIONS.CORE;
  if (coreConfig.jsPattern) {
    // Buscar en todos los JS que coincidan con el patr√≥n
    if (assets.allJs) {
      const matchingJs = assets.allJs.filter(js => coreConfig.jsPattern.test(js));
      result.core.js.push(...matchingJs);
    }
  }

  // Procesar CSS del core
  if (coreConfig.cssPattern) {
    // Buscar en todos los CSS que coincidan con el patr√≥n
    if (assets.allCss) {
      const matchingCss = assets.allCss.filter(css => coreConfig.cssPattern.test(css));
      result.core.css.push(...matchingCss);
    }
  }

  // 2. Procesar scripts espec√≠ficos para la secci√≥n actual
  const currentConfig = SECTIONS[currentSection] || SECTIONS.DASHBOARD;
  if (currentConfig && currentConfig.jsPattern) {
    if (assets.allJs) {
      const matchingJs = assets.allJs.filter(js => 
        currentConfig.jsPattern.test(js) && 
        !result.core.js.includes(js)
      );
      result.current.js.push(...matchingJs);
    }
    
    if (assets.allCss && currentConfig.cssPattern) {
      const matchingCss = assets.allCss.filter(css => 
        currentConfig.cssPattern.test(css) && 
        !result.core.css.includes(css)
      );
      result.current.css.push(...matchingCss);
    }
  }

  // 3. Resto de scripts que no son del CORE ni de la secci√≥n actual
  if (assets.allJs) {
    const otherJs = assets.allJs.filter(js => 
      !result.core.js.includes(js) && 
      !result.current.js.includes(js)
    );
    
    // Limitamos a solo los que puedan ser √∫tiles para no sobrecargar
    // Estos se cargar√°n en diferido
    if (otherJs.length > 0) {
      result.other.js = otherJs.slice(0, 5); // Limitamos a 5 scripts adicionales
    }
  }

  // 4. Procesar scripts cr√≠ticos requeridos que no hayan sido detectados en las secciones anteriores
  if (assets.required) {
    Object.entries(assets.required).forEach(([key, path]) => {
      // Solo JS
      if (path.endsWith('.js')) {
        if (!result.core.js.includes(path) && !result.current.js.includes(path)) {
          result.core.js.push(path); // Lo consideramos cr√≠tico si est√° en required
        }
      }
      // CSS
      else if (path.endsWith('.css')) {
        if (!result.core.css.includes(path) && !result.current.css.includes(path)) {
          result.core.css.push(path);
        }
      }
    });
  }

  return result;
}

/**
 * Genera la configuraci√≥n de carga din√°mica para el HTML
 * @param {Object} organizedAssets - Assets organizados por secci√≥n
 * @returns {string} - Script JS para configuraci√≥n din√°mica de carga
 */
function generateDynamicLoadConfig(organizedAssets) {
  const coreJS = JSON.stringify(organizedAssets.core.js);
  const currentJS = JSON.stringify(organizedAssets.current.js);
  const otherJS = JSON.stringify(organizedAssets.other.js);
  const coreCSS = JSON.stringify(organizedAssets.core.css);
  const currentCSS = JSON.stringify(organizedAssets.current.css);
  
  return `
  <script>
    // Configuraci√≥n de carga de assets por secci√≥n
    window.mascletAssets = {
      core: {
        js: ${coreJS},
        css: ${coreCSS}
      },
      current: {
        js: ${currentJS},
        css: ${currentCSS}
      },
      other: {
        js: ${otherJS},
        css: []
      }
    };

    // Estado de carga
    window.mascletLoader = {
      loaded: 0,
      total: ${organizedAssets.core.js.length + organizedAssets.current.js.length},
      failed: [],
      complete: false
    };
  </script>`;
}

module.exports = {
  detectSection,
  organizeSectionAssets,
  generateDynamicLoadConfig,
  SECTIONS
};
