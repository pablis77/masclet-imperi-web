{"version":3,"file":"apiConfigAdapter_DF5Xcq8a.mjs","sources":["../../../src/config/apiConfig.centralizado.ts","../../../src/services/apiConfigAdapter.ts"],"sourcesContent":["/**\n * Configuración centralizada de APIs para Masclet Imperi\n * Este archivo proporciona una configuración unificada para todas las conexiones a APIs,\n * permitiendo un fácil cambio entre entornos de desarrollo y producción.\n */\n\n// Detección del entorno actual\nconst IS_PRODUCTION = import.meta.env.PROD || false;\nconst IS_DEVELOPMENT = !IS_PRODUCTION;\n\n/**\n * Detecta si estamos en una red local (localhost, 127.0.0.1, etc)\n */\nexport const isLocalEnvironment = (): boolean => {\n  if (typeof window === 'undefined') return false;\n  \n  const hostname = window.location.hostname;\n  return (\n    hostname === 'localhost' ||\n    hostname === '127.0.0.1' ||\n    hostname.startsWith('192.168.') ||\n    hostname.startsWith('10.') ||\n    hostname.indexOf('.local') > -1 ||\n    hostname.indexOf('.internal') > -1\n  );\n};\n\n/**\n * Detecta si estamos en un ambiente de producción (AWS Amplify)\n */\nexport const isProductionEnvironment = (): boolean => {\n  if (typeof window === 'undefined') return false;\n  return !isLocalEnvironment();\n};\n\n/**\n * Obtiene la URL base de la API según el entorno\n */\nexport const getApiBaseUrl = (): string => {\n  // 1. Prioridad máxima: variable de entorno específica de la API\n  const configuredApiUrl = import.meta.env.VITE_API_URL;\n  if (configuredApiUrl) {\n    console.log('✅ Usando URL de API configurada:', configuredApiUrl);\n    return configuredApiUrl;\n  }\n  \n  // 2. En producción (AWS Amplify): usar URL relativa (mismo dominio)\n  if (IS_PRODUCTION || isProductionEnvironment()) {\n    // La API está en el mismo dominio, pero en la ruta /api/v1\n    return '/api/v1';\n  }\n  \n  // 3. En desarrollo local: siempre usar localhost\n  return 'http://localhost:8000/api/v1';\n};\n\n/**\n * Obtiene la URL completa para un endpoint específico\n */\nexport const getApiEndpoint = (endpoint: string): string => {\n  const baseUrl = getApiBaseUrl();\n  // Normalizar endpoint para evitar dobles barras\n  const normalizedEndpoint = endpoint.startsWith('/') ? endpoint.substring(1) : endpoint;\n  return `${baseUrl}/${normalizedEndpoint}`;\n};\n\n/**\n * Configuración para servicios de autenticación\n */\nexport const AUTH_CONFIG = {\n  // URL base para endpoints de autenticación\n  baseUrl: `${getApiBaseUrl()}/auth`,\n  \n  // Endpoints específicos\n  endpoints: {\n    login: `${getApiBaseUrl()}/auth/login`,\n    logout: `${getApiBaseUrl()}/auth/logout`,\n    refresh: `${getApiBaseUrl()}/auth/refresh`,\n    me: `${getApiBaseUrl()}/users/me`,\n  },\n  \n  // Tokens\n  tokenName: 'token',\n  refreshTokenName: 'refresh_token',\n  tokenExpire: 24 * 60 * 60 * 1000, // 24 horas en ms\n};\n\n/**\n * Configuración para el API general\n */\nexport const API_CONFIG = {\n  // URL base de la API\n  baseUrl: getApiBaseUrl(),\n  \n  // Timeout para peticiones (ms)\n  timeout: 30000,\n  \n  // Headers por defecto\n  defaultHeaders: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n  \n  // Endpoints más utilizados (organizados por entidad)\n  endpoints: {\n    animals: {\n      list: 'animals',\n      detail: (id: string | number) => `animals/${id}`,\n      partos: (id: string | number) => `animals/${id}/partos`,\n      history: (id: string | number) => `animals/${id}/history`,\n    },\n    explotacions: {\n      list: 'explotacions',\n      detail: (id: string | number) => `explotacions/${id}`,\n    },\n    dashboard: {\n      stats: 'dashboard/stats',\n      recuentos: 'dashboard/recuentos',\n      explotacions: 'dashboard/explotacions',\n    },\n    backup: {\n      list: 'backup/list',\n      create: 'backup/create',\n      restore: (filename: string) => `backup/restore/${filename}`,\n    },\n    users: {\n      list: 'users',\n      detail: (id: string | number) => `users/${id}`,\n      me: 'users/me',\n    }\n  },\n};\n\nexport default {\n  API_CONFIG,\n  AUTH_CONFIG,\n  getApiBaseUrl,\n  getApiEndpoint,\n  isLocalEnvironment,\n  IS_PRODUCTION,\n  IS_DEVELOPMENT,\n};\n","/**\n * Adaptador para la configuración centralizada de API\n * Este archivo actúa como puente entre nuestra configuración centralizada\n * y los servicios API existentes, sin modificarlos directamente.\n */\n\nimport { API_CONFIG, AUTH_CONFIG } from '../config/apiConfig.centralizado';\n\n// Exportar constantes adaptadas para servicios existentes\nexport const API_BASE_URL = API_CONFIG.baseUrl;\nexport const API_TIMEOUT = API_CONFIG.timeout;\nexport const API_DEFAULT_HEADERS = API_CONFIG.defaultHeaders;\nexport const API_ENDPOINTS = API_CONFIG.endpoints;\n\n// Detectar entorno (compatible con api.ts y apiService.ts)\nexport const getEnvironment = (): 'server' | 'local' | 'production' => {\n    if (typeof window === 'undefined') return 'server';\n    \n    const hostname = window.location.hostname;\n    // Comprobar si estamos en localhost o red local\n    if (hostname === 'localhost' || \n        hostname === '127.0.0.1' || \n        hostname.includes('192.168.') || \n        hostname.startsWith('10.') || \n        hostname.indexOf('.local') > -1 || \n        hostname.indexOf('.internal') > -1) {\n        return 'local';\n    }\n    return 'production';\n};\n\nexport const environment = getEnvironment();\nexport const isProduction = environment === 'production';\nexport const isLocal = environment === 'local';\n\n// Función para normalizar rutas (compatible con api.ts)\nexport function normalizePath(path: string): string {\n    // Eliminar barra inicial si existe\n    path = path.startsWith('/') ? path.substring(1) : path;\n    // Asegurar barra final\n    return path.endsWith('/') ? path : `${path}/`;\n}\n\n// Función que proporciona la URL base para el entorno actual\n// Esta función es compatible con getApiUrl() en apiService.ts\nexport function getApiUrl(): string {\n    return API_CONFIG.baseUrl;\n}\n\n// Función para configurar la API (compatible con apiService.ts)\nexport function configureApi(baseUrl: string, useMockData: boolean = false): void {\n    console.log(`API configurada con URL base: ${baseUrl}`);\n    console.log(`Uso de datos simulados: ${useMockData ? 'SÍ' : 'NO'}`);\n}\n\n// Exportar configuración de autenticación\nexport const TOKEN_NAME = AUTH_CONFIG.tokenName;\nexport const REFRESH_TOKEN_NAME = AUTH_CONFIG.refreshTokenName;\nexport const AUTH_ENDPOINTS = AUTH_CONFIG.endpoints;\n\nexport default {\n    API_BASE_URL,\n    API_TIMEOUT,\n    API_DEFAULT_HEADERS,\n    API_ENDPOINTS,\n    environment,\n    isProduction,\n    isLocal,\n    normalizePath,\n    getApiUrl,\n    configureApi,\n    TOKEN_NAME,\n    REFRESH_TOKEN_NAME,\n    AUTH_ENDPOINTS\n};\n"],"names":[],"mappings":"AAsCO,MAAM,gBAAgB,MAAc;AAEnC,EAAA,MAAA,gBAAmB,GAAA,uBAAA;AACzB,EAAsB;AACZ,IAAA,OAAA,CAAA,GAAA,CAAI,oCAAoC,gBAAgB,CAAA;AACzD,IAAA,OAAA,gBAAA;AAAA;AAWX,CAAA;AAeO,MAAM,WAAc,GAAA;AAAA;AAAA,EAEzB,OAAA,EAAS,CAAG,EAAA,aAAA,EAAe,CAAA,KAAA,CAAA;AAAA;AAAA,EAG3B,SAAW,EAAA;AAAA,IACT,KAAA,EAAO,CAAG,EAAA,aAAA,EAAe,CAAA,WAAA,CAAA;AAAA,IACzB,MAAA,EAAQ,CAAG,EAAA,aAAA,EAAe,CAAA,YAAA,CAAA;AAAA,IAC1B,OAAA,EAAS,CAAG,EAAA,aAAA,EAAe,CAAA,aAAA,CAAA;AAAA,IAC3B,EAAA,EAAI,CAAG,EAAA,aAAA,EAAe,CAAA,SAAA;AAAA,GACxB;AAAA;AAAA,EAGA,SAAW,EAAA,OAGb,CAAA;AAKO,MAAM,UAAa,GAAA;AAAA;AAAA,EAExB,SAAS,aAAc,EAAA;AAAA;AAAA,EAGvB,OAAS,EAAA,GAAA;AAAA;AAAA,EAGT,cAAgB,EAAA;AAAA,IACd,cAAgB,EAAA,kBAAA;AAAA,IAChB,QAAU,EAAA;AAAA,GA+Bd,CAAA;;AC1HO,MAAM,eAAe,UAAW,CAAA;AAChC,MAAM,cAAc,UAAW,CAAA;AAC/B,MAAM,sBAAsB,UAAW,CAAA;AAIvC,MAAM,iBAAiB,MAAyC;AACnE,EAAI,IAAA,OAAO,MAAW,KAAA,WAAA,EAAoB,OAAA,QAAA;AAE1C,EAAM,MAAA,QAAA,GAAW,OAAO,QAAS,CAAA,QAAA;AAEjC,EAAI,IAAA,QAAA,KAAa,eACb,QAAa,KAAA,WAAA,IACb,SAAS,QAAS,CAAA,UAAU,KAC5B,QAAS,CAAA,UAAA,CAAW,KAAK,CACzB,IAAA,QAAA,CAAS,QAAQ,QAAQ,CAAA,GAAI,MAC7B,QAAS,CAAA,OAAA,CAAQ,WAAW,CAAA,GAAI,EAAI,EAAA;AACpC,IAAO,OAAA,OAAA;AAAA;AAEX,EAAO,OAAA,YAAA;AACX,CAAA;AAEO,MAAM,cAAc,cAAe;AACnC,MAAM,eAAe,WAAgB,KAAA;AAwBrC,MAAM,aAAa,WAAY,CAAA;;;;"}