{"version":3,"file":"animalService_BOr3n1Bi.mjs","sources":["../../../src/services/mockData.ts","../../../src/services/animalService.ts"],"sourcesContent":["// Mock Data para desarrollo\n// Este archivo proporciona datos simulados para todas las entidades de la aplicación\n\nimport type { UserRole } from './authService';\n\n// Tipos básicos\nexport interface Animal {\n  id: number;\n  explotacio: string;\n  nom: string;\n  genere: 'M' | 'F';\n  estado: 'OK' | 'DEF';\n  alletar: '0' | '1' | '2';\n  pare?: string | null;\n  mare?: string | null;\n  quadra?: string | null;\n  cod?: string | null;\n  num_serie?: string | null;\n  dob?: string | null; // fecha de nacimiento\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface Explotacio {\n  id: number;\n  explotacio: string;   // Identificador único de la explotación\n  animal_count?: number; // Cantidad de animales en la explotación\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  role: UserRole;\n  first_name?: string;\n  last_name?: string;\n  is_active: boolean;\n  created_at: string;\n  updated_at: string;\n  password?: string; // Añadido para simulación\n  full_name?: string; // Añadido para compatibilidad con authService\n}\n\nexport interface Part {\n  id: number;\n  animal_id: number;\n  animal_nom?: string;\n  data: string; // fecha del parto\n  num_cries: number;\n  notes?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ImportHistoryItem {\n  id: number;\n  filename: string;\n  user_id: number;\n  user_name?: string;\n  import_type: string;\n  total_records: number;\n  successful_records: number;\n  failed_records: number;\n  status: 'completed' | 'failed' | 'processing' | 'pending';\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ImportHistoryFilters {\n  import_type?: string;\n  status?: string;\n  page?: number;\n  limit?: number;\n}\n\n// Datos de ejemplo\nexport const mockAnimals: Animal[] = [\n  {\n    id: 1,\n    nom: 'Lucero',\n    explotacio: '1',\n    genere: 'M',\n    estado: 'OK',\n    alletar: '0',\n    pare: null,\n    mare: null,\n    quadra: 'Q1',\n    cod: 'A001',\n    num_serie: 'SN001',\n    dob: '2020-05-15',\n    created_at: '2023-01-10T10:00:00Z',\n    updated_at: '2023-01-10T10:00:00Z'\n  },\n  {\n    id: 2,\n    nom: 'Estrella',\n    explotacio: '1',\n    genere: 'F',\n    estado: 'OK',\n    alletar: '1',\n    pare: 'Lucero',\n    mare: null,\n    quadra: 'Q2',\n    cod: 'A002',\n    num_serie: 'SN002',\n    dob: '2019-08-20',\n    created_at: '2023-01-10T10:00:00Z',\n    updated_at: '2023-01-10T10:00:00Z'\n  },\n  {\n    id: 3,\n    nom: 'Luna',\n    explotacio: '2',\n    genere: 'F',\n    estado: 'OK',\n    alletar: '2',\n    pare: null,\n    mare: null,\n    quadra: 'Q1',\n    cod: 'A003',\n    num_serie: 'SN003',\n    dob: '2021-02-10',\n    created_at: '2023-01-10T10:00:00Z',\n    updated_at: '2023-01-10T10:00:00Z'\n  },\n  {\n    id: 4,\n    nom: 'Tornado',\n    explotacio: '2',\n    genere: 'M',\n    estado: 'DEF',\n    alletar: '0',\n    pare: 'Lucero',\n    mare: 'Estrella',\n    quadra: 'Q3',\n    cod: 'A004',\n    num_serie: 'SN004',\n    dob: '2020-11-05',\n    created_at: '2023-01-10T10:00:00Z',\n    updated_at: '2023-01-10T10:00:00Z'\n  },\n  {\n    id: 5,\n    nom: 'Trueno',\n    explotacio: 'EXP001',\n    genere: 'M',\n    estado: 'OK',\n    alletar: '0',\n    pare: null,\n    mare: null,\n    quadra: 'Q1',\n    cod: 'A005',\n    num_serie: 'SN005',\n    dob: '2022-03-18',\n    created_at: '2023-01-10T10:00:00Z',\n    updated_at: '2023-01-10T10:00:00Z'\n  }\n];\n\nexport const mockExplotacions: Explotacio[] = [\n  {\n    id: 1,\n    explotacio: 'EXP001',\n    animal_count: 25,\n    created_at: '2022-10-01T09:00:00Z',\n    updated_at: '2023-01-05T14:30:00Z'\n  },\n  {\n    id: 2,\n    explotacio: 'EXP002',\n    animal_count: 20,\n    created_at: '2022-11-01T10:00:00Z',\n    updated_at: '2023-01-10T10:00:00Z'\n  },\n  {\n    id: 3,\n    explotacio: 'EXP003',\n    animal_count: 15,\n    created_at: '2022-12-01T11:00:00Z',\n    updated_at: '2023-01-15T11:00:00Z'\n  },\n  {\n    id: 4,\n    explotacio: 'EXP004',\n    animal_count: 10,\n    created_at: '2023-01-01T12:00:00Z',\n    updated_at: '2023-01-20T12:00:00Z'\n  },\n  {\n    id: 5,\n    explotacio: 'EXP005',\n    animal_count: 5,\n    created_at: '2023-01-05T13:00:00Z',\n    updated_at: '2023-01-25T13:00:00Z'\n  }\n];\n\nexport const mockUsers: User[] = [\n  {\n    id: 1,\n    username: 'admin',\n    email: 'admin@example.com',\n    role: 'administrador',\n    first_name: 'Administrador',\n    last_name: '',\n    is_active: true,\n    created_at: '2023-01-01T10:00:00Z',\n    updated_at: '2023-01-01T10:00:00Z',\n    password: 'password123', // Añadido para simulación\n    full_name: 'Administrador' // Añadido para compatibilidad con authService\n  },\n  {\n    id: 2,\n    username: 'gerente',\n    email: 'gerente@example.com',\n    role: 'gerente',\n    first_name: 'Gerente',\n    last_name: 'Principal',\n    is_active: true,\n    created_at: '2023-01-01T10:00:00Z',\n    updated_at: '2023-01-01T10:00:00Z',\n    password: 'password123', // Añadido para simulación\n    full_name: 'Gerente Principal' // Añadido para compatibilidad con authService\n  },\n  {\n    id: 3,\n    username: 'editor',\n    email: 'editor@example.com',\n    role: 'editor',\n    first_name: 'Editor',\n    last_name: '',\n    is_active: true,\n    created_at: '2023-01-01T10:00:00Z',\n    updated_at: '2023-01-01T10:00:00Z',\n    password: 'password123', // Añadido para simulación\n    full_name: 'Editor' // Añadido para compatibilidad con authService\n  },\n  {\n    id: 4,\n    username: 'usuario',\n    email: 'usuario@example.com',\n    role: 'usuario',\n    first_name: 'Usuario',\n    last_name: 'Estándar',\n    is_active: true,\n    created_at: '2023-01-01T10:00:00Z',\n    updated_at: '2023-01-01T10:00:00Z',\n    password: 'password123', // Añadido para simulación\n    full_name: 'Usuario Estándar' // Añadido para compatibilidad con authService\n  }\n];\n\nexport const mockParts: Part[] = [\n  {\n    id: 1,\n    animal_id: 2,\n    animal_nom: 'Estrella',\n    data: '2022-04-10',\n    num_cries: 1,\n    notes: '',\n    created_at: '2022-04-10T10:00:00Z',\n    updated_at: '2022-04-10T10:00:00Z'\n  },\n  {\n    id: 2,\n    animal_id: 3,\n    animal_nom: 'Luna',\n    data: '2022-06-15',\n    num_cries: 1,\n    notes: '',\n    created_at: '2022-06-15T10:00:00Z',\n    updated_at: '2022-06-15T10:00:00Z'\n  },\n  {\n    id: 3,\n    animal_id: 3,\n    animal_nom: 'Luna',\n    data: '2023-07-20',\n    num_cries: 2,\n    notes: '',\n    created_at: '2023-07-20T10:00:00Z',\n    updated_at: '2023-07-20T10:00:00Z'\n  }\n];\n\n// Mock data para el historial de importaciones\nexport const mockImportHistory: ImportHistoryItem[] = [\n  {\n    id: 1,\n    filename: 'animales_enero_2023.csv',\n    user_id: 1,\n    user_name: 'Admin',\n    import_type: 'animals',\n    total_records: 50,\n    successful_records: 48,\n    failed_records: 2,\n    status: 'completed',\n    created_at: '2023-01-15T14:22:30Z',\n    updated_at: '2023-01-15T14:22:45Z'\n  },\n  {\n    id: 2,\n    filename: 'animales_febrero_2023.csv',\n    user_id: 1,\n    user_name: 'Admin',\n    import_type: 'animals',\n    total_records: 35,\n    successful_records: 35,\n    failed_records: 0,\n    status: 'completed',\n    created_at: '2023-02-10T09:45:12Z',\n    updated_at: '2023-02-10T09:45:30Z'\n  },\n  {\n    id: 3,\n    filename: 'animales_marzo_2023.csv',\n    user_id: 2,\n    user_name: 'María Gómez',\n    import_type: 'animals',\n    total_records: 42,\n    successful_records: 38,\n    failed_records: 4,\n    status: 'completed',\n    created_at: '2023-03-05T11:32:45Z',\n    updated_at: '2023-03-05T11:33:10Z'\n  },\n  {\n    id: 4,\n    filename: 'importacion_fallida.csv',\n    user_id: 1,\n    user_name: 'Admin',\n    import_type: 'animals',\n    total_records: 15,\n    successful_records: 0,\n    failed_records: 15,\n    status: 'failed',\n    created_at: '2023-04-12T16:18:22Z',\n    updated_at: '2023-04-12T16:18:35Z'\n  },\n  {\n    id: 5,\n    filename: 'nuevos_animales.csv',\n    user_id: 3,\n    user_name: 'Pedro Sánchez',\n    import_type: 'animals',\n    total_records: 25,\n    successful_records: 20,\n    failed_records: 5,\n    status: 'completed',\n    created_at: '2023-05-20T10:15:30Z',\n    updated_at: '2023-05-20T10:15:55Z'\n  },\n  {\n    id: 6,\n    filename: 'importacion_actual.csv',\n    user_id: 1,\n    user_name: 'Admin',\n    import_type: 'animals',\n    total_records: 30,\n    successful_records: 0,\n    failed_records: 0,\n    status: 'processing',\n    created_at: '2023-06-01T08:45:00Z',\n    updated_at: '2023-06-01T08:45:00Z'\n  }\n];\n\n// Datos para el dashboard\nexport const mockDashboardData = {\n  totalAnimals: mockAnimals.length,\n  maleAnimals: mockAnimals.filter(a => a.genere === 'M').length,\n  femaleAnimals: mockAnimals.filter(a => a.genere === 'F').length,\n  okAnimals: mockAnimals.filter(a => a.estado === 'OK').length,\n  defAnimals: mockAnimals.filter(a => a.estado === 'DEF').length,\n  allettingAnimals: mockAnimals.filter(a => a.alletar !== '0').length,\n  explotacionsCount: mockExplotacions.length,\n  recentParts: mockParts.slice(0, 3).map(p => ({\n    id: p.id,\n    animal_id: p.animal_id,\n    animal_nom: p.animal_nom,\n    data: p.data,\n    num_cries: p.num_cries\n  }))\n};\n\n// Datos simulados para endpoints específicos\n// Estos objetos deben coincidir con las rutas de la API sin el prefijo /api/v1/\nexport const animalsData = {\n  items: mockAnimals,\n  total: mockAnimals.length,\n  page: 1,\n  limit: 10,\n  pages: 1\n};\n\n// Para obtener un animal específico por ID\nexport const getAnimalById = (id: number) => {\n  const animal = mockAnimals.find(a => a.id === id);\n  if (animal) return animal;\n  return null;\n};\n\n// Para el endpoint dashboard/stats\nexport const dashboardStats = mockDashboardData;\n\n// Para el endpoint explotacions\nexport const explotacionsData = {\n  items: mockExplotacions,\n  total: mockExplotacions.length,\n  page: 1,\n  limit: 10,\n  pages: 1\n};\n\n// Para obtener una explotación específica por ID\nexport const getExplotacionById = (id: number) => {\n  const explotacion = mockExplotacions.find(e => e.id === id);\n  if (explotacion) return explotacion;\n  return null;\n};\n\n// Para el endpoint animals por explotación\nexport const getAnimalsByExplotacion = (explotacioId: number) => {\n  const filteredAnimals = mockAnimals.filter(animal => animal.explotacio === String(explotacioId));\n  return {\n    items: filteredAnimals,\n    total: filteredAnimals.length,\n    page: 1,\n    limit: 10,\n    pages: 1\n  };\n};\n\n// Para el endpoint parts\nexport const partsData = {\n  items: mockParts,\n  total: mockParts.length,\n  page: 1,\n  limit: 10,\n  pages: 1\n};\n\n// Para obtener los partos de un animal específico\nexport const getPartsByAnimal = (animalId: number) => {\n  const filteredParts = mockParts.filter(p => p.animal_id === animalId);\n  return {\n    items: filteredParts,\n    total: filteredParts.length,\n    page: 1,\n    limit: 10,\n    pages: 1\n  };\n};\n\n// Para el endpoint import-history\nexport const importHistory = {\n  items: mockImportHistory,\n  total: mockImportHistory.length,\n  page: 1,\n  limit: 10,\n  pages: 1\n};\n\n// Para el endpoint users\nexport const usersData = {\n  items: mockUsers,\n  total: mockUsers.length,\n  page: 1,\n  limit: 10,\n  pages: 1\n};\n","import apiService from './apiService';\nimport { mockAnimals, mockExplotacions } from './mockData';\nimport api from './api';\n\n// Interfaces\nexport interface Parto {\n  id?: number;\n  animal_id?: number;\n  animal_nom?: string;\n  part?: string | null;  // Fecha del parto (DD/MM/YYYY)\n  GenereT?: 'M' | 'F' | 'esforrada' | null;\n  EstadoT?: 'OK' | 'DEF' | null;\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport interface Animal {\n  id: number;\n  explotacio: string;\n  nom: string;\n  genere: 'M' | 'F';\n  estado: 'OK' | 'DEF';\n  alletar: '0' | '1' | '2';  // 0: No amamanta, 1: Un ternero, 2: Dos terneros (solo para vacas)\n  pare?: string | null;\n  mare?: string | null;\n  quadra?: string | null;\n  cod?: string | null;\n  num_serie?: string | null;\n  dob?: string | null;\n  created_at: string;\n  updated_at: string;\n  partos?: Parto[] | { items: Parto[] };\n  parts?: Parto[];  // Soporte para nombre anterior (retrocompatibilidad)\n  estat?: 'OK' | 'DEF';  // Soporte para nombre anterior (retrocompatibilidad)\n}\n\nexport interface AnimalCreateDto {\n  explotacio: string;\n  nom: string;\n  genere: 'M' | 'F';\n  estado: 'OK' | 'DEF';\n  alletar: '0' | '1' | '2';\n  pare?: string | null;\n  mare?: string | null;\n  quadra?: string | null;\n  cod?: string | null;\n  num_serie?: string | null;\n  dob?: string | null;\n}\n\nexport interface AnimalUpdateDto extends Partial<AnimalCreateDto> {}\n\nexport interface AnimalFilters {\n  explotacio?: string;\n  genere?: 'M' | 'F';\n  estado?: 'OK' | 'DEF';\n  alletar?: '0' | '1' | '2';\n  quadra?: string;\n  search?: string;\n  page?: number;\n  limit?: number;\n}\n\nexport interface PaginatedResponse<T> {\n  items: T[];\n  total: number;\n  page: number;\n  limit: number;\n  pages: number;\n}\n\n// Función para filtrar animales (usado para mock)\nconst getFilteredAnimals = (filters: AnimalFilters): Animal[] => {\n  let filteredAnimals = [...mockAnimals];\n  \n  // Aplicar filtros\n  if (filters.explotacio !== undefined) {\n    filteredAnimals = filteredAnimals.filter(a => a.explotacio === filters.explotacio);\n  }\n  \n  if (filters.genere !== undefined) {\n    filteredAnimals = filteredAnimals.filter(a => a.genere === filters.genere);\n  }\n  \n  if (filters.estado !== undefined) {\n    filteredAnimals = filteredAnimals.filter(a => a.estado === filters.estado);\n  }\n  \n  if (filters.alletar !== undefined) {\n    filteredAnimals = filteredAnimals.filter(a => a.alletar === filters.alletar);\n  }\n  \n  if (filters.quadra !== undefined) {\n    filteredAnimals = filteredAnimals.filter(a => a.quadra === filters.quadra);\n  }\n  \n  if (filters.search !== undefined && filters.search !== '') {\n    const searchLower = filters.search.toLowerCase().trim();\n    console.log(`Filtrando por término de búsqueda: \"${searchLower}\"`);\n    \n    // Primero obtenemos todos los animales que coinciden con el término de búsqueda\n    let matchingAnimals = filteredAnimals.filter(a => {\n      // Búsqueda por nom (principal)\n      const matchesNom = a.nom.toLowerCase().includes(searchLower);\n      \n      // Búsqueda por código identificativo\n      const matchesCod = a.cod && a.cod.toLowerCase().includes(searchLower);\n      \n      // Búsqueda por número de serie\n      const matchesNumSerie = a.num_serie && a.num_serie.toLowerCase().includes(searchLower);\n      \n      // Búsqueda por explotación \n      const matchesExplotacio = a.explotacio.toLowerCase().includes(searchLower);\n      \n      // Búsqueda por padre o madre\n      const matchesPare = a.pare && a.pare.toLowerCase().includes(searchLower);\n      const matchesMare = a.mare && a.mare.toLowerCase().includes(searchLower);\n      \n      // Animal coincide si cualquiera de los campos coincide\n      return matchesNom || matchesCod || matchesNumSerie || matchesExplotacio || matchesPare || matchesMare;\n    });\n    \n    // Vamos a asignar valores de prioridad a cada animal en función de dónde coincide el término\n    const animalScores = matchingAnimals.map(animal => {\n      let score = 0;\n      \n      // Prioridad máxima: Coincidencia EXACTA en nom (mismo texto)\n      if (animal.nom.toLowerCase() === searchLower) {\n        score += 1000;\n      }\n      // Prioridad alta: Coincidencia al INICIO del nombre (empieza por)\n      else if (animal.nom.toLowerCase().startsWith(searchLower)) {\n        score += 800;\n      }\n      // Prioridad media-alta: Nombre CONTIENE el término de búsqueda\n      else if (animal.nom.toLowerCase().includes(searchLower)) {\n        score += 500;\n      }\n      \n      // Prioridad media: Coincidencia en código o número de serie (identificadores)\n      if (animal.cod && animal.cod.toLowerCase().includes(searchLower)) {\n        score += 300;\n      }\n      if (animal.num_serie && animal.num_serie.toLowerCase().includes(searchLower)) {\n        score += 300;\n      }\n      \n      // Prioridad baja: Coincidencia en padres, madre, explotación (relaciones)\n      if (animal.pare && animal.pare.toLowerCase().includes(searchLower)) {\n        score += 100;\n      }\n      if (animal.mare && animal.mare.toLowerCase().includes(searchLower)) {\n        score += 100;\n      }\n      if (animal.explotacio && animal.explotacio.toLowerCase().includes(searchLower)) {\n        score += 50;\n      }\n      \n      return { animal, score };\n    });\n    \n    // Ordenar por puntuación (mayor a menor) y luego por fecha de actualización\n    animalScores.sort((a, b) => {\n      // Primero por puntuación\n      if (a.score !== b.score) {\n        return b.score - a.score;\n      }\n      \n      // Si tienen la misma puntuación, ordenar por fecha de actualización (más reciente primero)\n      return new Date(b.animal.updated_at).getTime() - new Date(a.animal.updated_at).getTime();\n    });\n    \n    // Extraer solo los animales del array ordenado de puntuaciones\n    matchingAnimals = animalScores.map(item => item.animal);\n    \n    // Opcional: Mostrar en la consola para depuración\n    console.log('Animales ordenados por relevancia:', animalScores.map(item => `${item.animal.nom} (${item.score})`));\n    \n    // Tercero, consolidamos registros duplicados basados en el mismo animal\n    // Consideramos que dos animales son el mismo si tienen el mismo nombre y código\n    const uniqueAnimals: Animal[] = [];\n    const processedKeys = new Set<string>();\n    \n    matchingAnimals.forEach(animal => {\n      // Creamos una clave única basada en nombre y código para identificar registros duplicados\n      // Si el código contiene un timestamp, lo eliminamos para considerar todas las versiones como un mismo animal\n      const baseCode = animal.cod ? animal.cod.split('_')[0] : '';\n      const uniqueKey = `${animal.nom.toLowerCase()}_${baseCode}`.trim();\n      \n      // Si no hemos procesado este animal antes, lo agregamos a la lista de únicos\n      if (!processedKeys.has(uniqueKey)) {\n        processedKeys.add(uniqueKey);\n        uniqueAnimals.push(animal);\n      }\n    });\n    \n    filteredAnimals = uniqueAnimals;\n    console.log(`Se encontraron ${filteredAnimals.length} animales únicos que coinciden con la búsqueda`);\n  }\n  \n  return filteredAnimals;\n};\n\n// Funciones auxiliares para la UI\nexport const getAnimalStatusClass = (estado: string) => {\n  return estado === 'OK' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';\n};\n\nexport const getAnimalIcon = (animal: Animal) => {\n  if (animal.genere === 'M') {\n    return '🐂'; // Toro\n  } else {\n    if (animal.alletar !== '0') {\n      return '🐄'; // Vaca amamantando\n    } else {\n      return '🐮'; // Vaca\n    }\n  }\n};\n\nexport const getAlletarText = (alletar: string) => {\n  if (alletar === '0') return 'No amamantando';\n  if (alletar === '1') return 'Amamantando 1 ternero';\n  if (alletar === '2') return 'Amamantando 2 terneros';\n  return 'Desconocido';\n};\n\n// Servicio de animales\nconst animalService = {\n  // Obtiene una lista paginada de animales con filtros opcionales\n  async getAnimals(filters: AnimalFilters = {}): Promise<PaginatedResponse<Animal>> {\n    try {\n      // Construir parámetros de consulta\n      const params = new URLSearchParams();\n      const page = filters.page || 1;\n      const limit = filters.limit || 10;\n      \n      // Convertir page a offset para el backend\n      // El backend espera offset en lugar de page\n      const offset = (page - 1) * limit;\n      \n      // Enviar offset y limit como espera el backend\n      params.append('offset', offset.toString());\n      params.append('limit', limit.toString());\n      \n      // Añadir filtros opcionales si están presentes\n      if (filters.explotacio) params.append('explotacio', filters.explotacio);\n      if (filters.genere) params.append('genere', filters.genere);\n      if (filters.estado) params.append('estado', filters.estado);\n      if (filters.alletar) params.append('alletar', filters.alletar);\n      if (filters.quadra) params.append('quadra', filters.quadra);\n      \n      // Búsqueda por nombre y otros campos (nom, cod, num_serie)\n      if (filters.search) {\n        params.append('search', filters.search);\n        console.log(`Buscando animales que coincidan con: \"${filters.search}\"`);\n      }\n      \n      console.log('Obteniendo animales con parámetros:', Object.fromEntries(params.entries()));\n      \n      // Realizar petición a la API\n      // Usar la ruta correcta sin duplicar el prefijo /api/v1 que ya está en la URL base\n      const responseData = await apiService.get(`/animals?${params.toString()}`);\n      console.log('Respuesta RAW de animales recibida:', responseData);\n      \n      // Transformar la estructura de respuesta del backend a nuestro formato esperado\n      let processedResponse: PaginatedResponse<Animal>;\n      \n      // Verificar si la respuesta tiene el formato {status, data}\n      if (responseData && responseData.status === 'success' && responseData.data) {\n        console.log('Detectada respuesta con formato {status, data}. Procesando correctamente...');\n        \n        const { total, offset, limit, items } = responseData.data;\n        \n        processedResponse = {\n          items: items || [],\n          total: total || 0,\n          page: Math.floor(offset / limit) + 1, // Calcular página en base a offset y limit\n          limit: limit || 10,\n          pages: Math.ceil((total || 0) / (limit || 10))\n        };\n      } else {\n        // Si ya tiene el formato esperado o no conocemos el formato\n        console.log('Usando respuesta en formato directo');\n        processedResponse = responseData as PaginatedResponse<Animal>;\n      }\n      \n      console.log('Respuesta procesada de animales:', processedResponse);\n      \n      // Notificar al usuario que los datos son reales\n      if (filters.search) {\n        document.dispatchEvent(new CustomEvent('search-completed', {\n          detail: {\n            term: filters.search,\n            count: processedResponse.items.length,\n            total: processedResponse.total,\n            usedMock: false\n          }\n        }));\n      }\n      \n      return processedResponse;\n    } catch (error: any) {\n      console.error('Error en petición GET /animals:', error);\n      \n      // Usar datos simulados en caso de error\n      let useMockReason = '';\n      \n      // Verificar el tipo de error\n      if (error.code === 'DB_COLUMN_ERROR' || (error.message && error.message.includes('estado_t'))) {\n        useMockReason = 'error en la estructura de la tabla en el backend';\n      } else if (error.code === 'NETWORK_ERROR') {\n        useMockReason = 'error de conexión al servidor';\n      } else {\n        // Si no es un error específico conocido, seguir usando datos simulados pero con otro mensaje\n        useMockReason = 'error en el servidor';\n      }\n      \n      console.warn(`Usando datos simulados debido a: ${useMockReason}`);\n      \n      // Filtrar datos simulados según los filtros proporcionados\n      const filteredAnimals = getFilteredAnimals(filters);\n      \n      // Calcular paginación\n      const page = filters.page || 1;\n      const limit = filters.limit || 10;\n      const startIndex = (page - 1) * limit;\n      const endIndex = startIndex + limit;\n      const paginatedAnimals = filteredAnimals.slice(startIndex, endIndex);\n      \n      // Notificar al usuario que los datos son simulados si es una búsqueda\n      if (filters.search) {\n        document.dispatchEvent(new CustomEvent('search-completed', {\n          detail: {\n            term: filters.search,\n            count: paginatedAnimals.length,\n            total: filteredAnimals.length,\n            usedMock: true,\n            reason: useMockReason\n          }\n        }));\n      }\n      \n      // Devolver respuesta paginada simulada\n      return {\n        items: paginatedAnimals,\n        total: filteredAnimals.length,\n        page,\n        limit,\n        pages: Math.ceil(filteredAnimals.length / limit)\n      };\n    }\n  },\n  \n  // Obtiene un animal por su ID\n  async getAnimalById(id: number): Promise<Animal> {\n    try {\n      console.log(`Intentando cargar animal con ID: ${id}`);\n      // Usar la ruta correcta sin duplicar el prefijo /api/v1 que ya está en la URL base\n      const responseData = await apiService.get(`/animals/${id}`);\n      console.log('Animal cargado:', responseData);\n      \n      let animalData: Animal;\n      \n      // Comprobamos si la respuesta tiene el formato esperado {status, data}\n      if (responseData && responseData.status === 'success' && responseData.data) {\n        animalData = responseData.data as Animal;\n      } \n      // Si la respuesta es directamente el animal\n      else if (responseData && responseData.id) {\n        animalData = responseData as Animal;\n      }\n      else {\n        throw new Error('Formato de respuesta inválido');\n      }\n      \n      // Normalizar estructura de partos si existe\n      if (animalData) {\n        // Asegurarnos de que partos sea siempre un array\n        if (!animalData.partos) {\n          animalData.partos = [];\n        } else if (!Array.isArray(animalData.partos)) {\n          // Si no es un array, pero tiene items, usamos eso\n          if (animalData.partos.items && Array.isArray(animalData.partos.items)) {\n            animalData.partos = animalData.partos.items;\n          } else {\n            // Si no tiene formato esperado, inicializar como array vacío\n            animalData.partos = [];\n          }\n        }\n        \n        // Asegurarse de que existe 'estado' y no 'estat'\n        if (!animalData.estado && animalData['estat']) {\n          animalData.estado = animalData['estat'];\n        }\n      }\n      \n      return animalData;\n    } catch (error: any) {\n      console.error(`Error al obtener animal con ID ${id}:`, error);\n      \n      // Verificar si es el error específico de estado_t o un error de red\n      if (error.code === 'DB_COLUMN_ERROR' || error.code === 'NETWORK_ERROR' || \n          (error.message && (error.message.includes('estado_t') || error.message.includes('conexión')))) {\n        console.warn('Usando datos simulados debido a error en el backend');\n        \n        // Buscar en datos simulados\n        const animal = mockAnimals.find(a => a.id === id);\n        if (animal) {\n          return animal;\n        }\n        \n        throw new Error(`Animal con ID ${id} no encontrado en los datos simulados`);\n      }\n      \n      // Si no es un error manejable, propagar el error\n      throw error;\n    }\n  },\n  \n  // Crea un nuevo animal\n  async createAnimal(animalData: AnimalCreateDto): Promise<Animal> {\n    try {\n      console.log('Creando nuevo animal:', animalData);\n      // Añadir barra diagonal al final para que coincida con el endpoint del backend\n      const responseData = await apiService.post('/animals/', animalData);\n      console.log('Animal creado:', responseData);\n      return responseData;\n    } catch (error: any) {\n      console.error('Error al crear animal:', error);\n      \n      // Si es un error de red o cualquier otro error, usar datos simulados como fallback\n      if (error.code === 'DB_COLUMN_ERROR' || error.code === 'NETWORK_ERROR' || \n          (error.message && (error.message.includes('estado_t') || error.message.includes('conexión')))) {\n        console.warn('Usando datos simulados para crear animal debido a error en el backend');\n        \n        // Crear respuesta simulada\n        const newId = Math.max(...mockAnimals.map(a => a.id)) + 1;\n        const now = new Date().toISOString();\n        \n        return {\n          id: newId,\n          ...animalData,\n          created_at: now,\n          updated_at: now\n        };\n      }\n      \n      // Si no es un error manejable, propagar el error\n      throw error;\n    }\n  },\n  \n  // Actualiza un animal existente usando PATCH (actualización parcial)\n  async updateAnimal(id: number, animalData: any): Promise<Animal> {\n    try {\n      console.log(`[PATCH] Actualizando animal con ID ${id}:`, animalData);\n      \n      // IMPORTANTE: Solo procesamos los campos que realmente se han enviado\n      // No clonamos todo el objeto para evitar enviar campos innecesarios\n      const datosNormalizados: Record<string, any> = {};\n      \n      // Lista de campos que pueden ser nulos\n      const camposNulables = ['mare', 'pare', 'quadra', 'cod', 'num_serie', 'dob'];\n      \n      // Procesar solo los campos que se han proporcionado\n      for (const campo in animalData) {\n        // Comprobar si el campo existe en animalData\n        if (Object.prototype.hasOwnProperty.call(animalData, campo)) {\n          // Si es un campo nullable y está vacío, establecerlo como null\n          if (camposNulables.includes(campo) && animalData[campo] === '') {\n            datosNormalizados[campo] = null;\n          } else if (campo === 'alletar' && animalData[campo] !== undefined) {\n            // Tratar alletar como caso especial\n            datosNormalizados[campo] = String(animalData[campo]) as '0' | '1' | '2';\n          } else if (campo === 'dob' && animalData[campo]) {\n            // Formatear fecha siempre al formato esperado por el backend: DD/MM/YYYY\n            try {\n              let fechaFinal;\n              \n              // Si la fecha ya está en formato DD/MM/YYYY, la dejamos igual\n              if (typeof animalData[campo] === 'string' && /^\\d{2}\\/\\d{2}\\/\\d{4}$/.test(animalData[campo])) {\n                fechaFinal = animalData[campo];\n              }\n              // Si es formato YYYY-MM-DD (desde inputs HTML)\n              else if (typeof animalData[campo] === 'string' && /^\\d{4}-\\d{2}-\\d{2}$/.test(animalData[campo])) {\n                const [year, month, day] = animalData[campo].split('-');\n                fechaFinal = `${day}/${month}/${year}`;\n              }\n              // Cualquier otro formato, intentamos parsearlo\n              else {\n                const fecha = new Date(animalData[campo]);\n                if (!isNaN(fecha.getTime())) {\n                  const day = fecha.getDate().toString().padStart(2, '0');\n                  const month = (fecha.getMonth() + 1).toString().padStart(2, '0');\n                  const year = fecha.getFullYear();\n                  fechaFinal = `${day}/${month}/${year}`;\n                } else {\n                  // Si no se puede parsear, usamos el valor original \n                  fechaFinal = animalData[campo];\n                }\n              }\n              \n              console.log(`Fecha convertida: ${animalData[campo]} -> ${fechaFinal}`);\n              datosNormalizados[campo] = fechaFinal;\n            } catch (err) {\n              console.error('Error al formatear fecha:', err);\n              // En caso de error, usar el valor original\n              datosNormalizados[campo] = animalData[campo];\n            }\n          } else {\n            // Para cualquier otro campo, usar el valor tal cual\n            datosNormalizados[campo] = animalData[campo];\n          }\n        }\n      }\n      \n      // Verificar que hay campos para actualizar\n      const camposAActualizar = Object.keys(datosNormalizados);\n      if (camposAActualizar.length === 0) {\n        throw new Error('No se detectaron cambios para actualizar');\n      }\n      \n      console.log(`[PATCH] Campos a actualizar: ${camposAActualizar.join(', ')}`);\n      console.log('[PATCH] Datos finales:', datosNormalizados);\n      \n      // Ya no necesitamos manejar el token manualmente\n      // La función patch del apiService se encarga de añadir los headers de autenticación\n      \n      // IMPORTANTE: Usar PATCH y la ruta correcta\n      console.log(`[PATCH] Enviando petición a /animals/${id}`);\n      console.log('Datos normalizados:', JSON.stringify(datosNormalizados, null, 2));\n      \n      // Usar el servicio API para garantizar coherencia\n      console.log('Iniciando patch...');\n      const responseData = await apiService.patch(`/animals/${id}`, datosNormalizados);\n      console.log('PATCH completado con éxito');\n      \n      // El método patch de apiService ya maneja los errores y parsea la respuesta\n      return responseData.data || responseData;\n\n    } catch (error: any) {\n      console.error(`[PATCH] Error al actualizar animal con ID ${id}:`, error);\n      throw error;\n    }\n  },\n  \n  // Elimina un animal (marcado como DEF)\n  async deleteAnimal(id: number): Promise<Animal> {\n    try {\n      console.log(`Intentando eliminar animal con ID ${id}`);\n      \n      // Llamar al endpoint de eliminación (en realidad, marcar como DEF)\n      // Usar la ruta correcta sin duplicar el prefijo /api/v1 que ya está en la URL base\n      const response = await apiService.delete(`/api/v1/animals/${id}`);\n      console.log(`Respuesta al eliminar animal con ID ${id}:`, response);\n      \n      return response;\n    } catch (error: any) {\n      console.error(`Error al eliminar animal con ID ${id}:`, error);\n      \n      // Si es un error de red o cualquier otro error, usar datos simulados como fallback\n      if (error.code === 'DB_COLUMN_ERROR' || error.code === 'NETWORK_ERROR' || \n          (error.message && (error.message.includes('estado_t') || error.message.includes('conexión')))) {\n        console.warn('Usando datos simulados para eliminar animal debido a error en el backend');\n        \n        // Marcar como DEF en el frontend (el backend realmente no lo borra)\n        return this.updateAnimal(id, { estado: 'DEF' });\n      }\n      \n      // Si no es un error manejable, propagar el error\n      throw error;\n    }\n  },\n  \n  // Obtiene los posibles padres (machos) para selección en formularios\n  async getPotentialFathers(explotacioId?: number | string): Promise<Animal[]> {\n    try {\n      console.log(`Obteniendo posibles padres${explotacioId ? ` para explotación ${explotacioId}` : ''}`);\n      \n      // Usar el endpoint general de animales con filtros\n      const filters: AnimalFilters = {\n        genere: 'M',\n        estado: 'OK'\n      };\n      \n      // Añadir filtro de explotación si se proporciona\n      if (explotacioId && explotacioId !== 'undefined') {\n        filters.explotacio = String(explotacioId);\n      }\n      \n      // Obtener animales filtrados\n      const response = await this.getAnimals(filters);\n      \n      // Extraer los items si es una respuesta paginada\n      const fathers = Array.isArray(response) ? response : (response.items || []);\n      console.log('Posibles padres recibidos:', fathers);\n      return fathers;\n    } catch (error: any) {\n      console.error(`Error al obtener posibles padres${explotacioId ? ` para explotación ${explotacioId}` : ''}:`, error);\n      \n      // Si es un error de red o cualquier otro error, usar datos simulados como fallback\n      console.warn('Usando datos simulados para posibles padres debido a error en el backend');\n      \n      // Filtrar animales simulados (machos activos)\n      const filteredFathers = mockAnimals.filter(a => \n        a.genere === 'M' && \n        a.estado === 'OK' && \n        (!explotacioId || explotacioId === 'undefined' || a.explotacio === String(explotacioId)));\n      \n      return filteredFathers;\n    }\n  },\n  \n  // Obtiene las posibles madres (hembras) para selección en formularios\n  async getPotentialMothers(explotacioId?: number | string): Promise<Animal[]> {\n    try {\n      console.log(`Obteniendo posibles madres${explotacioId ? ` para explotación ${explotacioId}` : ''}`);\n      \n      // Usar el endpoint general de animales con filtros\n      const filters: AnimalFilters = {\n        genere: 'F',\n        estado: 'OK'\n      };\n      \n      // Añadir filtro de explotación si se proporciona\n      if (explotacioId && explotacioId !== 'undefined') {\n        filters.explotacio = String(explotacioId);\n      }\n      \n      // Obtener animales filtrados\n      const response = await this.getAnimals(filters);\n      \n      // Extraer los items si es una respuesta paginada\n      const mothers = Array.isArray(response) ? response : (response.items || []);\n      console.log('Posibles madres recibidas:', mothers);\n      return mothers;\n    } catch (error: any) {\n      console.error(`Error al obtener posibles madres${explotacioId ? ` para explotación ${explotacioId}` : ''}:`, error);\n      \n      // Si es un error de red o cualquier otro error, usar datos simulados como fallback\n      console.warn('Usando datos simulados para posibles madres debido a error en el backend');\n      \n      // Filtrar animales simulados (hembras activas)\n      const filteredMothers = mockAnimals.filter(a => \n        a.genere === 'F' && \n        a.estado === 'OK' && \n        (!explotacioId || explotacioId === 'undefined' || a.explotacio === String(explotacioId)));\n      \n      return filteredMothers;\n    }\n  },\n  \n  // Obtiene todos los animales de una explotación\n  async getAnimalsByExplotacion(explotacionId: number | string): Promise<Animal[]> {\n    try {\n      // Intentar obtener datos reales de la API\n      try {\n        console.log(`🐄 [Animal] Solicitando animales para explotación ${explotacionId}`);\n        \n        // Probar con diferentes formatos de endpoint para mayor compatibilidad\n        const endpoints = [\n          `/animals?explotacio=${encodeURIComponent(explotacionId)}&limit=100`\n        ];\n        \n        let response = null;\n        let successEndpoint = '';\n        \n        // Intentar cada endpoint hasta que uno funcione\n        for (const endpoint of endpoints) {\n          try {\n            console.log(`🐄 [Animal] Intentando endpoint: ${endpoint}`);\n            response = await apiService.get(endpoint);\n            successEndpoint = endpoint;\n            console.log(`🐄 [Animal] Respuesta recibida de ${endpoint}:`, response);\n            break; // Si llegamos aquí, la petición fue exitosa\n          } catch (endpointError) {\n            console.warn(`🐄 [Animal] Error con endpoint ${endpoint}:`, endpointError);\n            // Continuar con el siguiente endpoint\n          }\n        }\n        \n        if (!response) {\n          throw new Error('Todos los endpoints fallaron');\n        }\n        \n        console.log(`🐄 [Animal] Endpoint exitoso: ${successEndpoint}`);\n        \n        // Si es un array, devolverlo directamente\n        if (Array.isArray(response)) {\n          console.log(`🐄 [Animal] Devolviendo array de ${response.length} animales`);\n          return response;\n        }\n        \n        // Si no es un array, verificar si es un objeto con propiedad 'items' (formato paginado)\n        if (response && typeof response === 'object' && 'items' in response) {\n          console.log(`🐄 [Animal] Devolviendo ${response.items.length} animales desde respuesta paginada`);\n          return response.items as Animal[];\n        }\n        \n        // Si es un objeto con propiedad 'data' (otro formato común)\n        if (response && typeof response === 'object' && 'data' in response) {\n          if (Array.isArray(response.data)) {\n            console.log(`🐄 [Animal] Devolviendo ${response.data.length} animales desde response.data`);\n            return response.data as Animal[];\n          }\n        }\n        \n        // Si no encontramos animales, devolver array vacío\n        console.warn(`🐄 [Animal] No se pudo interpretar la respuesta:`, response);\n        return [];\n      } catch (innerError) {\n        console.error(`🐄 [Animal] Error al obtener animales para explotación ${explotacionId}:`, innerError);\n        throw innerError;\n      }\n    } catch (error: any) {\n      console.error(`🐄 [Animal] Error en petición para obtener animales de explotación ${explotacionId}:`, error);\n      \n      // Si es un error de red o cualquier otro error, usar datos simulados como fallback\n      console.warn(`🐄 [Animal] Usando datos simulados para animales de explotación ${explotacionId}`);\n      \n      // Filtrar animales simulados por explotación\n      const mockAnimalsFiltered = mockAnimals.filter(a => a.explotacio === String(explotacionId));\n      console.log(`🐄 [Animal] Devolviendo ${mockAnimalsFiltered.length} animales simulados para explotación ${explotacionId}`);\n      return mockAnimalsFiltered;\n    }\n  },\n  \n  // Utilidades para iconos y visualización\n  getAnimalIcon(animal: Animal): string {\n    if (animal.genere === 'M') {\n      return '🐂'; // Toro\n    } else {\n      if (animal.alletar !== '0') {\n        return '🐄'; // Vaca amamantando\n      } else {\n        return '🐮'; // Vaca\n      }\n    }\n  },\n  \n  getAnimalStatusClass(estado: string): string {\n    if (estado === 'OK') {\n      return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\n    } else if (estado === 'DEF') {\n      return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';\n    }\n    return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';\n  },\n  \n  // Obtiene texto para alletar\n  getAlletarText(alletar: string): string {\n    if (alletar === '0') return 'No amamantando';\n    if (alletar === '1') return 'Amamantando 1 ternero';\n    if (alletar === '2') return 'Amamantando 2 terneros';\n    return 'Desconocido';\n  },\n  \n  // Método simplificado para obtener valores únicos de explotaciones\n  async getExplotacions(): Promise<{id: number, explotacio: string}[]> {\n    try {\n      console.log('Obteniendo lista de explotaciones');\n      \n      // Intentar primero obtener directamente del endpoint de dashboard/explotacions\n      try {\n        // Usar el endpoint correcto de dashboard para explotaciones\n        const responseData = await apiService.get('/dashboard/explotacions');\n        \n        // Procesamos la respuesta para devolver el formato esperado\n        if (responseData && responseData.status === 'success' && responseData.data && Array.isArray(responseData.data.items)) {\n          const items = responseData.data.items;\n          return items.map((item: any, index: number) => ({\n            id: index + 1, // Usamos un ID secuencial ya que no hay un ID real en la respuesta\n            explotacio: item.explotacio || \"\"\n          }));\n        }\n      } catch (explotacioError) {\n        console.warn('No se pudo obtener explotaciones del dashboard, intentando alternativa', explotacioError);\n        // Continuar con el método alternativo\n      }\n      \n      // Método alternativo: extraer de los animales existentes\n      const response = await this.getAnimals({ page: 1, limit: 100 });\n      \n      // Extraer valores únicos de explotaciones\n      const uniqueExplotacions = new Set<string>();\n      \n      if (response && response.items) {\n        response.items.forEach((animal: Animal) => {\n          if (animal.explotacio) {\n            uniqueExplotacions.add(animal.explotacio);\n          }\n        });\n      }\n      \n      // Si no hay datos, usar valores predefinidos\n      if (uniqueExplotacions.size === 0) {\n        return [\n          { id: 1, explotacio: 'Madrid' },\n          { id: 2, explotacio: 'Barcelona' },\n          { id: 3, explotacio: 'Valencia' },\n          { id: 4, explotacio: 'Guadalajara' }\n        ];\n      }\n      \n      // Convertir a array de objetos con id y explotacio\n      return Array.from(uniqueExplotacions).map((explotacio, index) => ({\n        id: index + 1,\n        explotacio\n      }));\n    } catch (error: any) {\n      console.error('Error al obtener explotaciones:', error);\n      console.log('Usando datos simulados');\n      return mockExplotacions;\n    }\n  }\n};\n\nexport default animalService;\n"],"names":["offset","limit"],"mappings":"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"}