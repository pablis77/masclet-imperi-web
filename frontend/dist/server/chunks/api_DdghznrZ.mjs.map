{"version":3,"file":"api_DdghznrZ.mjs","sources":["../../../src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport type { AxiosError, AxiosRequestConfig, AxiosResponse, AxiosInstance } from 'axios';\n\n// Importar configuraci√≥n centralizada desde el adaptador\nimport {\n  API_BASE_URL as CENTRAL_API_URL,\n  API_TIMEOUT,\n  API_DEFAULT_HEADERS,\n  environment as centralEnvironment,\n  isProduction,\n  isLocal,\n  normalizePath as apiNormalizePath,\n  TOKEN_NAME\n} from './apiConfigAdapter';\n\n// Extender la interfaz AxiosInstance para incluir nuestros m√©todos personalizados\ndeclare module 'axios' {\n  interface AxiosInstance {\n    fetchData: (endpoint: string, params?: Record<string, any>) => Promise<any>;\n    postData: (endpoint: string, data?: Record<string, any>, method?: string) => Promise<any>;\n    putData: (endpoint: string, data?: Record<string, any>) => Promise<any>;\n    deleteData: (endpoint: string, data?: Record<string, any>) => Promise<any>;\n    handleApiError: (error: any, setError: (message: string) => void, defaultMessage?: string) => void;\n    patchData: (endpoint: string, data?: Record<string, any>) => Promise<any>;\n  }\n}\n\n// Tipos para el entorno de ejecuci√≥n\ntype Environment = 'server' | 'local' | 'production';\n\n// Usar el entorno detectado por el adaptador centralizado\nconst environment = centralEnvironment as Environment;\n\n// Configuraci√≥n base seg√∫n el entorno\nlet baseURL: string = CENTRAL_API_URL;\nlet useRelativeUrls = isProduction;\n\n// Ya no usamos LocalTunnel ni otros servicios de t√∫neles\n\n// URL base para el proxy local (usado en desarrollo)\nconst API_BASE_URL_LOCAL = baseURL;\n\n// Imprimir informaci√≥n importante de depuraci√≥n\nconsole.log('üåé Modo de conexi√≥n:', environment);\nconsole.log('üîå API Base URL:', baseURL);\nconsole.log('üîó URLs Relativas:', useRelativeUrls ? 'S√ç' : 'NO');\n\n// Funci√≥n para normalizar rutas (usando el adaptador centralizado)\nfunction normalizePath(path: string): string {\n    return apiNormalizePath(path);\n}\n\n// Logs para depuraci√≥n\nconsole.log('üåé [api.ts] Modo de conexi√≥n:', environment);\nconsole.log('üîå [api.ts] API Base URL:', baseURL || 'URL relativa');\n\n// Configuraci√≥n de Axios personalizada para integrarse mejor con el backend\nconst api = axios.create({\n    baseURL,\n    timeout: API_TIMEOUT,\n    headers: API_DEFAULT_HEADERS,\n    validateStatus: function (status) {\n        return status >= 200 && status < 500; // Tratamos respuestas 4xx como v√°lidas para manejarlas\n    }\n});\n\n// Interceptor para agregar el token JWT a las solicitudes\napi.interceptors.request.use(config => {\n    const token = localStorage.getItem(TOKEN_NAME);\n    if (token && config.headers) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n        } else {\n            console.warn('‚ö†Ô∏è No se encontr√≥ token JWT para autenticar la petici√≥n');\n            \n            // A√±adir informaci√≥n de depuraci√≥n\n            console.log('URL de la petici√≥n:', config.url);\n            console.log('M√©todo:', config.method);\n            console.log('Headers actuales:', config.headers);\n            \n            // En modo desarrollo, mostrar contenido de localStorage\n            if (typeof window !== 'undefined') {\n                console.log('Contenido de localStorage:');\n                for (let i = 0; i < localStorage.length; i++) {\n                    const key = localStorage.key(i);\n                    if (key) {\n                        const value = localStorage.getItem(key);\n                        console.log(`- ${key}: ${value ? value.substring(0, 20) + '...' : 'null'}`);  \n                    }\n                }\n            }\n        }\n        \n        return config;\n    },\n    (error: AxiosError) => {\n        console.error('Error en interceptor de peticiones:', error);\n        return Promise.reject(error);\n    }\n);\n\n// Interceptor para manejar respuestas y errores\napi.interceptors.response.use(\n    (response: AxiosResponse) => {\n        // Primero, loguear informaci√≥n detallada sobre la respuesta\n        console.log('Respuesta del servidor recibida:', {\n            url: response.config.url,\n            status: response.status,\n            statusText: response.statusText,\n            headers: response.headers,\n            contentType: response.headers['content-type']\n        });\n        \n        // Inspeccionar el cuerpo de la respuesta en detalle\n        console.log('Cuerpo completo de la respuesta:', response);\n        console.log('Datos de la respuesta (data):', response.data);\n        console.log('Tipo de data:', typeof response.data);\n        \n        // Si la respuesta es un string JSON, intentar parsearlo\n        if (typeof response.data === 'string' && response.data.trim().startsWith('{')) {\n            try {\n                console.log('Intentando parsear respuesta como JSON...');\n                const parsedData = JSON.parse(response.data);\n                console.log('Datos parseados:', parsedData);\n                return parsedData;\n            } catch (e) {\n                console.warn('Error al parsear respuesta como JSON:', e);\n            }\n        }\n        \n        // Manejar caso de respuesta indefinida (probablemente un error en la comunicaci√≥n)\n        if (response.data === undefined) {\n            console.warn('Respuesta con data undefined, verificando respuesta bruta...');\n            \n            // Si hay un c√≥digo de estado 200, pero data es undefined, extraer de otra parte\n            if (response.status === 200) {\n                // Intentar diferentes propiedades donde podr√≠an estar los datos\n                if (response.request && response.request.response) {\n                    try {\n                        console.log('Intentando extraer datos de request.response...');\n                        const rawData = response.request.response;\n                        if (typeof rawData === 'string') {\n                            const parsedData = JSON.parse(rawData);\n                            console.log('Datos extra√≠dos de request.response:', parsedData);\n                            return parsedData;\n                        }\n                    } catch (e) {\n                        console.warn('Error al procesar request.response:', e);\n                    }\n                }\n                \n                // Si llegamos aqu√≠ y no hay datos, devolver un objeto vac√≠o en lugar de undefined\n                console.warn('No se pudieron extraer datos de la respuesta, devolviendo objeto vac√≠o');\n                return {};\n            }\n        }\n        \n        // Si la API devuelve datos en la propiedad 'data', lo extraemos\n        if (response.data && typeof response.data === 'object' && response.data.hasOwnProperty('data')) {\n            console.log('Extrayendo datos de response.data.data');\n            return response.data.data;\n        }\n\n        // En cualquier otro caso, devolver los datos como vienen\n        return response.data || {}; // Evitar devolver undefined\n    },\n    (error: AxiosError) => {\n        // Manejar errores espec√≠ficos por c√≥digo\n        if (error.response) {\n            // Error de autenticaci√≥n\n            if (error.response.status === 401) {\n                // Limpiar token y redirigir a login\n                localStorage.removeItem('token');\n                window.location.href = '/login';\n            }\n\n            // Formatear respuestas de error para uso en UI\n            const errorData = error.response.data as any;\n            const errorMsg = errorData.detail || errorData.message || 'Error desconocido';\n\n            return Promise.reject({\n                message: errorMsg,\n                status: error.response.status,\n                code: errorData.code || 'ERROR'\n            });\n        }\n\n        // Error de red\n        if (error.request) {\n            return Promise.reject({\n                message: 'No se pudo conectar con el servidor. Por favor, verifique su conexi√≥n.',\n                status: 0,\n                code: 'NETWORK_ERROR'\n            });\n        }\n\n        // Error general\n        return Promise.reject({\n            message: error.message || 'Ocurri√≥ un error al procesar la solicitud',\n            status: 500,\n            code: 'UNKNOWN_ERROR'\n        });\n    }\n);\n\n/**\n * Realiza una petici√≥n GET a la API\n * @param endpoint Endpoint de la API\n * @param params Par√°metros de la petici√≥n\n * @returns Promesa con la respuesta\n */\nexport async function fetchData(endpoint: string, params: Record<string, any> = {}): Promise<any> {\n  try {\n    // Construir la URL con los par√°metros\n    const queryParams = new URLSearchParams();\n    \n    // A√±adir par√°metros adicionales a la URL\n    Object.entries(params).forEach(([key, value]) => {\n      if (value !== undefined && value !== null) {\n        queryParams.append(key, String(value));\n      }\n    });\n    \n    // Construir la URL seg√∫n el entorno\n    let url;\n    // En local, usamos el proxy\n    queryParams.append('endpoint', endpoint);\n    url = `${API_BASE_URL_LOCAL}/proxy?${queryParams.toString()}`;\n    \n    console.log(`üîç Fetching data:`, url);\n\n    const token = localStorage.getItem('token');\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n    };\n    \n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    const response = await fetch(url, {\n      headers\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({ message: response.statusText }));\n      console.error(`‚ùå Error ${response.status} en GET ${endpoint}:`, errorData);\n      throw new Error(errorData.message || `Error ${response.status}: ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    console.log(`‚úÖ Respuesta GET ${endpoint}:`, data);\n    return data;\n  } catch (error: any) {\n    console.error(`‚ùå Error en fetchData (${endpoint}):`, error);\n    throw {\n      message: error.message || 'No se pudo conectar con el servidor. Por favor, verifica tu conexi√≥n.',\n      status: error.status || 0,\n      code: error.code || 'NETWORK_ERROR'\n    };\n  }\n}\n\n/**\n * Realiza una petici√≥n POST a la API\n * @param endpoint Endpoint de la API\n * @param data Datos a enviar\n * @param method M√©todo HTTP (POST, PUT, DELETE)\n * @returns Promesa con la respuesta\n */\nexport async function postData(endpoint: string, data: Record<string, any> = {}, method: string = 'POST'): Promise<any> {\n  try {\n    const token = localStorage.getItem('token');\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n    };\n    \n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    \n    let url;\n    let requestBody;\n    \n    // En local, usamos el proxy\n    url = `${API_BASE_URL_LOCAL}/proxy`;\n    requestBody = JSON.stringify({\n      endpoint,\n      data,\n      method\n    });\n    \n    console.log(`üì§ ${method}:`, url, data);\n    \n    const response = await fetch(url, {\n      method: 'POST',\n      headers,\n      body: requestBody\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({ message: response.statusText }));\n      console.error(`‚ùå Error ${response.status} en ${method} ${endpoint}:`, errorData);\n      throw new Error(errorData.message || errorData.detail || `Error ${response.status}: ${response.statusText}`);\n    }\n    \n    const responseData = await response.json();\n    console.log(`‚úÖ Respuesta ${method} ${endpoint}:`, responseData);\n    return responseData;\n  } catch (error: any) {\n    console.error(`‚ùå Error en ${method} (${endpoint}):`, error);\n    throw {\n      message: error.message || 'No se pudo conectar con el servidor. Por favor, verifica tu conexi√≥n.',\n      status: error.status || 0,\n      code: error.code || 'NETWORK_ERROR'\n    };\n  }\n}\n\n/**\n * Realiza una petici√≥n PATCH a la API\n * @param endpoint Endpoint de la API\n * @param data Datos a enviar\n * @returns Promesa con la respuesta\n */\nexport async function patchData(endpoint: string, data: Record<string, any> = {}): Promise<any> {\n  try {\n    const token = localStorage.getItem('token');\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n    };\n    \n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    \n    let url;\n    let requestBody = JSON.stringify(data);\n    \n    // En local, usamos el proxy\n    url = `${API_BASE_URL_LOCAL}${endpoint}`;\n    \n    console.log(`üîß PATCH:`, url, data);\n    \n    const response = await fetch(url, {\n      method: 'PATCH',\n      headers,\n      body: requestBody\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({ message: response.statusText }));\n      console.error(`‚ùå Error ${response.status} en PATCH ${endpoint}:`, errorData);\n      throw new Error(errorData.message || errorData.detail || `Error ${response.status}: ${response.statusText}`);\n    }\n    \n    const responseData = await response.json();\n    console.log(`‚úÖ Respuesta PATCH ${endpoint}:`, responseData);\n    return responseData;\n  } catch (error: any) {\n    console.error(`Error en patchData (${endpoint}):`, error);\n    throw {\n      message: error.message || 'No se pudo conectar con el servidor. Por favor, verifique su conexi√≥n.',\n      status: error.status || 0,\n      code: error.code || 'NETWORK_ERROR'\n    };\n  }\n}\n\n/**\n * Realiza una petici√≥n PUT a la API a trav√©s del proxy local\n * @param endpoint Endpoint de la API\n * @param data Datos a enviar\n * @returns Promesa con la respuesta\n */\nexport async function putData(endpoint: string, data: Record<string, any> = {}): Promise<any> {\n  return postData(endpoint, data, 'PUT');\n}\n\n/**\n * Realiza una petici√≥n DELETE a la API a trav√©s del proxy local\n * @param endpoint Endpoint de la API\n * @param data Datos a enviar\n * @returns Promesa con la respuesta\n */\nexport async function deleteData(endpoint: string, data: Record<string, any> = {}): Promise<any> {\n  return postData(endpoint, data, 'DELETE');\n}\n\n/**\n * Maneja los errores de la API de forma consistente\n * @param error Error capturado\n * @param setError Funci√≥n para establecer el error en el estado\n * @param defaultMessage Mensaje por defecto\n */\nexport function handleApiError(error: any, setError: (message: string) => void, defaultMessage: string = 'Ha ocurrido un error. Por favor, int√©ntelo de nuevo.'): void {\n  console.error('API Error:', error);\n  \n  if (error.code === 'NETWORK_ERROR') {\n    setError('No se pudo conectar con el servidor. Por favor, verifique su conexi√≥n.');\n  } else if (error.message) {\n    setError(error.message);\n  } else {\n    // Error general\n    setError(error.message || defaultMessage);\n  }\n}\n\n// Agregar los m√©todos al objeto api para mantener compatibilidad\napi.fetchData = fetchData;\napi.postData = postData;\napi.putData = putData;\napi.deleteData = deleteData;\napi.handleApiError = handleApiError;\napi.patchData = patchData;\n\nexport default api;"],"names":["centralEnvironment","CENTRAL_API_URL"],"mappings":"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"}