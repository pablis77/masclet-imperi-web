{"version":3,"file":"backup.astro.mjs","sources":["../../../src/components/permissions/PermissionsManager.astro","../../../src/pages/backup/index.astro"],"sourcesContent":["---\n// Este componente gestiona los permisos de UI basados en el rol del usuario\n// Se ejecuta en todas las páginas que lo incluyen y bloquea el acceso a páginas restringidas para roles no autorizados\n\n// Obtener la ruta actual\nconst currentPath = Astro.url.pathname;\n\n// Verificar si es una ruta restringida (que solo debe ser accesible por administradores)\nconst isRestrictedPath = [\n  '/imports',\n  '/backup',\n  '/users'\n].some(path => currentPath.startsWith(path));\n---\n\n<!-- Bloqueo de acceso para páginas restringidas -->\n{isRestrictedPath && (\n  <script is:inline>\n    // Este script se ejecuta inmediatamente al cargar la página, antes de mostrar el contenido\n    (function() {\n      try {\n        // Obtener el token del localStorage\n        const token = localStorage.getItem('token');\n        if (token) {\n          // Decodificar el payload del JWT\n          const payload = JSON.parse(atob(token.split('.')[1]));\n          const userRole = payload.role || 'guest';\n          \n          // Si el usuario es editor o user, redirigir a la página principal\n          if (userRole.toLowerCase() === 'editor' || userRole.toLowerCase() === 'user') {\n            console.log('Acceso denegado para rol:', userRole);\n            window.location.href = '/';\n          }\n        } else {\n          // Si no hay token, redirigir a login\n          window.location.href = '/login';\n        }\n      } catch (e) {\n        console.error('Error al verificar permisos:', e);\n        window.location.href = '/';\n      }\n    })();\n  </script>\n)}\n\n<!-- Estilos para bloqueo de botones -->\n<link rel=\"stylesheet\" href=\"/styles/block-buttons.css\">\n\n<!-- Scripts para restricciones de UI basados en rol -->\n<script src=\"/scripts/block-delete-button.js\" is:inline></script>\n<!-- Script desactivado temporalmente para evitar conflictos -->\n<!-- <script src=\"/scripts/block-new-animal-button.js\" is:inline></script> -->\n\n<!-- Script para inicialización inmediata -->\n<script is:inline>\n/**\n * Inicialización del sistema de permisos\n */\n\n// Función principal para gestionar permisos en la UI\nfunction setupPermissionsUI() {\n  console.log(\"Inicializando gestión de permisos en UI...\");\n  \n  // 1. Verificar el rol del usuario desde localStorage\n  const token = localStorage.getItem('token');\n  if (!token) return;\n  \n  try {\n    // Obtener el rol del usuario\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    const userRole = payload.role;\n    \n    console.log(`Rol detectado: ${userRole}`);\n    \n    // 2. Aplicar restricciones específicas según la página actual\n    const currentPath = window.location.pathname;\n    \n    // Página de importaciones\n    if (currentPath.includes('/imports') && userRole === 'Ramon') {\n      handleImportPageRestrictions();\n    }\n    \n    // Página de backup/restore\n    if (currentPath.includes('/backup') && userRole === 'Ramon') {\n      handleBackupPageRestrictions();\n    }\n    \n  } catch (e) {\n    console.error('Error al procesar permisos de UI:', e);\n  }\n}\n\n// Gestionar restricciones en la página de importaciones\nfunction handleImportPageRestrictions() {\n  // Evitar ejecutar múltiples veces\n  if (window.ramonImportRestrictionApplied) return;\n  window.ramonImportRestrictionApplied = true;\n  \n  console.log(\"Aplicando restricciones a la página de importaciones para Ramon...\");\n  \n  // Eliminar todos los mensajes de advertencia existentes para evitar duplicados\n  document.querySelectorAll('.bg-yellow-50.border-l-4.border-yellow-400.p-4.mb-4').forEach(el => {\n    el.remove();\n  });\n  \n  // Ocultar botones de importación excepto los de descarga\n  document.querySelectorAll('.import-btn:not(.download-btn)').forEach(btn => {\n    btn.style.display = 'none';\n  });\n  \n  // También podemos ocultar el formulario de carga si existe\n  const uploadForm = document.querySelector('#import-form');\n  if (uploadForm) {\n    uploadForm.style.display = 'none';\n  }\n  \n  // Añadir un único mensaje informativo\n  const container = document.querySelector('.import-container');\n  if (container) {\n    const infoMsg = document.createElement('div');\n    infoMsg.id = 'mensaje-restriccion-ramon';\n    infoMsg.className = 'bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-4';\n    infoMsg.innerHTML = `\n      <div class=\"flex\">\n        <div class=\"flex-shrink-0\">\n          <svg class=\"h-5 w-5 text-yellow-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n            <path fill-rule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\n          </svg>\n        </div>\n        <div class=\"ml-3\">\n          <p class=\"text-sm text-yellow-700\">\n            Esta función de importación solo está disponible para administradores. Puedes ver el historial de importaciones pero no iniciar nuevas.\n          </p>\n        </div>\n      </div>\n    `;\n    \n    // Insertar al principio del contenedor\n    const titleElement = container.querySelector('h2');\n    if (titleElement) {\n      container.insertBefore(infoMsg, titleElement.nextSibling);\n    } else {\n      container.prepend(infoMsg);\n    }\n  }\n}\n\n// Gestionar restricciones en la página de backup/restore\nfunction handleBackupPageRestrictions() {\n  // Evitar ejecutar múltiples veces\n  if (window.ramonBackupRestrictionApplied) return;\n  window.ramonBackupRestrictionApplied = true;\n  \n  console.log(\"Aplicando restricciones a la página de backup para Ramon...\");\n  \n  // Función para deshabilitar completamente un elemento\n  function deshabilitarElemento(elemento, mensaje) {\n    // 1. Modificar atributos\n    elemento.disabled = true;\n    elemento.setAttribute('disabled', 'true');\n    \n    // 2. Modificar estilos\n    elemento.style.opacity = '0.5';\n    elemento.style.cursor = 'not-allowed';\n    elemento.style.pointerEvents = 'none';\n    elemento.title = mensaje || 'Solo disponible para administradores';\n    \n    // 3. Añadir clases visuales\n    elemento.classList.add('opacity-50', 'cursor-not-allowed');\n    elemento.classList.remove('hover:bg-gray-300', 'dark:hover:bg-gray-600');\n    \n    // 4. Evitar eventos de clic\n    elemento.addEventListener('click', function(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      return false;\n    }, true);\n    \n    // 5. Añadir texto de candado si no existe\n    if (!elemento.querySelector('.lock-icon')) {\n      const lockIcon = document.createElement('span');\n      lockIcon.textContent = ' \\ud83d\\udd12';\n      lockIcon.className = 'lock-icon ml-2';\n      elemento.appendChild(lockIcon);\n    }\n  }\n  \n  // 1. Deshabilitar botón de selección de backup específicamente\n  const selectBackupBtn = document.getElementById('select-backup-btn');\n  if (selectBackupBtn) {\n    deshabilitarElemento(selectBackupBtn, 'No tienes permisos para restaurar copias de seguridad');\n    console.log('Botón de selección de backup deshabilitado correctamente');\n  } else {\n    console.log('Botón de selección de backup no encontrado, buscando con retraso...');\n    // Intentar encontrarlo con retraso (a veces se carga dinámicamente)\n    setTimeout(() => {\n      const btnDelayed = document.getElementById('select-backup-btn');\n      if (btnDelayed) {\n        deshabilitarElemento(btnDelayed, 'No tienes permisos para restaurar copias de seguridad');\n        console.log('Botón de selección de backup encontrado y deshabilitado con retraso');\n      }\n    }, 500);\n  }\n\n  // 2. Deshabilitar todos los elementos con data-requires-admin=\"true\"\n  document.querySelectorAll('[data-requires-admin=\"true\"]').forEach(element => {\n    deshabilitarElemento(element);\n  });\n\n  // 3. Deshabilitar botones de restauración y eliminación en la tabla\n  document.querySelectorAll('.restore-btn, .delete-btn').forEach(btn => {\n    deshabilitarElemento(btn);\n  });\n  \n  // 4. Añadir mensaje informativo en la sección de restauración\n  const restoreSection = document.getElementById('restore-section');\n  if (restoreSection) {\n    const container = restoreSection.closest('.bg-white');\n    if (container && !container.querySelector('.bg-yellow-50')) {\n      const infoMsg = document.createElement('div');\n      infoMsg.id = 'mensaje-restauracion-ramon';\n      infoMsg.className = 'bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-4';\n      infoMsg.innerHTML = `\n        <div class=\"flex\">\n          <div class=\"flex-shrink-0\">\n            <svg class=\"h-5 w-5 text-yellow-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fill-rule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\n            </svg>\n          </div>\n          <div class=\"ml-3\">\n            <p class=\"text-sm text-yellow-700\">\n              Esta función de restauración solo está disponible para administradores.\n            </p>\n          </div>\n        </div>\n      `;\n      const titleElement = container.querySelector('h2');\n      if (titleElement) {\n        container.insertBefore(infoMsg, titleElement.nextSibling);\n      } else {\n        container.prepend(infoMsg);\n      }\n    }\n  }\n  \n  // 5. Observar cambios en el DOM para seguir aplicando restricciones a elementos nuevos\n  const observer = new MutationObserver(() => {\n    // Volver a buscar botones que necesiten ser deshabilitados\n    const newBtn = document.getElementById('select-backup-btn');\n    if (newBtn && !newBtn.disabled) {\n      deshabilitarElemento(newBtn, 'No tienes permisos para restaurar copias de seguridad');\n    }\n    \n    // Revisar nuevos elementos con data-requires-admin\n    document.querySelectorAll('[data-requires-admin=\"true\"]:not([disabled])').forEach(element => {\n      deshabilitarElemento(element);\n    });\n  });\n  \n  // Observar todo el documento para detectar nuevos elementos\n  observer.observe(document.documentElement, { \n    childList: true, \n    subtree: true \n  });\n}\n\n// Inicializar cuando el DOM esté cargado\ndocument.addEventListener('DOMContentLoaded', setupPermissionsUI);\n\n// También ejecutar cuando se navegue mediante SPA (si aplica)\ndocument.addEventListener('astro:page-load', setupPermissionsUI);\n</script>\n","---\n// Importar el layout y sistema de traducción\nimport MainLayout from '../../components/layout/MainLayout.astro';\nimport PermissionsManager from '../../components/permissions/PermissionsManager.astro';\nimport { t, getCurrentLanguage } from '../../i18n/config';\n\n// Obtener el idioma del usuario usando el sistema global de i18n\nconst currentLang = getCurrentLanguage();\n\n// Detectar el rol del usuario desde el token (ejecución en servidor)\nlet userRole = 'guest';\nconst token = Astro.cookies.get('token')?.value;\nif (token) {\n  try {\n    const tokenParts = token.split('.');\n    if (tokenParts.length > 1) {\n      const payload = JSON.parse(atob(tokenParts[1]));\n      userRole = payload.role || 'guest';\n    }\n  } catch (e) {\n    console.error('Error al decodificar token:', e);\n  }\n}\n\n// Verificar acceso - Solo admin y Ramon pueden acceder a esta página\nconst isEditor = userRole.toLowerCase() === 'editor';\nconst hasAccess = !isEditor;\n\n// Definir título para la página\nconst title = t('backup.title', currentLang);\n\n---\n\n<MainLayout title={title} userRole={userRole} currentPath=\"/backup\">\n  <!-- Bloqueo total para usuarios no autorizados -->\n  <script is:inline>\n    (function() {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          const payload = JSON.parse(atob(token.split('.')[1]));\n          const userRole = payload.role || 'guest';\n          if (userRole.toLowerCase() !== 'administrador' && userRole.toLowerCase() !== 'ramon') {\n            console.log('ACCESO DENEGADO: Redirigiendo...');\n            window.location.href = '/';\n          }\n        } else {\n          window.location.href = '/login';\n        }\n      } catch (e) {\n        console.error('Error:', e);\n        window.location.href = '/';\n      }\n    })();\n  </script>\n  \n  <PermissionsManager />\n  \n  <!-- Script para actualizar textos estáticos cuando carga la página -->\n  <script>\n    // Esperar a que el sistema de i18n esté listo\n    document.addEventListener('DOMContentLoaded', () => {\n      try {\n        // Importar el sistema de traducción\n        import('../../i18n/config.js').then(({ t, getCurrentLanguage }) => {\n          const clientLang = getCurrentLanguage();\n          console.log('Idioma detectado en cliente:', clientLang);\n          \n          // Actualizar elementos estáticos con ID\n          const updateElement = (id, key) => {\n            const element = document.getElementById(id);\n            if (element) {\n              element.textContent = t(key, clientLang);\n            }\n          };\n          \n          // Actualizar elementos principales\n          updateElement('page-title', 'backup.title');\n          updateElement('page-subtitle', 'backup.subtitle');\n          \n          // También actualizar otros elementos estáticos que necesiten traducción\n          document.querySelectorAll('[data-i18n-key]').forEach(el => {\n            const key = el.getAttribute('data-i18n-key');\n            if (key) {\n              el.textContent = t(key, clientLang);\n            }\n          });\n          \n          // Actualizar título principal de la página\n          document.title = t('backup.title', clientLang) + ' - Masclet Imperi';\n          \n          // Actualizar los encabezados de la tabla\n          const tableHeaders = document.querySelectorAll('th');\n          if (tableHeaders && tableHeaders.length > 0) {\n            // Traducir encabezados estándar de la tabla\n            const headerTranslations = {\n              'Fecha': clientLang === 'ca' ? 'Data' : 'Fecha',\n              'Tamaño': clientLang === 'ca' ? 'Mida' : 'Tamaño',\n              'Usuario': clientLang === 'ca' ? 'Usuari' : 'Usuario',\n              'Tipo': clientLang === 'ca' ? 'Tipus' : 'Tipo',\n              'Descripción': clientLang === 'ca' ? 'Descripció' : 'Descripción',\n              'Acciones': clientLang === 'ca' ? 'Accions' : 'Acciones',\n              'Historial de copias de seguridad': clientLang === 'ca' ? 'Historial de còpies de seguretat' : 'Historial de copias de seguridad'\n            };\n            \n            // Traducir encabezado de la tabla\n            const tableTitle = document.querySelector('.bg-gray-50.dark\\\\:bg-gray-700.text-lg');\n            if (tableTitle && tableTitle.textContent) {\n              const originalText = tableTitle.textContent.trim();\n              if (headerTranslations[originalText]) {\n                tableTitle.textContent = headerTranslations[originalText];\n              }\n            }\n            \n            // Traducir encabezados de columnas\n            tableHeaders.forEach(th => {\n              const originalText = th.textContent.trim();\n              if (headerTranslations[originalText]) {\n                th.textContent = headerTranslations[originalText];\n              }\n            });\n          }\n        });\n      } catch (error) {\n        console.error('Error al actualizar traducciones estáticas:', error);\n      }\n    });\n  </script>\n\n  <!-- Leyenda del sistema de backups -->\n  <div class=\"bg-blue-50 dark:bg-blue-900/30 border-l-4 border-blue-500 p-4 mb-6 rounded shadow-sm\">\n    <h2 data-i18n-key=\"backup.protocol\" class=\"text-lg font-semibold text-blue-800 dark:text-blue-300 mb-2\">{t('backup.protocol', currentLang)}</h2>\n    <div class=\"text-sm text-blue-700 dark:text-blue-200 space-y-2\">\n      <p><strong data-i18n-key=\"backup.automatic\">{t('backup.automatic', currentLang)}:</strong> <span data-i18n-key=\"backup.automaticDesc\">{t('backup.automaticDesc', currentLang)}</span></p>\n      <ul class=\"list-disc ml-5 space-y-1\">\n        <li data-i18n-key=\"backup.autoDaily\">{t('backup.autoDaily', currentLang)}</li>\n        <li data-i18n-key=\"backup.autoNewAnimals\">{t('backup.autoNewAnimals', currentLang)}</li>\n        <li data-i18n-key=\"backup.autoEditedAnimals\">{t('backup.autoEditedAnimals', currentLang)}</li>\n        <li data-i18n-key=\"backup.autoAfterImport\">{t('backup.autoAfterImport', currentLang)}</li>\n      </ul>\n      <p class=\"mt-2\"><strong data-i18n-key=\"backup.retentionPolicy\">{t('backup.retentionPolicy', currentLang)}:</strong> <span data-i18n-key=\"backup.retentionDesc\">{t('backup.retentionDesc', currentLang)}</span></p>\n      <ul class=\"list-disc ml-5 space-y-1\">\n        <li data-i18n-key=\"backup.retentionDaily\">{t('backup.retentionDaily', currentLang)}</li>\n        <li data-i18n-key=\"backup.retentionWeekly\">{t('backup.retentionWeekly', currentLang)}</li>\n      </ul>\n      <p class=\"mt-2\"><strong data-i18n-key=\"backup.storage\">{t('backup.storage', currentLang)}:</strong> <span data-i18n-key=\"backup.storageDesc\">{t('backup.storageDesc', currentLang)}</span></p>\n      <p class=\"mt-2\"><strong data-i18n-key=\"backup.manualBackups\">{t('backup.manualBackups', currentLang)}:</strong> <span data-i18n-key=\"backup.manualDesc\">{t('backup.manualDesc', currentLang)}</span></p>\n    </div>\n  </div>\n\n  <!-- Alerta para mostrar mensajes de operaciones -->\n  <div id=\"alert-container\" class=\"hidden mb-4\">\n    <div id=\"alert\" class=\"p-4 rounded-md text-center\">\n      <span id=\"alert-message\"></span>\n    </div>\n  </div>\n\n  <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n    <!-- Crear backup -->\n    <div class=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow border border-gray-100 dark:border-gray-700\">\n      <h2 data-i18n-key=\"backup.createBackup\" class=\"text-xl font-semibold mb-4 text-gray-800 dark:text-white\">{t('backup.createBackup', currentLang)}</h2>\n      <p data-i18n-key=\"backup.createDesc\" class=\"text-gray-600 dark:text-gray-300 mb-4\">{t('backup.createDesc', currentLang)}</p>\n      <div class=\"space-y-4\">\n        <div>\n          <label class=\"flex items-center space-x-2 text-gray-700 dark:text-gray-200\">\n            <input type=\"checkbox\" id=\"include-animals\" checked class=\"form-checkbox text-primary dark:border-gray-600\" />\n            <span data-i18n-key=\"backup.includeAnimals\">{t('backup.includeAnimals', currentLang)}</span>\n          </label>\n        </div>\n        <div>\n          <label class=\"flex items-center space-x-2 text-gray-700 dark:text-gray-200\">\n            <input type=\"checkbox\" id=\"include-births\" checked class=\"form-checkbox text-primary dark:border-gray-600\" />\n            <span data-i18n-key=\"backup.includeBirths\">{t('backup.includeBirths', currentLang)}</span>\n          </label>\n        </div>\n        <div>\n          <label class=\"flex items-center space-x-2 text-gray-700 dark:text-gray-200\">\n            <input type=\"checkbox\" id=\"include-config\" checked class=\"form-checkbox text-primary dark:border-gray-600\" />\n            <span data-i18n-key=\"backup.includeConfig\">{t('backup.includeConfig', currentLang)}</span>\n          </label>\n        </div>\n      </div>\n      <div class=\"mt-4\">\n        <button id=\"create-backup-btn\" class=\"w-full bg-primary text-white px-4 py-2 rounded-md hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-primary-light\">\n          <span data-i18n-key=\"backup.createButton\">{t('backup.createButton', currentLang)}</span>\n        </button>\n      </div>\n    </div>\n\n    <!-- Restaurar backup -->\n    <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6 border border-gray-100 dark:border-gray-700\">\n      <h2 data-i18n-key=\"backup.restoreBackup\" class=\"text-xl font-semibold mb-4 text-gray-800 dark:text-white\">{t('backup.restoreBackup', currentLang)}</h2>\n\n      {userRole !== \"administrador\" && (\n        <div class=\"bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-4\">\n          <div class=\"flex\">\n            <div class=\"flex-shrink-0\">\n              <svg class=\"h-5 w-5 text-yellow-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fill-rule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\"></path>\n              </svg>\n            </div>\n            <div class=\"ml-3\">\n              <p class=\"text-sm text-yellow-700\">\n                Esta función de restauración solo está disponible para administradores. Puedes ver y descargar los backups pero no restaurarlos.\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      <p class=\"text-gray-600 dark:text-gray-300 mb-4\">\n        <span data-i18n-key=\"backup.restoreDesc\">{t('backup.restoreDesc', currentLang)}</span>\n        <span data-i18n-key=\"backup.warning\" class=\"font-semibold text-amber-600 dark:text-amber-400\">{t('backup.warning', currentLang)}</span>\n      </p>\n      <div class=\"border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6 mb-4 text-center\" id=\"restore-section\">\n        <div id=\"selected-backup-container\" class=\"hidden\">\n          <p class=\"mb-2\" data-i18n-key=\"backup.selectFile\">{t('backup.selectFile', currentLang)}: <span id=\"selected-backup-name\" class=\"font-semibold\"></span></p>\n          <button id=\"change-backup-btn\" class=\"mt-2 px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-600 rounded-md transition-colors\" \n                 data-requires-admin=\"true\" data-i18n-key=\"backup.selectButton\">{t('backup.selectButton', currentLang)}</button>\n        </div>\n        <div id=\"no-selected-backup-container\" class=\"text-gray-500 dark:text-gray-400\">\n          <p class=\"mb-2\" data-i18n-key=\"backup.selectFile\">{t('backup.selectFile', currentLang)}</p>\n          <p class=\"text-sm\" data-i18n-key=\"backup.or\">{t('backup.or', currentLang)}</p>\n          <button id=\"select-backup-btn\" class=\"mt-2 px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-600 rounded-md transition-colors\"\n                 data-requires-admin=\"true\" data-i18n-key=\"backup.selectButton\">{t('backup.selectButton', currentLang)}</button>\n        </div>\n      </div>\n      <button id=\"restore-backup-btn\" class=\"w-full px-4 py-2 bg-red-600 text-white hover:bg-red-700 dark:bg-red-700 dark:hover:bg-red-800 rounded-md transition-colors opacity-50 cursor-not-allowed\" \n             disabled data-requires-admin=\"true\" data-i18n-key=\"backup.restoreButton\">{t('backup.restoreButton', currentLang)}</button>\n    </div>\n  </div>\n\n  <!-- Historial de backups -->\n  <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden border border-gray-100 dark:border-gray-700\">\n    <h3 class=\"px-6 py-4 bg-gray-50 dark:bg-gray-700 text-lg font-semibold text-gray-800 dark:text-white\">{t('backup.historyTitle', currentLang)}</h3>\n    <div class=\"overflow-x-auto\">\n      <table class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n        <thead class=\"bg-gray-50 dark:bg-gray-700\">\n          <tr>\n            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">{t('backup.date', currentLang)}</th>\n            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">{t('backup.size', currentLang)}</th>\n            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">{t('backup.createdBy', currentLang)}</th>\n            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">{t('backup.type', currentLang) || 'Tipo'}</th>\n            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">{t('backup.description', currentLang) || 'Descripción'}</th>\n            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">{t('backup.actions', currentLang)}</th>\n          </tr>\n        </thead>\n        <tbody id=\"backups-table-body\" class=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n          <!-- Aquí se cargarán los backups dinámicamente -->\n          <tr class=\"text-center\">\n            <td colspan=\"5\" class=\"px-6 py-4 text-sm text-gray-500 dark:text-gray-300\">{t('backup.loading', currentLang)}</td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n              <div class=\"flex space-x-2\">\n                <button class=\"text-indigo-600 dark:text-indigo-400 hover:text-indigo-900 dark:hover:text-indigo-300\">{t('backup.download', currentLang)}</button>\n                <button class=\"text-amber-600 dark:text-amber-400 hover:text-amber-900 dark:hover:text-amber-300\">{t('backup.restore', currentLang)}</button>\n                <button class=\"text-red-600 dark:text-red-400 hover:text-red-900 dark:hover:text-red-300\">{t('backup.delete', currentLang)}</button>\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n\n\n  \n  <script>\n    // Importar servicios para manejar backups\n    import { getBackupsList, createBackup, restoreBackup, deleteBackup, getBackupDownloadUrl } from '../../services/backupService.js';\n    import { t as translate, getCurrentLanguage } from '../../i18n/config.ts';\n    \n    // Obtener el idioma actual usando el sistema global\n    const currentLang = getCurrentLanguage();\n    \n    // Función auxiliar para obtener traducciones con fallback\n    const t = (key, lang = currentLang) => {\n      // Intentar obtener la traducción del sistema global\n      const translation = translate(key, lang);\n      \n      // Si la traducción retorna la key original, es que no se encontró\n      if (translation === key) {\n        // Traducciones hardcodeadas como fallback\n        const hardcodedTranslations = {\n          'backup.download': lang === 'ca' ? 'Descarregar' : 'Descargar',\n          'backup.restore': lang === 'ca' ? 'Restaurar' : 'Restaurar',\n          'backup.delete': lang === 'ca' ? 'Eliminar' : 'Eliminar',\n          'backup.loading': lang === 'ca' ? 'Carregant...' : 'Cargando...',\n          'backup.no_backups': lang === 'ca' ? 'No hi ha còpies de seguretat disponibles' : 'No hay copias de seguridad disponibles',\n          'backup.backup_created': lang === 'ca' ? 'Còpia de seguretat creada amb èxit' : 'Copia de seguridad creada con éxito',\n          'backup.backup_error': lang === 'ca' ? 'Error al crear la còpia de seguretat' : 'Error al crear la copia de seguridad',\n          'backup.restore_success': lang === 'ca' ? 'Sistema restaurat correctament' : 'Sistema restaurado correctamente',\n          'backup.restore_error': lang === 'ca' ? 'Error al restaurar el sistema' : 'Error al restaurar el sistema',\n          'backup.deleteSuccess': lang === 'ca' ? 'Còpia de seguretat eliminada correctament' : 'Copia de seguridad eliminada correctamente',\n          'backup.deleteInProgress': lang === 'ca' ? 'Eliminant...' : 'Eliminando...',\n          'backup.restoreInProgress': lang === 'ca' ? 'Restaurant sistema...' : 'Restaurando sistema...',\n          'backup.backupInProgress': lang === 'ca' ? 'Creant còpia de seguretat...' : 'Creando copia de seguridad...',\n          'backup.error': lang === 'ca' ? 'Error' : 'Error'\n        };\n        \n        // Retornar traducción hardcodeada o la key como último recurso\n        return hardcodedTranslations[key] || key;\n      }\n      \n      return translation;\n    };\n    \n    // Variables globales\n    let selectedBackup = null;\n    let backupsList = [];\n    \n    // Elementos DOM\n    const alertContainer = document.getElementById('alert-container');\n    const alertElement = document.getElementById('alert');\n    const alertMessage = document.getElementById('alert-message');\n    let createBackupBtn = document.getElementById('create-backup-btn');\n    let restoreBackupBtn = document.getElementById('restore-backup-btn');\n    let selectBackupBtn = document.getElementById('select-backup-btn');\n    let changeBackupBtn = document.getElementById('change-backup-btn');\n    const selectedBackupContainer = document.getElementById('selected-backup-container');\n    const noSelectedBackupContainer = document.getElementById('no-selected-backup-container');\n    const selectedBackupName = document.getElementById('selected-backup-name');\n    const backupsTableBody = document.getElementById('backups-table-body');\n    const includeAnimals = document.getElementById('include-animals');\n    const includeBirths = document.getElementById('include-births');\n    const includeConfig = document.getElementById('include-config');\n    \n    // Funciones auxiliares\n    function showAlert(message, type = 'success') {\n      alertContainer.classList.remove('hidden');\n      alertMessage.innerText = message;\n      \n      alertElement.className = 'p-4 rounded-md text-center';\n      \n      if (type === 'success') {\n        alertElement.classList.add('bg-green-100', 'text-green-800', 'dark:bg-green-900', 'dark:text-green-200');\n      } else if (type === 'error') {\n        alertElement.classList.add('bg-red-100', 'text-red-800', 'dark:bg-red-900', 'dark:text-red-200');\n      } else if (type === 'warning') {\n        alertElement.classList.add('bg-yellow-100', 'text-yellow-800', 'dark:bg-yellow-900', 'dark:text-yellow-200');\n      } else if (type === 'info') {\n        alertElement.classList.add('bg-blue-100', 'text-blue-800', 'dark:bg-blue-900', 'dark:text-blue-200');\n      }\n      \n      // Auto-ocultar después de 5 segundos\n      setTimeout(() => {\n        alertContainer.classList.add('hidden');\n      }, 5000);\n    }\n    \n    function setLoading(button, isLoading, text) {\n      if (isLoading) {\n        button.disabled = true;\n        button.originalText = button.innerText;\n        button.innerText = text || t('backup.loading', currentLang);\n        button.classList.add('opacity-70');\n      } else {\n        button.disabled = false;\n        button.innerText = button.originalText || button.innerText;\n        button.classList.remove('opacity-70');\n      }\n    }\n    \n    function updateSelectedBackup(backup) {\n      selectedBackup = backup;\n      \n      if (backup) {\n        selectedBackupName.innerText = backup.filename;\n        selectedBackupContainer.classList.remove('hidden');\n        noSelectedBackupContainer.classList.add('hidden');\n        restoreBackupBtn.classList.remove('opacity-50', 'cursor-not-allowed');\n        restoreBackupBtn.disabled = false;\n      } else {\n        selectedBackupContainer.classList.add('hidden');\n        noSelectedBackupContainer.classList.remove('hidden');\n        restoreBackupBtn.classList.add('opacity-50', 'cursor-not-allowed');\n        restoreBackupBtn.disabled = true;\n      }\n    }\n    \n    function getBackupTypeLabel(backup) {\n      // Si tenemos información de tipo de backup, usarla\n      if (backup.backup_type) {\n        switch (backup.backup_type) {\n          case 'daily':\n            return 'Backup diario programado';\n          case 'animal_created':\n            return 'Backup tras crear animal';\n          case 'animal_updated':\n            return 'Backup tras modificar animal';\n          case 'import':\n            return 'Backup tras importación';\n          case 'manual':\n            return t('backup.manualBackup', currentLang);\n          default:\n            return backup.backup_type;\n        }\n      }\n\n      // Compatibilidad con versiones anteriores\n      if (backup.filename.includes('diario-auto')) {\n        return t('backup.autoBackup', currentLang);\n      } else if (backup.filename.includes('cambio-sistema')) {\n        return t('backup.systemBackup', currentLang);\n      } else {\n        return t('backup.manualBackup', currentLang);\n      }\n    }\n    \n    function getBackupTypeColor(backupType) {\n      // Asignar colores según el tipo de backup para mejorar la visualización\n      switch (backupType) {\n        case 'animal_created':\n          return 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200';\n        case 'animal_updated':\n          return 'bg-indigo-100 dark:bg-indigo-900 text-indigo-800 dark:text-indigo-200';\n        case 'daily':\n          return 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200';\n        case 'import':\n          return 'bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200';\n        case 'manual':\n          return 'bg-amber-100 dark:bg-amber-900 text-amber-800 dark:text-amber-200';\n        default:\n          return 'bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200';\n      }\n    }\n    \n    // Cargar la lista de backups\n    async function loadBackupsList() {\n      try {\n        backupsList = await getBackupsList();\n        \n        // Debug: Imprimir los datos recibidos en la consola\n        console.log('Datos de backups recibidos:', backupsList);\n        console.log('Número de backups:', backupsList.length);\n        \n        // Debug: Mostrar un mensaje en la página para verificar que la función se está ejecutando\n        const debugMsg = document.createElement('div');\n        debugMsg.id = 'debug-message';\n        debugMsg.style.padding = '10px';\n        debugMsg.style.margin = '10px 0';\n        debugMsg.style.backgroundColor = '#f0f0f0';\n        debugMsg.style.border = '1px solid #ccc';\n        debugMsg.style.borderRadius = '4px';\n        debugMsg.innerHTML = `Datos recibidos: ${backupsList.length} copias de seguridad<br>Último log: ${new Date().toLocaleTimeString()}`;\n        \n        // Insertar el mensaje de debug antes de la tabla\n        const backupsTable = document.querySelector('#backups-table');\n        if (backupsTable && !document.getElementById('debug-message')) {\n          backupsTable.parentNode.insertBefore(debugMsg, backupsTable);\n        }\n        \n        // Actualizar la tabla de backups\n        if (backupsList.length === 0) {\n          backupsTableBody.innerHTML = `\n            <tr class=\"text-center\">\n              <td colspan=\"5\" class=\"px-6 py-4 text-sm text-gray-500 dark:text-gray-300\">${t('backup.no_backups', currentLang)}</td>\n            </tr>\n          `;\n          return;\n        }\n        \n        backupsTableBody.innerHTML = backupsList.map(backup => `\n          <tr class=\"hover:bg-gray-50 dark:hover:bg-gray-700\" data-filename=\"${backup.filename}\">\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">${backup.date}</td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">${backup.size}</td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">${backup.created_by}</td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">\n              <span class=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getBackupTypeColor(backup.backup_type)}\">\n                ${backup.backup_type || 'manual'}\n              </span>\n            </td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300 max-w-xs truncate\">\n              ${backup.description || ''}\n            </td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n              <div class=\"flex space-x-2\">\n                <a href=\"${getBackupDownloadUrl(backup.filename)}\" class=\"text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-200\" download>${t('backup.download', currentLang)}</a>\n                <button class=\"restore-btn text-green-600 hover:text-green-900 dark:text-green-400 dark:hover:text-green-200\">\n                  ${t('backup.restore', currentLang)}\n                </button>\n                <button class=\"delete-btn text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-200\">\n                  ${t('backup.delete', currentLang)}\n                </button>\n              </div>\n            </td>\n          </tr>\n        `).join('');\n        \n        // Agregar event listeners a los botones de la tabla\n        document.querySelectorAll('.restore-btn').forEach(btn => {\n          btn.addEventListener('click', handleRestoreFromTable);\n        });\n        \n        document.querySelectorAll('.delete-btn').forEach(btn => {\n          btn.addEventListener('click', handleDeleteFromTable);\n        });\n        \n      } catch (error) {\n        console.error('Error al cargar la lista de backups:', error);\n        // Mostrar mensaje de error\n        showAlert(`${t('backup.error')}: ${error.message}`, 'error');\n        \n        // Asegurarse de que la tabla muestra un mensaje amigable en caso de error\n        backupsTableBody.innerHTML = `\n          <tr class=\"text-center\">\n            <td colspan=\"5\" class=\"px-6 py-4 text-sm text-red-500 dark:text-red-300\">${t('backup.error', currentLang)}: ${error.message}</td>\n          </tr>\n        `;\n      }\n    }\n    // Manejadores de eventos\n    function initEventListeners() {\n      // Botón de crear backup\n      createBackupBtn.addEventListener('click', handleCreateBackup);\n    }\n    \n    // Función para manejar la creación de backups\n    async function handleCreateBackup() {\n      console.log('Botón de backup clickeado');\n      \n      // Obtener opciones de backup\n      const options = {\n        include_animals: includeAnimals.checked,\n        include_births: includeBirths.checked,\n        include_config: includeConfig.checked,\n        created_by: 'usuario'\n      };\n      \n      // Desactivar el botón mientras se crea el backup\n      setLoading(createBackupBtn, true, t('backup.backupInProgress', currentLang));\n      \n      try {\n        // Usar el servicio centralizado de backup\n        const result = await createBackup(options);\n        console.log('Backup creado correctamente:', result);\n        \n        // Mostrar mensaje de éxito\n        showAlert(t('backup.backup_created', currentLang), 'success');\n        \n        // Recargar la lista de backups\n        await loadBackupsList();\n      } catch (error) {\n        console.error('Error al crear backup:', error);\n        \n        // Si vemos un error de HTML en la respuesta, probablemente el backup sí se creó\n        if (error.message && error.message.includes('<!DOCTYPE')) {\n          console.log('El backup probablemente se creó correctamente a pesar del error de parseo');\n          showAlert(t('backup.backup_created', currentLang), 'success');\n          \n          // Recargar la lista después de un breve retraso\n          setTimeout(() => loadBackupsList(), 1000);\n        } else {\n          // Solo mostrar errores que no sean de parser HTML\n          showAlert(`${t('backup.backup_error', currentLang)}: ${error.message || 'Error desconocido'}`, 'error');\n        }\n      } finally {\n        // Siempre reactivar el botón\n        setLoading(createBackupBtn, false);\n      }\n    }\n    \n    async function handleRestoreBackup() {\n      if (!selectedBackup) return;\n      \n      try {\n        setLoading(restoreBackupBtn, true, t('backup.restoreInProgress', currentLang));\n        \n        await restoreBackup(selectedBackup.filename);\n        showAlert(t('backup.restore_success', currentLang), 'success');\n        \n        // Recargar la lista de backups\n        await loadBackupsList();\n        \n        // Limpiar selección\n        updateSelectedBackup(null);\n        \n      } catch (error) {\n        console.error('Error al restaurar backup:', error);\n        showAlert(`${t('backup.error', currentLang)}: ${error.message}`, 'error');\n      } finally {\n        setLoading(restoreBackupBtn, false);\n      }\n    }\n    \n    function handleSelectBackup() {\n      // Mostrar una lista modal o dropdown con los backups disponibles\n      // Para simplicidad, usamos el primer backup de la lista\n      if (backupsList.length > 0) {\n        updateSelectedBackup(backupsList[0]);\n      } else {\n        showAlert(t('backup.no_backups', currentLang), 'warning');\n      }\n    }\n    \n    function handleChangeBackup() {\n      // Volver a mostrar la selección\n      updateSelectedBackup(null);\n    }\n    \n    function handleRestoreFromTable(event) {\n      const row = event.target.closest('tr');\n      const filename = row.dataset.filename;\n      const backup = backupsList.find(b => b.filename === filename);\n      \n      if (backup) {\n        updateSelectedBackup(backup);\n        // Desplazar a la sección de restauración\n        document.getElementById('restore-backup-btn').scrollIntoView({ behavior: 'smooth' });\n      }\n    }\n    \n    async function handleDeleteFromTable(event) {\n      const row = event.target.closest('tr');\n      const filename = row.dataset.filename;\n      \n      try {\n        // Desactivar botón mientras se elimina\n        event.target.disabled = true;\n        event.target.textContent = t('backup.deleteInProgress', currentLang);\n        \n        await deleteBackup(filename);\n        showAlert(t('backup.deleteSuccess', currentLang), 'success');\n        \n        // Recargar la lista de backups\n        await loadBackupsList();\n        \n        // Si el backup eliminado era el seleccionado, limpiamos la selección\n        if (selectedBackup && selectedBackup.filename === filename) {\n          updateSelectedBackup(null);\n        }\n        \n      } catch (error) {\n        console.error('Error al eliminar backup:', error);\n        showAlert(`${t('backup.error', currentLang)}: ${error.message}`, 'error');\n        event.target.disabled = false;\n        event.target.textContent = t('backup.delete', currentLang);\n      }\n    }\n    \n    // Función para inicializar la página\n    function initPage() {\n      console.log('Inicializando página de backup...');\n      \n      // Verificar que todos los elementos existen\n      if (!createBackupBtn) {\n        console.error('No se encontró el botón de crear backup');\n        createBackupBtn = document.getElementById('create-backup-btn');\n      }\n      \n      if (!restoreBackupBtn) {\n        console.error('No se encontró el botón de restaurar backup');\n        restoreBackupBtn = document.getElementById('restore-backup-btn');\n      }\n      \n      if (!selectBackupBtn) {\n        console.error('No se encontró el botón de seleccionar backup');\n        selectBackupBtn = document.getElementById('select-backup-btn');\n      }\n      \n      if (!changeBackupBtn) {\n        console.error('No se encontró el botón de cambiar backup');\n        changeBackupBtn = document.getElementById('change-backup-btn');\n      }\n      \n      // Cargar la lista de backups\n      loadBackupsList();\n      \n      // Agregar event listeners si los elementos existen\n      if (createBackupBtn) {\n        console.log('Añadiendo event listener al botón de crear backup');\n        createBackupBtn.addEventListener('click', handleCreateBackup);\n      }\n      \n      if (restoreBackupBtn) {\n        restoreBackupBtn.addEventListener('click', handleRestoreBackup);\n      }\n      \n      if (selectBackupBtn) {\n        selectBackupBtn.addEventListener('click', handleSelectBackup);\n      }\n      \n      if (changeBackupBtn) {\n        changeBackupBtn.addEventListener('click', handleChangeBackup);\n      }\n    }\n    \n    // Intentar inicializar la página de varias formas para asegurar que funciona\n    document.addEventListener('DOMContentLoaded', initPage);\n    \n    // También intentar inicializar después de un pequeño retraso\n    setTimeout(initPage, 1000);\n    \n    // Y también intentar inicializar ahora mismo\n    try {\n      initPage();\n    } catch (error) {\n      console.error('Error al inicializar la página:', error);\n    }\n    \n    // La inicialización de permisos ahora se maneja a través del componente PermissionsManager\n  </script>\n  \n  <!-- Script específico para bloquear el botón de selección de backup para el rol Ramon -->\n  <script is:inline>\n    // Ejecutar inmediatamente cuando carga la página\n    (function() {\n      // Verificar si el usuario es Ramon\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) return;\n        \n        const payload = JSON.parse(atob(token.split('.')[1]));\n        const userRole = payload.role;\n        \n        if (userRole === 'Ramon') {\n          console.log('⚠️ Usuario Ramon detectado - Aplicando restricciones específicas...');\n          \n          // Función para bloquear completamente el botón\n          function bloquearBotonSelectBackup() {\n            const btn = document.getElementById('select-backup-btn');\n            if (!btn) {\n              console.log('Botón no encontrado, reintentando en 500ms...');\n              setTimeout(bloquearBotonSelectBackup, 500);\n              return;\n            }\n            \n            // Aplicar múltiples capas de bloqueo\n            btn.disabled = true;\n            btn.setAttribute('disabled', 'disabled');\n            btn.style.opacity = '0.5';\n            btn.style.pointerEvents = 'none';\n            btn.style.cursor = 'not-allowed';\n            btn.title = 'No tienes permisos para restaurar copias de seguridad';\n            btn.classList.add('opacity-50', 'cursor-not-allowed');\n            btn.classList.remove('hover:bg-gray-300', 'dark:hover:bg-gray-600');\n            \n            // Agregar icono de candado\n            const lockIcon = document.createElement('span');\n            lockIcon.innerHTML = ' 🔒';\n            lockIcon.className = 'ml-2';\n            btn.appendChild(lockIcon);\n            \n            // Sobrescribir handlers\n            btn.onclick = function(e) {\n              e.preventDefault();\n              e.stopPropagation();\n              console.log('Intento de acceso bloqueado');\n              return false;\n            };\n            \n            // También bloquear el botón change-backup-btn si existe\n            const changeBtn = document.getElementById('change-backup-btn');\n            if (changeBtn) {\n              changeBtn.disabled = true;\n              changeBtn.style.opacity = '0.5';\n              changeBtn.style.pointerEvents = 'none';\n              changeBtn.style.cursor = 'not-allowed';\n            }\n            \n            console.log('✅ Botón de selección de backup bloqueado exitosamente para Ramon');\n          }\n          \n          // Ejecutar la función inmediatamente\n          bloquearBotonSelectBackup();\n          \n          // Y también después de un retraso para asegurarnos\n          setTimeout(bloquearBotonSelectBackup, 500);\n          setTimeout(bloquearBotonSelectBackup, 1000);\n          setTimeout(bloquearBotonSelectBackup, 2000);\n          \n          // Ejecutar una última vez cuando la ventana esté completamente cargada\n          window.addEventListener('load', function() {\n            setTimeout(bloquearBotonSelectBackup, 100);\n          });\n        }\n      } catch (e) {\n        console.error('Error al verificar permisos:', e);\n      }\n    })();\n  </script>\n</MainLayout>\n"],"names":["Astro","$$render","__template","_a","$$createAstro","$$createComponent","$$renderComponent","MainLayout","$$result","PermissionsManager","$$maybeRenderHead"],"mappings":"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"}