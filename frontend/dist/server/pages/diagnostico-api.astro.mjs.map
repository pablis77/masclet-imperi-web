{"version":3,"file":"diagnostico-api.astro.mjs","sources":["../../../src/pages/diagnostico-api.astro"],"sourcesContent":["---\nimport DefaultLayout from '../layouts/DefaultLayout.astro';\n\nconst userRole = 'admin';\nconst title = 'Diagnóstico de API - Masclet Imperi';\n\n// Lista de endpoints a probar\nconst endpoints = [\n  {\n    name: \"Estadísticas del Dashboard (/stats)\",\n    url: \"/api/v1/dashboard/stats\",\n    description: \"Estadísticas completas con datos reales de animales\",\n    viaProxy: true\n  },\n  {\n    name: \"Resumen del Dashboard\",\n    url: \"/api/v1/dashboard/resumen\",\n    description: \"Resumen general con estadísticas clave\",\n    viaProxy: true\n  },\n  {\n    name: \"Directamente al backend\",\n    url: \"http://localhost:8000/api/v1/dashboard/stats\",\n    description: \"Conexión directa al backend sin usar proxy\",\n    viaProxy: false\n  },\n  {\n    name: \"Listado de Animales\",\n    url: \"/api/v1/animals\",\n    description: \"Listado de todos los animales\",\n    viaProxy: true\n  }\n];\n---\n\n<DefaultLayout title={title} userRole={userRole} currentPath=\"/diagnostico-api\">\n  <main class=\"container mx-auto px-4 py-6\">\n    <div class=\"mb-6\">\n      <h1 class=\"text-2xl font-bold mb-2 text-gray-900 dark:text-white\">Diagnóstico de API</h1>\n      <p class=\"text-gray-600 dark:text-gray-300 mb-4\">Esta página realiza pruebas de comunicación con el backend</p>\n    </div>\n    \n    <div class=\"mb-4\">\n      <div class=\"flex justify-between items-center mb-4\">\n        <h2 class=\"text-xl font-semibold text-gray-800 dark:text-white\">Endpoints a probar</h2>\n        <button \n          id=\"test-all-button\"\n          class=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md transition-colors\"\n        >\n          Probar Todos\n        </button>\n      </div>\n      \n      <div id=\"endpoints-container\" class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {endpoints.map((endpoint, index) => (\n          <div class=\"bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden p-4\">\n            <div class=\"mb-2\">\n              <div class=\"flex justify-between items-start\">\n                <h3 class=\"text-lg font-medium text-gray-800 dark:text-white\">{endpoint.name}</h3>\n                <span \n                  class={`px-2 py-1 text-xs rounded ${endpoint.viaProxy ? 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200' : 'bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200'}`}\n                >\n                  {endpoint.viaProxy ? 'Vía Proxy' : 'Directo'}\n                </span>\n              </div>\n              <p class=\"text-sm text-gray-600 dark:text-gray-300 mt-1\">{endpoint.description}</p>\n              <div class=\"mt-2\">\n                <p class=\"text-xs text-gray-500 dark:text-gray-400\">URL: <code class=\"bg-gray-100 dark:bg-gray-700 px-1 py-0.5 rounded\">{endpoint.url}</code></p>\n              </div>\n            </div>\n            \n            <div class=\"mt-3 border-t border-gray-200 dark:border-gray-700 pt-3\">\n              <div class=\"flex items-center justify-between\">\n                <span class=\"endpoint-status text-sm text-gray-500 dark:text-gray-400\">Sin probar</span>\n                <button \n                  class=\"test-button bg-blue-500 hover:bg-blue-600 text-white px-3 py-1.5 text-sm rounded transition-colors\"\n                  data-url={endpoint.url}\n                  data-index={index}\n                >\n                  Probar\n                </button>\n              </div>\n              \n              <div class=\"mt-2 hidden endpoint-result\">\n                <div class=\"bg-gray-50 dark:bg-gray-900 rounded p-2 text-xs text-gray-800 dark:text-gray-200 overflow-x-auto max-h-32\"></div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n    \n    <div class=\"mt-8 bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden p-4\">\n      <h2 class=\"text-xl font-semibold mb-4 text-gray-800 dark:text-white\">Registro de conexiones</h2>\n      <pre id=\"connection-log\" class=\"bg-gray-50 dark:bg-gray-900 p-3 rounded-lg text-xs text-gray-800 dark:text-gray-200 overflow-x-auto max-h-64\">Esperando pruebas...</pre>\n    </div>\n    \n    <div class=\"mt-8 bg-white dark:bg-gray-800 shadow-md rounded-lg overflow-hidden p-4\">\n      <h2 class=\"text-xl font-semibold mb-4 text-gray-800 dark:text-white\">Información de configuración</h2>\n      \n      <div class=\"space-y-3\">\n        <div>\n          <h3 class=\"text-md font-medium text-gray-700 dark:text-gray-300\">Proxy configurado</h3>\n          <pre class=\"bg-gray-50 dark:bg-gray-900 p-2 rounded text-xs mt-1\">Astro proxy: /api/v1 → http://localhost:8000</pre>\n        </div>\n        \n        <div>\n          <h3 class=\"text-md font-medium text-gray-700 dark:text-gray-300\">Configuración CORS en backend</h3>\n          <pre class=\"bg-gray-50 dark:bg-gray-900 p-2 rounded text-xs mt-1\">allow_origins=[\"*\"], allow_credentials=True, allow_methods=[\"*\"], allow_headers=[\"*\"]</pre>\n        </div>\n      </div>\n    </div>\n  </main>\n</DefaultLayout>\n\n<script>\n  document.addEventListener('DOMContentLoaded', function() {\n    const testButtons = document.querySelectorAll('.test-button');\n    const testAllButton = document.getElementById('test-all-button');\n    const connectionLog = document.getElementById('connection-log');\n    \n    // Función para formatear JSON\n    function formatJSON(obj) {\n      return JSON.stringify(obj, null, 2);\n    }\n    \n    // Función para añadir al log\n    function appendToLog(message, isError = false) {\n      const timestamp = new Date().toLocaleTimeString();\n      const logClass = isError ? 'text-red-600 dark:text-red-400' : '';\n      \n      connectionLog.innerHTML = \n        `<span class=\"text-gray-500\">[${timestamp}]</span> <span class=\"${logClass}\">${message}</span>\\n` + \n        connectionLog.innerHTML;\n    }\n    \n    // Función para probar un endpoint\n    async function testEndpoint(url, index) {\n      const statusElem = document.querySelectorAll('.endpoint-status')[index];\n      const resultElem = document.querySelectorAll('.endpoint-result')[index];\n      const resultContentElem = resultElem.querySelector('div');\n      \n      // Actualizar estado\n      statusElem.textContent = 'Probando...';\n      statusElem.className = 'endpoint-status text-sm text-blue-500 dark:text-blue-400';\n      \n      // Registrar en el log\n      appendToLog(`Iniciando petición a ${url}`);\n      \n      try {\n        // Construir URL con caché buster\n        const timestamp = new Date().getTime();\n        const separator = url.includes('?') ? '&' : '?';\n        const urlWithCache = `${url}${separator}_cache=${timestamp}`;\n        \n        // Configuración de la petición\n        const options = {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer token-desarrollo-12345'\n          }\n        };\n        \n        // Realizar la petición con timeout\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 segundos timeout\n        \n        options.signal = controller.signal;\n        \n        appendToLog(`Enviando fetch: ${urlWithCache}`);\n        const response = await fetch(urlWithCache, options);\n        clearTimeout(timeoutId);\n        \n        appendToLog(`Respuesta recibida: Status ${response.status} ${response.statusText}`);\n        \n        // Procesar respuesta\n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        \n        const data = await response.json();\n        \n        // Actualizar estado a éxito\n        statusElem.textContent = `Éxito (${response.status})`;\n        statusElem.className = 'endpoint-status text-sm text-green-600 dark:text-green-400';\n        \n        // Mostrar resultado\n        resultContentElem.textContent = formatJSON(data);\n        resultElem.classList.remove('hidden');\n        \n        appendToLog(`Datos recibidos correctamente (${Object.keys(data).length} propiedades)`);\n        return true;\n      } catch (error) {\n        // Verificar si es error de timeout\n        const errorMessage = error.name === 'AbortError' \n          ? 'Tiempo de espera agotado (5s)'\n          : error.message;\n        \n        // Actualizar estado a error\n        statusElem.textContent = `Error: ${errorMessage}`;\n        statusElem.className = 'endpoint-status text-sm text-red-600 dark:text-red-400';\n        \n        // Mostrar error\n        resultContentElem.textContent = `Error: ${errorMessage}`;\n        resultElem.classList.remove('hidden');\n        \n        appendToLog(`Error en petición: ${errorMessage}`, true);\n        return false;\n      }\n    }\n    \n    // Añadir evento a cada botón\n    testButtons.forEach(button => {\n      button.addEventListener('click', function() {\n        const url = this.getAttribute('data-url');\n        const index = parseInt(this.getAttribute('data-index'));\n        \n        testEndpoint(url, index);\n      });\n    });\n    \n    // Añadir evento al botón de probar todos\n    testAllButton.addEventListener('click', async function() {\n      appendToLog('Iniciando prueba de todos los endpoints...');\n      \n      const endpoints = Array.from(testButtons).map(button => ({\n        url: button.getAttribute('data-url'),\n        index: parseInt(button.getAttribute('data-index'))\n      }));\n      \n      let totalSuccess = 0;\n      \n      // Probar cada endpoint secuencialmente\n      for (const endpoint of endpoints) {\n        const success = await testEndpoint(endpoint.url, endpoint.index);\n        if (success) totalSuccess++;\n        \n        // Pequeña pausa entre peticiones\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n      \n      // Registrar resultado final\n      appendToLog(`Prueba completa: ${totalSuccess} de ${endpoints.length} endpoints funcionando correctamente`);\n    });\n  });\n</script>\n"],"names":["$$createAstro","$$createComponent","Astro","$$render","$$renderComponent","DefaultLayout","$$result","$$maybeRenderHead","$$addAttribute"],"mappings":";;;;;AAAA,MAAA,UAAAA,WAAA,EAAA;AAAA,MAAA,gBAAA,GAAAC,eAAA,CAAA,OAAA,QAAA,EAAA,SAAA,OAAA,KAAA;AAAA,EAAA,MAAAC,MAAA,GAAA,QAAA,CAAA,WAAA,CAAA,OAAA,EAAA,SAAA,OAAA,CAAA;AAAA,EAAAA,OAAA,IAAA,GAAA,gBAAA;AAGA,EAAA,MAAM,QAAW,GAAA,OAAA;AACjB,EAAA,MAAM,KAAQ,GAAA,wCAAA;AAGd,EAAA,MAAM,SAAY,GAAA;AAChB,IAAA;MACE,IAAM,EAAA,wCAAA;MACN,GAAK,EAAA,yBAAA;MACL,WAAa,EAAA,wDAAA;MACb,QAAU,EAAA;AACZ,KAAA;AACA,IAAA;MACE,IAAM,EAAA,uBAAA;MACN,GAAK,EAAA,2BAAA;MACL,WAAa,EAAA,2CAAA;MACb,QAAU,EAAA;AACZ,KAAA;AACA,IAAA;MACE,IAAM,EAAA,yBAAA;MACN,GAAK,EAAA,8CAAA;MACL,WAAa,EAAA,+CAAA;MACb,QAAU,EAAA;AACZ,KAAA;AACA,IAAA;MACE,IAAM,EAAA,qBAAA;MACN,GAAK,EAAA,iBAAA;MACL,WAAa,EAAA,+BAAA;MACb,QAAU,EAAA;AACZ;AACF,GAAA;AAhCA,EAAA,OAAAC,cAAA,CAAA,EAAAC,gBAAA,QAAA,EAAA,eAAA,EAAAC,iBAAA,EAmCe,OAAA,EAAO,OAAO,UAAU,EAAA,QAAA,EAAU,eAnCjD,kBAAA,EAAA,EAAA,EAAA,SAAA,EAAA,OAAAC,cAAAH,cAAA,CAAA,CAAA,EAAAI,eAAA,CAAA,CAAA,CAAA;;AAsDS,8FAAA,EAAA,SAAA,CAAU,IAAI,CAAC,QAAA,EAAU,KAtDlC,KAAAJ,cAAA,CAAA,iNAAA,EA0D+E,SAAS,IAAI,CAAA,WAAA,EA1D5FK,YA4DyB,CAAA,CAAA,0BAAA,EAA6B,SAAS,QAAW,GAAA,+DAAA,GAAkE,uEAAuE,CA5DnN,CAAA,EAAA,OAAA,CAAA,CA8DmB,EAAA,EAAA,QAAA,CAAS,QAAW,GAAA,cAAA,GAAc,SAAS,CAGU,yEAAA,EAAA,QAAA,CAAS,WAAW,CAAA,gJAAA,EAE6C,SAAS,GAAG,CAAA,2VAAA,EAnErJA,YA4E4B,CAAA,QAAA,CAAS,KA5ErC,UAAA,CAAA,GAAAA,YA6E8B,CAAA,KAAA,EA7E9B,YAAA,CAAA,CAAA;;8MAwFS,CAAC,CAAA,0kCAAA,CAAA,EAyBR,CAAA,CAAA,CAAA,CAAA;AAjHF,CAAA,EAAA,mFAAA,MAAA,CAAA;;;;;;;;;;;;;;;;"}