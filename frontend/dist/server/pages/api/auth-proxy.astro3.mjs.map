{"version":3,"file":"auth-proxy.astro3.mjs","sources":["../../../../src/pages/api/auth-proxy.ts"],"sourcesContent":["// Astro API endpoint para autenticación\n// Este endpoint actúa como proxy entre el frontend y el backend\nimport type { APIRoute } from 'astro';\n\n// Definición del endpoint POST\nexport const POST: APIRoute = async ({ request }) => {\n  try {\n    // URL del backend (usando la ruta correcta según la memoria)\n    const backendUrl = 'http://localhost:8000/api/v1/auth/login';\n    \n    // Obtener los datos JSON del cuerpo de la solicitud\n    const data = await request.json();\n    console.log('Datos recibidos para autenticación:', {\n      username: data.username,\n      password: '*'.repeat(data.password?.length || 0)\n    });\n    \n    // Preparar datos para la autenticación en el formato correcto para FastAPI\n    // FastAPI espera un formulario application/x-www-form-urlencoded para OAuth\n    const formData = new URLSearchParams();\n    formData.append('username', data.username);\n    formData.append('password', data.password);\n    \n    console.log('Enviando solicitud a:', backendUrl);\n    console.log('Con formato de datos: application/x-www-form-urlencoded');\n    \n    // Realizar la solicitud al backend\n    const response = await fetch(backendUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Accept': 'application/json'\n      },\n      body: formData\n    });\n    \n    console.log('Respuesta del backend:', response.status);\n    \n    const responseText = await response.text();\n    console.log('Texto de respuesta completo:', responseText);\n    \n    let responseData;\n    try {\n      // Intentar parsear como JSON\n      responseData = JSON.parse(responseText);\n      console.log('Respuesta parseada:', JSON.stringify(responseData, null, 2));\n    } catch (e) {\n      console.error('Error al parsear respuesta como JSON:', e);\n      // Si no es JSON, devolver como texto\n      return new Response(\n        JSON.stringify({ \n          error: 'Error en el formato de respuesta del servidor',\n          raw_response: responseText\n        }),\n        {\n          status: response.status,\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n    }\n    \n    // Si la respuesta es un error, incluir información detallada\n    if (!response.ok) {\n      console.error('Respuesta de error del backend:', responseData);\n      return new Response(\n        JSON.stringify({ \n          error: 'Error en la autenticación',\n          status: response.status,\n          detail: responseData.detail || 'No hay detalles disponibles',\n          data: responseData\n        }),\n        {\n          status: response.status,\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n    }\n    \n    // IMPORTANTE: Construimos una respuesta que el frontend pueda consumir\n    // Es posible que la respuesta del backend no contenga una estructura de user\n    // En ese caso, la creamos nosotros\n    const processedResponse = {\n      access_token: responseData.access_token,\n      token_type: responseData.token_type || 'bearer',\n      user: responseData.user || {\n        id: 1,\n        username: data.username,\n        is_active: true,\n        is_superuser: data.username === 'admin',\n        role: responseData.role || (data.username === 'admin' ? 'administrador' : 'usuario')\n      }\n    };\n    \n    console.log('Respuesta construida para el frontend:', JSON.stringify(processedResponse, null, 2));\n    \n    // Procesar la respuesta para incluir el rol del usuario\n    if (processedResponse.user) {\n      console.log('Datos originales del usuario:', processedResponse.user);\n      \n      // Determinar el rol basado en la información del usuario\n      if (processedResponse.user.role) {\n        // Si ya viene un rol, asegurar que esté en formato correcto para el frontend\n        const roleString = processedResponse.user.role.toString();\n        console.log('Rol original del backend:', roleString);\n        \n        if (roleString.includes('ADMIN')) {\n          processedResponse.user.role = 'administrador';\n        } else if (roleString.includes('GERENTE')) {\n          processedResponse.user.role = 'gerente';\n        } else if (roleString.includes('EDITOR')) {\n          processedResponse.user.role = 'editor';\n        } else if (roleString.includes('USUARIO')) {\n          processedResponse.user.role = 'usuario';\n        }\n        console.log('Rol convertido en proxy:', processedResponse.user.role);\n      } else if (processedResponse.user.is_superuser) {\n        processedResponse.user.role = 'administrador';\n        console.log('Rol asignado por is_superuser:', processedResponse.user.role);\n      } else if (processedResponse.user.username === 'gerente') {\n        processedResponse.user.role = 'gerente';\n        console.log('Rol asignado por username gerente:', processedResponse.user.role);\n      } else if (processedResponse.user.username.includes('editor')) {\n        processedResponse.user.role = 'editor';\n        console.log('Rol asignado por username con editor:', processedResponse.user.role);\n      } else {\n        processedResponse.user.role = 'usuario';\n        console.log('Rol asignado por defecto:', processedResponse.user.role);\n      }\n    }\n    \n    console.log('Respuesta final procesada:', JSON.stringify(processedResponse, null, 2));\n    \n    // Devolver la respuesta con el mismo código de estado\n    return new Response(\n      JSON.stringify(processedResponse),\n      {\n        status: response.status,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n  } catch (error) {\n    // Manejo de errores\n    console.error('Error en el proxy de autenticación:', error);\n    \n    return new Response(\n      JSON.stringify({ \n        error: 'Error en la autenticación',\n        message: error instanceof Error ? error.message : 'Error desconocido'\n      }),\n      {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    );\n  }\n};\n"],"names":[],"mappings":"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"}