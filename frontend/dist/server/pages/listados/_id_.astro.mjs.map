{"version":3,"file":"_id_.astro.mjs","sources":["../../../../src/pages/listados/[id].astro"],"sourcesContent":["---\nimport MainLayout from '../../components/layout/MainLayout.astro';\nimport { getCurrentLanguage, t } from '../../i18n/config';\n\n// Obtener el idioma actual\nconst currentLang = getCurrentLanguage();\n\n// Obtener el ID del listado de los parámetros de la URL\nconst { id } = Astro.params;\n\n// Actualizar la URL actual para el sistema de navegación\nAstro.props.currentPath = `/listados/[id]`;\n\n// Traducciones simples sin objetos anidados\nconst titulo = currentLang === 'es' ? \"Detalles del Listado\" : \"Detalls del Llistat\";\nconst cargando = currentLang === 'es' ? \"Cargando detalles del listado...\" : \"Carregant detalls del llistat...\";\nconst volver = currentLang === 'es' ? \"Volver a Listados\" : \"Tornar a Llistats\";\nconst editar = currentLang === 'es' ? \"Editar Listado\" : \"Editar Llistat\";\nconst categoria = currentLang === 'es' ? \"Categoría\" : \"Categoria\";\nconst animales = currentLang === 'es' ? \"Animales\" : \"Animals\";\nconst creado = currentLang === 'es' ? \"Creado el\" : \"Creat el\";\nconst vacio = currentLang === 'es' ? \"No hay animales en este listado.\" : \"No hi ha animals en aquest llistat.\";\nconst colNombre = currentLang === 'es' ? \"Nombre\" : \"Nom\";\nconst colCodigo = currentLang === 'es' ? \"Código\" : \"Codi\";\nconst colExplotacion = currentLang === 'es' ? \"Explotación\" : \"Explotació\";\nconst colGenero = currentLang === 'es' ? \"Género\" : \"Gènere\";\nconst colEstado = currentLang === 'es' ? \"Confirmación\" : \"Confirmació\";\nconst colObservaciones = currentLang === 'es' ? \"Observaciones\" : \"Observacions\";\nconst exportarPdf = currentLang === 'es' ? \"Exportar a PDF\" : \"Exportar a PDF\";\n---\n\n<MainLayout title={titulo}>\n  <div class=\"px-4 py-6 sm:px-6 lg:px-8\">\n    <div class=\"mb-6 flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n      <div>\n        <h1 class=\"text-2xl font-semibold text-gray-900 dark:text-white\" id=\"listado-title\">\n          {titulo}\n        </h1>\n        <p class=\"mt-2 text-sm text-gray-700 dark:text-gray-300\" id=\"listado-descripcion\"></p>\n      </div>\n      \n      <div class=\"mt-4 sm:mt-0 flex space-x-3\">\n        <a \n          href=\"/listados\" \n          class=\"inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary\"\n        >\n          {volver}\n        </a>\n\n        <!-- Botón de exportar PDF eliminado -->\n        \n        <!-- Mensaje de estado para la exportación -->\n        <div id=\"pdf-export-status\" class=\"hidden mt-2 text-sm font-medium\"></div>\n      </div>\n    </div>\n    \n    <div class=\"bg-white dark:bg-gray-800 overflow-hidden shadow rounded-lg\">\n      <div class=\"p-4\">\n        <div id=\"loading-message\" class=\"p-4 flex justify-center items-center min-h-[200px]\">\n          <div class=\"flex flex-col items-center\">\n            <div class=\"animate-spin rounded-full h-10 w-10 border-b-2 border-primary\"></div>\n            <p class=\"mt-2 text-sm text-gray-500\">{cargando}</p>\n          </div>\n        </div>\n        \n        <div id=\"listado-content\" class=\"hidden\">\n          <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n            <div>\n              <h3 class=\"text-sm font-medium text-gray-500 dark:text-gray-400\">{categoria}</h3>\n              <p class=\"mt-1 text-sm text-gray-900 dark:text-white\" id=\"listado-categoria\"></p>\n            </div>\n            \n            <div>\n              <h3 class=\"text-sm font-medium text-gray-500 dark:text-gray-400\">{animales}</h3>\n              <p class=\"mt-1 text-sm text-gray-900 dark:text-white\" id=\"listado-animales-count\">0</p>\n            </div>\n            \n            <div>\n              <h3 class=\"text-sm font-medium text-gray-500 dark:text-gray-400\">{creado}</h3>\n              <p class=\"mt-1 text-sm text-gray-900 dark:text-white\" id=\"listado-fecha\"></p>\n            </div>\n          </div>\n          \n          <div class=\"flex justify-between items-center mb-3\">\n            <h3 class=\"text-lg font-medium text-gray-900 dark:text-white\">{animales}</h3>\n            <button id=\"guardar-cambios\" class=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-lime-500 hover:bg-lime-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-lime-500\">\n              <svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\"></path>\n              </svg>\n              Guardar confirmaciones\n            </button>\n          </div>\n          \n          <!-- Mensaje de éxito al guardar -->\n          <div id=\"mensaje-exito\" class=\"mb-3 p-2 bg-green-100 text-green-700 rounded-md hidden\">\n            Cambios guardados correctamente\n          </div>\n          \n          <!-- Mensaje de error al guardar -->\n          <div id=\"mensaje-error\" class=\"mb-3 p-2 bg-red-100 text-red-700 rounded-md hidden\">\n            Error al guardar los cambios\n          </div>\n          \n          <div id=\"empty-message\" class=\"py-8 text-center hidden\">\n            <p class=\"text-gray-500\">{vacio}</p>\n          </div>\n          \n          <div id=\"animals-table\" class=\"overflow-x-auto hidden\">\n            <table class=\"min-w-full divide-y divide-gray-300 dark:divide-gray-700\">\n              <thead class=\"bg-gray-50 dark:bg-gray-700\">\n                <tr>\n                  <th scope=\"col\" class=\"py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 dark:text-white sm:pl-6\">\n                    {colNombre}\n                  </th>\n                  <th scope=\"col\" class=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white\">\n                    {colCodigo}\n                  </th>\n                  <th scope=\"col\" class=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white\">\n                    {colExplotacion}\n                  </th>\n                  <th scope=\"col\" class=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white\">\n                    {colGenero}\n                  </th>\n                  <th scope=\"col\" class=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white\">\n                    {colEstado}\n                  </th>\n                  <th scope=\"col\" class=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900 dark:text-white\">\n                    {colObservaciones}\n                  </th>\n                </tr>\n              </thead>\n              <tbody class=\"divide-y divide-gray-200 dark:divide-gray-700 bg-white dark:bg-gray-800\" id=\"animals-container\">\n                <!-- Los animales se cargarán con JavaScript -->\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</MainLayout>\n\n<!-- Importaciones para PDF (misma estructura que en la ficha de animal) -->\n<script is:inline src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js\"></script>\n<script is:inline src=\"https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js\"></script>\n<script is:inline>\n  // Aseguramos que autoTable esté disponible globalmente\n  window.jsPDF = window.jspdf.jsPDF;\n  window.autoTable = function() {\n    const doc = arguments[0];\n    if (typeof doc.autoTable === 'function') {\n      doc.autoTable.apply(doc, Array.prototype.slice.call(arguments, 1));\n    } else if (window.jspdf && window.jspdf.jspdf && typeof window.jspdf.jspdf.autoTable === 'function') {\n      window.jspdf.jspdf.autoTable.apply(doc, Array.prototype.slice.call(arguments, 1));\n    } else {\n      console.error('autoTable function not found');\n    }\n  };\n</script>\n\n<script>\n  // Importar el servicio de listados y sistema de traducciones\n  import * as listadosService from '../../services/listados-service';\n  import { getCurrentLanguage, t } from '../../i18n/config';\n  \n  // Forzar el idioma catalán en toda la página\n  function forceLanguage() {\n    try {\n      // Forzar catalán en localStorage\n      localStorage.setItem('userLanguage', 'ca');\n      console.log('Listado Detail: Forzando idioma catalán en toda la página');\n    } catch (error) {\n      console.error('Error al forzar idioma:', error);\n    }\n  }\n  \n  // Función para actualizar todas las traducciones en la página\n  function updateAllTranslations() {\n    try {\n      // Forzar catalán siempre\n      forceLanguage();\n      const currentLang = 'ca'; // Forzar catalán directamente\n      console.log('Listado Detail: Actualizando traducciones al idioma:', currentLang);\n      \n      // Traducir el título de la página\n      const pageTitle = document.getElementById('page-title');\n      if (pageTitle) {\n        pageTitle.textContent = currentLang === 'ca' ? \"Detalls del Llistat\" : \"Detalles del Listado\";\n      }\n      \n      // Traducir otros elementos estáticos\n      const elementosTraducibles = [\n        { id: 'btn-back', es: 'Volver a Listados', ca: 'Tornar a Llistats' },\n        { id: 'btn-edit', es: 'Editar Listado', ca: 'Editar Llistat' },\n        { id: 'export-btn-text', es: 'Exportar a PDF', ca: 'Exportar a PDF' },\n        { selector: '.campo-categoria', es: 'Categoría', ca: 'Categoria' },\n        { selector: '.campo-animales', es: 'Animales', ca: 'Animals' },\n        { selector: '.campo-creado', es: 'Creado el', ca: 'Creat el' },\n        { selector: '.empty-message', es: 'No hay animales en este listado.', ca: 'No hi ha animals en aquest llistat.' },\n        { selector: '.col-nombre', es: 'Nombre', ca: 'Nom' },\n        { selector: '.col-codigo', es: 'Código', ca: 'Codi' },\n        { selector: '.col-explotacion', es: 'Explotación', ca: 'Explotació' },\n        { selector: '.col-genero', es: 'Género', ca: 'Gènere' },\n        { selector: '.col-estado', es: 'Confirmación', ca: 'Confirmació' },\n        { selector: '.col-observaciones', es: 'Observaciones', ca: 'Observacions' }\n      ];\n      \n      elementosTraducibles.forEach(elem => {\n        if (elem.id) {\n          const el = document.getElementById(elem.id);\n          if (el) el.textContent = currentLang === 'ca' ? elem.ca : elem.es;\n        } else if (elem.selector) {\n          document.querySelectorAll(elem.selector).forEach(el => {\n            el.textContent = currentLang === 'ca' ? elem.ca : elem.es;\n          });\n        }\n      });\n      \n      console.log('Traducciones actualizadas correctamente');\n    } catch (error) {\n      console.error('Error al actualizar traducciones:', error);\n    }\n  }\n\n  // Traducción directa para asegurar que todo esté en catalán\n  function translateAllStaticTexts() {\n    try {\n      console.log('Aplicando traducción directa a todos los textos estáticos');\n      \n      // Diccionario de traducciones específicas para listados\n      const traducciones = {\n        // Títulos y elementos principales\n        'Detalles del Listado': 'Detalls del Llistat',\n        'Volver a Listados': 'Tornar a Llistats',\n        'Editar Listado': 'Editar Llistat',\n        'Exportar a PDF': 'Exportar a PDF',\n        \n        // Campos y etiquetas\n        'Categoría': 'Categoria',\n        'Animales': 'Animals',\n        'Creado el': 'Creat el',\n        'No hay animales en este listado': 'No hi ha animals en aquest llistat',\n        \n        // Tabla de animales\n        'Nombre': 'Nom',\n        'Código': 'Codi',\n        'Explotación': 'Explotació',\n        'Género': 'Gènere',\n        'Confirmación': 'Confirmació',\n        'Observaciones': 'Observacions',\n        \n        // Mensajes\n        'Cargando detalles del listado...': 'Carregant detalls del llistat...',\n        'Error al cargar los detalles del listado': 'Error al carregar els detalls del llistat',\n        'Por favor, intenta nuevamente': 'Si us plau, torna-ho a intentar'\n      };\n      \n      // Función para traducir todo el contenido de texto del documento\n      function translateTextNodes(node) {\n        if (node.nodeType === 3) { // Nodo de texto\n          let content = node.nodeValue.trim();\n          if (content) {\n            // Buscar en el diccionario de traducciones\n            for (const [es, ca] of Object.entries(traducciones)) {\n              if (content.includes(es)) {\n                node.nodeValue = node.nodeValue.replace(es, ca);\n                console.log(`Traducido: '${es}' -> '${ca}'`);\n              }\n            }\n          }\n        } else {\n          // Recorrer hijos recursivamente\n          for (let i = 0; i < node.childNodes.length; i++) {\n            translateTextNodes(node.childNodes[i]);\n          }\n        }\n      }\n      \n      // Iniciar la traducción desde el cuerpo del documento\n      translateTextNodes(document.body);\n      \n      // También traducir título de la página\n      document.title = document.title.replace('Detalles del Listado', 'Detalls del Llistat');\n      \n      console.log('Traducción directa completada');\n    } catch (error) {\n      console.error('Error en traducción directa:', error);\n    }\n  }\n\n  // Ejecutar traducción inicial y escuchar cambios de idioma\n  document.addEventListener('DOMContentLoaded', () => {\n    // Forzar catalán\n    forceLanguage();\n    \n    // Traducción inicial\n    updateAllTranslations();\n    \n    // Traducción directa (más agresiva)\n    setTimeout(() => {\n      translateAllStaticTexts();\n    }, 500); // Dar tiempo a que se cargue el contenido dinámico\n    \n    // Detectar cambios de idioma (escuchar cambios en localStorage)\n    window.addEventListener('storage', function(e) {\n      if (e.key === 'userLanguage') {\n        updateAllTranslations();\n        setTimeout(translateAllStaticTexts, 200);\n      }\n    });\n  });\n  \n  document.addEventListener('DOMContentLoaded', async () => {\n    // Obtener el ID del listado de la URL\n    const urlParts = window.location.pathname.split('/');\n    const listadoId = urlParts[urlParts.length - 1];\n    \n    // Referencias a elementos del DOM\n    const loadingMessage = document.getElementById('loading-message');\n    const listadoContent = document.getElementById('listado-content');\n    const listadoTitle = document.getElementById('listado-title');\n    const listadoDescripcion = document.getElementById('listado-descripcion');\n    const listadoCategoria = document.getElementById('listado-categoria');\n    const listadoAnimalesCount = document.getElementById('listado-animales-count');\n    const listadoFecha = document.getElementById('listado-fecha');\n    const emptyMessage = document.getElementById('empty-message');\n    const animalsTable = document.getElementById('animals-table');\n    const animalsContainer = document.getElementById('animals-container');\n    \n    try {\n      // Obtener los detalles del listado\n      const listado = await listadosService.getListado(listadoId);\n      \n      if (listado) {\n        // Actualizar el título y descripción\n        if (listadoTitle) listadoTitle.textContent = listado.nombre || '';\n        if (listadoDescripcion) listadoDescripcion.textContent = listado.descripcion || '';\n        \n        // Actualizar los detalles del listado\n        if (listadoCategoria) {\n          // Convertir la categoría a un nombre legible en español\n          let categoriaTexto = '-';\n          switch(listado.categoria) {\n            case 'vaccination':\n            case 'vacunacion':\n              categoriaTexto = 'Vacunación';\n              break;\n            case 'treatment':\n            case 'tratamiento':\n              categoriaTexto = 'Tratamiento';\n              break;\n            case 'inspection':\n            case 'inspeccion':\n              categoriaTexto = 'Inspección';\n              break;\n            case 'other':\n            case 'otro':\n              categoriaTexto = 'Otro';\n              break;\n            default:\n              categoriaTexto = listado.categoria || '-';\n          }\n          listadoCategoria.textContent = categoriaTexto;\n        }\n        if (listadoAnimalesCount) listadoAnimalesCount.textContent = listado.animales?.length || 0;\n        if (listadoFecha) listadoFecha.textContent = listado.created_at ? new Date(listado.created_at).toLocaleDateString() : '-';\n        \n        // Mostrar los animales si hay\n        if (listado.animales && listado.animales.length > 0) {\n          if (emptyMessage) emptyMessage.classList.add('hidden');\n          if (animalsTable) animalsTable.classList.remove('hidden');\n          \n          // Limpiar el contenedor\n          if (animalsContainer) animalsContainer.innerHTML = '';\n          \n          // Crear una fila para cada animal\n          listado.animales.forEach(animal => {\n            const row = document.createElement('tr');\n            \n            // Determinar el género en formato legible\n            const genero = animal.genere === 'M' ? 'Toro' : 'Vaca';\n            \n            // Determinar el estado en formato legible\n            const estado = animal.estado === 'OK' ? 'Activo' : 'Inactivo';\n            \n            // Crear las celdas\n            row.innerHTML = `\n              <td class=\"whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 dark:text-white sm:pl-6\">\n                ${animal.nom || ''}\n              </td>\n              <td class=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400\">\n                ${animal.id || ''}\n              </td>\n              <td class=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400\">\n                ${animal.explotacio || ''}\n              </td>\n              <td class=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400\">\n                ${genero}\n              </td>\n              <td class=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400\">\n                <select class=\"estado-animal border-gray-300 rounded-md text-sm\" data-animal-id=\"${animal.id}\">\n                  <option value=\"OK\" ${animal.confirmacion === 'OK' ? 'selected' : ''}>OK</option>\n                  <option value=\"NO\" ${animal.confirmacion === 'NO' || !animal.confirmacion ? 'selected' : ''}>NO</option>\n                </select>\n              </td>\n              <td class=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500 dark:text-gray-400\">\n                <input type=\"text\" class=\"observaciones-animal border-gray-300 rounded-md text-sm w-full\" data-animal-id=\"${animal.id}\" placeholder=\"Observaciones\" value=\"${animal.observaciones || ''}\">\n              </td>\n            `;\n            \n            // Añadir la fila a la tabla\n            if (animalsContainer) animalsContainer.appendChild(row);\n          });\n        } else {\n          // Mostrar mensaje de que no hay animales\n          if (emptyMessage) emptyMessage.classList.remove('hidden');\n          if (animalsTable) animalsTable.classList.add('hidden');\n        }\n        \n        // Ocultar el mensaje de carga y mostrar el contenido\n        if (loadingMessage) loadingMessage.classList.add('hidden');\n        if (listadoContent) listadoContent.classList.remove('hidden');\n        \n        // Configurar el botón de guardar cambios\n        const guardarCambiosBtn = document.getElementById('guardar-cambios');\n        const mensajeExito = document.getElementById('mensaje-exito');\n        const mensajeError = document.getElementById('mensaje-error');\n        \n        if (guardarCambiosBtn) {\n          guardarCambiosBtn.addEventListener('click', async () => {\n            try {\n              // Recopilar los datos de los animales\n              const animalesActualizados = [];\n              \n              // Obtener todos los elementos de estado y observaciones\n              const estadoSelects = document.querySelectorAll('.estado-animal');\n              const observacionesInputs = document.querySelectorAll('.observaciones-animal');\n              \n              // Crear array con los datos de los animales\n              estadoSelects.forEach((select, index) => {\n                const animalId = parseInt(select.getAttribute('data-animal-id'));\n                const estado = select.value;\n                const observaciones = observacionesInputs[index]?.value || '';\n                \n                animalesActualizados.push({\n                  id: animalId,\n                  confirmacion: estado,\n                  observaciones: observaciones\n                });\n                \n                console.log(`Animal ${animalId}: confirmacion=${estado}, observaciones=${observaciones}`);\n              });\n              \n              // Enviar los datos al servidor\n              const response = await listadosService.updateListadoAnimales(listadoId, animalesActualizados);\n              \n              // Mostrar mensaje de éxito\n              if (mensajeExito) {\n                mensajeExito.classList.remove('hidden');\n                mensajeError.classList.add('hidden');\n                \n                // Actualizar el contador de animales confirmados\n                const confirmados = animalesActualizados.filter(a => a.confirmacion === 'OK').length;\n                const total = animalesActualizados.length;\n                const listadoAnimalesCount = document.getElementById('listado-animales-count');\n                if (listadoAnimalesCount) {\n                  listadoAnimalesCount.innerHTML = `<span class=\"text-green-600 font-medium\">${confirmados}</span>/${total}`;\n                }\n                \n                // Ocultar mensaje después de 3 segundos\n                setTimeout(() => {\n                  mensajeExito.classList.add('hidden');\n                }, 3000);\n              }\n            } catch (error) {\n              console.error('Error al guardar los cambios:', error);\n              \n              // Mostrar mensaje de error\n              if (mensajeError) {\n                mensajeError.classList.remove('hidden');\n                mensajeExito.classList.add('hidden');\n                \n                // Ocultar mensaje después de 3 segundos\n                setTimeout(() => {\n                  mensajeError.classList.add('hidden');\n                }, 3000);\n              }\n            }\n          });\n        }\n        \n        // Manejar la exportación a PDF\n        const exportPdfBtn = document.getElementById('export-listado-pdf');\n        if (exportPdfBtn) {\n          exportPdfBtn.addEventListener('click', async () => {\n            // Referencias a elementos de estado\n            const statusEl = document.getElementById('pdf-export-status');\n            const btnTextEl = document.getElementById('export-btn-text');\n            const originalBtnText = btnTextEl.textContent;\n            \n            // Mostrar estado de carga\n            if (statusEl) {\n              statusEl.textContent = 'Generando PDF...';\n              statusEl.className = 'mt-2 text-sm font-medium text-blue-600';\n              statusEl.classList.remove('hidden');\n            }\n            \n            // Cambiar texto del botón\n            if (btnTextEl) {\n              btnTextEl.textContent = 'Procesando...';\n            }\n            \n            // Deshabilitar botón durante la generación\n            exportPdfBtn.disabled = true;\n            exportPdfBtn.classList.add('opacity-70', 'cursor-not-allowed');\n            \n            try {\n              // Verificar si jsPDF está disponible\n              if (typeof window.jspdf === 'undefined' || typeof window.jsPDF === 'undefined') {\n                throw new Error('No se pudo cargar la librería jsPDF. Por favor, recargue la página e inténtelo de nuevo.');\n              }\n\n              // Obtener el idioma actual\n              const currentLang = localStorage.getItem('userLanguage') || 'es';\n              \n              // Crear un nuevo documento PDF - igual que en la ficha de animal\n              const { jsPDF } = window.jspdf;\n              const doc = new jsPDF();\n              \n              // Obtener el nombre del listado\n              const listadoTitle = document.getElementById('listado-title');\n              const listadoName = listadoTitle ? listadoTitle.textContent.replace('Detalles del Listado: ', '').trim() : 'Listado';\n              \n              // Título del PDF\n              const title = currentLang === 'ca' ? `Llistat - ${listadoName}` : `Listado - ${listadoName}`;\n              \n              // Añadir fecha en la esquina superior derecha\n              doc.setFontSize(10);\n              doc.setTextColor(100, 100, 100);\n              const date = new Date().toLocaleDateString(currentLang === 'ca' ? 'ca-ES' : 'es-ES');\n              doc.text(\n                currentLang === 'ca' ? `Data: ${date}` : `Fecha: ${date}`, \n                195, 15, { align: 'right' }\n              );\n              \n              // Definimos la posición inicial para el resumen\n              const logoY = 10;\n              const logoHeight = 35;\n              let contentStartY = logoY + logoHeight + 20;\n              \n              // Añadir logo oficial de Masclet Imperi\n              try {\n                // Cargar el logo desde la ruta pública\n                const img = new Image();\n                img.crossOrigin = 'Anonymous';\n                img.src = '/images/logo_masclet.png';\n                \n                // Esperar a que la imagen se cargue\n                await new Promise((resolve, reject) => {\n                  img.onload = resolve;\n                  img.onerror = (e) => {\n                    console.error('Error al cargar la imagen:', e);\n                    reject(e);\n                  };\n                });\n                \n                // Tamaño y posicionamiento del logo (centrado arriba)\n                const pageWidth = doc.internal.pageSize.getWidth();\n                const logoWidth = 60; // Ancho del logo\n                const logoHeight = 35; // Altura proporcional\n                const logoX = (pageWidth / 2) - (logoWidth / 2); // Centrado\n                \n                // Añadir la imagen al PDF\n                doc.addImage(img, 'PNG', logoX, logoY, logoWidth, logoHeight);\n                \n                // Añadir el título debajo del logo\n                doc.setFontSize(20);\n                doc.setTextColor(40, 40, 40);\n                doc.text(title, pageWidth / 2, logoY + logoHeight + 10, { align: 'center' });\n                \n                contentStartY = logoY + logoHeight + 25;\n              } catch (error) {\n                console.error('Error al cargar el logo:', error);\n                \n                // Si hay error, usamos un título simple centrado sin logo\n                const pageWidth = doc.internal.pageSize.getWidth();\n                doc.setFontSize(20);\n                doc.setTextColor(40, 40, 40);\n                doc.text(title, pageWidth / 2, 30, { align: 'center' });\n                \n                contentStartY = 45;\n              }\n              \n              // Añadir datos básicos del listado\n              doc.setFontSize(14);\n              doc.setTextColor(50, 50, 50);\n              doc.text(currentLang === 'ca' ? 'Dades del llistat:' : 'Datos del listado:', 20, contentStartY);\n              \n              // Recopilar datos del listado\n              const listadoCategoria = document.getElementById('listado-categoria');\n              const listadoAnimalesCount = document.getElementById('listado-animales-count');\n              const listadoFecha = document.getElementById('listado-fecha');\n              const listadoDescripcion = document.getElementById('listado-descripcion');\n              \n              const datos = [\n                [currentLang === 'ca' ? 'Nom' : 'Nombre', listadoName],\n                [currentLang === 'ca' ? 'Categoria' : 'Categoría', listadoCategoria ? listadoCategoria.textContent : '-'],\n                [currentLang === 'ca' ? 'Animals' : 'Animales', listadoAnimalesCount ? listadoAnimalesCount.textContent : '0'],\n                [currentLang === 'ca' ? 'Data de creació' : 'Fecha de creación', listadoFecha ? listadoFecha.textContent : '-'],\n                [currentLang === 'ca' ? 'Descripció' : 'Descripción', listadoDescripcion ? listadoDescripcion.textContent : '-']\n              ];\n              \n              // Añadir tabla con datos del listado\n              window.autoTable(doc, {\n                startY: contentStartY + 10,\n                head: [[currentLang === 'ca' ? 'Camp' : 'Campo', currentLang === 'ca' ? 'Valor' : 'Valor']],\n                body: datos,\n                theme: 'grid',\n                styles: { \n                  fontSize: 9, \n                  cellPadding: 2,\n                  lineWidth: 0.1,\n                  lineColor: [200, 200, 200],\n                  minCellHeight: 8,\n                  valign: 'middle'\n                },\n                headStyles: { \n                  fillColor: [126, 211, 33], // Color verde lima corporativo\n                  textColor: 255,\n                  fontStyle: 'bold',\n                  minCellHeight: 10\n                },\n                alternateRowStyles: {\n                  fillColor: [245, 245, 245]\n                },\n                columnStyles: {\n                  0: { cellWidth: 40, halign: 'left' }, // Columna de \"Campo\" más estrecha\n                  1: { cellWidth: 'auto', halign: 'left' } // Columna de \"Valor\" usa el resto del espacio\n                }\n              });\n              \n              // Posición para la tabla de animales\n              let nextY = doc.previousAutoTable.finalY + 15;\n              \n              // Obtener los datos de los animales\n              const animalesRows = [];\n              const animalesContainer = document.querySelector('#animals-table tbody');\n              \n              if (animalesContainer) {\n                const animalesFilas = animalesContainer.querySelectorAll('tr');\n                let hayAnimales = false;\n                \n                animalesFilas.forEach(fila => {\n                  // Verificar si es una fila de datos (no de mensaje \"no hay animales\")\n                  const celdas = fila.querySelectorAll('td');\n                  if (celdas.length >= 4 && !fila.textContent.includes('No hay animales')) {\n                    hayAnimales = true;\n                    // Extraer información de las celdas: nombre, código, explotación, género, confirmación y observaciones\n                    const nombre = celdas[0]?.textContent?.trim() || 'N/A';\n                    const codigo = celdas[1]?.textContent?.trim() || 'N/A';\n                    const explotacion = celdas[2]?.textContent?.trim() || 'N/A';\n                    const genero = celdas[3]?.textContent?.trim() || 'N/A';\n                    // Ponemos NO/OK en la columna de confirmación para que el operario solo tenga que marcar la opción correcta\n                    const confirmacion = 'NO/OK';\n                    // Dejamos observaciones vacía para que puedan rellenarla manualmente\n                    const observaciones = '';\n                    \n                    // Añadir a los datos de la tabla\n                    animalesRows.push([nombre, codigo, explotacion, genero, confirmacion, observaciones]);\n                  }\n                });\n                \n                // Si hay animales, añadir la tabla\n                if (hayAnimales && animalesRows.length > 0) {\n                  // Título de la sección de animales\n                  doc.setFontSize(14);\n                  doc.setTextColor(50, 50, 50);\n                  doc.text(currentLang === 'ca' ? 'Animals al llistat:' : 'Animales en el listado:', 20, nextY);\n                  \n                  // Cabecera de la tabla de animales\n                  const animalesHead = [\n                    currentLang === 'ca' ? 'Nom' : 'Nombre', \n                    currentLang === 'ca' ? 'Codi' : 'Código', \n                    currentLang === 'ca' ? 'Explotació' : 'Explotación', \n                    currentLang === 'ca' ? 'Gènere' : 'Género',\n                    currentLang === 'ca' ? 'Confirmació' : 'Confirmación',\n                    currentLang === 'ca' ? 'Observacions' : 'Observaciones'\n                  ];\n                  \n                  // Añadir tabla de animales con anchos de columna ajustados\n                  window.autoTable(doc, {\n                    startY: nextY + 5,\n                    head: [animalesHead],\n                    body: animalesRows,\n                    theme: 'grid',\n                    styles: { \n                      fontSize: 8, \n                      cellPadding: 2,\n                      lineWidth: 0.1,\n                      lineColor: [200, 200, 200],\n                      minCellHeight: 8,\n                      valign: 'middle'\n                    },\n                    headStyles: { \n                      fillColor: [126, 211, 33], // Color verde lima corporativo\n                      textColor: 255,\n                      fontStyle: 'bold',\n                      minCellHeight: 10\n                    },\n                    alternateRowStyles: {\n                      fillColor: [245, 245, 245]\n                    },\n                    columnStyles: {\n                      0: { cellWidth: 25 }, // Nombre - ancho ajustado\n                      1: { cellWidth: 20 }, // Código - ancho ajustado\n                      2: { cellWidth: 25 }, // Explotación - ancho ajustado\n                      3: { cellWidth: 15 }, // Género - ancho más pequeño\n                      4: { cellWidth: 25 }, // Confirmación - espacio para marcar\n                      5: { cellWidth: 'auto' } // Observaciones - usa el resto del espacio disponible\n                    }\n                  });\n                  \n                  nextY = doc.previousAutoTable.finalY + 10;\n                }\n              }\n              \n              // Añadir pie de página\n              const pageCount = doc.internal.getNumberOfPages();\n              for (let i = 1; i <= pageCount; i++) {\n                doc.setPage(i);\n                doc.setFontSize(8);\n                doc.setTextColor(150, 150, 150);\n                const pageWidth = doc.internal.pageSize.getWidth();\n                doc.text(\n                  'Masclet Imperi - Sistema de Gestión Ganadera', \n                  pageWidth / 2, \n                  doc.internal.pageSize.getHeight() - 10, \n                  { align: 'center' }\n                );\n                doc.text(\n                  `Página ${i} de ${pageCount}`, \n                  pageWidth / 2, \n                  doc.internal.pageSize.getHeight() - 5, \n                  { align: 'center' }\n                );\n              }\n              \n              // Guardar el PDF\n              doc.save(`listado_${listadoName.replace(/\\s+/g, '_').toLowerCase()}_${new Date().toISOString().split('T')[0]}.pdf`);\n              \n              // Mostrar mensaje de éxito\n              if (statusEl) {\n                statusEl.textContent = 'PDF generado correctamente';\n                statusEl.className = 'mt-2 text-sm font-medium text-green-600';\n              }\n                          } catch (error) {\n                console.error('Error al generar el PDF:', error);\n                \n                // Mostrar error en la interfaz\n                if (statusEl) {\n                  statusEl.textContent = `Error: ${error.message || 'No se pudo generar el PDF'}`;\n                  statusEl.className = 'mt-2 text-sm font-medium text-red-600';\n                }\n              } finally {\n                // Restaurar botón\n                if (btnTextEl) {\n                  btnTextEl.textContent = originalBtnText;\n                }\n                \n                // Habilitar botón\n                exportPdfBtn.disabled = false;\n                exportPdfBtn.classList.remove('opacity-70', 'cursor-not-allowed');\n                \n                // Ocultar mensaje de estado después de 5 segundos si fue exitoso\n                if (statusEl && statusEl.classList.contains('text-green-600')) {\n                  setTimeout(() => {\n                    statusEl.classList.add('hidden');\n                  }, 5000);\n                }\n              }\n          });\n        }\n      }\n    } catch (error) {\n      console.error('Error al cargar los detalles del listado:', error);\n      if (loadingMessage) {\n        loadingMessage.innerHTML = '<p class=\"text-red-500\">Error al cargar los detalles del listado. Por favor, intenta nuevamente.</p>';\n      }\n    }\n  });\n</script>\n"],"names":["$$createAstro","$$createComponent","Astro","$$render","$$renderComponent","MainLayout","$$result","$$maybeRenderHead"],"mappings":";;;;;;;;;;AAAA,MAAA,UAAAA,WAAA,EAAA;AAAA,MAAA,IAAA,GAAAC,eAAA,CAAA,OAAA,QAAA,EAAA,SAAA,OAAA,KAAA;AAAA,EAAA,MAAAC,MAAA,GAAA,QAAA,CAAA,WAAA,CAAA,OAAA,EAAA,SAAA,OAAA,CAAA;AAAA,EAAAA,OAAA,IAAA,GAAA,IAAA;AAKA,EAAA,MAAM,cAAc,kBAAmB,EAAA;AAGvC,EAAM,MAAA,EAAE,EAAG,EAAA,GAAIA,MAAM,CAAA,MAAA;AAGrB,EAAAA,MAAAA,CAAM,MAAM,WAAc,GAAA,CAAA,cAAA,CAAA;AAG1B,EAAM,MAAA,MAAA,GAAS,WAAgB,KAAA,IAAA,GAAO,sBAAyB,GAAA,qBAAA;AAC/D,EAAM,MAAA,QAAA,GAAW,WAAgB,KAAA,IAAA,GAAO,kCAAqC,GAAA,kCAAA;AAC7E,EAAM,MAAA,MAAA,GAAS,WAAgB,KAAA,IAAA,GAAO,mBAAsB,GAAA,mBAAA;AAE5D,EAAM,MAAA,SAAA,GAAY,WAAgB,KAAA,IAAA,GAAO,cAAc,GAAA,WAAA;AACvD,EAAM,MAAA,QAAA,GAAW,WAAgB,KAAA,IAAA,GAAO,UAAa,GAAA,SAAA;AACrD,EAAM,MAAA,MAAA,GAAS,WAAgB,KAAA,IAAA,GAAO,WAAc,GAAA,UAAA;AACpD,EAAM,MAAA,KAAA,GAAQ,WAAgB,KAAA,IAAA,GAAO,kCAAqC,GAAA,qCAAA;AAC1E,EAAM,MAAA,SAAA,GAAY,WAAgB,KAAA,IAAA,GAAO,QAAW,GAAA,KAAA;AACpD,EAAM,MAAA,SAAA,GAAY,WAAgB,KAAA,IAAA,GAAO,WAAW,GAAA,MAAA;AACpD,EAAM,MAAA,cAAA,GAAiB,WAAgB,KAAA,IAAA,GAAO,gBAAgB,GAAA,eAAA;AAC9D,EAAM,MAAA,SAAA,GAAY,WAAgB,KAAA,IAAA,GAAO,WAAW,GAAA,WAAA;AACpD,EAAM,MAAA,SAAA,GAAY,WAAgB,KAAA,IAAA,GAAO,iBAAiB,GAAA,gBAAA;AAC1D,EAAM,MAAA,gBAAA,GAAmB,WAAgB,KAAA,IAAA,GAAO,eAAkB,GAAA,cAAA;AA3BlE,EAAA,OAAAC,2BAAA,UA4IE,CAAA,CAAA,EAAA,EAAA,CAAA;;;;;;;;;;;;;AA5IF,WAAA,CAAA,CAAA,CAAA,CAAA,EAAAC,eAAA,CAAA,QAAA,EAAA,YAAA,EAAAC,YAAA,EAAA,EA+BY,OA/BZ,EAAA,MAAA,EAAA,EAAA,EAAA,SAAA,EAAA,OAAAC,SAAA,KAAAH,cAAA,CAAA,CAAA,EAAAI,eAAAD,CAAA,CAAA,CAAA,mNAAA,EAoCW,MAAM,CAAA,8XAAA,EAUN,MAAM,CAAA,0gBAAA,EAekC,QAAQ,CAAA,6LAAA,EAOqB,SAAS,CAAA,sKAAA,EAKT,QAAQ,CAAA,4KAAA,EAKR,MAAM,CAAA,qNAAA,EAMX,QAAQ,CAAA;;;;;;AAoB7C,yFAAA,EAAA,KAAK,CAQtB,8SAAA,EAAA,SAAS,CAGT,0GAAA,EAAA,SAAS,CAGT,0GAAA,EAAA,cAAc,CAGd,0GAAA,EAAA,SAAS,CAGT,0GAAA,EAAA,SAAS,CAGT,0GAAA,EAAA,gBAAgB,+OAanC,CAAA,CAAA;AA5IF,CAAA,EAAA,iFAAA,MAAA,CAAA;;;;;;;;;;;;;;;;"}