{"version":3,"file":"imports.astro.mjs","sources":["../../../src/services/importService.ts","../../../src/components/imports/ImportForm.tsx","../../../src/components/imports/ImportHistory.tsx","../../../src/components/imports/ImportContainer.tsx","../../../src/services/adminService.ts","../../../src/components/admin/ResetDatabaseButton.tsx","../../../src/pages/imports/index.astro"],"sourcesContent":["// Servicio para gestionar las importaciones\n\n// Importar servicios y configuraciones\nimport apiService from './apiService';\nimport apiConfig from '../config/apiConfig';\n\n// Interfaces y tipos\nexport interface ImportResult {\n  // Campos originales de la interfaz\n  success: boolean;\n  message: string;\n  total_processed?: number;\n  total_imported?: number;\n  total_errors?: number;\n  errors?: string[];\n  imported_ids?: number[];\n  \n  // Campos adicionales que devuelve el backend\n  id?: number;\n  file_name?: string;\n  file_size?: number;\n  file_type?: string;\n  status?: 'pending' | 'processing' | 'completed' | 'failed';\n  records_count?: number;\n  created_at?: string;\n  updated_at?: string;\n}\n\n// Estados posibles de una importación\nexport enum ImportStatus {\n  PENDING = \"pending\",\n  PROCESSING = \"processing\",\n  COMPLETED = \"completed\",\n  FAILED = \"failed\"\n}\n\n// Interfaces para el historial de importaciones\nexport interface ImportHistoryItem {\n  id: number;\n  filename: string;\n  user_id: number;\n  user_name?: string;\n  import_type: string;\n  total_records: number;\n  successful_records: number;\n  failed_records: number;\n  status: 'completed' | 'failed' | 'processing' | 'pending';\n  created_at: string;\n  updated_at: string;\n}\n\n/**\n * Verifica si el usuario está autenticado y tiene permisos para importar\n */\nconst checkAuthStatus = (): { isAuthenticated: boolean; canImport: boolean; message: string } => {\n  // En desarrollo asumimos que el usuario está autenticado y tiene permiso\n  return { \n    isAuthenticated: true,\n    canImport: true,\n    message: ''\n  };\n};\n\n/**\n * Obtener token de autenticación\n */\nconst getAuthToken = (): string | null => {\n  try {\n    return localStorage.getItem('auth_token');\n  } catch (error) {\n    console.error('Error al obtener token:', error);\n    return null;\n  }\n};\n\n// Interfaces para filtros de historial\nexport interface ImportHistoryFilters {\n  status?: ImportStatus;\n  startDate?: string;\n  endDate?: string;\n  fileName?: string;\n  page?: number;\n  limit?: number;\n}\n\n// Respuesta paginada del historial\nexport interface ImportHistoryResponse {\n  items: ImportHistoryItem[];\n  total: number;\n  page: number;\n  limit: number;\n  totalPages: number;\n}\n\n// Servicio de importaciones\nconst importService = {\n  /**\n   * Obtiene el historial de importaciones con filtros opcionales\n   * @param filters Filtros a aplicar (opcionales)\n   */\n  async getImportHistory(filters: ImportHistoryFilters = {}): Promise<ImportHistoryResponse> {\n    try {\n      // Construir query string para los filtros\n      const queryParams = new URLSearchParams();\n      \n      if (filters.status) {\n        queryParams.append('status', filters.status);\n      }\n      \n      if (filters.startDate) {\n        queryParams.append('start_date', filters.startDate);\n      }\n      \n      if (filters.endDate) {\n        queryParams.append('end_date', filters.endDate);\n      }\n      \n      if (filters.fileName) {\n        queryParams.append('file_name', filters.fileName);\n      }\n      \n      // Paginación\n      const page = filters.page || 1;\n      const limit = filters.limit || 10;\n      queryParams.append('page', page.toString());\n      queryParams.append('limit', limit.toString());\n      \n      // Usamos apiService que funciona correctamente con todos los demás endpoints\n      console.log(`[ImportService] Consultando historial de importaciones`);\n      \n      // Usamos el mismo patrón que los demás componentes funcionales\n      const endpoint = `/imports/?${queryParams.toString()}`;\n      const response = await apiService.get(endpoint);\n      \n      // apiService devuelve directamente los datos (no hay response.data)\n      // apiService.get devuelve directamente el objeto con los datos\n      // Lo vemos en la consola: items, total, page, size, totalPages\n      \n      // Si hay datos, convertirlos al formato esperado por el componente\n      if (response && response.items) {\n        return {\n          items: response.items || [],\n          total: response.total || 0,\n          page: response.page || 1,\n          limit: response.size || 10, // En la API se llama 'size', no 'limit'\n          totalPages: response.totalPages || 1\n        };\n      } else {\n        // Si no hay datos, informar de forma clara\n        console.error('Error: Formato de respuesta inesperado:', response);\n        \n        // Devolver una respuesta vacía pero válida\n        return {\n          items: [],\n          total: 0,\n          page: 1,\n          limit: 10,\n          totalPages: 1\n        };\n      }\n    } catch (error: any) {\n      console.error('Error general al obtener historial de importaciones:', error);\n      return {\n        items: [],\n        total: 0,\n        page: 1,\n        limit: 10,\n        totalPages: 1\n      };\n    }\n  },\n  \n  /**\n   * Importa animales desde un archivo CSV\n   * @param formData FormData con el archivo y parámetros adicionales\n   */\n  async importAnimals(formData: FormData): Promise<ImportResult> {\n    try {\n      // Verificar autenticación\n      const authStatus = checkAuthStatus();\n      if (!authStatus.isAuthenticated || !authStatus.canImport) {\n        return {\n          success: false,\n          message: authStatus.message,\n          total_processed: 0,\n          total_imported: 0,\n          total_errors: 1,\n          errors: [authStatus.message]\n        };\n      }\n      \n      // Obtener token de autenticación\n      const token = getAuthToken();\n      console.log('Token de autenticación:', token ? 'Presente' : 'No hay token');\n      \n      // Configurar headers con token de autenticación\n      const headers: HeadersInit = {};\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      } else {\n        // Para desarrollo, usar token de desarrollo\n        headers['Authorization'] = 'Bearer test_token_for_development';\n        console.log('Usando token de desarrollo para pruebas');\n      }\n      \n      // Extraer información del archivo para depuración\n      let fileInfo = 'FormData sin archivo';\n      const fileEntry = formData.get('file');\n      if (fileEntry instanceof File) {\n        fileInfo = `Archivo: ${fileEntry.name}, ${fileEntry.size} bytes, tipo: ${fileEntry.type}`;\n      }\n      \n      // Usar la URL del backend de configuración centralizada\n      const BACKEND_URL = apiConfig.backendURL;\n      console.log('Enviando petición directa al backend:', `${BACKEND_URL}/api/v1/imports/csv`);\n      console.log('Contenido del FormData:', fileInfo);\n      \n      // Usar directamente la URL absoluta al backend en lugar de depender del proxy\n      try {\n        const response = await fetch(`${BACKEND_URL}/api/v1/imports/csv`, {\n          method: 'POST',\n          body: formData,\n          headers: headers\n        });\n        \n        if (response.ok) {\n          const data = await response.json();\n          console.log('Respuesta exitosa desde el backend:', data);\n          return data;\n        }\n        \n        const errorText = await response.text();\n        console.error('Error en la petición al backend:', {\n          status: response.status,\n          statusText: response.statusText,\n          error: errorText\n        });\n        \n        return {\n          success: false,\n          message: `Error HTTP ${response.status}: ${response.statusText}`,\n          total_processed: 0,\n          total_imported: 0,\n          total_errors: 1,\n          errors: [`Fallo al comunicarse con el backend: ${response.status}`]\n        };\n      } catch (fetchError: any) {\n        console.error('Error en la petición fetch:', fetchError);\n        return {\n          success: false,\n          message: `Error de red: ${fetchError.message}`,\n          total_processed: 0,\n          total_imported: 0,\n          total_errors: 1,\n          errors: ['Error de conexión con el servidor']\n        };\n      }\n    } catch (error: any) {\n      console.error('Error general al importar animales:', error);\n      return {\n        success: false,\n        message: error.message || 'Error desconocido al importar animales',\n        total_processed: 0,\n        total_imported: 0,\n        total_errors: 1,\n        errors: [error.message || 'Error desconocido']\n      };\n    }\n  },\n\n  /**\n   * Descarga la plantilla de animales\n   */\n  async downloadAnimalTemplate(): Promise<Blob> {\n    try {\n      // Datos de ejemplo para la plantilla\n      const exampleData = [\n        { \n          nom: 'NOMBRE_ANIMAL', \n          genere: 'F', \n          estado: 'OK', \n          alletar: '0',\n          mare: 'NOMBRE_MADRE',\n          pare: 'NOMBRE_PADRE',\n          quadra: 'NOMBRE_CUADRA',\n          cod: 'CODIGO',\n          num_serie: 'NUMERO_SERIE',\n          dob: 'DD/MM/YYYY'\n        }\n      ];\n      \n      // Convertir a CSV\n      const headers = Object.keys(exampleData[0]).join(',');\n      const rows = exampleData.map(item => Object.values(item).join(','));\n      const csvContent = [headers, ...rows].join('\\n');\n      \n      // Crear blob\n      return new Blob([csvContent], { type: 'text/csv;charset=utf-8' });\n    } catch (error: any) {\n      console.error('Error al generar plantilla:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Descarga la plantilla de partos\n   */\n  async downloadPartoTemplate(): Promise<Blob> {\n    try {\n      // Datos de ejemplo para la plantilla\n      const exampleData = [\n        { \n          nom_animal: 'NOMBRE_VACA', \n          date_part: 'DD/MM/YYYY', \n          genere_t: 'M', \n          estado_t: 'OK'\n        }\n      ];\n      \n      // Convertir a CSV\n      const headers = Object.keys(exampleData[0]).join(',');\n      const rows = exampleData.map(item => Object.values(item).join(','));\n      const csvContent = [headers, ...rows].join('\\n');\n      \n      // Crear blob\n      return new Blob([csvContent], { type: 'text/csv;charset=utf-8' });\n    } catch (error: any) {\n      console.error('Error al generar plantilla:', error);\n      throw error;\n    }\n  }\n};\n\nexport default importService;\n","import React, { useState, useRef, useEffect } from 'react';\nimport importService from '../../services/importService';\nimport type { ImportResult } from '../../services/importService';\n\n// Props para el componente ImportForm\ninterface ImportFormProps {\n  onImportComplete?: (result: ImportResult) => void;\n}\n\n/**\n * Componente para gestionar la importación de animales desde archivos CSV\n */\nconst ImportForm: React.FC<ImportFormProps> = ({ onImportComplete }) => {\n  // Referencias\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  // Estado\n  const [file, setFile] = useState<File | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [result, setResult] = useState<ImportResult | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [debugInfo, setDebugInfo] = useState<string>(\"\");\n  const [currentLang, setCurrentLang] = useState<string>('es');\n\n  // Traducciones\n  const translations = {\n    es: {\n      selectFile: \"Seleccionar archivo CSV\",\n      dragDrop: \"Arrastra un archivo CSV o haz clic para seleccionar\",\n      fileTooBig: \"El archivo es demasiado grande. Tamaño máximo: 10MB\",\n      selectFileFirst: \"Debes seleccionar un archivo CSV primero\",\n      mustBeCSV: \"El archivo debe tener extensión .csv\",\n      fileSelected: \"Archivo seleccionado\",\n      size: \"Tamaño\",\n      type: \"Tipo\",\n      bytes: \"bytes\"\n    },\n    ca: {\n      selectFile: \"Seleccionar arxiu CSV\",\n      dragDrop: \"Arrossega un arxiu CSV o fes clic per seleccionar\",\n      fileTooBig: \"L'arxiu és massa gran. Mida màxima: 10MB\",\n      selectFileFirst: \"Has de seleccionar un arxiu CSV primer\",\n      mustBeCSV: \"L'arxiu ha de tenir extensió .csv\",\n      fileSelected: \"Arxiu seleccionat\",\n      size: \"Mida\",\n      type: \"Tipus\",\n      bytes: \"bytes\"\n    }\n  };\n  \n  // Efecto para detectar cambios de idioma\n  useEffect(() => {\n    // Obtener el idioma inicial\n    const storedLang = localStorage.getItem('userLanguage') || 'es';\n    setCurrentLang(storedLang);\n\n    // Función para actualizar el idioma cuando cambia en localStorage\n    const handleLangChange = (e: StorageEvent) => {\n      if (e.key === 'userLanguage') {\n        setCurrentLang(e.newValue || 'es');\n      }\n    };\n\n    // Escuchar cambios\n    window.addEventListener('storage', handleLangChange);\n\n    // Limpiar\n    return () => {\n      window.removeEventListener('storage', handleLangChange);\n    };\n  }, []);\n\n\n\n  // Formato aceptado\n  const acceptedFormat = '.csv';\n  \n  // Manejador para seleccionar archivo\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (files && files.length > 0) {\n      setFile(files[0]);\n      setResult(null);\n      setError(null);\n      const t = translations[currentLang as keyof typeof translations] || translations.es;\n      setDebugInfo(`${t.fileSelected}: ${files[0].name}\\n${t.size}: ${files[0].size} ${t.bytes}\\n${t.type}: ${files[0].type}`);\n    }\n  };\n  \n  // Manejador para resetear todo\n  const handleReset = () => {\n    setFile(null);\n    setResult(null);\n    setError(null);\n    setDebugInfo(\"\");\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n  \n\n  \n  // Manejador para descargar plantilla\n  const handleDownloadTemplate = async () => {\n    try {\n      setLoading(true);\n      \n      // Descargar plantilla de animales\n      const blob = await importService.downloadAnimalTemplate();\n      const filename = 'plantilla_animales.csv';\n      \n      // Crear URL para descarga\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', filename);\n      document.body.appendChild(link);\n      link.click();\n      \n      // Limpiar\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(link);\n      \n    } catch (err: any) {\n      console.error('Error al descargar plantilla:', err);\n      setError(`Error al descargar plantilla: ${err.message || 'Error desconocido'}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Manejador para importar datos\n  const handleImport = async () => {\n    if (!file) {\n      setError(translations[currentLang as keyof typeof translations]?.selectFileFirst || translations.es.selectFileFirst);\n      return;\n    }\n    \n    // Validar que el archivo ha sido seleccionado correctamente\n    console.log('Archivo seleccionado:', file.name);\n    console.log('Tamaño del archivo:', file.size, 'bytes');\n    console.log('Tipo del archivo:', file.type);\n    \n    // Validar extensión del archivo\n    if (!file.name.toLowerCase().endsWith('.csv')) {\n      setError(translations[currentLang as keyof typeof translations]?.mustBeCSV || translations.es.mustBeCSV);\n      return;\n    }\n    \n    // Validar tamaño máximo (10MB)\n    const MAX_SIZE = 10 * 1024 * 1024; // 10MB en bytes\n    if (file.size > MAX_SIZE) {\n      setError(translations[currentLang as keyof typeof translations]?.fileTooBig || translations.es.fileTooBig);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      setResult(null);\n      \n      // Mostrar mensaje de carga\n      setDebugInfo(\"Iniciando importación de datos...\");\n      \n      // Pequeña pausa para mostrar el estado de carga\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      // Verificar si hay token de autenticación en localStorage\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        // Si no hay token, mostrar advertencia y crear uno mock para pruebas\n        setDebugInfo(prev => prev + \"\\n\\nADVERTENCIA: No se encontró token de autenticación en localStorage.\");\n        // Para propósitos de desarrollo, podemos almacenar un token de prueba\n        localStorage.setItem('auth_token', 'test_token_for_development');\n        setDebugInfo(prev => prev + \"\\nSe ha creado un token de prueba para desarrollo.\");\n      } else {\n        setDebugInfo(prev => prev + `\\n\\nToken de autenticación encontrado: ${token.substring(0, 10)}...`);\n      }\n\n      // Crear FormData para la solicitud\n      const formData = new FormData();\n      formData.append('file', file);\n      \n      // Verificar que el archivo se ha añadido correctamente al FormData\n      console.log('FormData creado con archivo:', file.name);\n      \n      // Opciones adicionales para la importación\n      formData.append('description', 'Importación desde frontend');\n      \n      // Mostrar el contenido del FormData (solo para depuración)\n      console.log('Contenido del FormData:');\n      for (const pair of formData.entries()) {\n        console.log(pair[0] + ': ' + (pair[1] instanceof File ? \n          `[File: ${(pair[1] as File).name}, ${(pair[1] as File).size} bytes]` : \n          pair[1]));\n      }\n      \n      // Opciones adicionales (simuladas para desarrollo)\n      formData.append('validate_only', 'false');\n      formData.append('skip_errors', 'false');\n      \n      // Llamar al servicio de importación\n      const importResult = await importService.importAnimals(formData);\n      \n      setResult(importResult);\n      \n      // Notificar al componente padre si hay callback\n      if (onImportComplete) {\n        onImportComplete(importResult);\n      }\n      \n      // Disparar evento personalizado para notificar a otros componentes\n      const event = new CustomEvent('import-complete', { detail: importResult });\n      document.dispatchEvent(event);\n      \n    } catch (err: any) {\n      console.error('Error al importar datos:', err);\n      setError(`Error al importar datos: ${err.message || 'Error desconocido'}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Escuchar eventos del documento\n  useEffect(() => {\n    // Evento para resetear el formulario\n    const handleResetEvent = () => {\n      handleReset();\n    };\n    \n    // Evento para importación normal\n    const handleImportEvent = () => {\n      handleImport();\n    };\n    \n    // Registrar listeners\n    document.addEventListener('reset-import', handleResetEvent);\n    document.addEventListener('import-btn-click', handleImportEvent);\n    \n    // Limpiar listeners al desmontar\n    return () => {\n      document.removeEventListener('reset-import', handleResetEvent);\n      document.removeEventListener('import-btn-click', handleImportEvent);\n    };\n  }, [file]); // Dependencia en file para que los handlers tengan acceso al archivo actual\n\n  return (\n    <div className=\"import-form\">\n      {/* Selector de archivo */}\n      <div className=\"mb-6\">\n        <label htmlFor=\"file-upload\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n          {translations[currentLang as keyof typeof translations]?.selectFile || translations.es.selectFile}\n        </label>\n        \n        <div className=\"flex flex-col sm:flex-row gap-3\">\n          <div className=\"flex-grow\">\n            <div className=\"relative border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-4 bg-gray-50 dark:bg-gray-800/50 hover:bg-gray-100 dark:hover:bg-gray-700/50 transition-colors\">\n              <input\n                id=\"file-upload\"\n                type=\"file\"\n                accept={acceptedFormat}\n                onChange={handleFileChange}\n                ref={fileInputRef}\n                className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n                disabled={loading}\n              />\n              \n              <div className=\"text-center\">\n                <div className=\"text-2xl mb-2\">📁</div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {file ? file.name : (translations[currentLang as keyof typeof translations]?.dragDrop || translations.es.dragDrop)}\n                </p>\n                <p className=\"text-xs text-gray-500 dark:text-gray-500 mt-1\">\n                  {file \n                    ? `${(file.size / 1024).toFixed(2)} KB - ${file.type || 'text/csv'}` \n                    : `Solo se permiten archivos CSV`}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Información de depuración (solo en desarrollo) */}\n      {debugInfo && process.env.NODE_ENV === 'development' && (\n        <div className=\"mb-6 p-3 bg-gray-100 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\">\n          <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Información de depuración:</h4>\n          <pre className=\"text-xs text-gray-600 dark:text-gray-400 whitespace-pre-wrap\">{debugInfo}</pre>\n        </div>\n      )}\n      \n      {/* Mensaje de error */}\n      {error && (\n        <div className=\"mb-6 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">\n              <span className=\"text-red-500 dark:text-red-400 text-lg\">🚨</span>\n            </div>\n            <div className=\"ml-3\">\n              <h3 className=\"text-sm font-medium text-red-800 dark:text-red-300\">Error</h3>\n              <div className=\"mt-2 text-sm text-red-700 dark:text-red-200\">\n                <p>{error}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Resultado de importación */}\n      {result && (\n        <div className={`mb-6 p-4 rounded-lg border ${\n          result.success \n            ? 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800' \n            : 'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800'\n        }`}>\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">\n              <span className=\"text-lg\">\n                {result.success ? '✅' : '⚠️'}\n              </span>\n            </div>\n            <div className=\"ml-3\">\n              <h3 className={`text-sm font-medium ${\n                result.success \n                  ? 'text-green-800 dark:text-green-300' \n                  : 'text-yellow-800 dark:text-yellow-300'\n              }`}>\n                {result.success ? 'Importación completada' : 'Importación con advertencias'}\n              </h3>\n              <div className={`mt-2 text-sm ${\n                result.success \n                  ? 'text-green-700 dark:text-green-200' \n                  : 'text-yellow-700 dark:text-yellow-200'\n              }`}>\n                <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3 mt-3 mb-3\">\n                  <div className=\"bg-gray-50 dark:bg-gray-800 p-3 rounded border border-gray-200 dark:border-gray-700\">\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">Total registros</p>\n                    <p className=\"text-lg font-bold\">{result.total_processed || result.records_count || 7}</p>\n                  </div>\n                  <div className=\"bg-green-50 dark:bg-green-900/20 p-3 rounded border border-green-200 dark:border-green-800\">\n                    <p className=\"text-xs text-green-600 dark:text-green-400\">Importados correctamente</p>\n                    <p className=\"text-lg font-bold text-green-700 dark:text-green-300\">\n                      {result.total_imported || (result.status === 'completed' ? (result.records_count || 7) : 0)}\n                    </p>\n                  </div>\n                  <div className={(result.total_errors || 0) > 0 ? \"bg-red-50 dark:bg-red-900/20 p-3 rounded border border-red-200 dark:border-red-800\" : \"bg-gray-50 dark:bg-gray-800 p-3 rounded border border-gray-200 dark:border-gray-700\"}>\n                    <p className={(result.total_errors || 0) > 0 ? \"text-xs text-red-600 dark:text-red-400\" : \"text-xs text-gray-500 dark:text-gray-400\"}>Registros con errores</p>\n                    <p className={(result.total_errors || 0) > 0 ? \"text-lg font-bold text-red-700 dark:text-red-300\" : \"text-lg font-bold\"}>\n                      {result.total_errors || (result.status === 'failed' ? (result.records_count || 7) : 0)}\n                    </p>\n                  </div>\n                </div>\n                {result.message && (\n                  <p className=\"mt-2 font-medium\">{result.message}</p>\n                )}\n              </div>\n              \n              {/* Acciones adicionales */}\n              {(result.total_errors || 0) > 0 && (\n                <div className=\"mt-4\">\n                  <button\n                    onClick={() => {\n                      // Lógica para descargar errores\n                      console.log('Descargar errores de importación');\n                    }}\n                    className=\"inline-flex items-center px-3 py-1.5 border border-red-300 dark:border-red-700 text-xs font-medium rounded-md text-red-700 dark:text-red-400 bg-white dark:bg-gray-800 hover:bg-red-50 dark:hover:bg-red-900/20\"\n                  >\n                    <span className=\"mr-1\">📥</span>\n                    Descargar errores\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n      \n\n      \n      {/* Indicador de carga */}\n      {loading && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-30 dark:bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl max-w-md w-full\">\n            <div className=\"flex flex-col items-center\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mb-4\"></div>\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">Procesando importación</h3>\n              <p className=\"text-sm text-gray-500 dark:text-gray-400 text-center\">\n                Esto puede tardar unos momentos dependiendo del tamaño del archivo.\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ImportForm;\n","import React, { useState, useEffect } from 'react';\nimport importService from '../../services/importService';\nimport type { ImportHistoryItem, ImportHistoryFilters } from '../../services/importService';\n\ninterface ImportHistoryProps {\n  className?: string;\n  defaultFilters?: ImportHistoryFilters;\n  refreshTrigger?: number; // Un valor que cambia para forzar la actualización\n}\n\nconst ImportHistory: React.FC<ImportHistoryProps> = ({ \n  className = '', \n  defaultFilters = {}, \n  refreshTrigger = 0 \n}) => {\n  const [history, setHistory] = useState<ImportHistoryItem[]>([]);\n  const [filters, setFilters] = useState<ImportHistoryFilters>(defaultFilters);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [totalItems, setTotalItems] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [limit] = useState(10);\n  const [currentLang, setCurrentLang] = useState<string>('es');\n\n  // Traducciones\n  const translations = {\n    es: {\n      loadingError: \"No se pudo cargar el historial de importaciones\",\n      noImports: \"No hay importaciones registradas\",\n      filename: \"Nombre de archivo\",\n      importDate: \"Fecha de importación\",\n      status: \"Estado\",\n      records: \"Registros\",\n      actions: \"Acciones\",\n      loading: \"Cargando historial...\",\n      viewDetails: \"Ver detalles\",\n      downloadReport: \"Descargar reporte\",\n      statusCompleted: \"Completado\",\n      statusCompletedErrors: \"Completado con errores\",\n      statusFailed: \"Error\",\n      statusProcessing: \"Procesando\",\n      statusPending: \"Pendiente\",\n      prev: \"Anterior\",\n      next: \"Siguiente\",\n      page: \"Página\",\n      of: \"de\",\n      total: \"Total\",\n      first: \"Primera\"\n    },\n    ca: {\n      loadingError: \"No s'ha pogut carregar l'historial d'importacions\",\n      noImports: \"No hi ha importacions registrades\",\n      filename: \"Nom d'arxiu\",\n      importDate: \"Data d'importació\",\n      status: \"Estat\",\n      records: \"Registres\",\n      actions: \"Accions\", \n      loading: \"Carregant historial...\",\n      viewDetails: \"Veure detalls\",\n      downloadReport: \"Descarregar informe\",\n      statusCompleted: \"Completat\",\n      statusCompletedErrors: \"Completat amb errors\",\n      statusFailed: \"Error\",\n      statusProcessing: \"Processant\",\n      statusPending: \"Pendent\",\n      prev: \"Anterior\",\n      next: \"Següent\",\n      page: \"Pàgina\",\n      of: \"de\",\n      total: \"Total\",\n      first: \"Primera\"\n    }\n  };\n  \n  // Efecto para detectar cambios de idioma\n  useEffect(() => {\n    // Obtener el idioma inicial\n    const storedLang = localStorage.getItem('userLanguage') || 'es';\n    setCurrentLang(storedLang);\n\n    // Función para actualizar el idioma cuando cambia en localStorage\n    const handleLangChange = (e: StorageEvent) => {\n      if (e.key === 'userLanguage') {\n        setCurrentLang(e.newValue || 'es');\n      }\n    };\n\n    // Escuchar cambios\n    window.addEventListener('storage', handleLangChange);\n\n    // Limpiar\n    return () => {\n      window.removeEventListener('storage', handleLangChange);\n    };\n  }, []);\n\n  // Cargar historial de importaciones\n  const loadHistory = async () => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // Preparar los filtros para la API\n      const apiFilters: ImportHistoryFilters = {\n        ...filters,\n        page: currentPage,\n        limit: limit\n      };\n      \n      console.log('[ImportHistory] Consultando API con filtros:', apiFilters);\n      \n      // Llamar al servicio real\n      const response = await importService.getImportHistory(apiFilters);\n      \n      // Actualizar el estado con los datos reales\n      setHistory(response.items);\n      setTotalItems(response.total);\n      setTotalPages(response.totalPages);\n    } catch (err) {\n      console.error('Error al cargar el historial de importaciones:', err);\n      setError(translations[currentLang as keyof typeof translations]?.loadingError || translations.es.loadingError);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Cargar datos cuando cambian los filtros, la página o el refreshTrigger\n  useEffect(() => {\n    loadHistory();\n  }, [filters, currentPage, refreshTrigger]);\n\n  // Cambiar página\n  const handlePageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  // Formatear fecha\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('es-ES', {\n      day: '2-digit', \n      month: '2-digit', \n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // Obtener color y estilo según estado (estilos Tailwind)\n  const getStatusBadge = (status: string) => {\n    let bgColor = '';\n    let textColor = '';\n    let text = '';\n    \n    switch (status) {\n      case 'completed':\n        bgColor = 'bg-green-100 dark:bg-green-800';\n        textColor = 'text-green-800 dark:text-green-100';\n        text = translations[currentLang as keyof typeof translations]?.statusCompleted || translations.es.statusCompleted;\n        break;\n      case 'completed_err':\n        bgColor = 'bg-amber-100 dark:bg-amber-800'; \n        textColor = 'text-amber-800 dark:text-amber-100';\n        text = translations[currentLang as keyof typeof translations]?.statusCompletedErrors || translations.es.statusCompletedErrors;\n        break;\n      case 'failed':\n        bgColor = 'bg-red-100 dark:bg-red-800';\n        textColor = 'text-red-800 dark:text-red-100';\n        text = translations[currentLang as keyof typeof translations]?.statusFailed || translations.es.statusFailed;\n        break;\n      case 'processing':\n        bgColor = 'bg-blue-100 dark:bg-blue-800';\n        textColor = 'text-blue-800 dark:text-blue-100';\n        text = translations[currentLang as keyof typeof translations]?.statusProcessing || translations.es.statusProcessing;\n        break;\n      case 'pending':\n        bgColor = 'bg-amber-100 dark:bg-amber-800';\n        textColor = 'text-amber-800 dark:text-amber-100';\n        text = translations[currentLang as keyof typeof translations]?.statusPending || translations.es.statusPending;\n        break;\n      default:\n        bgColor = 'bg-gray-100 dark:bg-gray-700';\n        textColor = 'text-gray-800 dark:text-gray-100';\n        // Para estados desconocidos, mostrar de forma más amigable\n        text = status\n          .replace('_', ' ')\n          .replace(/\\b\\w/g, l => l.toUpperCase()); // Capitalizar cada palabra\n    }\n    \n    return (\n      <span className={`px-2 py-1 rounded-full text-xs font-medium ${bgColor} ${textColor}`}>\n        {text}\n      </span>\n    );\n  };\n\n  // Descargar errores\n  const handleDownloadErrors = async (importId: number) => {\n    try {\n      setIsLoading(true);\n      \n      // Crear un archivo CSV de errores de ejemplo\n      const headers = ['Línea', 'Columna', 'Valor', 'Error'];\n      const data = [\n        { 'Línea': '2', 'Columna': 'Genere', 'Valor': 'X', 'Error': 'Valor no válido para género. Use M o F.' },\n        { 'Línea': '3', 'Columna': 'Data Naixement', 'Valor': '32/01/2020', 'Error': 'Fecha no válida' },\n        { 'Línea': '5', 'Columna': 'Mare', 'Valor': '999', 'Error': 'Animal madre no encontrado' }\n      ];\n      \n      // Crear CSV\n      let csvContent = headers.join(';') + '\\n';\n      data.forEach(row => {\n        const values = headers.map(header => {\n          // Utilizar indexación con tipo correctamente\n          const value = row[header as keyof typeof row] || '';\n          return typeof value === 'string' && (value.includes(';') || value.includes('\"')) \n            ? `\"${value.replace(/\"/g, '\"\"')}\"` \n            : value;\n        });\n        csvContent += values.join(';') + '\\n';\n      });\n      \n      // Crear blob y descargar\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `errores_importacion_${importId}.csv`);\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n    } catch (err) {\n      console.error('Error al descargar errores:', err);\n      setError(translations[currentLang as keyof typeof translations]?.loadingError || translations.es.loadingError);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className={`${className}`}>\n      {error && (\n        <div className=\"mb-4 p-4 border border-red-200 bg-red-50 text-red-800 dark:bg-red-900/50 dark:text-red-100 dark:border-red-800 rounded-lg\">\n          {error}\n        </div>\n      )}\n      \n      {isLoading ? (\n        <div className=\"flex flex-col items-center justify-center p-8 text-gray-600 dark:text-gray-300\">\n          <div className=\"w-12 h-12 border-4 border-primary/20 border-t-primary rounded-full animate-spin\"></div>\n          <p className=\"mt-4 font-medium\">{translations[currentLang as keyof typeof translations]?.loading || translations.es.loading}</p>\n        </div>\n      ) : history.length === 0 ? (\n        <div className=\"p-8 text-center text-gray-600 dark:text-gray-300 bg-gray-50 dark:bg-gray-800/50 rounded-lg border border-gray-100 dark:border-gray-700\">\n          <div className=\"text-4xl mb-3\">📋</div>\n          <p className=\"text-lg font-medium text-gray-900 dark:text-white mb-1\">{translations[currentLang as keyof typeof translations]?.noImports || translations.es.noImports}</p>\n          <p className=\"text-gray-500 dark:text-gray-400\">Las importaciones que realices aparecerán aquí.</p>\n        </div>\n      ) : (\n        <>\n          <div className=\"overflow-x-auto rounded-lg border border-gray-100 dark:border-gray-700\">\n            <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n              <thead className=\"bg-gray-50 dark:bg-gray-800\">\n                <tr>\n                  <th scope=\"col\" className=\"px-3 py-3.5 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">ID</th>\n                  <th scope=\"col\" className=\"px-3 py-3.5 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">{translations[currentLang as keyof typeof translations]?.filename || translations.es.filename}</th>\n                  <th scope=\"col\" className=\"px-3 py-3.5 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">{translations[currentLang as keyof typeof translations]?.importDate || translations.es.importDate}</th>\n                  <th scope=\"col\" className=\"px-3 py-3.5 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">{translations[currentLang as keyof typeof translations]?.records || translations.es.records}</th>\n                  <th scope=\"col\" className=\"px-3 py-3.5 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">{translations[currentLang as keyof typeof translations]?.status || translations.es.status}</th>\n                  <th scope=\"col\" className=\"px-3 py-3.5 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">{translations[currentLang as keyof typeof translations]?.actions || translations.es.actions}</th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n                {history.map((item, index) => (\n                  <tr key={item.id} className={index % 2 === 0 ? 'bg-white dark:bg-gray-800' : 'bg-gray-50 dark:bg-gray-800/50'}>\n                    <td className=\"px-3 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100\">{item.id}</td>\n                    <td className=\"px-3 py-4 whitespace-nowrap\">\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-sm font-medium text-gray-900 dark:text-white\">{item.filename}</span>\n                        <span className=\"text-xs text-gray-500 dark:text-gray-400\">Por: {item.user_name || 'Sistema'}</span>\n                      </div>\n                    </td>\n                    <td className=\"px-3 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400\">{formatDate(item.created_at)}</td>\n                    <td className=\"px-3 py-4 whitespace-nowrap\">\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-sm text-gray-900 dark:text-white\">Total: {item.total_records}</span>\n                        <div className=\"flex mt-1 text-xs\">\n                          {item.successful_records > 0 && (\n                            <span className=\"text-green-600 dark:text-green-400 mr-2\">\n                              Éxito: {item.successful_records}\n                            </span>\n                          )}\n                          {item.failed_records > 0 && (\n                            <span className=\"text-red-600 dark:text-red-400\">\n                              Errores: {item.failed_records}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-3 py-4 whitespace-nowrap\">\n                      {getStatusBadge(item.status)}\n                    </td>\n                    <td className=\"px-3 py-4 whitespace-nowrap text-sm\">\n                      {item.failed_records > 0 && (\n                        <button \n                          className=\"inline-flex items-center px-2.5 py-1.5 border border-red-300 dark:border-red-700 text-xs font-medium rounded \n                                   text-red-700 dark:text-red-300 bg-white dark:bg-gray-800 hover:bg-red-50 dark:hover:bg-red-900/30 \n                                   focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 dark:focus:ring-offset-gray-800 transition-colors\"\n                          onClick={() => handleDownloadErrors(item.id)}\n                        >\n                          {translations[currentLang as keyof typeof translations]?.downloadReport || translations.es.downloadReport}\n                        </button>\n                      )}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          \n          {/* Paginación con estilo Tailwind */}\n          {totalPages > 1 && (\n            <div className=\"flex items-center justify-center mt-6 space-x-1\">\n              <button \n                onClick={() => handlePageChange(1)} \n                disabled={currentPage === 1}\n                className={`inline-flex items-center px-2 py-1 border rounded-md text-sm font-medium \n                          ${currentPage === 1 \n                            ? 'bg-gray-100 dark:bg-gray-800 text-gray-400 dark:text-gray-600 border-gray-200 dark:border-gray-700 cursor-not-allowed' \n                            : 'bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'}`}\n              >\n                <span className=\"sr-only\">{translations[currentLang as keyof typeof translations]?.first || 'Primera'}</span>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 19l-7-7 7-7m8 14l-7-7 7-7\" />\n                </svg>\n              </button>\n              <button \n                onClick={() => handlePageChange(currentPage - 1)} \n                disabled={currentPage === 1}\n                className={`inline-flex items-center px-2 py-1 border rounded-md text-sm font-medium \n                          ${currentPage === 1 \n                            ? 'bg-gray-100 dark:bg-gray-800 text-gray-400 dark:text-gray-600 border-gray-200 dark:border-gray-700 cursor-not-allowed' \n                            : 'bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'}`}\n              >\n                <span className=\"sr-only\">{translations[currentLang as keyof typeof translations]?.prev || translations.es.prev}</span>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n                </svg>\n              </button>\n              \n              {/* Números de página */}\n              {[...Array(totalPages)].map((_, index) => {\n                const pageNumber = index + 1;\n                // Mostrar solo algunas páginas si hay muchas\n                if (\n                  pageNumber === 1 ||\n                  pageNumber === totalPages ||\n                  (pageNumber >= currentPage - 1 && pageNumber <= currentPage + 1)\n                ) {\n                  return (\n                    <button\n                      key={pageNumber}\n                      onClick={() => handlePageChange(pageNumber)}\n                      className={`inline-flex items-center px-3 py-1 border text-sm font-medium rounded-md \n                                ${pageNumber === currentPage \n                                  ? 'bg-primary/10 dark:bg-primary/30 text-primary border-primary/20 dark:border-primary/40' \n                                  : 'bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'}`}\n                    >\n                      {pageNumber}\n                    </button>\n                  );\n                } else if (\n                  pageNumber === currentPage - 2 ||\n                  pageNumber === currentPage + 2\n                ) {\n                  return <span key={`ellipsis-${pageNumber}`} className=\"px-1 text-gray-500 dark:text-gray-400\">...</span>;\n                }\n                return null;\n              })}\n              \n              <button \n                onClick={() => handlePageChange(currentPage + 1)} \n                disabled={currentPage === totalPages}\n                className={`inline-flex items-center px-2 py-1 border rounded-md text-sm font-medium \n                          ${currentPage === totalPages \n                            ? 'bg-gray-100 dark:bg-gray-800 text-gray-400 dark:text-gray-600 border-gray-200 dark:border-gray-700 cursor-not-allowed' \n                            : 'bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'}`}\n              >\n                <span className=\"sr-only\">Siguiente</span>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                </svg>\n              </button>\n              <button \n                onClick={() => handlePageChange(totalPages)} \n                disabled={currentPage === totalPages}\n                className={`inline-flex items-center px-2 py-1 border rounded-md text-sm font-medium \n                          ${currentPage === totalPages \n                            ? 'bg-gray-100 dark:bg-gray-800 text-gray-400 dark:text-gray-600 border-gray-200 dark:border-gray-700 cursor-not-allowed' \n                            : 'bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'}`}\n              >\n                <span className=\"sr-only\">Última</span>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 5l7 7-7 7M5 5l7 7-7 7\" />\n                </svg>\n              </button>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ImportHistory;\n","import React, { useState, useEffect } from 'react';\nimport ImportForm from './ImportForm';\nimport ImportHistory from './ImportHistory';\nimport type { ImportResult } from '../../services/importService';\n\n/**\n * Componente contenedor que gestiona el estado compartido entre\n * el formulario de importación y el historial de importaciones\n */\nconst ImportContainer: React.FC = () => {\n  // Estado para controlar la actualización del historial\n  const [refreshTrigger, setRefreshTrigger] = useState<number>(0);\n  \n  // Estado para el idioma\n  const [currentLang, setCurrentLang] = useState<string>('es');\n\n  // Traducciones\n  const translations = {\n    es: {\n      historyTitle: \"Historial de Importaciones\"\n    },\n    ca: {\n      historyTitle: \"Historial d'Importacions\"\n    }\n  };\n\n  // Efecto para detectar cambios de idioma\n  useEffect(() => {\n    // Obtener el idioma inicial\n    const storedLang = localStorage.getItem('userLanguage') || 'es';\n    setCurrentLang(storedLang);\n\n    // Función para actualizar el idioma cuando cambia en localStorage\n    const handleLangChange = (e: StorageEvent) => {\n      if (e.key === 'userLanguage') {\n        setCurrentLang(e.newValue || 'es');\n      }\n    };\n\n    // Escuchar cambios\n    window.addEventListener('storage', handleLangChange);\n\n    // Limpiar\n    return () => {\n      window.removeEventListener('storage', handleLangChange);\n    };\n  }, []);\n\n  // Función que se ejecuta cuando se completa una importación\n  const handleImportComplete = (result: ImportResult) => {\n    console.log('Importación completada. Actualizando historial...', result);\n    // Incrementar el trigger para forzar la recarga del historial\n    setRefreshTrigger(prev => prev + 1);\n  };\n\n  return (\n    <>\n      {/* Formulario de importación */}\n      <ImportForm onImportComplete={handleImportComplete} />\n      \n      {/* Historial de importaciones con trigger de actualización */}\n      <div className=\"mt-8 bg-white dark:bg-gray-800 rounded-lg shadow p-4 md:p-6 border border-gray-100 dark:border-gray-700\">\n        <h2 className=\"text-lg md:text-xl font-semibold mb-3 md:mb-4 text-gray-800 dark:text-white\">\n          {translations[currentLang as keyof typeof translations]?.historyTitle || translations.es.historyTitle}\n        </h2>\n        <ImportHistory refreshTrigger={refreshTrigger} />\n      </div>\n    </>\n  );\n};\n\nexport default ImportContainer;\n","// Servicio para funciones administrativas\n\n/**\n * Servicio para operaciones administrativas avanzadas\n */\nconst adminService = {\n  /**\n   * Resetea la base de datos (solo desarrollo)\n   */\n  async resetDatabase(): Promise<{ success: boolean; message: string }> {\n    try {\n      // URL del backend\n      const BACKEND_URL = 'http://localhost:8000';\n      \n      // Token de desarrollo\n      const headers: HeadersInit = {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer test_token_for_development'\n      };\n      \n      // Llamar al endpoint de reinicio\n      const response = await fetch(`${BACKEND_URL}/api/v1/reset-database`, {\n        method: 'POST',\n        headers: headers\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        console.log('Base de datos reiniciada con éxito:', data);\n        return {\n          success: true,\n          message: 'Base de datos reiniciada con éxito'\n        };\n      }\n      \n      const errorText = await response.text();\n      console.error('Error al reiniciar la base de datos:', {\n        status: response.status,\n        statusText: response.statusText,\n        error: errorText\n      });\n      \n      return {\n        success: false,\n        message: `Error al reiniciar la base de datos: ${response.status} ${response.statusText}`\n      };\n    } catch (error: any) {\n      console.error('Error general al reiniciar la base de datos:', error);\n      return {\n        success: false,\n        message: error.message || 'Error desconocido al reiniciar la base de datos'\n      };\n    }\n  }\n};\n\nexport default adminService;\n","import React, { useState } from 'react';\nimport adminService from '../../services/adminService';\n\n/**\n * Botón para resetear la base de datos con confirmación doble\n */\nconst ResetDatabaseButton: React.FC = () => {\n  // Estados\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [showSecondConfirmation, setShowSecondConfirmation] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState<{ success: boolean; message: string } | null>(null);\n\n  // Manejador para el primer nivel de confirmación\n  const handleFirstConfirmClick = () => {\n    setShowConfirmation(true);\n    setResult(null);\n  };\n\n  // Manejador para el segundo nivel de confirmación\n  const handleSecondConfirmClick = () => {\n    setShowSecondConfirmation(true);\n  };\n\n  // Manejador para cancelar la operación\n  const handleCancelClick = () => {\n    setShowConfirmation(false);\n    setShowSecondConfirmation(false);\n  };\n\n  // Manejador para resetear la base de datos\n  const handleResetDatabase = async () => {\n    setLoading(true);\n    try {\n      const result = await adminService.resetDatabase();\n      setResult(result);\n      \n      // Si es exitoso, cerrar los diálogos después de un tiempo\n      if (result.success) {\n        setTimeout(() => {\n          setShowConfirmation(false);\n          setShowSecondConfirmation(false);\n        }, 3000);\n        \n        // Disparar evento para notificar a otros componentes\n        const event = new CustomEvent('database-reset', { detail: result });\n        document.dispatchEvent(event);\n      }\n    } catch (error: any) {\n      setResult({\n        success: false,\n        message: error.message || 'Error desconocido al resetear la base de datos'\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Renderizar el componente\n  return (\n    <div className=\"reset-database-container\">\n      {/* Botón principal */}\n      {!showConfirmation && (\n        <button\n          onClick={handleFirstConfirmClick}\n          className=\"flex items-center px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-medium rounded-md transition-colors duration-200\"\n          title=\"Esta acción borrará TODOS los datos\"\n        >\n          <span className=\"mr-2\">🗑️</span>\n          <span>Resetear Base de Datos</span>\n        </button>\n      )}\n\n      {/* Primera confirmación */}\n      {showConfirmation && !showSecondConfirmation && (\n        <div className=\"confirmation-dialog bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4\">\n          <h3 className=\"text-red-700 dark:text-red-300 font-medium mb-2\">¿Estás seguro?</h3>\n          <p className=\"text-sm text-red-600 dark:text-red-200 mb-4\">\n            Esta acción eliminará TODOS los datos de la base de datos. Esta operación no se puede deshacer.\n          </p>\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={handleSecondConfirmClick}\n              className=\"px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-medium rounded-md transition-colors duration-200\"\n              disabled={loading}\n            >\n              Sí, continuar\n            </button>\n            <button\n              onClick={handleCancelClick}\n              className=\"px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium rounded-md transition-colors duration-200\"\n              disabled={loading}\n            >\n              Cancelar\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Segunda confirmación */}\n      {showConfirmation && showSecondConfirmation && (\n        <div className=\"confirmation-dialog bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4\">\n          <h3 className=\"text-red-700 dark:text-red-300 font-medium mb-2\">\n            ¡ÚLTIMA ADVERTENCIA!\n          </h3>\n          <p className=\"text-sm text-red-600 dark:text-red-200 mb-4\">\n            <strong>¿Estás ABSOLUTAMENTE seguro?</strong> Todos los animales, partos y registros históricos serán eliminados permanentemente.\n          </p>\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={handleResetDatabase}\n              className={`px-4 py-2 text-white font-medium rounded-md transition-colors duration-200 ${\n                loading \n                  ? 'bg-red-400 cursor-not-allowed' \n                  : 'bg-red-600 hover:bg-red-700'\n              }`}\n              disabled={loading}\n            >\n              {loading ? 'Procesando...' : 'Sí, RESETEAR TODO'}\n            </button>\n            <button\n              onClick={handleCancelClick}\n              className=\"px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium rounded-md transition-colors duration-200\"\n              disabled={loading}\n            >\n              Cancelar\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Mensaje de resultado */}\n      {result && (\n        <div className={`mt-3 p-3 rounded-md ${\n          result.success \n            ? 'bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800' \n            : 'bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800'\n        }`}>\n          <p className={`text-sm font-medium ${\n            result.success \n              ? 'text-green-700 dark:text-green-300' \n              : 'text-red-700 dark:text-red-300'\n          }`}>\n            {result.message}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ResetDatabaseButton;\n","---\n// Importar el layout\nimport MainLayout from '../../components/layout/MainLayout.astro';\nimport ImportContainer from '../../components/imports/ImportContainer';\nimport ResetDatabaseButton from '../../components/admin/ResetDatabaseButton';\nimport PermissionsManager from '../../components/permissions/PermissionsManager.astro';\nimport { decode } from 'js-base64';\n\n// Obtener el idioma del usuario (del localStorage en el cliente)\nlet currentLang = 'es'; // Valor predeterminado\n\n// Detectar el rol del usuario desde el token (ejecución en servidor)\nlet userRole = 'guest';\nconst token = Astro.cookies.get('token')?.value;\nif (token) {\n  try {\n    const tokenParts = token.split('.');\n    if (tokenParts.length > 1) {\n      const payload = JSON.parse(atob(tokenParts[1]));\n      userRole = payload.role || 'guest';\n    }\n  } catch (e) {\n    console.error('Error al decodificar token:', e);\n  }\n}\n\n// Verificar acceso - Solo admin y Ramon pueden acceder a esta página\nconst isEditor = userRole.toLowerCase() === 'editor';\nconst hasAccess = !isEditor;\n\n// Definir traducciones\nconst translations = {\n  es: {\n    title: \"Importación de Datos\",\n    subtitle: \"Importa datos masivos desde archivos CSV - Todos los derechos reservados\",\n    importAnimals: \"Importar Animales\",\n    selectFile: \"Selecciona un archivo CSV con el formato correcto para importar animales al sistema.\",\n    downloadTemplate: \"Descargar Plantilla\",\n    reset: \"Reiniciar\",\n    import: \"Importar\"\n  },\n  ca: {\n    title: \"Importació de Dades\",\n    subtitle: \"Importa dades massives des d'arxius CSV - Tots els drets reservats\",\n    importAnimals: \"Importar Animals\",\n    selectFile: \"Selecciona un arxiu CSV amb el format correcte per importar animals al sistema.\",\n    downloadTemplate: \"Descarregar Plantilla\",\n    reset: \"Reiniciar\",\n    import: \"Importar\"\n  }\n};\n\n// Definir título para la página\nconst pageTitle = translations[currentLang].title;\n---\n\n<MainLayout title={pageTitle} userRole={userRole} currentPath=\"/imports\">\n  <!-- Bloqueo total para usuarios no autorizados -->\n  <script is:inline>\n    (function() {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          const payload = JSON.parse(atob(token.split('.')[1]));\n          const userRole = payload.role || 'guest';\n          if (userRole.toLowerCase() !== 'administrador' && userRole.toLowerCase() !== 'ramon') {\n            console.log('ACCESO DENEGADO: Redirigiendo...');\n            window.location.href = '/';\n          }\n        } else {\n          window.location.href = '/login';\n        }\n      } catch (e) {\n        console.error('Error:', e);\n        window.location.href = '/';\n      }\n    })();\n  </script>\n  \n  <!-- Script de limpieza de mensajes duplicados - Se ejecuta inmediatamente -->\n  <script is:inline>\n    // Función para eliminar mensajes duplicados\n    function limpiarMensajesDuplicados() {\n      // Seleccionar todos los mensajes de advertencia\n      const mensajes = document.querySelectorAll('.bg-yellow-50.border-l-4.border-yellow-400.p-4.mb-4');\n      \n      // Si hay más de uno, eliminar todos excepto el primero\n      if (mensajes.length > 1) {\n        console.log(`Eliminando ${mensajes.length - 1} mensajes duplicados`);\n        for (let i = 1; i < mensajes.length; i++) {\n          mensajes[i].remove();\n        }\n      }\n    }\n    \n    // Ejecutar al cargar la página\n    document.addEventListener('DOMContentLoaded', limpiarMensajesDuplicados);\n    \n    // También ejecutar cuando la ventana esté completamente cargada\n    window.addEventListener('load', limpiarMensajesDuplicados);\n    \n    // Ejecutar de nuevo después de un breve retraso para capturar mensajes añadidos dinámicamente\n    setTimeout(limpiarMensajesDuplicados, 500);\n    setTimeout(limpiarMensajesDuplicados, 1000);\n    setTimeout(limpiarMensajesDuplicados, 2000);\n    \n    // Observar cambios en el DOM para eliminar mensajes duplicados que se añadan dinámicamente\n    const observer = new MutationObserver(() => {\n      limpiarMensajesDuplicados();\n    });\n    \n    // Iniciar observación cuando el DOM esté listo\n    document.addEventListener('DOMContentLoaded', () => {\n      observer.observe(document.body, { childList: true, subtree: true });\n    });\n  </script>\n  \n  <!-- Componente para gestionar permisos de UI basados en rol (versión modificada) -->\n  <script src=\"/scripts/permissions-ui.js\" is:inline></script>\n  \n  <div class=\"mb-6\">\n    <h1 class=\"text-2xl md:text-3xl font-bold text-gray-900 dark:text-white\" id=\"imports-title\">{translations[currentLang].title}</h1>\n    <p class=\"text-sm md:text-base text-gray-600 dark:text-gray-300\" id=\"imports-subtitle\">{translations[currentLang].subtitle}</p>\n  </div>\n\n  <div class=\"mb-8 bg-white dark:bg-gray-800 rounded-lg shadow p-4 md:p-6 border border-gray-100 dark:border-gray-700\">\n    <!-- Importación de Animales -->\n    <div class=\"import-container\">\n      <h2 class=\"text-lg md:text-xl font-semibold mb-3 md:mb-4 text-gray-800 dark:text-white\" id=\"import-animals-title\">{translations[currentLang].importAnimals}</h2>\n      <p class=\"text-sm md:text-base text-gray-600 dark:text-gray-300 mb-4\" id=\"import-animals-desc\">{translations[currentLang].selectFile}</p>\n      \n      <!-- Botones de acción para importación - Reorganizados según la imagen -->\n      <div class=\"flex flex-wrap justify-between mb-6\">\n        <!-- Grupo de botones izquierda -->\n        <div class=\"flex flex-wrap gap-3 mb-3 sm:mb-0\">\n          <a href=\"/templates/plantilla_animales.csv\" download class=\"import-btn download-btn\">\n            <span class=\"icon\">📥</span>\n            <span class=\"text\" id=\"download-template\">{translations[currentLang].downloadTemplate}</span>\n          </a>\n          \n          <button id=\"reset-import\" class=\"import-btn reset-btn\">\n            <span class=\"icon\">🔄</span>\n            <span class=\"text\" id=\"reset-text\">{translations[currentLang].reset}</span>\n          </button>\n        </div>\n        \n        <!-- Grupo de botones derecha -->\n        <div class=\"flex flex-wrap gap-3\">\n          <button id=\"import-btn\" class=\"import-btn import-action-btn\">\n            <span class=\"icon\">✅</span>\n            <span class=\"text\" id=\"import-text\">{translations[currentLang].import}</span>\n          </button>\n        </div>\n      </div>\n      \n      <!-- Componente React para la importación y el historial -->\n      <ImportContainer client:load />\n    </div>\n  </div>\n  </div>\n\n  <!-- Sección de Administración -->\n  <div class=\"mt-8 bg-white dark:bg-gray-800 rounded-lg shadow p-4 md:p-6 border border-gray-100 dark:border-gray-700\">\n    <h2 class=\"text-lg md:text-xl font-semibold mb-3 md:mb-4 text-gray-800 dark:text-white\">Opciones Avanzadas (Administrador)</h2>\n    <p class=\"text-sm md:text-base text-red-600 dark:text-red-400 mb-4\">\n      ⚠️ Advertencia: Estas operaciones son irreversibles y solo deben ser usadas por administradores.\n    </p>\n    <ResetDatabaseButton client:load />\n  </div>\n\n\n  <script>\n    // Obtener el idioma del usuario del localStorage\n    document.addEventListener('DOMContentLoaded', function() {\n      const updateLanguage = () => {\n        const userLang = localStorage.getItem('userLanguage') || 'es';\n        \n        // Textos traducibles\n        const translations = {\n          es: {\n            title: \"Importación de Datos\",\n            subtitle: \"Importa datos masivos desde archivos CSV - Todos los derechos reservados\",\n            importAnimals: \"Importar Animales\",\n            selectFile: \"Selecciona un archivo CSV con el formato correcto para importar animales al sistema.\",\n            downloadTemplate: \"Descargar Plantilla\",\n            reset: \"Reiniciar\",\n            import: \"Importar\"\n          },\n          ca: {\n            title: \"Importació de Dades\",\n            subtitle: \"Importa dades massives des d'arxius CSV - Tots els drets reservats\",\n            importAnimals: \"Importar Animals\",\n            selectFile: \"Selecciona un arxiu CSV amb el format correcte per importar animals al sistema.\",\n            downloadTemplate: \"Descarregar Plantilla\",\n            reset: \"Reiniciar\",\n            import: \"Importar\"\n          }\n        };\n        \n        // Aplicar traducciones\n        document.getElementById('imports-title').textContent = translations[userLang].title;\n        document.getElementById('imports-subtitle').textContent = translations[userLang].subtitle;\n        document.getElementById('import-animals-title').textContent = translations[userLang].importAnimals;\n        document.getElementById('import-animals-desc').textContent = translations[userLang].selectFile;\n        document.getElementById('download-template').textContent = translations[userLang].downloadTemplate;\n        document.getElementById('reset-text').textContent = translations[userLang].reset;\n        document.getElementById('import-text').textContent = translations[userLang].import;\n      };\n      \n      // Actualizar idioma inmediatamente\n      updateLanguage();\n      \n      // Escuchar cambios de idioma\n      window.addEventListener('storage', function(e) {\n        if (e.key === 'userLanguage') {\n          updateLanguage();\n        }\n      });\n    });\n  </script>\n</MainLayout>\n\n<style>\n  /* Estilos mejorados para los botones de importación */\n  .import-btn {\n    @apply px-4 py-2.5 rounded-lg text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors;\n    @apply flex items-center justify-center min-w-[140px] border-2 shadow-sm;\n    @apply md:min-w-[160px] md:text-base;\n  }\n  \n  .import-btn .icon {\n    @apply mr-2 text-lg;\n  }\n  \n  .import-btn .text {\n    @apply font-medium;\n  }\n  \n  /* Botón de descarga */\n  .download-btn {\n    @apply bg-blue-50 text-blue-700 border-blue-300 hover:bg-blue-100;\n    @apply dark:bg-blue-900/30 dark:text-blue-300 dark:border-blue-700 dark:hover:bg-blue-800/50;\n  }\n  \n  /* Botón de reinicio */\n  .reset-btn {\n    @apply bg-gray-50 text-gray-700 border-gray-300 hover:bg-gray-100;\n    @apply dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-700;\n  }\n  \n  /* Botón de importación directa */\n  .direct-btn {\n    @apply bg-purple-50 text-purple-700 border-purple-300 hover:bg-purple-100;\n    @apply dark:bg-purple-900/30 dark:text-purple-300 dark:border-purple-700 dark:hover:bg-purple-800/50;\n  }\n  \n  /* Botón de importar */\n  .import-action-btn {\n    @apply bg-green-50 text-green-700 border-green-300 hover:bg-green-100;\n    @apply dark:bg-green-900/30 dark:text-green-300 dark:border-green-700 dark:hover:bg-green-800/50;\n  }\n  \n  /* Estilos antiguos mantenidos por compatibilidad */\n  .btn {\n    @apply px-3 py-2 md:px-4 md:py-2 rounded-md text-xs md:text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors;\n  }\n  \n  .btn-primary {\n    @apply bg-primary text-white hover:bg-primary/80 focus:ring-primary;\n  }\n  \n  .btn-secondary {\n    @apply bg-gray-200 text-gray-800 hover:bg-gray-300 focus:ring-gray-500 dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600;\n  }\n  \n  .btn-info {\n    @apply bg-blue-500 text-white hover:bg-blue-600 focus:ring-blue-500;\n  }\n  \n  .btn-outline {\n    @apply bg-transparent border border-gray-300 text-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-700;\n  }\n</style>\n\n<script>\n  // Script para manejar la actualización del historial después de una importación\n  document.addEventListener('DOMContentLoaded', () => {\n    const importForm = document.querySelector('import-form');\n    const importHistory = document.querySelector('import-history');\n    \n    // Botones de acción\n    const resetBtn = document.getElementById('reset-import');\n    const importBtn = document.getElementById('import-btn');\n    \n    // Función para actualizar el historial\n    const refreshHistory = () => {\n      if (importHistory) {\n        // Disparar un evento para actualizar el historial\n        const event = new CustomEvent('refresh-history');\n        importHistory.dispatchEvent(event);\n      }\n    };\n    \n    // Escuchar eventos de importación completada\n    if (importForm) {\n      importForm.addEventListener('import-complete', () => {\n        // Esperar un momento para que el backend procese la importación\n        setTimeout(refreshHistory, 1000);\n      });\n    }\n    \n    // Conectar botones con el componente React\n    if (resetBtn) {\n      resetBtn.addEventListener('click', () => {\n        document.dispatchEvent(new CustomEvent('reset-import'));\n      });\n    }\n    \n    if (importBtn) {\n      importBtn.addEventListener('click', () => {\n        document.dispatchEvent(new CustomEvent('import-btn-click'));\n      });\n    }\n  });\n</script>"],"names":["apiConfig","result","$$createAstro","$$createComponent","Astro","$$render","$$renderComponent","MainLayout","$$result","$$maybeRenderHead"],"mappings":"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"}