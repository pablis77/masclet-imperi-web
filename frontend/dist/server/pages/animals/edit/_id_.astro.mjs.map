{"version":3,"file":"_id_.astro.mjs","sources":["../../../../../src/components/animals/AnimalForm.tsx","../../../../../src/services/explotacionService.ts","../../../../../src/utils/roleUtils.ts","../../../../../src/pages/animals/edit/[id].astro"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport animalService from '../../services/animalService';\nimport type { Animal, AnimalCreateDto, AnimalUpdateDto } from '../../services/animalService';\n\n// Definición local del tipo Explotacion para mantener compatibilidad\ntype Explotacion = {\n  id: number;\n  explotacio: string;\n  animal_count?: number;\n};\n\ninterface AnimalFormProps {\n  animalData?: Animal;\n  explotaciones?: Explotacion[];\n  isEditMode?: boolean;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nconst AnimalForm: React.FC<AnimalFormProps> = ({ \n  animalData, \n  explotaciones = [], \n  isEditMode = false, \n  onSuccess, \n  onCancel \n}) => {\n  const [formData, setFormData] = useState<AnimalCreateDto>({\n    explotacio: '',\n    nom: '',\n    genere: 'M',\n    estado: 'OK',\n    alletar: '0',\n  });\n  \n  const [potentialFathers, setPotentialFathers] = useState<Animal[]>([]);\n  const [potentialMothers, setPotentialMothers] = useState<Animal[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [submitting, setSubmitting] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Cargar datos iniciales\n  useEffect(() => {\n    const loadInitialData = async () => {\n      try {\n        setLoading(true);\n        \n        // Si estamos editando, establecer los datos del animal\n        if (isEditMode && animalData) {\n          console.log(`Cargando datos para animal ID: ${animalData.id}`);\n          setFormData({\n            explotacio: animalData.explotacio,\n            nom: animalData.nom,\n            genere: animalData.genere,\n            estado: animalData.estado,\n            alletar: animalData.alletar,\n            pare: animalData.pare,\n            mare: animalData.mare,\n            quadra: animalData.quadra,\n            cod: animalData.cod,\n            num_serie: animalData.num_serie,\n            dob: animalData.dob,\n          });\n          \n          // Cargar padres y madres potenciales\n          try {\n            const fathers = await animalService.getPotentialFathers(animalData?.explotacio);\n            const mothers = await animalService.getPotentialMothers(animalData?.explotacio);\n            \n            setPotentialFathers(fathers);\n            setPotentialMothers(mothers);\n          } catch (parentError) {\n            console.error('Error cargando padres/madres potenciales:', parentError);\n            setError('No se pudieron cargar los padres/madres potenciales. Se mostrarán datos simulados.');\n          }\n        } else if (explotaciones.length > 0) {\n          // Si no estamos editando y hay explotaciones, establecer la primera como predeterminada\n          setFormData(prev => ({\n            ...prev,\n            explotacio_id: explotaciones[0].id\n          }));\n          \n          // Cargar padres y madres potenciales para la explotación predeterminada\n          if (explotaciones[0].id) {\n            try {\n              const [fathers, mothers] = await Promise.all([\n                animalService.getPotentialFathers(explotaciones[0].id),\n                animalService.getPotentialMothers(explotaciones[0].id)\n              ]);\n              \n              setPotentialFathers(fathers);\n              setPotentialMothers(mothers);\n            } catch (parentError) {\n              console.error('Error cargando padres/madres potenciales:', parentError);\n              setError('No se pudieron cargar los padres/madres potenciales. Se mostrarán datos simulados.');\n            }\n          }\n        }\n      } catch (err: any) {\n        setError(err.message || 'Error al cargar los datos');\n        console.error('Error cargando datos iniciales:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadInitialData();\n  }, [isEditMode, animalData, explotaciones]);\n\n  // Cargar padres y madres cuando cambia la explotación\n  const handleExplotacionChange = async (explotacioId: number) => {\n    try {\n      setLoading(true);\n      \n      // Actualizar el formulario\n      setFormData(prev => ({\n        ...prev,\n        explotacio_id: explotacioId,\n        pare_id: undefined,\n        mare_id: undefined\n      }));\n      \n      // Cargar padres y madres potenciales\n      const [fathers, mothers] = await Promise.all([\n        animalService.getPotentialFathers(explotacioId),\n        animalService.getPotentialMothers(explotacioId)\n      ]);\n      \n      setPotentialFathers(fathers);\n      setPotentialMothers(mothers);\n    } catch (err: any) {\n      setError(err.message || 'Error al cargar padres y madres');\n      console.error('Error cargando padres y madres:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n    const { name, value, type } = e.target as HTMLInputElement;\n    \n    // Manejar checkboxes\n    if (type === 'checkbox') {\n      const checked = (e.target as HTMLInputElement).checked;\n      setFormData(prev => ({\n        ...prev,\n        [name]: checked\n      }));\n      return;\n    }\n    \n    // Manejar selects numéricos\n    if (name === 'explotacio_id' || name === 'pare_id' || name === 'mare_id') {\n      const numValue = value === '' ? undefined : parseInt(value, 10);\n      \n      if (name === 'explotacio_id' && numValue) {\n        handleExplotacionChange(numValue);\n      } else {\n        setFormData(prev => ({\n          ...prev,\n          [name]: numValue\n        }));\n      }\n      return;\n    }\n    \n    // Manejar inputs de texto\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      setSubmitting(true);\n      setError(null);\n      \n      console.log('Enviando datos del formulario:', formData);\n      \n      if (isEditMode && animalData) {\n        console.log(`Actualizando animal con ID: ${animalData.id}`);\n        await animalService.updateAnimal(animalData.id, formData);\n        console.log('Animal actualizado correctamente');\n      } else {\n        console.log('Creando nuevo animal');\n        await animalService.createAnimal(formData);\n        console.log('Animal creado correctamente');\n      }\n      \n      onSuccess();\n    } catch (err: any) {\n      setError(err.message || 'Error al guardar el animal');\n      console.error('Error guardando animal:', err);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary\"></div>\n        <p className=\"mt-2 text-gray-600 dark:text-dark-text-secondary\">Cargando...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white dark:bg-dark-card rounded-lg shadow p-6 border border-gray-100 dark:border-dark-border\">\n      <h2 className=\"text-xl font-bold text-gray-900 dark:text-dark-text mb-4\">\n        {isEditMode ? 'Editar Animal' : 'Nuevo Animal'}\n      </h2>\n      \n      {error && (\n        <div className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4\">\n          {error}\n        </div>\n      )}\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n          {/* Explotación */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-dark-text-secondary mb-1\">\n              Explotación *\n            </label>\n            <select\n              id=\"explotacio\"\n              name=\"explotacio\"\n              className=\"form-select\"\n              value={formData.explotacio}\n              onChange={handleInputChange}\n              required\n            >\n              <option value=\"\">Seleccionar explotación</option>\n              {explotaciones.map((explotacion) => (\n                <option key={explotacion.id} value={explotacion.explotacio}>\n                  {explotacion.explotacio}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {/* Nombre */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-dark-text-secondary mb-1\">\n              Nombre *\n            </label>\n            <input\n              type=\"text\"\n              name=\"nom\"\n              value={formData.nom}\n              onChange={handleInputChange}\n              required\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-border rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary dark:bg-gray-800 dark:text-dark-text\"\n            />\n          </div>\n          \n          {/* Género */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-dark-text-secondary mb-1\">\n              Género *\n            </label>\n            <select\n              name=\"genere\"\n              value={formData.genere}\n              onChange={handleInputChange}\n              required\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-border rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary dark:bg-gray-800 dark:text-dark-text\"\n            >\n              <option value=\"M\">Macho</option>\n              <option value=\"F\">Hembra</option>\n            </select>\n          </div>\n          \n          {/* Estado */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-dark-text-secondary mb-1\">\n              Estado *\n            </label>\n            <select\n              id=\"estado\"\n              name=\"estado\"\n              className=\"form-select\"\n              value={formData.estado}\n              onChange={handleInputChange}\n              required\n            >\n              <option value=\"OK\">Activo</option>\n              <option value=\"DEF\">Baja</option>\n            </select>\n          </div>\n          \n          {/* Código */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-dark-text-secondary mb-1\">\n              Código\n            </label>\n            <input\n              type=\"text\"\n              name=\"cod\"\n              value={formData.cod || ''}\n              onChange={handleInputChange}\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-border rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary dark:bg-gray-800 dark:text-dark-text\"\n            />\n          </div>\n          \n          {/* Número de serie */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-dark-text-secondary mb-1\">\n              Número de serie\n            </label>\n            <input\n              type=\"text\"\n              name=\"num_serie\"\n              value={formData.num_serie || ''}\n              onChange={handleInputChange}\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-border rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary dark:bg-gray-800 dark:text-dark-text\"\n            />\n          </div>\n          \n          {/* Fecha de nacimiento */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-dark-text-secondary mb-1\">\n              Fecha de nacimiento\n            </label>\n            <input\n              type=\"date\"\n              name=\"dob\"\n              value={formData.dob || ''}\n              onChange={handleInputChange}\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-border rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary dark:bg-gray-800 dark:text-dark-text\"\n            />\n          </div>\n          \n          {/* Cuadra */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-dark-text-secondary mb-1\">\n              Cuadra\n            </label>\n            <input\n              type=\"text\"\n              name=\"quadra\"\n              value={formData.quadra || ''}\n              onChange={handleInputChange}\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-dark-border rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary dark:bg-gray-800 dark:text-dark-text\"\n            />\n          </div>\n          \n          {/* Padre */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-dark-text-secondary mb-1\">\n              Padre\n            </label>\n            <select\n              id=\"pare\"\n              name=\"pare\"\n              className=\"form-select\"\n              value={formData.pare || ''}\n              onChange={handleInputChange}\n            >\n              <option value=\"\">Sin padre</option>\n              {potentialFathers.map((father) => (\n                <option key={father.id} value={father.nom}>\n                  {father.nom}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {/* Madre */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-dark-text-secondary mb-1\">\n              Madre\n            </label>\n            <select\n              id=\"mare\"\n              name=\"mare\"\n              className=\"form-select\"\n              value={formData.mare || ''}\n              onChange={handleInputChange}\n            >\n              <option value=\"\">Sin madre</option>\n              {potentialMothers.map((mother) => (\n                <option key={mother.id} value={mother.nom}>\n                  {mother.nom}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n        \n        {/* Amamantando (solo para hembras) */}\n        {formData.genere === 'F' && (\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-dark-text-secondary mb-1\">\n              Amamantando\n            </label>\n            <select\n              id=\"alletar\"\n              name=\"alletar\"\n              className=\"form-select\"\n              value={formData.alletar}\n              onChange={handleInputChange}\n              disabled={formData.genere !== 'F'}\n            >\n              <option value=\"0\">No</option>\n              <option value=\"1\">1 ternero</option>\n              <option value=\"2\">2 terneros</option>\n            </select>\n          </div>\n        )}\n        \n        <div className=\"flex justify-end space-x-3 mt-6\">\n          <button\n            type=\"button\"\n            onClick={onCancel}\n            disabled={submitting}\n            className=\"px-4 py-2 border border-gray-300 dark:border-dark-border rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-dark-text-secondary bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary\"\n          >\n            Cancelar\n          </button>\n          <button\n            type=\"submit\"\n            disabled={submitting}\n            className=\"px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary/80 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary\"\n          >\n            {submitting ? 'Guardando...' : isEditMode ? 'Actualizar' : 'Crear'}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default AnimalForm;\n","import api from './api';\n\n// Interfaces\nexport interface Explotacion {\n  id: number;\n  descripcion: string;\n  explotacio: string;\n  direccion?: string;\n  municipio?: string;\n  provincia?: string;\n  cp?: string;\n  telefono?: string;\n  email?: string;\n  responsable?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ExplotacionCreateDto {\n  descripcion: string;\n  explotacio: string;\n  direccion?: string;\n  municipio?: string;\n  provincia?: string;\n  cp?: string;\n  telefono?: string;\n  email?: string;\n  responsable?: string;\n}\n\nexport interface ExplotacionUpdateDto extends Partial<ExplotacionCreateDto> {}\n\nexport interface ExplotacionFilters {\n  search?: string;\n  page?: number;\n  limit?: number;\n}\n\nexport interface PaginatedResponse<T> {\n  items: T[];\n  total: number;\n  page: number;\n  limit: number;\n  pages: number;\n}\n\n// Métodos del servicio\n/**\n * Obtiene una lista paginada de explotaciones con filtros opcionales\n */\nexport const getExplotaciones = async (filters: ExplotacionFilters = {}): Promise<PaginatedResponse<Explotacion>> => {\n  const params = new URLSearchParams();\n  \n  // Añadir filtros a los parámetros de consulta\n  Object.entries(filters).forEach(([key, value]) => {\n    if (value !== undefined && value !== null) {\n      params.append(key, value.toString());\n    }\n  });\n  \n  const response = await api.get<PaginatedResponse<Explotacion>>(`/explotacions?${params.toString()}`);\n  return response.data;\n};\n\n/**\n * Obtiene todas las explotaciones (sin paginación) para selectores\n */\nexport const getAllExplotaciones = async (): Promise<Explotacion[]> => {\n  // Usar el endpoint de listado pero con un límite alto para obtener todas\n  const response = await api.get<PaginatedResponse<Explotacion>>('/explotacions?limit=1000');\n  return response.data.items;\n};\n\n/**\n * Obtiene una explotación por su ID\n */\nexport const getExplotacionById = async (id: number): Promise<Explotacion> => {\n  const response = await api.get<Explotacion>(`/explotacions/${id}`);\n  return response.data;\n};\n\n/**\n * Crea una nueva explotación\n */\nexport const createExplotacion = async (explotacionData: ExplotacionCreateDto): Promise<Explotacion> => {\n  const response = await api.post<Explotacion>('/explotacions', explotacionData);\n  return response.data;\n};\n\n/**\n * Actualiza una explotación existente\n */\nexport const updateExplotacion = async (id: number, explotacionData: ExplotacionUpdateDto): Promise<Explotacion> => {\n  const response = await api.put<Explotacion>(`/explotacions/${id}`, explotacionData);\n  return response.data;\n};\n\n/**\n * Elimina una explotación\n */\nexport const deleteExplotacion = async (id: number): Promise<void> => {\n  await api.delete(`/explotacions/${id}`);\n};\n","// Utilidades para gestión de roles y permisos\nimport type { UserRole } from '../services/authService';\n\n// Enum para valores de rol\nexport enum Role {\n  ADMINISTRADOR = 'ADMINISTRADOR',\n  GERENTE = 'GERENTE',\n  EDITOR = 'EDITOR',\n  USUARIO = 'USUARIO'\n}\n\n// Mapa de permisos según la matriz por rol\nconst rolePermissions: Record<string, string[]> = {\n  [Role.ADMINISTRADOR]: [\n    'animals.view',\n    'animals.edit',\n    'animals.create',\n    'explotacions.view',\n    'explotacions.edit',\n    'explotacions.create',\n    'users.view',\n    'users.edit',\n    'users.create',\n    'imports.view',\n    'imports.create',\n    'backups.view',\n    'backups.create',\n    'dashboard.view'\n  ],\n  [Role.GERENTE]: [\n    'animals.view',\n    'animals.edit',\n    'animals.create',\n    'explotacions.view',\n    'users.view',\n    'users.edit',\n    'users.create',\n    'dashboard.view'\n  ],\n  [Role.EDITOR]: [\n    'animals.view',\n    'animals.edit',\n    'explotacions.view',\n    'dashboard.view'\n  ],\n  [Role.USUARIO]: [\n    'animals.view',\n    'explotacions.view',\n    'dashboard.view'\n  ]\n};\n\n/**\n * Comprueba si un rol tiene acceso a una ruta específica\n * @param route Ruta o permiso a comprobar\n * @param role Rol del usuario\n * @returns true si tiene acceso, false en caso contrario\n */\nexport const hasAccessToRoute = (route: string, role?: UserRole | null): boolean => {\n  // Si no hay rol, no tiene acceso\n  if (!role) return false;\n  \n  // Convertir a mayúsculas para normalizar\n  const normalizedRole = role.toUpperCase() as keyof typeof Role;\n  \n  // Verificar que sea un rol válido\n  if (!Object.values(Role).includes(normalizedRole as Role)) {\n    console.warn(`Rol '${role}' no reconocido`);\n    return false;\n  }\n  \n  // Obtener permisos para este rol\n  const permissions = rolePermissions[normalizedRole];\n  \n  // Si no hay permisos definidos, no tiene acceso\n  if (!permissions) return false;\n  \n  // Comprobar si tiene el permiso específico\n  return permissions.includes(route);\n};\n\n/**\n * Obtiene todos los permisos de un rol\n * @param role Rol del usuario\n * @returns Array con los permisos del rol\n */\nexport const getRolePermissions = (role?: UserRole | null): string[] => {\n  if (!role) return [];\n  \n  // Convertir a mayúsculas para normalizar\n  const normalizedRole = role.toUpperCase() as keyof typeof Role;\n  \n  // Verificar que sea un rol válido\n  if (!Object.values(Role).includes(normalizedRole as Role)) {\n    console.warn(`Rol '${role}' no reconocido`);\n    return [];\n  }\n  \n  return rolePermissions[normalizedRole] || [];\n};\n\n/**\n * Comprueba si un usuario tiene múltiples permisos\n * @param routes Array de rutas o permisos a comprobar\n * @param role Rol del usuario\n * @returns true si tiene todos los permisos, false en caso contrario\n */\nexport const hasAllPermissions = (routes: string[], role?: UserRole | null): boolean => {\n  if (!role || !routes.length) return false;\n  \n  // Comprobar que tiene todos los permisos\n  return routes.every(route => hasAccessToRoute(route, role));\n};\n\n/**\n * Comprueba si un usuario tiene al menos uno de los permisos\n * @param routes Array de rutas o permisos a comprobar\n * @param role Rol del usuario\n * @returns true si tiene al menos un permiso, false en caso contrario\n */\nexport const hasAnyPermission = (routes: string[], role?: UserRole | null): boolean => {\n  if (!role || !routes.length) return false;\n  \n  // Comprobar que tiene al menos un permiso\n  return routes.some(route => hasAccessToRoute(route, role));\n};\n\n/**\n * Comprueba si un rol puede realizar una acción específica sobre animales\n * @param action Acción a comprobar: 'view', 'edit', 'create'\n * @param role Rol del usuario\n * @returns true si puede realizar la acción, false en caso contrario\n */\nexport const canManageAnimals = (action: 'view' | 'edit' | 'create', role?: UserRole | null): boolean => {\n  return hasAccessToRoute(`animals.${action}`, role);\n};\n\n/**\n * Comprueba si un rol puede realizar una acción específica sobre explotaciones\n * @param action Acción a comprobar: 'view', 'edit', 'create'\n * @param role Rol del usuario\n * @returns true si puede realizar la acción, false en caso contrario\n */\nexport const canManageExplotacions = (action: 'view' | 'edit' | 'create', role?: UserRole | null): boolean => {\n  return hasAccessToRoute(`explotacions.${action}`, role);\n};\n\n/**\n * Comprueba si un rol puede realizar una acción específica sobre usuarios\n * @param action Acción a comprobar: 'view', 'edit', 'create'\n * @param role Rol del usuario\n * @returns true si puede realizar la acción, false en caso contrario\n */\nexport const canManageUsers = (action: 'view' | 'edit' | 'create', role?: UserRole | null): boolean => {\n  return hasAccessToRoute(`users.${action}`, role);\n};\n\n/**\n * Comprueba si un rol puede ver o crear importaciones\n * @param action Acción a comprobar: 'view', 'create'\n * @param role Rol del usuario\n * @returns true si puede realizar la acción, false en caso contrario\n */\nexport const canManageImports = (action: 'view' | 'create', role?: UserRole | null): boolean => {\n  return hasAccessToRoute(`imports.${action}`, role);\n};\n\n/**\n * Comprueba si un rol puede ver o crear backups\n * @param action Acción a comprobar: 'view', 'create'\n * @param role Rol del usuario\n * @returns true si puede realizar la acción, false en caso contrario\n */\nexport const canManageBackups = (action: 'view' | 'create', role?: UserRole | null): boolean => {\n  return hasAccessToRoute(`backups.${action}`, role);\n};\n","---\n// Importar el layout y componentes necesarios\nimport DefaultLayout from '../../../layouts/DefaultLayout.astro';\nimport AnimalForm from '../../../components/animals/AnimalForm';\nimport animalService from '../../../services/animalService';\nimport { getAllExplotaciones } from '../../../services/explotacionService';\nimport { isAuthenticated, getUserRole } from '../../../services/authService';\nimport { hasAccessToRoute } from '../../../utils/roleUtils';\n\n// Comprobar autenticación y permisos\nconst isLoggedIn = isAuthenticated();\nconst userRole = getUserRole();\nconst hasEditPermission = hasAccessToRoute('animals.edit', userRole);\n\n// Redireccionar si no tiene permisos\nif (!isLoggedIn || !hasEditPermission) {\n  return Astro.redirect('/login');\n}\n\n// Obtener el ID del animal desde los parámetros de la URL\nconst { id } = Astro.params;\nlet animal: any = null;\nlet explotaciones: any[] = [];\nlet error: string | null = null;\n\ntry {\n  if (id) {\n    // Obtener los datos del animal\n    animal = await animalService.getAnimalById(parseInt(id));\n    \n    // Obtener listado de explotaciones para el selector\n    explotaciones = await getAllExplotaciones();\n  }\n} catch (err) {\n  console.error('Error al obtener datos del animal:', err);\n  error = 'No se pudo cargar la información del animal';\n}\n\n// Preparar el título de la página\nconst title = animal ? `Editar Animal: ${animal.nom}` : 'Editar Animal';\n---\n\n<DefaultLayout title={title} userRole={userRole}>\n  <!-- Encabezado con botón de volver -->\n  <div class=\"flex items-center mb-6\">\n    <a href={`/animals/${id}`} class=\"btn btn-outline-secondary mr-4 flex items-center\">\n      <span class=\"mr-1\">←</span> Volver a detalles\n    </a>\n    <h1 class=\"text-3xl font-bold text-gray-900 dark:text-dark-text\">\n      {title}\n    </h1>\n  </div>\n\n  <!-- Mensaje de error -->\n  {error && (\n    <div class=\"bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6\">\n      <p>{error}</p>\n      <p>Vuelve al <a href=\"/animals\" class=\"underline\">listado de animales</a></p>\n    </div>\n  )}\n\n  <!-- Formulario de edición -->\n  {animal && (\n    <div class=\"bg-white dark:bg-dark-card rounded-lg shadow p-6\">\n      <AnimalForm \n        client:load \n        animalData={animal}\n        explotaciones={explotaciones}\n        isEditMode={true}\n        onSuccess={() => {\n          window.location.href = `/animals/${id}`;\n        }}\n        onCancel={() => {\n          window.location.href = `/animals/${id}`;\n        }}\n      />\n    </div>\n  )}\n</DefaultLayout>\n\n<script>\n  // Script para manejar interacciones adicionales\n  document.addEventListener('DOMContentLoaded', () => {\n    // Futura funcionalidad si es necesaria\n  });\n</script>\n"],"names":["Role","$$createAstro","$$createComponent","Astro","$$render","$$renderComponent","DefaultLayout","$$result","$$maybeRenderHead","$$addAttribute"],"mappings":"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"}