{"version":3,"file":"_id_.astro.mjs","sources":["../../../../../src/components/animals/AnimalForm.astro","../../../../../src/components/animals/HabitualesForm.astro","../../../../../src/pages/animals/update/[id].astro"],"sourcesContent":["---\n/**\n * Formulario general para actualización de datos de animales\n */\nimport { t, getCurrentLanguage } from '../../i18n/config';\n\ninterface Props {\n  animal: any;\n}\n\nconst { animal } = Astro.props;\n\n// Obtener el idioma actual\nconst lang = getCurrentLanguage();\nconsole.log('[AnimalForm] Idioma detectado:', lang);\n\n// Función para convertir fecha de cualquier formato a YYYY-MM-DD para inputs HTML\nfunction formatDateForInput(dob) {\n  if (!dob || typeof dob !== 'string') return '';\n  \n  // Si ya está en formato YYYY-MM-DD, devolverlo tal cual\n  if (/^\\d{4}-\\d{2}-\\d{2}$/.test(dob)) {\n    return dob;\n  }\n  \n  // Si está en formato DD/MM/YYYY, convertirlo a YYYY-MM-DD\n  const match = dob.match(/^([0-9]{2})\\/([0-9]{2})\\/([0-9]{4})$/);\n  if (match) {\n    return `${match[3]}-${match[2]}-${match[1]}`;\n  }\n  \n  // Intentar parsear como fecha\n  try {\n    const fecha = new Date(dob);\n    if (!isNaN(fecha.getTime())) {\n      const year = fecha.getFullYear();\n      const month = (fecha.getMonth() + 1).toString().padStart(2, '0');\n      const day = fecha.getDate().toString().padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    }\n  } catch (e) {\n    console.error('Error al parsear fecha:', e);\n  }\n  \n  // Si no coincide con ningún formato conocido, devolver cadena vacía\n  return '';\n}\n---\n\n<form id=\"form-general\" class=\"space-y-6\" data-id={animal.id}>\n  <div class=\"flex justify-end mb-4\">\n    <button id=\"show-debug\" class=\"text-xs bg-gray-200 hover:bg-gray-300 text-gray-700 px-2 py-1 rounded\" type=\"button\" style=\"display: none;\">{t('animals.form.show_debug', lang)}</button>\n  </div>\n  <!-- Panel de depuración oculto -->\n  <div id=\"debug-info\" class=\"p-4 mb-4 bg-yellow-50 border border-yellow-200 rounded-lg text-xs sticky top-0 z-50 overflow-auto\" style=\"display: none;\">\n    <div class=\"flex justify-between items-center mb-2\">\n      <p class=\"font-bold text-red-700\">{t('animals.form.debug_mode', lang)}</p>\n      <button id=\"clear-debug\" class=\"text-xs bg-red-200 hover:bg-red-300 text-red-800 px-2 py-1 rounded\" type=\"button\">{t('animals.form.clear', lang)}</button>\n    </div>\n    <div id=\"debug-content\" class=\"whitespace-pre-wrap overflow-auto h-60 border border-yellow-300 p-2 bg-white\"></div>\n  </div>\n  <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n    <!-- Columna 1 -->\n    <div class=\"space-y-4\">\n      <div>\n        <label for=\"nombre\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">{t('animals.form.name', lang)}</label>\n        <input \n          type=\"text\" \n          id=\"nombre\" \n          name=\"nombre\" \n          class=\"w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" \n          value={animal.nom || ''} \n          data-original-value={animal.nom || ''}\n          oninput=\"this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';\"\n        >\n      </div>\n      \n      <div>\n        <label for=\"genere\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">{t('animals.form.gender', lang)}</label>\n        <select \n          id=\"genere\" \n          name=\"genere\" \n          class=\"w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n          data-original-value={animal.genere || ''}\n          onchange=\"this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';\"\n        >\n          <option value=\"M\" selected={animal.genere === 'M'}>{t('animals.form.male', lang)}</option>\n          <option value=\"F\" selected={animal.genere === 'F'}>{t('animals.form.female', lang)}</option>\n        </select>\n      </div>\n      \n      <div>\n        <label for=\"dob\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">{t('animals.form.birth_date', lang)}</label>\n        <input \n          type=\"date\" \n          id=\"dob\" \n          name=\"dob\" \n          class=\"w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" \n          value={formatDateForInput(animal.dob)} \n          data-original-value={formatDateForInput(animal.dob)}\n          oninput=\"this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';\"\n        >\n      </div>\n      \n      <div>\n        <label for=\"codigo\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">{t('animals.form.code', lang)}</label>\n        <input \n          type=\"text\" \n          id=\"codigo\" \n          name=\"codigo\" \n          class=\"w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" \n          value={animal.cod || ''} \n          data-original-value={animal.cod || ''}\n          oninput=\"this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';\"\n        >\n      </div>\n      \n      <div>\n        <label for=\"num_serie\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">{t('animals.form.serial_number', lang)}</label>\n        <input \n          type=\"text\" \n          id=\"num_serie\" \n          name=\"num_serie\" \n          class=\"w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" \n          value={animal.num_serie || ''} \n          data-original-value={animal.num_serie || ''}\n          oninput=\"this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';\"\n        >\n      </div>\n    </div>\n    \n    <!-- Columna 2 -->\n    <div class=\"space-y-4\">\n      <div>\n        <label for=\"explotacio\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">{t('animals.form.exploitation', lang)}</label>\n        <input \n          type=\"text\" \n          id=\"explotacio\" \n          name=\"explotacio\" \n          class=\"w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" \n          value={animal.explotacio || ''} \n          data-original-value={animal.explotacio || ''}\n          oninput=\"this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';\"\n        >\n      </div>\n      \n      <div>\n        <label for=\"origen\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">{t('animals.form.origin', lang)}</label>\n        <input \n          type=\"text\" \n          id=\"origen\" \n          name=\"origen\" \n          class=\"w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" \n          value={animal.origen || animal.quadra || ''} \n          data-original-value={animal.origen || animal.quadra || ''}\n          oninput=\"this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';\"\n        >\n      </div>\n      \n      <div>\n        <label for=\"pare\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">{t('animals.form.father', lang)}</label>\n        <input \n          type=\"text\" \n          id=\"pare\" \n          name=\"pare\" \n          class=\"w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" \n          value={animal.pare || ''} \n          data-original-value={animal.pare || ''}\n          oninput=\"this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';\"\n        >\n      </div>\n      \n      <div>\n        <label for=\"mare\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">{t('animals.form.mother', lang)}</label>\n        <input \n          type=\"text\" \n          id=\"mare\" \n          name=\"mare\" \n          class=\"w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" \n          value={animal.mare || ''} \n          data-original-value={animal.mare || ''}\n          oninput=\"this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';\"\n        >\n        <div class=\"text-xs text-gray-500 mt-1\">{t('animals.form.mother_hint', lang)}</div>\n      </div>\n      \n\n    </div>\n  </div>\n  \n  <!-- Campo de Observaciones (ancho completo) -->\n  <div class=\"space-y-2\">\n    <label for=\"observaciones\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">{t('animals.form.observations', lang)}</label>\n    <textarea\n      id=\"observaciones\"\n      name=\"observaciones\"\n      rows=\"4\"\n      maxlength=\"2000\"\n      class=\"w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n      data-original-value={animal.observaciones || ''}\n      oninput=\"this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';\"\n    >{animal.observaciones || ''}</textarea>\n    <div class=\"text-xs text-gray-500 mt-1\">{t('animals.form.observations_hint', lang)}</div>\n  </div>\n  \n  <!-- Leyenda para campos obligatorios -->\n  <div class=\"text-sm text-gray-500 dark:text-gray-400 mt-2 mb-4\">\n    {t('animals.form.pending_changes', lang)}\n  </div>\n  \n  <!-- Navegación y botones secundarios -->\n  <div class=\"flex space-x-2 mt-6\">\n    <a href=\"/animals\" class=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors flex items-center\">\n      <span class=\"mr-1\">←</span> {t('animals.form.back', lang)}\n    </a>\n    <a href={`/animals/${animal.id}`} class=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors\">\n      {t('animals.form.view_detail', lang)}\n    </a>\n  </div>\n  \n  <!-- Botones de acción principales -->\n  <div class=\"flex justify-between items-center mt-8\">\n    <!-- Espacio vacío a la izquierda para mantener el botón eliminar a la derecha -->\n    <div></div>\n    \n    <!-- Contenedor central para el botón de guardar cambios -->\n    <div class=\"flex justify-center\">\n      <!-- Botón para guardar cambios (verde lima, centrado) -->\n      <button type=\"submit\" id=\"submit-button\" class=\"px-4 py-2 bg-lime-500 text-white rounded-md hover:bg-lime-600 transition-colors shadow-md\">\n        {t('animals.form.save_changes', lang)}\n      </button>\n    </div>\n    \n    <!-- Script para bloquear el botón de eliminar animal para roles restringidos -->\n    <script is:inline>\n      // Comprobar rol de usuario directamente aquí\n      (function() {\n        try {\n          const token = localStorage.getItem('token');\n          if (token) {\n            const payload = JSON.parse(atob(token.split('.')[1]));\n            const role = payload.role.toLowerCase();\n            \n            // Variable global para que otros scripts sepan que ya está bloqueado\n            window.deleteAnimalButtonBlocked = (role === 'editor' || role === 'usuario');\n            \n            document.addEventListener('DOMContentLoaded', function() {\n              // Si se ejecuta muy rápido, esperar un tick para asegurar que el DOM esté listo\n              setTimeout(() => {\n                if (window.deleteAnimalButtonBlocked) {\n                  console.log('BLOQUEANDO BOTÓN ELIMINAR ANIMAL INMEDIATAMENTE PARA ROL:', role);\n                  const btn = document.getElementById('delete-animal-btn');\n                  if (btn) {\n                    btn.disabled = true;\n                    btn.style.opacity = '0.5';\n                    btn.style.cursor = 'not-allowed';\n                    btn.style.pointerEvents = 'none';\n                    btn.title = 'NO TIENES PERMISOS PARA ELIMINAR ANIMALES';\n                    \n                    // Añadir icono de candado\n                    if (!btn.querySelector('.lock-icon')) {\n                      const lockIcon = document.createElement('span');\n                      lockIcon.textContent = ' 🔒';\n                      lockIcon.className = 'ml-1 lock-icon';\n                      btn.appendChild(lockIcon);\n                    }\n                    \n                    // Prevenir navegación\n                    btn.onclick = function(e) {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      alert('NO TIENES PERMISOS PARA ELIMINAR ANIMALES');\n                      return false;\n                    };\n                  }\n                }\n              }, 0);\n            });\n          }\n        } catch (e) {\n          console.error('Error al verificar permisos para botón Eliminar Animal:', e);\n        }\n      })();\n    </script>\n    \n    <!-- Botón para eliminar animal (rojo, a la derecha) -->\n    <button type=\"button\" id=\"delete-animal-btn\" class=\"px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors flex items-center shadow-md\">\n      <svg class=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"></path>\n      </svg>\n      Eliminar Animal\n    </button>\n  </div>\n</form>\n\n<script>\n  // El script se carga desde el archivo principal [id].astro\n</script>\n","---\n/**\n * Formulario para cambios habituales en animales\n */\nimport { t, getCurrentLanguage } from '../../i18n/config';\n\ninterface Props {\n  animal: any;\n}\n\nconst { animal } = Astro.props;\n\n// Obtener el idioma actual\nconst lang = getCurrentLanguage();\nconsole.log('[HabitualesForm] Idioma detectado:', lang);\n---\n\n<form id=\"form-habituales\" class=\"space-y-6\">\n  <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">{t('animals.habitual.title', lang)}</h3>\n  <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n    <!-- Columna 1 -->\n    <div class=\"space-y-4\">\n      <div>\n        <label for=\"estado_hab\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">{t('animals.habitual.status', lang)}</label>\n        <select \n          id=\"estado_hab\" \n          name=\"estado_hab\" \n          class=\"w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n          data-original-value={animal.estado || ''}\n          onchange=\"this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';\"\n          \n        >\n          <option value=\"OK\" selected={animal.estado === 'OK'}>{t('animals.habitual.active', lang)}</option>\n          <option value=\"DEF\" selected={animal.estado === 'DEF'}>{t('animals.habitual.deceased', lang)}</option>\n        </select>\n        {/* Se ha eliminado el mensaje de alerta que indicaba que no se puede cambiar el estado */}\n      </div>\n    </div>\n    \n    <!-- Columna 2 -->\n    <div class=\"space-y-4\">\n      {animal.genere === 'F' && (\n        <div>\n          <label for=\"alletar\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">{t('animals.habitual.nursing_status', lang)}</label>\n          <select \n            id=\"alletar\" \n            name=\"alletar\" \n            class=\"w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n            data-original-value={animal.alletar !== null ? animal.alletar.toString() : ''}\n            onchange=\"this.style.borderColor = this.value !== this.getAttribute('data-original-value') ? '#3b82f6' : '#d1d5db';\"\n          >\n            <option value=\"0\" selected={animal.alletar === 0 || animal.alletar === '0'}>{t('animals.habitual.not_nursing', lang)}</option>\n            <option value=\"1\" selected={animal.alletar === 1 || animal.alletar === '1'}>{t('animals.habitual.nursing_one', lang)}</option>\n            <option value=\"2\" selected={animal.alletar === 2 || animal.alletar === '2'}>{t('animals.habitual.nursing_two', lang)}</option>\n          </select>\n        </div>\n      )}\n      \n      <!-- Botón de guardar (alineado a la derecha) -->\n      <div class=\"mt-4 flex justify-end\">\n        <button type=\"submit\" class=\"px-4 py-2 bg-primary text-white rounded-md hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50\">\n          {t('animals.habitual.save_changes', lang)}\n        </button>\n      </div>\n    </div>\n  </div>\n\n  {animal.genere === 'F' && (\n    <div class=\"mt-10 pt-6 border-t border-gray-200 dark:border-gray-700\">\n      <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">{t('animals.habitual.new_birth_title', lang)}</h3>\n      \n      <div class=\"space-y-4\">\n        <div>\n          <label for=\"part\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">{t('animals.habitual.birth_date', lang)}</label>\n          <input \n            type=\"date\" \n            id=\"part\" \n            name=\"part\" \n            class=\"w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" \n          >\n        </div>\n        \n        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label for=\"GenereT\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">{t('animals.habitual.offspring_gender', lang)}</label>\n            <select \n              id=\"GenereT\" \n              name=\"GenereT\" \n              class=\"w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n            >\n              <option value=\"\">{t('animals.habitual.select', lang)}</option>\n              <option value=\"M\">{t('animals.form.male', lang)}</option>\n              <option value=\"F\">{t('animals.form.female', lang)}</option>\n              <option value=\"esforrada\">{t('animals.habitual.miscarriage', lang)}</option>\n            </select>\n          </div>\n          \n          <div>\n            <label for=\"EstadoT\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">{t('animals.habitual.offspring_status', lang)}</label>\n            <select \n              id=\"EstadoT\" \n              name=\"EstadoT\" \n              class=\"w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n            >\n              <option value=\"\">{t('animals.habitual.select', lang)}</option>\n              <option value=\"OK\">{t('animals.habitual.active', lang)}</option>\n              <option value=\"DEF\">{t('animals.habitual.deceased', lang)}</option>\n            </select>\n          </div>\n        </div>\n        \n        <div>\n          <label for=\"observacions\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">{t('animals.habitual.observations', lang)}</label>\n          <textarea \n            id=\"observacions\" \n            name=\"observacions\" \n            rows=\"3\"\n            maxlength=\"200\"\n            class=\"w-full rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n          ></textarea>\n          <div class=\"text-xs text-gray-500 mt-1\">{t('animals.habitual.observations_hint', lang)}</div>\n        </div>\n        \n        <div class=\"flex justify-end\">\n          <button \n            type=\"button\" \n            id=\"registrar-parto-btn\"\n            class=\"px-4 py-2 bg-primary text-white rounded-md hover:bg-primary-dark focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50\"\n          >\n            {t('animals.habitual.register_birth', lang)}\n          </button>\n        </div>\n      </div>\n    </div>\n  )}\n</form>\n\n<script>\n  // Configurar el botón para registrar nuevo parto\n  document.addEventListener('DOMContentLoaded', function() {\n    const registrarPartoBtn = document.getElementById('registrar-parto-btn');\n    \n    if (registrarPartoBtn) {\n      console.log('Configurando botón de registro de partos...');\n      \n      registrarPartoBtn.addEventListener('click', async function() {\n        console.log('Botón de registrar parto clickeado');\n        \n        try {\n          // Obtener datos del formulario de partos\n          const part = document.getElementById('part')?.value;\n          const genereT = document.getElementById('GenereT')?.value;\n          const estadoT = document.getElementById('EstadoT')?.value;\n          const observacions = document.getElementById('observacions')?.value;\n          \n          console.log('Datos del parto:', { part, genereT, estadoT, observacions });\n          \n          // Validar que los campos requeridos tengan valor\n          if (!part || !genereT || !estadoT) {\n            window.mostrarMensaje('Por favor, completa todos los campos obligatorios (fecha, género y estado)', 'error');\n            return;\n          }\n          \n          // Formatear la fecha si es necesario (de YYYY-MM-DD a DD/MM/YYYY)\n          let fechaFormateada = part;\n          if (part.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n            const [year, month, day] = part.split('-');\n            fechaFormateada = `${day}/${month}/${year}`;\n          }\n          \n          // Preparar datos para enviar\n          const datosParto = {\n            part: fechaFormateada,\n            GenereT: genereT,\n            EstadoT: estadoT\n          };\n          \n          // Añadir observaciones solo si tiene valor\n          if (observacions) {\n            datosParto.observacions = observacions;\n          }\n          \n          console.log('Datos del parto formateados:', datosParto);\n          \n          // Obtener token de autenticación e ID del animal\n          const token = localStorage.getItem('token') || 'admin123'; // Token para desarrollo\n          const animalId = window.animalId; // ID del animal establecido en la página principal\n          \n          if (!animalId) {\n            window.mostrarMensaje('Error: No se pudo determinar el ID del animal', 'error');\n            return;\n          }\n          \n          // Mostrar mensaje de proceso\n          window.mostrarMensaje('Registrando nuevo parto...', 'info');\n          \n          // Determinar la URL base de la API dinámicamente \n          let apiBaseUrl = '';\n          // Obtenemos la API base URL desde la variable global que configuramos en la página principal\n          if (typeof window !== 'undefined' && window.apiBaseUrl) {\n            apiBaseUrl = window.apiBaseUrl;\n            console.log('Usando URL para API desde variable global: ' + apiBaseUrl);\n          } else {\n            apiBaseUrl = 'http://127.0.0.1:8000/api/v1';\n            console.log('Usando URL fallback para API: ' + apiBaseUrl);\n          }\n          \n          // Añadir slash final para evitar redirecciones 307\n          const endpoint = `/animals/${animalId}/partos/`;\n          console.log(`Enviando petición a: ${apiBaseUrl}${endpoint}`);\n          \n          // Enviar datos al servidor para crear el parto\n          const response = await fetch(`${apiBaseUrl}${endpoint}`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify(datosParto)\n          });\n          \n          console.log(`Respuesta recibida: ${response.status} ${response.statusText}`);\n          \n          // Procesar respuesta\n          if (response.ok) {\n            const resultado = await response.json();\n            console.log('Respuesta de registro de parto:', resultado);\n            \n            window.mostrarMensaje('¡Parto registrado con éxito!', 'success');\n            \n            // Limpiar formulario\n            document.getElementById('part').value = '';\n            document.getElementById('GenereT').value = '';\n            document.getElementById('EstadoT').value = '';\n            if (document.getElementById('observacions')) {\n              document.getElementById('observacions').value = '';\n            }\n            \n            // Redirigir a la página de detalle después de un breve delay\n            setTimeout(() => {\n              window.location.href = `/animals/${animalId}`;\n            }, 1500);\n          } else {\n            // Si hay error, intentar obtener mensaje\n            let mensajeError = 'Error al registrar el parto';\n            try {\n              const errorData = await response.json();\n              mensajeError = errorData.detail || errorData.message || mensajeError;\n              console.error('Error detallado:', errorData);\n            } catch (e) {\n              console.error('Error al procesar respuesta de error:', e);\n            }\n            \n            window.mostrarMensaje(`Error: ${mensajeError}`, 'error');\n          }\n        } catch (error) {\n          console.error('Error en el registro de parto:', error);\n          window.mostrarMensaje(`Error: ${error.message || 'Error desconocido al registrar el parto'}`, 'error');\n        }\n      });\n    } else {\n      console.warn('No se encontró el botón de registrar parto');\n    }\n  });\n</script>\n","---\nimport MainLayout from '../../../components/layout/MainLayout.astro';\nimport AnimalForm from '../../../components/animals/AnimalForm.astro';\nimport HabitualesForm from '../../../components/animals/HabitualesForm.astro';\nimport Tabs from '../../../components/ui/Tabs.astro';\nimport MessageContainer from '../../../components/ui/MessageContainer.astro';\nimport animalService from '../../../services/animalService';\nimport { t, getCurrentLanguage } from '../../../i18n/config';\n\n// Importar script corrector de traducciones - solución del lado del cliente\n\n// Obtener el ID del animal de los parámetros de la URL\nconst { id } = Astro.params;\n\n// Obtener el rol del usuario de la sesión\nconst userRole = Astro.cookies.get('userRole')?.value || 'user';\n\n// Obtener el idioma actual\nconst lang = getCurrentLanguage();\nconsole.log('[AnimalUpdatePage] Idioma detectado:', lang);\n\n// Estado inicial\nlet animal = null;\nlet loading = true;\nlet error = null;\nlet title = t('animals.update.loading', lang);\n\ntry {\n  // Obtener los datos del animal directamente del servicio\n  animal = await animalService.getAnimalById(Number(id));\n\n  // Convertir el animal a un formato más sencillo para el formulario\n  if (animal && animal.data) {\n    animal = animal.data;\n  }\n\n  title = `${t('animals.update.edit', lang)} ${animal.nom}`;\n  loading = false;\n} catch (err) {\n  console.error('Error al cargar el animal:', err);\n  error = err.message || t('animals.update.error_loading', lang);\n  loading = false;\n  title = t('animals.update.error', lang);\n}\n\n// Configuración de pestañas - no usamos el componente Tabs para tener más control\n---\n\n<MainLayout title={title} userRole={userRole} currentPath=\"/animals\">\n  <!-- Encabezado con botón de volver -->\n  <div class=\"mb-6\">\n    <div class=\"flex items-center gap-2 mb-2\">\n      <a href={`/animals/${id}`} class=\"flex items-center text-primary hover:text-primary/80 dark:text-primary-light dark:hover:text-primary transition-colors\">\n        <span class=\"mr-1\">←</span> {t('animals.update.return_to_detail', lang)}\n      </a>\n    </div>\n    <h1 class=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">{animal?.nom}</h1>\n    <p class=\"text-gray-600 dark:text-gray-300\">ID: {id}</p>\n  </div>\n\n  <!-- Estado de carga -->\n  {loading && (\n    <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-100 dark:border-gray-700 p-6\">\n      <div class=\"flex justify-center items-center py-10\">\n        <div class=\"text-center\">\n          <div class=\"inline-block animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-lime-500 mb-3\"></div>\n          <p class=\"text-gray-600 dark:text-gray-300\">{t('animals.update.loading_message', lang)}</p>\n        </div>\n      </div>\n    </div>\n  )}\n\n  <!-- Mensaje de error -->\n  {error && (\n    <div class=\"bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-200 p-4 rounded mb-6\">\n      <p>{t('animals.update.error_message', lang)}</p>\n      <button class=\"mt-2 bg-red-200 dark:bg-red-800 px-4 py-2 rounded hover:bg-red-300 dark:hover:bg-red-700 transition\" onclick=\"history.back()\">\n        {t('common.back', lang)}\n      </button>\n    </div>\n  )}\n\n  {!loading && !error && animal && (\n    <div class=\"grid grid-cols-1 gap-6\">\n      <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-100 dark:border-gray-700\">\n        <div class=\"border-b border-gray-200 dark:border-gray-700\">\n          <!-- Implementación directa de pestañas con traducciones -->\n          <div class=\"flex\" id=\"tabs-animal-update\">\n            <button \n              id=\"tab-general\" \n              data-content=\"content-general\" \n              class=\"tab-button px-6 py-3 font-medium bg-lime-500 text-white\"\n            >\n              {t('animals.update.general_data', lang)}\n            </button>\n            <button \n              id=\"tab-habitual\" \n              data-content=\"content-habitual\" \n              class=\"tab-button px-6 py-3 font-medium bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-300\"\n            >\n              {t('animals.update.common_changes', lang)}\n            </button>\n          </div>\n        </div>\n        </div>\n        <div class=\"p-6\">\n          <!-- Pestaña 1: Datos Generales -->\n          <div id=\"content-general\" class=\"tab-content\">\n            <AnimalForm animal={animal} />\n          </div>\n          \n          <!-- Pestaña 2: Cambios Habituales -->\n          <div id=\"content-habitual\" class=\"tab-content hidden\">\n            <HabitualesForm animal={animal} />\n          </div>\n        </div>\n      </div>\n      \n      <!-- Modal de confirmación para borrar animal -->\n      <div id=\"delete-animal-modal\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden\">\n        <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg max-w-md w-full p-6 mx-4\">\n          <div class=\"flex items-center justify-between mb-4\">\n            <h3 class=\"text-xl font-bold text-gray-900 dark:text-white\">{t('animals.update.confirm_delete_title', lang)}</h3>\n            <button id=\"close-delete-modal\" class=\"text-gray-400 hover:text-gray-500 focus:outline-none\">\n              <svg class=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n              </svg>\n            </button>\n          </div>\n          <div class=\"mb-6\">\n            <p class=\"text-gray-700 dark:text-gray-300 mb-4\">{t('animals.update.confirm_delete_text', lang)}</p>\n          </div>\n          <div class=\"flex justify-end space-x-4\">\n            <button id=\"cancel-delete\" class=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors\">\n              {t('common.cancel', lang)}\n            </button>\n            <button id=\"confirm-delete\" class=\"px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors\">\n              {t('animals.update.delete_permanently', lang)}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )}\n\n  <!-- Script para bloquear el botón de eliminar animales para editores -->\n  <script is:inline src=\"/scripts/block-delete-button.js\"></script>\n  <!-- Script corrector de traducciones del lado del cliente -->\n  <script is:inline src=\"/scripts/translation-fixer.js\"></script>\n</MainLayout>\n\n<script is:inline define:vars={{id}}>\n  // Variables globales\n  window.animalId = id;\n  \n  // Función para mostrar mensajes\n  window.mostrarMensaje = function(mensaje, tipo = 'info') {\n    const container = document.createElement('div');\n    container.className = 'fixed bottom-4 right-4 z-50 animate-slideIn';\n    \n    // Colores según el tipo\n    let colorClase = 'bg-blue-50 border-blue-200 text-blue-800';\n    if (tipo === 'error') {\n      colorClase = 'bg-red-50 border-red-200 text-red-800';\n    } else if (tipo === 'success') {\n      colorClase = 'bg-green-50 border-green-200 text-green-800';\n    }\n    \n    // Determinar qué icono mostrar\n    let icono = 'ℹ️'; // Icono de info por defecto\n    if (tipo === 'error') {\n      icono = '❌'; // Icono de error\n    } else if (tipo === 'success') {\n      icono = '✅'; // Icono de éxito\n    }\n    \n    container.innerHTML = `\n      <div class=\"flex items-center p-4 ${colorClase} rounded-lg border shadow-lg max-w-md\">\n        <div class=\"mr-3 text-xl\">\n          ${icono}\n        </div>\n        <div>\n          <p class=\"font-medium\">${mensaje}</p>\n        </div>\n        <button class=\"ml-auto pl-3 hover:opacity-70\" onclick=\"this.parentNode.parentNode.remove()\">\n          <svg class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n          </svg>\n        </button>\n      </div>\n    `;\n    \n    document.body.appendChild(container);\n    \n    // Auto eliminar después de 5 segundos\n    setTimeout(() => {\n      container.remove();\n    }, 5000);\n  };\n</script>\n\n<!-- Script para forzar recarga completa al cambiar de idioma -->\n<script>\n  // Comprobar si hay un cambio de idioma\n  document.addEventListener('DOMContentLoaded', function() {\n    // Si detectamos que se cambió el idioma recientemente (a través de localStorage)\n    const currentLang = localStorage.getItem('userLanguage');\n    const lastPageLang = localStorage.getItem('lastPageLang');\n    \n    console.log('[Language] Página cargada - Idioma actual:', currentLang, 'Idioma anterior:', lastPageLang);\n    \n    // Si detectamos un cambio de idioma y no hay parámetro de URL (para evitar bucles)\n    if (lastPageLang && currentLang !== lastPageLang && !window.location.search.includes('lang=')) {\n      console.log('[Language] Detectado cambio de idioma, forzando recarga completa');\n      \n      // Añadir parámetro para forzar recarga y limpiar caché\n      const url = new URL(window.location.href);\n      url.searchParams.set('lang', currentLang);\n      url.searchParams.set('_t', Date.now());\n      \n      // Recargar la página con los parámetros\n      window.location.href = url.toString();\n      return;\n    }\n    \n    // Guardar el idioma actual para futuras comparaciones\n    localStorage.setItem('lastPageLang', currentLang);\n  });\n</script>\n\n<!-- Script para manejar formularios -->\n<script>\n  // Script para manejar las pestañas traducidas\n  document.addEventListener('DOMContentLoaded', function() {\n    console.log('[Tabs] Inicializando pestañas de animal con traducciones');\n    \n    // Obtener elementos de las pestañas\n    const tabsContainer = document.getElementById('tabs-animal-update');\n    if (!tabsContainer) {\n      console.error('[Tabs] No se encontró el contenedor de pestañas');\n      return;\n    }\n    \n    const tabButtons = tabsContainer.querySelectorAll('.tab-button');\n    console.log(`[Tabs] Encontradas ${tabButtons.length} pestañas`);\n    \n    // Función para activar una pestaña\n    function activateTab(tabId) {\n      console.log(`[Tabs] Activando pestaña: ${tabId}`);\n      \n      // Actualizar clases de botones\n      tabButtons.forEach(btn => {\n        const isActive = btn.id === `tab-${tabId}`;\n        btn.classList.toggle('bg-lime-500', isActive);\n        btn.classList.toggle('text-white', isActive);\n        btn.classList.toggle('bg-gray-200', !isActive);\n        btn.classList.toggle('text-gray-700', !isActive);\n        btn.classList.toggle('dark:bg-gray-700', !isActive);\n        btn.classList.toggle('dark:text-gray-300', !isActive);\n      });\n      \n      // Mostrar/ocultar contenido\n      const contents = document.querySelectorAll('.tab-content');\n      contents.forEach(content => {\n        const isVisible = content.id === `content-${tabId}`;\n        content.classList.toggle('hidden', !isVisible);\n        console.log(`[Tabs] Contenido ${content.id}: ${isVisible ? 'visible' : 'oculto'}`);\n      });\n    }\n    \n    // Manejar clics en pestañas\n    tabButtons.forEach(btn => {\n      btn.addEventListener('click', () => {\n        const tabId = btn.id.replace('tab-', '');\n        activateTab(tabId);\n      });\n    });\n    \n    // Activar la primera pestaña por defecto\n    activateTab('general');\n  });\n  \n  // Configurar formularios cuando la página esté cargada\n  document.addEventListener('DOMContentLoaded', function() {\n    console.log('DOM completamente cargado y analizado');\n    \n    // Definir el ID del animal como variable global para que otros scripts puedan usarlo\n    const urlParts = window.location.pathname.split('/');\n    const animalId = urlParts[urlParts.length - 1]; // El último segmento de la URL es el ID\n    \n    // Definimos variables globales para que los componentes puedan acceder a ellos\n    window.animalId = animalId;\n    window.apiBaseUrl = 'http://127.0.0.1:8000/api/v1'; // Usamos la URL base por defecto\n    \n    console.log(`[AnimalUpdate] ID del animal definido globalmente: ${window.animalId}`);\n    console.log(`[AnimalUpdate] URL base API definida globalmente: ${window.apiBaseUrl}`);\n    \n    // Configurar pestañas\n    const tabs = document.querySelectorAll('[data-tab]');\n    const tabContents = document.querySelectorAll('.tab-content');\n    \n    tabs.forEach(tab => {\n      tab.addEventListener('click', function() {\n        const tabId = this.getAttribute('data-tab');\n        \n        // Activar tab (usando color verde lima para las pestañas activas)\n        tabs.forEach(t => t.classList.remove('text-lime-500', 'border-lime-500', 'text-primary', 'border-primary', 'dark:text-primary-light', 'dark:border-primary-light'));\n        this.classList.add('text-lime-500', 'border-lime-500', 'dark:text-lime-400', 'dark:border-lime-400');\n        \n        // Mostrar contenido\n        tabContents.forEach(content => content.classList.add('hidden'));\n        document.getElementById(`content-${tabId}`).classList.remove('hidden');\n        \n        console.log(`Cambio a pestaña ${tabId}`);\n      });\n    });\n    \n    // Capturar los formularios\n    const formGeneral = document.getElementById('form-general');\n    const formHabitual = document.getElementById('form-habitual');\n    const formHabituales = document.getElementById('form-habituales');\n    \n    console.log('Configurando formularios...');\n    console.log('Form general encontrado:', formGeneral ? 'Sí' : 'No');\n    console.log('Form habitual encontrado:', formHabitual ? 'Sí' : 'No');\n    console.log('Form habituales encontrado:', formHabituales ? 'Sí' : 'No');\n    \n    // Configurar botón de registrar parto\n    const registrarPartoBtn = document.getElementById('registrar-parto-btn');\n    if (registrarPartoBtn) {\n      console.log('Botón de registrar parto encontrado, configurando...');\n      registrarPartoBtn.addEventListener('click', function() {\n        console.log('Botón de registrar parto clickeado');\n        handleRegistrarParto();\n      });\n    } else {\n      console.log('Botón de registrar parto NO encontrado');\n    }\n    \n    // Configurar manejadores para formularios\n    if (formGeneral) {\n      console.log('Formulario general encontrado, configurando...');\n      formGeneral.addEventListener('submit', function(event) {\n        event.preventDefault();\n        console.log('Formulario general enviado');\n        handleFormSubmit(formGeneral);\n      });\n    } else {\n      console.log('Formulario general no encontrado');\n    }\n    \n    // Probar con ambos nombres posibles para el formulario de cambios habituales\n    if (formHabitual) {\n      console.log('Formulario habitual encontrado, configurando...');\n      formHabitual.addEventListener('submit', function(event) {\n        event.preventDefault();\n        console.log('Formulario habitual enviado');\n        handleFormSubmit(formHabitual);\n      });\n    } else {\n      console.log('Formulario habitual no encontrado');\n    }\n    \n    if (formHabituales) {\n      console.log('Formulario habituales encontrado, configurando...');\n      formHabituales.addEventListener('submit', function(event) {\n        event.preventDefault();\n        console.log('Formulario habituales enviado');\n        handleFormSubmit(formHabituales);\n      });\n    } else {\n      console.log('Formulario habituales no encontrado');\n    }\n    \n    // Para capturar cualquier otro formulario en la página\n    document.querySelectorAll('form').forEach(form => {\n      if (!form._hasSubmitListener) {\n        form.addEventListener('submit', function(event) {\n          event.preventDefault();\n          console.log('Formulario genérico enviado:', form.id);\n          handleFormSubmit(form);\n        });\n        form._hasSubmitListener = true;\n      }\n    });\n  });\n  \n  // Función para manejar el envío del formulario\n  async function handleFormSubmit(form) {\n    try {\n      // Registrar el formulario que se está enviando\n      console.log('Procesando formulario:', form.id);\n      \n      // Obtener datos del formulario\n      const formData = new FormData(form);\n      \n      // Depuración: mostrar todos los campos del formulario\n      console.log('Campos en el formulario:');\n      for (let [key, value] of formData.entries()) {\n        console.log(`  ${key}: ${value}`);\n      }\n      \n      // Si es form-habituales y no contiene campos, verificar selectores directamente\n      if (form.id === 'form-habituales' && formData.entries().next().done) {\n        console.log('Formulario habituales está vacío, verificando campos manualmente...');\n        \n        // Verificar selectores y campos específicos\n        const alletarSelect = form.querySelector('select[name=\"alletar\"]');\n        if (alletarSelect) {\n          console.log('Encontrado select alletar con valor:', alletarSelect.value);\n          formData.append('alletar', alletarSelect.value);\n        }\n        \n        const estadoSelect = form.querySelector('select[name=\"estado_hab\"]');\n        if (estadoSelect) {\n          console.log('Encontrado select estado_hab con valor:', estadoSelect.value);\n          formData.append('estado_hab', estadoSelect.value);\n        }\n      }\n      \n      const datos = {};\n      \n      // Convertir FormData a objeto JSON\n      for (const [key, value] of formData.entries()) {\n        // Mapear nombres de campos al formato de la API\n        switch(key) {\n          // Campos del formulario general\n          case 'nombre': datos.nom = value || ''; break;\n          case 'genere': datos.genere = value || 'F'; break;\n          case 'dob': \n            // Solo incluir fecha si tiene valor\n            if (value) {\n              // Convertir formato YYYY-MM-DD a DD/MM/YYYY\n              if (value.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n                const [year, month, day] = value.split('-');\n                datos.dob = `${day}/${month}/${year}`;\n              } else {\n                datos.dob = value;\n              }\n            }\n            break;\n          case 'codigo': datos.cod = value || null; break;\n          case 'num_serie': datos.num_serie = value || null; break;\r\n          case 'explotacio': datos.explotacio = value || ''; break;\r\n          case 'origen': datos.origen = value || null; break;\r\n          case 'pare': datos.pare = value || null; break;\r\n          case 'mare': datos.mare = value || null; break;\r\n          case 'observaciones': datos.observaciones = value || null; break;\r\n          \r\n          // Campos del formulario de cambios habituales\r\n          case 'estado_hab': datos.estado = value || 'OK'; break;\r\n          \r\n          // Campos que pueden estar en ambos formularios\n          case 'alletar': \n            // Asegurar que alletar siempre sea un string: '0', '1', o '2'\n            if (value === '' || value === undefined || value === null) {\n              datos.alletar = '0'; // Valor por defecto\n            } else {\n              datos.alletar = String(value);\n            }\n            break;\n          case 'estado': datos.estado = value || 'OK'; break;\n          default: console.log('Campo no mapeado:', key);\n        }\n      }\n      \n      // Mostrar mensaje de carga\n      window.mostrarMensaje('Actualizando animal...', 'info');\n      \n      // Mostrar mensaje de carga\n      window.mostrarMensaje('Enviando actualización al servidor...', 'info');\n      \n      // Usaremos fetch directamente para evitar problemas con imports\n      window.animalesFormData = datos; // Para inspección por consola\n      console.log('Datos a enviar directamente al backend:', datos);\n      \n      try {\n        // Primero, vamos a cargar el animal actual para comparar los valores\n        console.log('Obteniendo datos actuales del animal para comparar...');\n        \n        // Obtener token de autenticación para las peticiones\n        const token = localStorage.getItem('token') || 'admin123'; // Token para desarrollo\n        \n        // Petición para obtener los datos actuales\n        const responseGet = await fetch(`http://localhost:8000/api/v1/animals/${window.animalId}`, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        \n        if (!responseGet.ok) {\n          throw new Error(`Error al obtener los datos actuales: ${responseGet.status} ${responseGet.statusText}`);\n        }\n        \n        const animalActual = await responseGet.json();\n        const animalData = animalActual.data || animalActual;\n        console.log('Datos actuales del animal:', animalData);\n        \n        // Construir un objeto con solo los campos modificados\n        const datosModificados = {};\n        \n        // Mostrar todos los valores antes de la comparación\n        console.log('Datos del formulario:');\n        for (const [key, value] of Object.entries(datos)) {\n          console.log(`  ${key}: ${value} (${typeof value})`);\n        }\n        console.log('Datos actuales del animal:');\n        for (const [key, value] of Object.entries(animalData)) {\n          console.log(`  ${key}: ${value} (${typeof value})`);\n        }\n        \n        // Comprobamos cada campo para ver si ha cambiado\n        if (datos.nom !== animalData.nom) datosModificados.nom = datos.nom;\n        if (datos.genere !== animalData.genere) datosModificados.genere = datos.genere;\n        if (datos.explotacio !== animalData.explotacio) datosModificados.explotacio = datos.explotacio;\n        if (datos.estado !== animalData.estado) datosModificados.estado = datos.estado;\n        \n        // Campos opcionales - solo los incluimos si han cambiado\n        if (datos.dob && datos.dob !== animalData.dob) datosModificados.dob = datos.dob;\n        if (datos.mare !== animalData.mare) datosModificados.mare = datos.mare;\n        if (datos.pare !== animalData.pare) datosModificados.pare = datos.pare;\n        if (datos.origen !== animalData.origen) datosModificados.origen = datos.origen;\n        if (datos.cod !== animalData.cod) datosModificados.cod = datos.cod;\n        if (datos.num_serie !== animalData.num_serie) datosModificados.num_serie = datos.num_serie;\n        if (datos.observaciones !== animalData.observaciones) datosModificados.observaciones = datos.observaciones;\n        \n        // Manejo especial para alletar - siempre convertir a string antes de comparar\n        console.log('Comparando alletar:', \n          `Valor formulario: ${datos.alletar} (${typeof datos.alletar})`, \n          `Valor actual: ${animalData.alletar} (${typeof animalData.alletar})`);\n        \n        // Convertir ambos valores a string para comparar\n        const alletarForm = String(datos.alletar || '0');\n        const alletarActual = String(animalData.alletar || '0');\n        \n        if (datos.alletar && alletarForm !== alletarActual) {\n          console.log(`Valor de alletar diferente: ${alletarForm} !== ${alletarActual}`);\n          datosModificados.alletar = alletarForm;\n        }\n        \n        console.log('Campos modificados a enviar:', datosModificados);\n        \n        // Si no hay cambios, informamos al usuario y terminamos\n        if (Object.keys(datosModificados).length === 0) {\n          window.mostrarMensaje('No se detectaron cambios que actualizar', 'info');\n          return;\n        }\n        \n        console.log('Enviando solo campos modificados para actualización:', datosModificados);\n        \n        // Realizar la petición PATCH usando fetch\n        const response = await fetch(`${window.apiBaseUrl}/animals/${window.animalId}`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify(datosModificados)\n        });\n        \n        console.log(`Respuesta recibida: ${response.status} ${response.statusText}`);\n        \n        // Comprobar si la respuesta es exitosa\n        if (response.ok) {\n          const resultado = await response.json();\n          console.log('Respuesta de actualización:', resultado);\n          \n          window.mostrarMensaje('¡Animal actualizado con éxito!', 'success');\n          \n          // Redirigir al detalle del animal\n          setTimeout(() => {\n            window.location.href = `/animals/${window.animalId}`;\n          }, 1500);\n        } else {\n          // Intentar obtener el mensaje de error\n          let mensajeError = `Error ${response.status}: ${response.statusText}`;\n          \n          try {\n            const errorJson = await response.json();\n            console.error('Error detallado:', errorJson);\n            \n            if (errorJson.detail) {\n              if (Array.isArray(errorJson.detail)) {\n                mensajeError = 'Errores de validación: ' + \n                  errorJson.detail.map(e => e.msg).join(', ');\n              } else {\n                mensajeError = errorJson.detail;\n              }\n            }\n          } catch (e) {\n            // Si no se puede parsear como JSON, intentamos obtener como texto\n            try {\n              const errorText = await response.text();\n              mensajeError += ` - ${errorText}`;\n            } catch (e2) {\n              console.error('No se pudo obtener detalle del error');\n            }\n          }\n          \n          window.mostrarMensaje('Error: ' + mensajeError, 'error');\n        }\n      } catch (error) {\n        console.error('Error en la petición:', error);\n        window.mostrarMensaje('Error: ' + (error.message || 'Error desconocido'), 'error');\n      }\n    } catch (error) {\n      console.error('Error al actualizar el animal:', error);\n      window.mostrarMensaje(`Error: ${error.message || 'Error desconocido'}`, 'error');\n    }\n  }\n  \n  // Configurar el botón de borrar animal y su modal\n  const deleteBtn = document.getElementById('delete-animal-btn');\n  const deleteModal = document.getElementById('delete-animal-modal');\n  const closeModalBtn = document.getElementById('close-delete-modal');\n  const cancelDeleteBtn = document.getElementById('cancel-delete');\n  const confirmDeleteBtn = document.getElementById('confirm-delete');\n  const animalNameSpan = document.getElementById('animal-name-confirm');\n  \n  if (deleteBtn && deleteModal) {\n    // Obtener el nombre del animal para mostrar en la confirmación\n    const animalName = document.querySelector('h1.text-3xl')?.textContent || 'este animal';\n    const animalId = window.animalId;\n    \n    // Mostrar el modal al hacer clic en el botón de borrar\n    deleteBtn.addEventListener('click', () => {\n      if (animalNameSpan) {\n        animalNameSpan.textContent = animalName;\n      }\n      deleteModal.classList.remove('hidden');\n    });\n    \n    // Cerrar el modal\n    const closeModal = () => {\n      deleteModal.classList.add('hidden');\n    };\n    \n    // Configurar eventos para cerrar el modal\n    if (closeModalBtn) closeModalBtn.addEventListener('click', closeModal);\n    if (cancelDeleteBtn) cancelDeleteBtn.addEventListener('click', closeModal);\n    \n    // Confirmar la eliminación\n    if (confirmDeleteBtn) {\n      confirmDeleteBtn.addEventListener('click', async () => {\n        try {\n          // Mostrar estado de carga en el botón\n          confirmDeleteBtn.disabled = true;\n          confirmDeleteBtn.innerHTML = '<svg class=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\"><circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle><path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path></svg> Eliminando...';\n          \n          // Obtener token de autenticación si está disponible\n          const token = localStorage.getItem('token');\n                    // Usar la configuración global de la API\n            const apiBaseUrl = window.apiBaseUrl;\n          \n          const response = await fetch(`${apiBaseUrl}/animals/${animalId}`, {\n            method: 'DELETE',\n            headers: {\n              'Content-Type': 'application/json',\n              ...(token ? { 'Authorization': `Bearer ${token}` } : {})\n            }\n          });\n          \n          if (response.ok) {\n            // Mostrar mensaje de éxito\n            window.mostrarMensaje('Animal eliminado correctamente', 'success');\n            // Redirigir al listado de animales después de un breve retraso\n            setTimeout(() => {\n              window.location.href = '/animals';\n            }, 1500);\n          } else {\n            // Obtener detalles del error si están disponibles\n            let errorMsg = 'Error al eliminar el animal';\n            try {\n              const errorData = await response.json();\n              errorMsg = errorData.detail || errorData.message || errorMsg;\n            } catch (e) {\n              // Si no se puede analizar la respuesta JSON, usar el mensaje genérico\n            }\n            \n            window.mostrarMensaje(`Error: ${errorMsg}`, 'error');\n            closeModal();\n            confirmDeleteBtn.disabled = false;\n            confirmDeleteBtn.textContent = 'Eliminar definitivamente';\n          }\n        } catch (error) {\n          console.error('Error al eliminar animal:', error);\n          window.mostrarMensaje('Error de conexión al intentar eliminar el animal', 'error');\n          closeModal();\n          confirmDeleteBtn.disabled = false;\n          confirmDeleteBtn.textContent = 'Eliminar definitivamente';\n        }\n      });\n    }\n  }\n\n  // Función para manejar el registro de un nuevo parto\n  async function handleRegistrarParto() {\n    console.log('Iniciando proceso de registro de parto...');\n    \n    try {\n      // Obtener datos del formulario de partos\n      const part = document.getElementById('part')?.value;\n      const genereT = document.getElementById('GenereT')?.value;\n      const estadoT = document.getElementById('EstadoT')?.value;\n      const observacions = document.getElementById('observacions')?.value;\n      \n      console.log('Datos del parto:', { part, genereT, estadoT, observacions });\n      \n      // Validar que los campos requeridos tengan valor\n      if (!part || !genereT || !estadoT) {\n        window.mostrarMensaje('Por favor, completa todos los campos obligatorios (fecha, género y estado)', 'error');\n        return;\n      }\n      \n      // Formatear la fecha si es necesario (de YYYY-MM-DD a DD/MM/YYYY)\n      let fechaFormateada = part;\n      if (part.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n        const [year, month, day] = part.split('-');\n        fechaFormateada = `${day}/${month}/${year}`;\n      }\n      \n      // Preparar datos para enviar\n      const datosParto = {\n        part: fechaFormateada,\n        GenereT: genereT,\n        EstadoT: estadoT\n      };\n      \n      // Añadir observaciones solo si tiene valor\n      if (observacions) {\n        datosParto.observacions = observacions;\n      }\n      \n      console.log('Datos del parto formateados:', datosParto);\n      \n      // Obtener token de autenticación\n      const token = localStorage.getItem('token') || 'admin123'; // Token para desarrollo\n      \n      // Mostrar mensaje de proceso\n      window.mostrarMensaje('Registrando nuevo parto...', 'info');\n      \n      // Enviar datos al servidor para crear el parto\n      const response = await fetch(`http://localhost:8000/api/v1/animals/${window.animalId}/partos`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(datosParto)\n      });\n      \n      console.log(`Respuesta recibida: ${response.status} ${response.statusText}`);\n      \n      // Procesar respuesta\n      if (response.ok) {\n        const resultado = await response.json();\n        console.log('Respuesta de registro de parto:', resultado);\n        \n        window.mostrarMensaje('¡Parto registrado con éxito!', 'success');\n        \n        // Limpiar formulario\n        document.getElementById('part').value = '';\n        document.getElementById('GenereT').value = '';\n        document.getElementById('EstadoT').value = '';\n        if (document.getElementById('observacions')) {\n          document.getElementById('observacions').value = '';\n        }\n        \n        // Redirigir a la página de detalle después de un breve delay\n        setTimeout(() => {\n          window.location.href = `/animals/${window.animalId}`;\n        }, 1500);\n      } else {\n        // Si hay error, intentar obtener mensaje\n        let mensajeError = 'Error al registrar el parto';\n        try {\n          const errorData = await response.json();\n          mensajeError = errorData.detail || errorData.message || mensajeError;\n          console.error('Error detallado:', errorData);\n        } catch (e) {\n          console.error('Error al procesar respuesta de error:', e);\n        }\n        \n        window.mostrarMensaje(`Error: ${mensajeError}`, 'error');\n      }\n    } catch (error) {\n      console.error('Error en el registro de parto:', error);\n      window.mostrarMensaje(`Error: ${error.message || 'Error desconocido al registrar el parto'}`, 'error');\n    }\n  }\n</script>\n"],"names":["$$Astro","$$createAstro","$$createComponent","Astro","$$render","_a","__template","$$maybeRenderHead","$$addAttribute","$$renderComponent","MainLayout","$$result","AnimalForm","HabitualesForm","$$defineScriptVars"],"mappings":"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"}