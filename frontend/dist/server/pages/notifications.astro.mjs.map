{"version":3,"file":"notifications.astro.mjs","sources":["../../../src/pages/notifications.astro"],"sourcesContent":["---\n// Importar el layout\nimport MainLayout from '../components/layout/MainLayout.astro';\nimport { t } from '../i18n/config';\n\n// Definir rol de usuario (esto eventualmente vendrá de la autenticación)\nconst userRole = \"administrador\"; // Simulación de rol\n---\n\n<MainLayout title={t('notification.system_alerts')} userRole={userRole}>\n  <div class=\"container mx-auto px-4 py-6\">\n    <div class=\"mb-6\">\n      <h1 class=\"text-2xl font-bold text-gray-800 dark:text-white\">{t('notification.system_alerts')}</h1>\n      <p class=\"text-gray-500 dark:text-gray-400\">{t('notification.view_all_description')}</p>\n    </div>\n\n    <div class=\"bg-white dark:bg-gray-800 shadow-md rounded-lg p-6\">\n      <div class=\"flex justify-between items-center mb-6\">\n        <div>\n          <span class=\"text-gray-700 dark:text-gray-300\">{t('notification.filter_by')}:</span>\n          <select id=\"filter-type\" class=\"ml-2 p-2 border border-gray-300 dark:border-gray-700 rounded-md bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300\">\n            <option value=\"all\">{t('notification.all_types')}</option>\n            <option value=\"system\">{t('notification.types.system')}</option>\n            <option value=\"backup\">{t('notification.types.backup')}</option>\n            <option value=\"animal\">{t('notification.types.animal')}</option>\n            <option value=\"import\">{t('notification.types.import')}</option>\n          </select>\n        </div>\n        <div>\n          <button id=\"mark-all-read-btn\" class=\"px-4 py-2 bg-primary text-white rounded-md hover:bg-primary-dark\">\n            {t('notification.mark_all_read')}\n          </button>\n          <button id=\"clear-all-btn\" class=\"ml-2 px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600\">\n            {t('notification.clear_all')}\n          </button>\n        </div>\n      </div>\n\n      <div id=\"notifications-container\" class=\"divide-y divide-gray-100 dark:divide-gray-700\">\n        <!-- Las notificaciones se cargarán dinámicamente desde el backend -->\n        <div class=\"text-center py-12 text-gray-500 dark:text-gray-400\">\n          <div class=\"animate-spin inline-block w-8 h-8 border-4 border-current border-t-transparent rounded-full mb-4\" role=\"status\">\n            <span class=\"sr-only\">Cargando...</span>\n          </div>\n          <p>{t('notification.loading')}</p>\n        </div>\n      </div>\n\n      <div class=\"mt-6 flex justify-between items-center\">\n        <div class=\"text-sm text-gray-500 dark:text-gray-400\">\n          <span id=\"notifications-count\">0</span> {t('notification.total_count')}\n        </div>\n        <div>\n          <button id=\"load-more-btn\" class=\"px-4 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600 hidden\">\n            {t('notification.load_more')}\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <script>\n    import { notificationService } from '../services/notificationService';\n\n    // Estado para la paginación y filtrado\n    let currentSkip = 0;\n    let currentLimit = 20;\n    let currentFilter = 'all';\n    let hasMore = false;\n\n    // Referencias a elementos DOM\n    const container = document.getElementById('notifications-container');\n    const countElement = document.getElementById('notifications-count');\n    const loadMoreBtn = document.getElementById('load-more-btn');\n    const filterSelect = document.getElementById('filter-type');\n    const markAllReadBtn = document.getElementById('mark-all-read-btn');\n    const clearAllBtn = document.getElementById('clear-all-btn');\n\n    // Crear elemento HTML para una notificación\n    function createNotificationElement(notification) {\n      const notificationEl = document.createElement('div');\n      notificationEl.className = `p-4 hover:bg-gray-50 dark:hover:bg-gray-700 ${notification.read ? 'opacity-70' : ''}`;\n      \n      // Definir color de fondo según tipo\n      let bgColorClass = 'bg-blue-100 dark:bg-blue-900/30';\n      let textColorClass = 'text-blue-600 dark:text-blue-400';\n      \n      switch (notification.type) {\n        case 'system':\n          bgColorClass = 'bg-amber-100 dark:bg-amber-900/30';\n          textColorClass = 'text-amber-600 dark:text-amber-400';\n          break;\n        case 'backup':\n          bgColorClass = 'bg-green-100 dark:bg-green-900/30';\n          textColorClass = 'text-green-600 dark:text-green-400';\n          break;\n        case 'animal':\n          bgColorClass = 'bg-blue-100 dark:bg-blue-900/30';\n          textColorClass = 'text-blue-600 dark:text-blue-400';\n          break;\n        case 'import':\n          bgColorClass = 'bg-purple-100 dark:bg-purple-900/30';\n          textColorClass = 'text-purple-600 dark:text-purple-400';\n          break;\n        default:\n          break;\n      }\n\n      notificationEl.innerHTML = `\n        <div class=\"flex items-start\">\n          <div class=\"flex-shrink-0 ${bgColorClass} p-3 rounded-full\">\n            <span class=\"${textColorClass} text-lg\">${notification.icon}</span>\n          </div>\n          <div class=\"ml-4 flex-1\">\n            <div class=\"flex justify-between\">\n              <h3 class=\"text-sm font-medium text-gray-800 dark:text-white\">${notification.title}</h3>\n              <span class=\"text-xs text-gray-500 dark:text-gray-400\">${notification.relative_time}</span>\n            </div>\n            <p class=\"mt-1 text-sm text-gray-600 dark:text-gray-300\">${notification.message}</p>\n            <div class=\"mt-2 flex\">\n              <button class=\"text-xs text-primary hover:underline mr-3 mark-read-btn\" data-id=\"${notification.id}\">\n                ${notification.read ? 'Ya leído' : 'Marcar como leído'}\n              </button>\n              <button class=\"text-xs text-red-500 hover:underline delete-btn\" data-id=\"${notification.id}\">\n                Eliminar\n              </button>\n            </div>\n          </div>\n        </div>\n      `;\n\n      // Añadir event listeners\n      const markReadBtn = notificationEl.querySelector('.mark-read-btn');\n      if (markReadBtn) {\n        markReadBtn.addEventListener('click', async () => {\n          const id = parseInt(markReadBtn.getAttribute('data-id'));\n          await notificationService.markAsRead(id);\n          loadNotifications(currentSkip, currentLimit, currentFilter);\n        });\n      }\n\n      const deleteBtn = notificationEl.querySelector('.delete-btn');\n      if (deleteBtn) {\n        deleteBtn.addEventListener('click', async () => {\n          const id = parseInt(deleteBtn.getAttribute('data-id'));\n          await notificationService.deleteNotification(id);\n          loadNotifications(0, currentLimit, currentFilter);\n        });\n      }\n\n      return notificationEl;\n    }\n\n    // Cargar notificaciones\n    async function loadNotifications(skip = 0, limit = 20, type = 'all') {\n      if (container) {\n        // Mostrar estado de carga solo en la primera carga\n        if (skip === 0) {\n          container.innerHTML = `\n            <div class=\"text-center py-12 text-gray-500 dark:text-gray-400\">\n              <div class=\"animate-spin inline-block w-8 h-8 border-4 border-current border-t-transparent rounded-full mb-4\" role=\"status\">\n                <span class=\"sr-only\">Cargando...</span>\n              </div>\n              <p>Cargando notificaciones...</p>\n            </div>\n          `;\n        }\n\n        try {\n          // Determinar si se debe filtrar por tipo\n          const unreadOnly = false; // Mostrar todas, no solo las no leídas\n          \n          // Obtener notificaciones\n          const response = await notificationService.getNotifications(unreadOnly, limit, skip);\n          \n          // Verificar que la respuesta es válida\n          if (!response || typeof response !== 'object') {\n            console.error('La respuesta del servidor no es válida:', response);\n            container.innerHTML = `\n              <div class=\"text-center py-12 text-gray-500 dark:text-gray-400\">\n                <p>Error al cargar notificaciones. Respuesta inválida.</p>\n              </div>\n            `;\n            return;\n          }\n          \n          // Si es la primera carga (skip=0), limpiar el contenedor\n          if (skip === 0) {\n            container.innerHTML = '';\n          }\n\n          // Asegurar que items existe y es un array\n          const items = response.items || [];\n          \n          // Actualizar contador\n          if (countElement) {\n            countElement.textContent = response.total || 0;\n          }\n\n          // Mostrar botón de cargar más si hay más notificaciones\n          if (loadMoreBtn) {\n            if (response.has_more) {\n              loadMoreBtn.classList.remove('hidden');\n              hasMore = true;\n            } else {\n              loadMoreBtn.classList.add('hidden');\n              hasMore = false;\n            }\n          }\n\n          // Si no hay notificaciones, mostrar mensaje\n          if (items.length === 0 && skip === 0) {\n            container.innerHTML = `\n              <div class=\"text-center py-12 text-gray-500 dark:text-gray-400\">\n                <p>No hay notificaciones para mostrar</p>\n              </div>\n            `;\n            return;\n          }\n\n          // Filtrar notificaciones por tipo si es necesario\n          let filteredItems = items;\n          if (type !== 'all') {\n            filteredItems = items.filter(item => item && item.type === type);\n          }\n\n          // Si después de filtrar no hay notificaciones, mostrar mensaje\n          if (filteredItems.length === 0 && skip === 0) {\n            container.innerHTML = `\n              <div class=\"text-center py-12 text-gray-500 dark:text-gray-400\">\n                <p>No hay notificaciones de este tipo</p>\n              </div>\n            `;\n            return;\n          }\n\n          // Añadir notificaciones al contenedor\n          filteredItems.forEach(notification => {\n            const notificationElement = createNotificationElement(notification);\n            container.appendChild(notificationElement);\n          });\n\n        } catch (error) {\n          console.error('Error al cargar notificaciones:', error);\n          container.innerHTML = `\n            <div class=\"text-center py-12 text-red-500\">\n              <p>Error al cargar notificaciones. Por favor, inténtalo de nuevo.</p>\n            </div>\n          `;\n        }\n      }\n    }\n\n    // Event listeners\n    document.addEventListener('DOMContentLoaded', () => {\n      // Cargar notificaciones iniciales\n      loadNotifications(0, currentLimit, currentFilter);\n\n      // Filtrar por tipo\n      if (filterSelect) {\n        filterSelect.addEventListener('change', () => {\n          currentFilter = filterSelect.value;\n          currentSkip = 0; // Resetear paginación\n          loadNotifications(0, currentLimit, currentFilter);\n        });\n      }\n\n      // Cargar más notificaciones\n      if (loadMoreBtn) {\n        loadMoreBtn.addEventListener('click', () => {\n          if (hasMore) {\n            currentSkip += currentLimit;\n            loadNotifications(currentSkip, currentLimit, currentFilter);\n          }\n        });\n      }\n\n      // Marcar todas como leídas\n      if (markAllReadBtn) {\n        markAllReadBtn.addEventListener('click', async () => {\n          await notificationService.markAllAsRead();\n          loadNotifications(0, currentLimit, currentFilter);\n        });\n      }\n\n      // Limpiar todas las notificaciones\n      if (clearAllBtn) {\n        clearAllBtn.addEventListener('click', async () => {\n          if (confirm('¿Estás seguro de que quieres eliminar todas las notificaciones?')) {\n            // Aquí iría la llamada al servicio para eliminar todas las notificaciones\n            // Por ahora, simplemente recargamos la página\n            loadNotifications(0, currentLimit, currentFilter);\n          }\n        });\n      }\n    });\n\n    // Iniciar el servicio de notificaciones\n    notificationService.startPolling(60000); // Actualizar cada minuto\n  </script>\n</MainLayout>\n"],"names":["$$createComponent","$$render","$$renderComponent","MainLayout","$$result","$$maybeRenderHead"],"mappings":";;;;;;AAAA,MAAA,eAAA,GAAAA,eAAA,CAAA,OAAA,QAAA,EAAA,SAAA,OAAA,KAAA;AAMA,EAAA,MAAM,QAAW,GAAA,eAAA;AANjB,EAAA,OAAAC,cAAA,CAAA,EAAAC,eAAA,CAAA,QAAA,EAAA,YAAA,EAAAC,cAAA,EASY,OAAA,EAAO,CAAA,CAAA,4BAAA,GAAiC,UATpD,EAAA,QAAA,EAAA,EAAA,EAAA,WAAA,OAAAC,SAAAA,KAAAH,cAAA,CAAA,CAAA,EAAAI,eAAA,CAAA,CAAA,CAAA,0HAAA,EAYoE,CAAE,CAAA,4BAA4B,CAAC,CAChD,kDAAA,EAAA,CAAA,CAAE,mCAAmC,CAAC,0LAM/B,CAAE,CAAA,wBAAwB,CAAC,CAAA,0LAAA,EAEpD,EAAE,wBAAwB,CAAC,CACxB,iCAAA,EAAA,CAAA,CAAE,2BAA2B,CAAC,CAAA,iCAAA,EAC9B,CAAE,CAAA,2BAA2B,CAAC,CAC9B,iCAAA,EAAA,CAAA,CAAE,2BAA2B,CAAC,oCAC9B,CAAE,CAAA,2BAA2B,CAAC,CAAA,0IAAA,EAKrD,EAAE,4BAA4B,CAAC,CAG/B,gHAAA,EAAA,CAAA,CAAE,wBAAwB,CAAC,CAAA,0aAAA,EAW1B,CAAE,CAAA,sBAAsB,CAAC,CAMY,uKAAA,EAAA,CAAA,CAAE,0BAA0B,CAAC,wLAInE,CAAE,CAAA,wBAAwB,CAAC,CAAA,wCAAA,CAAA,EAtDxC,CAAA,CAAA,CAAA;AAAA,CAAA,EAAA,iFAAA,MAAA,CAAA;;;;;;;;;;;;;;;;"}