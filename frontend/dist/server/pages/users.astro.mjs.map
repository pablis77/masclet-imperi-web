{"version":3,"file":"users.astro.mjs","sources":["../../../src/services/userServiceProxy.ts","../../../src/components/users/UserForm.tsx","../../../src/components/common/ConfirmDialog.tsx","../../../src/components/common/Pagination.tsx","../../../src/components/users/UserTable.tsx","../../../src/components/users/UsersManagement.tsx","../../../src/components/guards/RoleGuard.tsx","../../../src/pages/users/index.astro"],"sourcesContent":["import api from './api';\nimport type { UserRole } from './authService';\nimport { API_CONFIG } from '../config/apiConfig';\n\n// Interfaces\nexport interface User {\n  id: number;\n  username: string;\n  email: string;\n  full_name: string;\n  role: UserRole;\n  is_active: boolean;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface UserCreateDto {\n  username: string;\n  email: string;\n  password: string;\n  full_name?: string;\n  role: UserRole;\n  is_active?: boolean;\n}\n\nexport interface UserUpdateDto extends Partial<Omit<UserCreateDto, 'password'>> {\n  password?: string;\n}\n\nexport interface PaginatedResponse<T> {\n  // Formato estándar\n  items?: T[];\n  total?: number;\n  page?: number;\n  limit?: number;\n  pages?: number;\n  \n  // Formatos alternativos\n  users?: T[];\n  data?: T[];\n  results?: T[];\n  totalPages?: number;\n  totalItems?: number;\n  count?: number;\n  \n  // Para cuando es un array directo\n  [key: number]: T;\n  length?: number;\n}\n\n// Servicio de usuario que conecta con el backend\nconst userServiceProxy = {\n  // Obtiene una lista paginada de usuarios\n  async getUsers(page: number = 1, limit: number = 10, search?: string): Promise<PaginatedResponse<User> | User[]> {\n    try {\n      const params = new URLSearchParams();\n      params.append('page', page.toString());\n      params.append('limit', limit.toString());\n      if (search) {\n        params.append('search', search);\n      }\n      \n      console.log('Obteniendo usuarios, página:', page, 'límite:', limit);\n      \n      // Aseguramos que tenemos el token de autenticación\n      const token = localStorage.getItem('token');\n      if (!token) {\n        console.error('No hay token de autenticación disponible');\n        return [];\n      }\n      \n      // Configuración explícita para asegurar que se envía el token\n      const config = {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      };\n      \n      console.log('Enviando solicitud con token:', token.substring(0, 15) + '...');\n      \n      // Llamamos directamente al endpoint de usuarios con el token\n      console.log('URL de solicitud:', `/users?${params.toString()}`);\n      \n      // IMPLEMENTACIÓN DIRECTA: Usamos fetch en lugar de axios para tener más control\n      try {\n        console.log('Intentando obtener usuarios con fetch...');\n        // Usar la configuración centralizada de apiConfig.ts\n        let fullUrl;\n        // Construir la URL base usando API_CONFIG\n        const baseUrl = `${API_CONFIG.backendURL || ''}${API_CONFIG.baseURL}`;\n        // Asegurar que siempre usamos users/ con barra final para consistencia con el backend\n        fullUrl = `${baseUrl}/users/?${params.toString()}`;\n        console.log('URL de la API construida desde configuración centralizada:', fullUrl);\n        console.log('URL completa:', fullUrl);\n        \n        const fetchResponse = await fetch(fullUrl, {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          }\n        });\n        \n        if (fetchResponse.ok) {\n          const jsonData = await fetchResponse.json();\n          console.log('Datos obtenidos con fetch:', jsonData);\n          \n          // Verificar si hay datos y tienen el formato esperado\n          if (jsonData && jsonData.items && Array.isArray(jsonData.items)) {\n            console.log('Devolviendo usuarios desde fetch:', jsonData.items.length);\n            return jsonData.items;\n          } else if (Array.isArray(jsonData)) {\n            console.log('Devolviendo array de usuarios desde fetch:', jsonData.length);\n            return jsonData;\n          }\n        } else {\n          console.warn('Error en la respuesta fetch:', fetchResponse.status);\n        }\n      } catch (fetchError) {\n        console.error('Error al usar fetch:', fetchError);\n      }\n      \n      // Si fetch falla, seguimos con el método axios como respaldo\n      console.log('Usando axios como método alternativo...');\n      // En desarrollo local, siempre usar URL absoluta para usuarios\n      let url;\n      let response;\n      if (window.location.hostname === 'localhost' || window.location.hostname.includes('192.168.')) {\n        // Para desarrollo local, usamos una URL absoluta y pasamos todo el objeto\n        url = `http://localhost:8000/api/v1/users?${params.toString()}`;\n        response = await api.get(url, { ...config, baseURL: '' });\n      } else {\n        // En otros entornos, usar rutas relativas\n        url = `users?${params.toString()}`;\n        response = await api.get(url, config);\n      }\n      \n      // Inspeccionar el objeto de respuesta completo para encontrar los datos\n      console.log('Respuesta completa de axios:', response);\n      \n      // Intentamos extraer datos de diferentes propiedades de la respuesta\n      let responseData;\n      \n      if (response.data) {\n        responseData = response.data;\n        console.log('Datos encontrados en response.data');\n      } else if (response.request && response.request.response) {\n        try {\n          responseData = JSON.parse(response.request.response);\n          console.log('Datos encontrados en response.request.response');\n        } catch (e) {\n          console.warn('Error al parsear response.request.response');\n        }\n      }\n      \n      // Si todavía no tenemos datos, intentamos solicitud alternativa\n      if (!responseData) {\n        console.warn('No se encontraron datos en la respuesta, intentando solicitud alternativa...');\n        const alternativeResponse = await api.get('/users', config);\n        \n        if (alternativeResponse.data) {\n          responseData = alternativeResponse.data;\n          console.log('Datos encontrados en solicitud alternativa');\n        } else if (alternativeResponse.request && alternativeResponse.request.response) {\n          try {\n            responseData = JSON.parse(alternativeResponse.request.response);\n            console.log('Datos encontrados en alternativeResponse.request.response');\n          } catch (e) {\n            console.warn('Error al parsear alternativeResponse.request.response');\n          }\n        }\n      }\n      \n      // Si aún no tenemos datos, hacemos una última solicitud sin axios\n      if (!responseData) {\n        console.warn('Intentando solicitud XMLHttpRequest como último recurso...');\n        \n        return new Promise((resolve) => {\n          const xhr = new XMLHttpRequest();\n          // Determinar la URL correcta según el entorno\n          let xhrUrl;\n          if (window.location.hostname === 'localhost' || window.location.hostname.includes('192.168.')) {\n            xhrUrl = 'http://localhost:8000/api/v1/users';\n          } else {\n            xhrUrl = `${api.defaults.baseURL}/users`;\n          }\n          console.log('URL para XMLHttpRequest:', xhrUrl);\n          xhr.open('GET', xhrUrl);\n          xhr.setRequestHeader('Authorization', `Bearer ${token}`);\n          xhr.setRequestHeader('Content-Type', 'application/json');\n          xhr.responseType = 'json';\n          \n          xhr.onload = function() {\n            if (xhr.status === 200) {\n              console.log('Respuesta XMLHttpRequest:', xhr.response);\n              if (xhr.response && xhr.response.items) {\n                resolve(xhr.response.items);\n              } else if (Array.isArray(xhr.response)) {\n                resolve(xhr.response);\n              } else {\n                resolve([]);\n              }\n            } else {\n              console.error('Error en XMLHttpRequest:', xhr.status);\n              resolve([]);\n            }\n          };\n          \n          xhr.onerror = function() {\n            console.error('Error de red en XMLHttpRequest');\n            resolve([]);\n          };\n          \n          xhr.send();\n        });\n      }\n      \n      // Procesar los datos si los encontramos\n      if (responseData) {\n        console.log('Datos a procesar:', responseData);\n        \n        // CASO ESPECÍFICO IDENTIFICADO: El backend devuelve los usuarios en una propiedad 'items'\n        if (responseData.items && Array.isArray(responseData.items)) {\n          console.log('Estructura detectada: { items: [...usuarios] }');\n          return responseData.items;\n        }\n        \n        // Convertimos arrays en formato paginado para mantener consistencia\n        if (Array.isArray(responseData)) {\n          console.log('La respuesta es un array directo de usuarios con', responseData.length, 'elementos');\n          const paginatedResponse: PaginatedResponse<User> = {\n            items: responseData,\n            total: responseData.length,\n            page: page,\n            limit: limit,\n            pages: Math.ceil(responseData.length / limit)\n          };\n          return paginatedResponse;\n        }\n        \n        return responseData;\n      }\n      \n      // Si no encontramos datos, devolvemos array vacío\n      console.warn('No se pudieron obtener datos de usuarios después de múltiples intentos');\n      return [];\n    } catch (error) {\n      console.error('Error al obtener usuarios:', error);\n      // No propagar el error, devolver array vacío para evitar bloqueos en la UI\n      return [];\n    }\n  },\n\n  // Obtiene un usuario por su ID\n  async getUserById(id: number): Promise<User> {\n    try {\n      console.log('Obteniendo usuario con ID:', id);\n      const response = await api.get<User>(`/users/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error al obtener usuario con ID ${id}:`, error);\n      throw error;\n    }\n  },\n\n  // Crea un nuevo usuario\n  async createUser(userData: UserCreateDto): Promise<User> {\n    try {\n      console.log('Creando nuevo usuario:', userData.username);\n      \n      // Asegurarnos que el rol siempre se envía en minúsculas para evitar errores de validación\n      // Y añadir explícitamente is_active para evitar el error en el backend\n      const processedUserData = {\n        ...userData,\n        role: userData.role.toLowerCase(),\n        is_active: userData.is_active !== undefined ? userData.is_active : true\n      };\n      \n      console.log('Datos del usuario a crear:', JSON.stringify(processedUserData, null, 2));\n      \n      // Obtenemos el token para asegurar que estamos autenticados\n      const token = localStorage.getItem('token');\n      if (!token) {\n        console.error('No hay token de autenticación disponible para crear usuario');\n        throw new Error('No hay token de autenticación disponible');\n      }\n      \n      // Usar la configuración centralizada en lugar de api.post directo\n      const baseUrl = `${API_CONFIG.backendURL || ''}${API_CONFIG.baseURL}`;\n      // IMPORTANTE: Para crear usuarios el endpoint es /users/ (CON barra al final, como los demás recursos)\n      const url = `${baseUrl}/users/`;\n      \n      console.log('Usando URL construida desde API_CONFIG para crear usuario:', url);\n      \n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Authorization': token ? `Bearer ${token}` : '',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(processedUserData)\n      });\n      \n      if (!response.ok) {\n        throw {\n          message: 'Error al crear usuario',\n          status: response.status,\n          code: 'ERROR'\n        };\n      }\n      \n      const data = await response.json();\n      console.log('Respuesta al crear usuario:', data);\n      return data;\n    } catch (error) {\n      console.error('Error al crear usuario:', error);\n      throw error;\n    }\n  },\n\n  // Actualiza un usuario existente\n  async updateUser(id: number, userData: UserUpdateDto): Promise<User> {\n    try {\n      console.log('Actualizando usuario con ID:', id);\n      \n      // Usar la configuración centralizada en lugar de api.put directo\n      const token = localStorage.getItem('token');\n      const baseUrl = `${API_CONFIG.backendURL || ''}${API_CONFIG.baseURL}`;\n      const url = `${baseUrl}/users/${id}/`;\n      \n      console.log('Usando URL construida desde API_CONFIG:', url);\n      \n      const response = await fetch(url, {\n        method: 'PUT',\n        headers: {\n          'Authorization': token ? `Bearer ${token}` : '',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      \n      if (!response.ok) {\n        throw {\n          message: 'Error al actualizar usuario',\n          status: response.status,\n          code: 'ERROR'\n        };\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error(`Error al actualizar usuario con ID ${id}:`, error);\n      throw error;\n    }\n  },\n\n  // Elimina un usuario\n  async deleteUser(id: number): Promise<void> {\n    try {\n      console.log('Eliminando usuario con ID:', id);\n      \n      // Usar la configuración centralizada en lugar de api.delete directo\n      const token = localStorage.getItem('token');\n      const baseUrl = `${API_CONFIG.backendURL || ''}${API_CONFIG.baseURL}`;\n      const url = `${baseUrl}/users/${id}/`;\n      \n      console.log('Usando URL construida desde API_CONFIG para eliminar:', url);\n      \n      const response = await fetch(url, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': token ? `Bearer ${token}` : '',\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (!response.ok) {\n        throw {\n          message: 'Error al eliminar usuario',\n          status: response.status,\n          code: 'ERROR'\n        };\n      }\n      \n      // No hay datos a devolver para una operación DELETE exitosa\n    } catch (error) {\n      console.error(`Error al eliminar usuario con ID ${id}:`, error);\n      throw error;\n    }\n  },\n};\n\nexport default userServiceProxy;\n","import React, { useState, useEffect } from 'react';\nimport userServiceProxy from '../../services/userServiceProxy';\nimport type { User } from '../../services/userServiceProxy';\nimport type { UserRole } from '../../services/authService';\nimport { getStoredUser } from '../../services/authService';\n\ninterface UserFormProps {\n  user?: User;\n  onSuccess: () => void;\n  onCancel: () => void;\n  // Lista de roles disponibles para seleccionar\n  availableRoles?: UserRole[];\n}\n\nexport const UserForm: React.FC<UserFormProps> = ({ user, onSuccess, onCancel, availableRoles }) => {\n  const [formData, setFormData] = useState({\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    role: 'usuario' as UserRole\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [isEdit, setIsEdit] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  \n  // Inicializar isAdmin directamente con el valor del usuario almacenado\n  const loggedUser = getStoredUser();\n  const [currentUser, setCurrentUser] = useState<User | null>(loggedUser);\n  const [isAdmin, setIsAdmin] = useState(loggedUser?.role === 'administrador');\n\n  // Mostrar la información de depuración para verificar el estado\n  console.log('UserForm - Estado de usuario actual:', {\n    currentUser,\n    isAdmin: isAdmin,\n    role: loggedUser?.role\n  });\n\n  useEffect(() => {\n    if (user) {\n      setIsEdit(true);\n      setFormData({\n        username: user.username,\n        email: user.email,\n        password: '',\n        confirmPassword: '',\n        role: user.role\n      });\n      console.log('UserForm - Usuario cargado para edición:', user);\n      console.log('UserForm - Datos de formulario inicializados:', {\n        username: user.username,\n        email: user.email,\n        role: user.role\n      });\n    } else {\n      // Resetear el formulario cuando no hay usuario seleccionado\n      setIsEdit(false);\n      setFormData({\n        username: '',\n        email: '',\n        password: '',\n        confirmPassword: '',\n        role: 'usuario' as UserRole\n      });\n    }\n  }, [user]);  // Este efecto se ejecuta cuando cambia el usuario seleccionado\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = e.target;\n    \n    // Extraer el nombre real del campo sin el sufijo aleatorio\n    let fieldName = name;\n    if (name.includes('_')) {\n      fieldName = name.split('_')[0]; // Obtenemos la parte antes del guion bajo\n    }\n    \n    // Mapear los campos con sufijos a los campos originales\n    let realFieldName = fieldName;\n    if (fieldName.includes('username')) realFieldName = 'username';\n    if (fieldName.includes('email')) realFieldName = 'email';\n    if (fieldName.includes('password') && !fieldName.includes('confirm')) realFieldName = 'password';\n    if (fieldName.includes('confirmPassword')) realFieldName = 'confirmPassword';\n    \n    setFormData(prev => ({\n      ...prev,\n      [realFieldName]: value\n    }));\n  };\n\n  const validateForm = () => {\n    if (!formData.username.trim()) {\n      setError('El nombre de usuario es obligatorio');\n      return false;\n    }\n    \n    if (!formData.email.trim()) {\n      setError('El email es obligatorio');\n      return false;\n    }\n    \n    if (!isEdit && !formData.password) {\n      setError('La contraseña es obligatoria');\n      return false;\n    }\n    \n    if (!isEdit && formData.password !== formData.confirmPassword) {\n      setError('Las contraseñas no coinciden');\n      return false;\n    }\n    \n    return true;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      if (isEdit && user) {\n        // Actualizar usuario existente\n        const userData = {\n          username: formData.username,\n          email: formData.email,\n          role: formData.role\n        };\n        \n        // Si se proporcionó contraseña, la incluimos en la actualización\n        if (formData.password && isAdmin) {\n          Object.assign(userData, { password: formData.password });\n        }\n        \n        console.log('UserForm - Enviando datos para actualizar usuario:', userData);\n        const updatedUser = await userServiceProxy.updateUser(user.id, userData);\n        console.log('UserForm - Usuario actualizado correctamente:', updatedUser);\n      } else {\n        // Registrar nuevo usuario\n        const userData = {\n          username: formData.username,\n          email: formData.email,\n          password: formData.password,\n          role: formData.role\n        };\n        \n        console.log('UserForm - Enviando datos para crear usuario:', userData);\n        const createdUser = await userServiceProxy.createUser(userData);\n        console.log('UserForm - Usuario creado correctamente:', createdUser);\n      }\n      \n      // Notificar al componente padre que la operación fue exitosa\n      onSuccess();\n    } catch (err: any) {\n      console.error('Error al guardar usuario:', err);\n      \n      if (err.response) {\n        setError(err.response.data?.detail || 'Error al guardar el usuario');\n      } else if (err.request) {\n        setError('No se pudo conectar con el servidor');\n      } else {\n        setError('Error al procesar la solicitud');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Generamos un ID único para los campos para evitar que el navegador autocomplete\n  const randomSuffix = Math.random().toString(36).substring(2, 10);\n\n  return (\n    <form className=\"space-y-6\" onSubmit={handleSubmit} autoComplete=\"off\" spellCheck=\"false\">\n      {/* Campo oculto para engañar al autocompletado del navegador */}\n      <div style={{ display: 'none' }}>\n        <input type=\"text\" name=\"username_fake\" autoComplete=\"username\" />\n        <input type=\"password\" name=\"password_fake\" autoComplete=\"current-password\" />\n      </div>\n      <h2 className=\"text-lg font-medium text-gray-900\">\n        {isEdit ? 'Editar Usuario' : 'Crear Nuevo Usuario'}\n      </h2>\n      \n      {error && (\n        <div className=\"rounded-md bg-red-50 p-4\">\n          <div className=\"flex\">\n            <div className=\"ml-3\">\n              <h3 className=\"text-sm font-medium text-red-800\">Error</h3>\n              <div className=\"mt-2 text-sm text-red-700\">\n                <p>{error}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6\">\n        <div className=\"sm:col-span-3\">\n          <label htmlFor=\"username\" className=\"block text-sm font-medium text-gray-700\">\n            Nombre de usuario\n          </label>\n          <div className=\"mt-1\">\n            <input\n              type=\"text\"\n              name={`username_${randomSuffix}`}\n              id=\"username\"\n              value={formData.username}\n              onChange={handleChange}\n              className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n              required\n              autoComplete=\"off\"\n              autoCorrect=\"off\"\n              autoCapitalize=\"off\"\n            />\n          </div>\n        </div>\n\n        <div className=\"sm:col-span-3\">\n          <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n            Email\n          </label>\n          <div className=\"mt-1\">\n            <input\n              type=\"email\"\n              name={`email_${randomSuffix}`}\n              id=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n              required\n              autoComplete=\"off\"\n              autoCorrect=\"off\"\n              autoCapitalize=\"off\"\n            />\n          </div>\n        </div>\n\n        {(!isEdit || isAdmin) && (\n          <>\n            <div className=\"sm:col-span-3\">\n              <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n                Contraseña\n              </label>\n              <div className=\"mt-1\">\n                <div className=\"relative\">\n                  <input\n                    type={showPassword ? \"text\" : \"password\"}\n                    name={`password_${randomSuffix}`}\n                    id=\"password\"\n                    value={formData.password}\n                    onChange={handleChange}\n                    className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n                    required={!isEdit && !isAdmin}\n                    autoComplete=\"new-password\"\n                    autoCorrect=\"off\"\n                    autoCapitalize=\"off\"\n                  />\n                  {isAdmin && (\n                    <button \n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute inset-y-0 right-0 pr-3 flex items-center text-sm leading-5\"\n                    >\n                      {showPassword ? (\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-gray-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                          <path fillRule=\"evenodd\" d=\"M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z\" clipRule=\"evenodd\" />\n                          <path d=\"M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z\" />\n                        </svg>\n                      ) : (\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-gray-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                          <path d=\"M10 12a2 2 0 100-4 2 2 0 000 4z\" />\n                          <path fillRule=\"evenodd\" d=\"M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z\" clipRule=\"evenodd\" />\n                        </svg>\n                      )}\n                    </button>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"sm:col-span-3\">\n              <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700\">\n                Confirmar contraseña\n              </label>\n              <div className=\"mt-1\">\n                <div className=\"relative\">\n                  <input\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    name={`confirmPassword_${randomSuffix}`}\n                    id=\"confirmPassword\"\n                    value={formData.confirmPassword}\n                    onChange={handleChange}\n                    className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n                    required={!isEdit && !isAdmin}\n                    autoComplete=\"new-password\"\n                    autoCorrect=\"off\"\n                    autoCapitalize=\"off\"\n                  />\n                  {isAdmin && (\n                    <button \n                      type=\"button\"\n                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                      className=\"absolute inset-y-0 right-0 pr-3 flex items-center text-sm leading-5\"\n                    >\n                      {showConfirmPassword ? (\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-gray-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                          <path fillRule=\"evenodd\" d=\"M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z\" clipRule=\"evenodd\" />\n                          <path d=\"M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z\" />\n                        </svg>\n                      ) : (\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 text-gray-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                          <path d=\"M10 12a2 2 0 100-4 2 2 0 000 4z\" />\n                          <path fillRule=\"evenodd\" d=\"M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z\" clipRule=\"evenodd\" />\n                        </svg>\n                      )}\n                    </button>\n                  )}\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n\n        <div className=\"sm:col-span-3\">\n          <label htmlFor=\"role\" className=\"block text-sm font-medium text-gray-700\">\n            Rol\n          </label>\n          <div className=\"mt-1\">\n            {/* Utilizar la prop availableRoles si existe, o utilizar roles predeterminados según el tipo de usuario */}\n            <select\n              id=\"role\"\n              name=\"role\"\n              value={formData.role}\n              onChange={handleChange}\n              className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n            >\n              {/* Si se proporcionaron roles disponibles, usar esos */}\n              {availableRoles ? (\n                // Mapear los roles disponibles a opciones\n                availableRoles.map(role => {\n                  let label = role;\n                  if (role === 'Ramon') label = 'Gerente (Ramon)';\n                  else if (role === 'administrador') label = 'Administrador';\n                  else if (role === 'editor') label = 'Editor';\n                  else if (role === 'usuario') label = 'Usuario';\n                  \n                  return <option key={role} value={role}>{label}</option>\n                })\n              ) : (\n                // Opciones por defecto si no se proporcionaron roles\n                loggedUser?.role === 'administrador' ? (\n                  // Si es administrador, mostrar todas las opciones\n                  <>\n                    <option value=\"administrador\">Administrador</option>\n                    <option value=\"Ramon\">Gerente (Ramon)</option>\n                    <option value=\"editor\">Editor</option>\n                    <option value=\"usuario\">Usuario</option>\n                  </>\n                ) : (\n                  // Si NO es administrador, solo roles básicos\n                  <>\n                    <option value=\"editor\">Editor</option>\n                    <option value=\"usuario\">Usuario</option>\n                  </>\n                )\n              )}\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex justify-end space-x-3 pt-5\">\n        <button\n          type=\"button\"\n          onClick={onCancel}\n          className=\"rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n        >\n          Cancelar\n        </button>\n        <button\n          type=\"submit\"\n          disabled={loading}\n          className=\"inline-flex justify-center rounded-md border border-transparent bg-blue-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n        >\n          {loading ? 'Guardando...' : isEdit ? 'Actualizar' : 'Crear'}\n        </button>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\n\ninterface ConfirmDialogProps {\n  isOpen: boolean;\n  title: string;\n  message: string;\n  confirmText: string;\n  cancelText: string;\n  onConfirm: () => void;\n  onCancel: () => void;\n  type?: 'danger' | 'warning' | 'info';\n}\n\nexport const ConfirmDialog: React.FC<ConfirmDialogProps> = ({\n  isOpen,\n  title,\n  message,\n  confirmText,\n  cancelText,\n  onConfirm,\n  onCancel,\n  type = 'danger'\n}) => {\n  if (!isOpen) return null;\n\n  const getTypeStyles = () => {\n    switch (type) {\n      case 'danger':\n        return {\n          icon: (\n            <svg className=\"h-6 w-6 text-red-600\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\n            </svg>\n          ),\n          confirmButton: 'bg-red-600 hover:bg-red-700 focus:ring-red-500',\n          iconBackground: 'bg-red-100'\n        };\n      case 'warning':\n        return {\n          icon: (\n            <svg className=\"h-6 w-6 text-yellow-600\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\" />\n            </svg>\n          ),\n          confirmButton: 'bg-yellow-600 hover:bg-yellow-700 focus:ring-yellow-500',\n          iconBackground: 'bg-yellow-100'\n        };\n      case 'info':\n      default:\n        return {\n          icon: (\n            <svg className=\"h-6 w-6 text-blue-600\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n            </svg>\n          ),\n          confirmButton: 'bg-blue-600 hover:bg-blue-700 focus:ring-blue-500',\n          iconBackground: 'bg-blue-100'\n        };\n    }\n  };\n\n  const styles = getTypeStyles();\n\n  return (\n    <div className=\"fixed inset-0 z-10 overflow-y-auto\">\n      <div className=\"flex min-h-screen items-end justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0\">\n        <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\n          <div className=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\n        </div>\n\n        <span className=\"hidden sm:inline-block sm:h-screen sm:align-middle\" aria-hidden=\"true\">\n          &#8203;\n        </span>\n\n        <div className=\"inline-block transform overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:align-middle\">\n          <div className=\"bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4\">\n            <div className=\"sm:flex sm:items-start\">\n              <div className={`mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full ${styles.iconBackground} sm:mx-0 sm:h-10 sm:w-10`}>\n                {styles.icon}\n              </div>\n              <div className=\"mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left\">\n                <h3 className=\"text-lg font-medium leading-6 text-gray-900\">{title}</h3>\n                <div className=\"mt-2\">\n                  <p className=\"text-sm text-gray-500\">{message}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6\">\n            <button\n              type=\"button\"\n              className={`inline-flex w-full justify-center rounded-md border border-transparent px-4 py-2 text-base font-medium text-white shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm ${styles.confirmButton}`}\n              onClick={onConfirm}\n            >\n              {confirmText}\n            </button>\n            <button\n              type=\"button\"\n              className=\"mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm\"\n              onClick={onCancel}\n            >\n              {cancelText}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\ninterface PaginationProps {\n  currentPage: number;\n  totalPages: number;\n  onPageChange: (page: number) => void;\n}\n\nexport const Pagination: React.FC<PaginationProps> = ({\n  currentPage,\n  totalPages,\n  onPageChange,\n}) => {\n  // No mostrar paginación si solo hay una página\n  if (totalPages <= 1) return null;\n\n  // Función para generar el rango de páginas a mostrar\n  const getPageRange = () => {\n    const range = [];\n    const maxPagesToShow = 5;\n    \n    // Si hay menos páginas que el máximo a mostrar, mostrar todas\n    if (totalPages <= maxPagesToShow) {\n      for (let i = 1; i <= totalPages; i++) {\n        range.push(i);\n      }\n    } else {\n      // Si estamos cerca del inicio\n      if (currentPage <= 3) {\n        for (let i = 1; i <= 5; i++) {\n          range.push(i);\n        }\n      } \n      // Si estamos cerca del final\n      else if (currentPage >= totalPages - 2) {\n        for (let i = totalPages - 4; i <= totalPages; i++) {\n          range.push(i);\n        }\n      } \n      // Si estamos en el medio\n      else {\n        for (let i = currentPage - 2; i <= currentPage + 2; i++) {\n          range.push(i);\n        }\n      }\n    }\n    \n    return range;\n  };\n\n  const pageRange = getPageRange();\n\n  return (\n    <nav className=\"flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6\">\n      <div className=\"hidden sm:flex sm:flex-1 sm:items-center sm:justify-between\">\n        <div>\n          <p className=\"text-sm text-gray-700\">\n            Mostrando página <span className=\"font-medium\">{currentPage}</span> de{' '}\n            <span className=\"font-medium\">{totalPages}</span>\n          </p>\n        </div>\n        <div>\n          <ul className=\"isolate inline-flex -space-x-px rounded-md shadow-sm\">\n            {/* Botón Anterior */}\n            <li>\n              <button\n                onClick={() => onPageChange(currentPage - 1)}\n                disabled={currentPage === 1}\n                className={`relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 ${\n                  currentPage === 1 ? 'cursor-not-allowed' : 'cursor-pointer'\n                }`}\n              >\n                <span className=\"sr-only\">Anterior</span>\n                <svg className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n                  <path fillRule=\"evenodd\" d=\"M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z\" clipRule=\"evenodd\" />\n                </svg>\n              </button>\n            </li>\n            \n            {/* Números de página */}\n            {pageRange.map((page) => (\n              <li key={page}>\n                <button\n                  onClick={() => onPageChange(page)}\n                  className={`relative inline-flex items-center px-4 py-2 text-sm font-semibold ${\n                    page === currentPage\n                      ? 'z-10 bg-blue-600 text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600'\n                      : 'text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0'\n                  }`}\n                >\n                  {page}\n                </button>\n              </li>\n            ))}\n            \n            {/* Botón Siguiente */}\n            <li>\n              <button\n                onClick={() => onPageChange(currentPage + 1)}\n                disabled={currentPage === totalPages}\n                className={`relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 ${\n                  currentPage === totalPages ? 'cursor-not-allowed' : 'cursor-pointer'\n                }`}\n              >\n                <span className=\"sr-only\">Siguiente</span>\n                <svg className=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\" aria-hidden=\"true\">\n                  <path fillRule=\"evenodd\" d=\"M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z\" clipRule=\"evenodd\" />\n                </svg>\n              </button>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { getStoredUser } from '../../services/authService';\nimport userServiceProxy from '../../services/userServiceProxy';\nimport type { User } from '../../services/userServiceProxy';\nimport { ConfirmDialog } from '../common/ConfirmDialog';\nimport { Pagination } from '../common/Pagination';\nimport { t, getCurrentLanguage } from '../../i18n/config';\nimport { API_CONFIG } from '../../config/apiConfig';\n\n// Variable para saber si es el primer renderizado (SSR) o no (cliente)\nlet isFirstRender = typeof window === 'undefined';\n\ninterface UserTableProps {\n  onEdit: (user: User) => void;\n  onRefresh: () => void;\n  forceLang?: string; // Prop opcional para forzar un idioma específico\n}\n\nexport const UserTable: React.FC<UserTableProps> = ({ onEdit, onRefresh, forceLang }) => {\n  // En el primer renderizado (SSR), usar español por defecto para evitar errores de hidratación\n  // En renderizados posteriores en el cliente, usar el idioma seleccionado o el forzado\n  const initialLang = isFirstRender ? 'es' : (forceLang || getCurrentLanguage());\n  const [currentLang, setCurrentLang] = useState(initialLang);\n  const [users, setUsers] = useState<User[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [userToDelete, setUserToDelete] = useState<User | null>(null);\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  \n  // Estado para paginación\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [pageSize, setPageSize] = useState(10);\n  const [totalItems, setTotalItems] = useState(0);\n\n  // Cargar usuarios al montar el componente o cuando cambia la página o el refreshTrigger\n  useEffect(() => {\n    loadUsers();\n    const user = getStoredUser();\n    if (user) {\n      setCurrentUser(user);\n    }\n    \n    // Después del primer renderizado (cliente), actualizar el idioma\n    if (isFirstRender) {\n      isFirstRender = false;\n      // Pequeño retraso para permitir la hidratación antes de cambiar el idioma\n      setTimeout(() => {\n        setCurrentLang(getCurrentLanguage());\n      }, 50);\n    }\n  }, [currentPage, pageSize, onRefresh]);\n\n  const loadUsers = async () => {\n    setLoading(true);\n    try {\n      console.log('Solicitando usuarios: página', currentPage, 'tamaño', pageSize);\n      \n      // Forzamos una URL absoluta directa en lugar de confiar en el proxy\n      console.log('DEBUG: Usando URL absoluta para evitar errores de proxy');\n      \n      let response;\n      let usersData: User[] = [];\n      let totalPagesCount = 1;\n      let totalItemsCount = 0;\n      \n      // Usar la configuración centralizada de API_CONFIG\n      try {\n        console.log('DEBUG: Usando configuración centralizada para API');\n        const token = localStorage.getItem('token');\n        \n        // Construir URL con base en API_CONFIG y asegurar que use barra diagonal final (/)\n        const baseUrl = `${API_CONFIG.backendURL || ''}${API_CONFIG.baseURL}`;\n        const directUrl = `${baseUrl}/users/?page=${currentPage}&size=${pageSize}`;\n        console.log('DEBUG: URL completa construida desde API_CONFIG:', directUrl);\n        \n        const directResponse = await fetch(directUrl, {\n          headers: {\n            'Authorization': token ? `Bearer ${token}` : '',\n            'Content-Type': 'application/json'\n          }\n        });\n        \n        if (directResponse.ok) {\n          response = await directResponse.json();\n          console.log('DEBUG: Éxito con API centralizada:', response);\n        } else {\n          throw new Error(`Error en respuesta: ${directResponse.status}`);\n        }\n      } catch (directError) {\n        console.log('DEBUG: Error con fetch usando API_CONFIG, intentando con userServiceProxy como último recurso', directError);\n        // Si falla el fetch directo, usamos el método del servicio como fallback (que ya hemos corregido)\n        response = await userServiceProxy.getUsers(currentPage, pageSize);\n      }\n      \n      console.log('Respuesta del servidor (tipo):', typeof response);\n      console.log('Respuesta del servidor (valor):', response);\n      \n      // Determinar el formato de la respuesta y extraer usuarios\n      if (Array.isArray(response)) {\n        // Si es un array directo de usuarios\n        console.log('Formato detectado: Array directo de usuarios');\n        usersData = [...response];\n        totalPagesCount = 1;\n        totalItemsCount = response.length;\n      } else if (response && typeof response === 'object') {\n        // Si es un objeto paginado\n        if (response.items && Array.isArray(response.items)) {\n          console.log('Formato detectado: Objeto con items[]');\n          usersData = [...response.items];\n          totalPagesCount = response.pages || 1;\n          totalItemsCount = response.total || response.items.length;\n        } else {\n          // Intentar otros formatos comunes\n          const responseObj = response as Record<string, any>;\n          const possibleItems = responseObj.users || responseObj.data || responseObj.results;\n          \n          if (Array.isArray(possibleItems) && possibleItems.length > 0) {\n            console.log('Formato alternativo detectado con usuarios');\n            usersData = [...possibleItems];\n          }\n          \n          totalPagesCount = responseObj.pages || responseObj.totalPages || 1;\n          totalItemsCount = responseObj.total || responseObj.totalItems || responseObj.count || usersData.length;\n        }\n      }\n      \n      console.log('Usuarios encontrados:', usersData.length);\n      \n      // Actualizar estado con los datos procesados\n      setUsers(usersData);\n      setTotalPages(totalPagesCount);\n      setTotalItems(totalItemsCount);\n      setError(null);\n    } catch (err: any) {\n      console.error('Error al cargar usuarios:', err);\n      setError(t('users.table.error', currentLang));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handlePageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  const handlePageSizeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const newPageSize = parseInt(e.target.value);\n    setPageSize(newPageSize);\n    setCurrentPage(1); // Volver a la primera página al cambiar el tamaño\n  };\n\n  const handleDeleteClick = (user: User) => {\n    setUserToDelete(user);\n    setShowConfirmDialog(true);\n  };\n\n  const handleConfirmDelete = async () => {\n    if (!userToDelete) return;\n    \n    try {\n      await userServiceProxy.deleteUser(userToDelete.id);\n      setShowConfirmDialog(false);\n      setUserToDelete(null);\n      // Recargar la lista de usuarios\n      loadUsers();\n      onRefresh();\n    } catch (err: any) {\n      console.error('Error al eliminar usuario:', err);\n      setError(t('users.table.delete_error', currentLang));\n      setShowConfirmDialog(false);\n    }\n  };\n\n  const handleCancelDelete = () => {\n    setShowConfirmDialog(false);\n    setUserToDelete(null);\n  };\n\n  // Función para renderizar el badge del rol\n  const getRoleBadge = (role: string) => {\n    let bgColor = '';\n    switch (role) {\n      case 'administrador':\n        bgColor = 'bg-red-100 text-red-800';\n        break;\n      case 'gerente':\n        bgColor = 'bg-blue-100 text-blue-800';\n        break;\n      case 'editor':\n        bgColor = 'bg-green-100 text-green-800';\n        break;\n      default:\n        bgColor = 'bg-gray-100 text-gray-800';\n    }\n    return (\n      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${bgColor}`}>\n        {role}\n      </span>\n    );\n  };\n\n  if (loading && users.length === 0) {\n    return <div className=\"text-center py-4\">{t('users.table.loading', currentLang)}</div>;\n  }\n\n  if (error && users.length === 0) {\n    return (\n      <div className=\"bg-red-50 border-l-4 border-red-400 p-4 my-4\">\n        <div className=\"flex\">\n          <div className=\"flex-shrink-0\">\n            <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n              <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n            </svg>\n          </div>\n          <div className=\"ml-3\">\n            <p className=\"text-sm text-red-700\">{error}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"overflow-x-auto\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <div className=\"text-sm text-gray-700\">\n            {t('users.table.showing', currentLang)} {users.length} {t('users.table.of', currentLang)} {totalItems} {t('users.table.users', currentLang)}\n          </div>\n          <div className=\"flex items-center\">\n            <label htmlFor=\"pageSize\" className=\"mr-2 text-sm text-gray-700\">\n              {t('users.table.show', currentLang)}\n            </label>\n            <select\n              id=\"pageSize\"\n              value={pageSize}\n              onChange={handlePageSizeChange}\n              className=\"rounded border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\"\n            >\n              <option value=\"5\">5</option>\n              <option value=\"10\">10</option>\n              <option value=\"25\">25</option>\n              <option value=\"50\">50</option>\n            </select>\n          </div>\n        </div>\n        \n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                {t('users.table.user', currentLang)}\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                {t('users.table.email', currentLang)}\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                {t('users.table.role', currentLang)}\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                {t('users.table.status', currentLang)}\n              </th>\n              <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                {t('users.table.actions', currentLang)}\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {users.length === 0 ? (\n              <tr>\n                <td colSpan={5} className=\"px-6 py-4 text-center text-sm text-gray-500\">\n                  {t('users.table.no_users', currentLang)}\n                </td>\n              </tr>\n            ) : (\n              users.map((user) => (\n                <tr key={user.id}>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <div className=\"ml-4\">\n                        <div className=\"text-sm font-medium text-gray-900\">{user.username}</div>\n                        <div className=\"text-sm text-gray-500\">{user.full_name}</div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"text-sm text-gray-900\">{user.email}</div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {getRoleBadge(user.role)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${user.is_active ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>\n                      {user.is_active ? t('users.table.active', currentLang) : t('users.table.inactive', currentLang)}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2\">\n                    <button\n                      onClick={() => onEdit(user)}\n                      className=\"text-indigo-600 hover:text-indigo-900 focus:outline-none\"\n                    >\n                      {t('users.table.edit', currentLang)}\n                    </button>\n                    {/* No permitir eliminar:\n                        1. Al usuario actual\n                        2. A usuarios con rol administrador (excepto si eres administrador)\n                        3. A usuarios con rol gerente (Ramon) */}\n                    {(currentUser?.id !== user.id && \n                      user.role !== 'Ramon' && \n                      (user.role !== 'administrador' || currentUser?.role === 'administrador')) && (\n                      <button\n                        onClick={() => handleDeleteClick(user)}\n                        className=\"text-red-600 hover:text-red-900 focus:outline-none\"\n                      >\n                        {t('users.table.delete', currentLang)}\n                      </button>\n                    )}\n                  </td>\n                </tr>\n              ))\n            )}\n          </tbody>\n        </table>\n      </div>\n      \n      {totalPages > 1 && (\n        <div className=\"flex justify-center mt-4\">\n          <Pagination\n            currentPage={currentPage}\n            totalPages={totalPages}\n            onPageChange={handlePageChange}\n          />\n        </div>\n      )}\n      \n      <ConfirmDialog\n        isOpen={showConfirmDialog}\n        title={t('users.table.confirm_delete_title', currentLang)}\n        message={t('users.table.confirm_delete_message', currentLang).replace('{username}', userToDelete?.username || '')}\n        confirmText={t('users.table.confirm', currentLang)}\n        cancelText={t('users.table.cancel', currentLang)}\n        onConfirm={handleConfirmDelete}\n        onCancel={handleCancelDelete}\n      />\n    </>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { UserForm } from './UserForm';\nimport { UserTable } from './UserTable';\nimport { isAuthenticated, getStoredUser } from '../../services/authService';\nimport type { User } from '../../services/authService';\nimport { t, getCurrentLanguage } from '../../i18n/config';\n\n// Variable para saber si es el primer renderizado (SSR) o no (cliente)\nlet isFirstRender = typeof window === 'undefined';\n\nexport const UsersManagement: React.FC = () => {\n  const [showForm, setShowForm] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | undefined>(undefined);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [refreshTrigger, setRefreshTrigger] = useState(0);\n\n  // En el primer renderizado (SSR) usar siempre español para evitar errores de hidratación\n  // después del primer renderizado en el cliente, actualizar al idioma seleccionado\n  const initialLang = isFirstRender ? 'es' : getCurrentLanguage();\n  const [currentLang, setCurrentLang] = useState<string>(initialLang);\n  \n  // Usamos un texto fijo en español para la primera carga (SSR) para prevenir errores de hidratación\n  const [authStatus, setAuthStatus] = useState<string>('Cargando...');\n  const [authDebug, setAuthDebug] = useState<Record<string, any>>({});\n\n  // Efecto para gestionar el cambio de idioma después de la hidratación\n  useEffect(() => {\n    // Si estamos en el cliente y era el primer renderizado, actualizar el idioma\n    if (isFirstRender && typeof window !== 'undefined') {\n      isFirstRender = false;\n      // Pequeño retraso para asegurar que React complete la hidratación\n      setTimeout(() => {\n        const newLang = getCurrentLanguage();\n        setCurrentLang(newLang);\n      }, 100);\n    }\n  }, []);\n\n  useEffect(() => {\n    // Verificar autenticación y permisos\n    const isAuth = isAuthenticated();\n    setAuthStatus(isAuth ? 'Autenticado' : 'No autenticado');\n    \n    if (!isAuth) {\n      // Mostramos información de debug en lugar de redirigir automáticamente\n      setAuthDebug(prev => ({ ...prev, isAuthenticated: false }));\n      return;\n    }\n\n    let user = getStoredUser();\n    \n    // Si estamos autenticados pero no tenemos usuario, lo recreamos para admin\n    if (isAuth && !user) {\n      console.log('Autenticado pero sin datos de usuario, recreando usuario administrador');\n      // Verificamos si existe admin/admin123 a través del localStorage\n      const tokenData = localStorage.getItem('token');\n      if (tokenData) {\n        // Recreamos el usuario admin por defecto\n        user = {\n          id: 1,\n          username: 'admin',\n          email: 'admin@mascletimperi.com',\n          full_name: 'Administrador',\n          role: 'administrador',\n          is_active: true,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        // Guardamos en localStorage para futuras sesiones\n        localStorage.setItem('user', JSON.stringify(user));\n      }\n    }\n    \n    setAuthDebug(prev => ({ ...prev, user: user ? JSON.stringify(user) : 'null' }));\n    \n    if (user) {\n      setCurrentUser(user);\n      \n      // IMPORTANTE: Para el usuario 'admin', siempre asumimos que es administrador\n      // independientemente del rol almacenado\n      let hasAdminRole = false;\n      \n      if (user.username === 'admin') {\n        hasAdminRole = true;\n        // Aseguramos que el rol sea correcto para el admin (debe ser 'administrador', no 'admin')\n        if (user.role !== 'administrador') {\n          console.log('Corrigiendo el rol del usuario admin de:', user.role, 'a: administrador');\n          user.role = 'administrador';\n          localStorage.setItem('user', JSON.stringify(user));\n        }\n      } else {\n        // Para otros usuarios, verificamos el rol normalmente\n        // Usamos 'as string' para evitar el error de tipo ya que sabemos que estos valores son válidos\n        // Verificamos si el rol es administrador o Ramon\n        // Por compatibilidad también aceptamos 'gerente' (backend)\n        hasAdminRole = user.role === 'administrador' || \n                      user.role === 'Ramon' ||\n                      (user.role as string) === 'gerente'; // Para compatibilidad con backend\n      }\n      \n      setIsAdmin(hasAdminRole);\n      \n      // Depuración extendida\n      const debugInfo = {\n        role: user.role,\n        hasAdminRole,\n        username: user.username,\n        isAdmin: hasAdminRole,\n        tokenExists: !!localStorage.getItem('token'),\n        tokenFirstChars: localStorage.getItem('token')?.substring(0, 15) + '...' || 'no-token'\n      };\n      \n      console.log('Información de depuración del usuario:', debugInfo);\n      setAuthDebug(prev => ({ ...prev, ...debugInfo }));\n    } else {\n      // Mostramos información de debug en lugar de redirigir automáticamente\n      setAuthDebug(prev => ({ ...prev, userFound: false }));\n    }\n  }, []);\n\n  const handleAddUser = () => {\n    // Al crear un nuevo usuario aseguramos que no haya usuario preseleccionado\n    setSelectedUser(undefined);\n    // Reiniciamos completamente el formulario\n    setShowForm(true);\n  };\n\n  const handleEditUser = (user: User) => {\n    setSelectedUser(user);\n    setShowForm(true);\n  };\n\n  const handleFormSuccess = () => {\n    setShowForm(false);\n    setSelectedUser(undefined);\n    setRefreshTrigger(prev => prev + 1);\n  };\n\n  const handleFormCancel = () => {\n    setShowForm(false);\n    setSelectedUser(undefined);\n  };\n\n  const handleCancelForm = () => {\n    setShowForm(false);\n  };\n\n  // Función para traducir textos según el idioma actual\n  const translateText = (key: string, fallback: string): string => {\n    if (currentLang === 'ca') {\n      // Traducciones en catalán para textos específicos\n      const translations: Record<string, string> = {\n        'Gestión de Usuarios': 'Gestió d\\'Usuaris',\n        'Añadir Usuario': 'Afegir Usuari',\n        'Nuevo Usuario': 'Nou Usuari',\n        'Cargando': 'Carregant'\n      };\n      return translations[key] || fallback;\n    }\n    return fallback;\n  };\n\n  // Panel de diagnóstico para depuración\n  const renderDebugPanel = () => (\n    <div className=\"bg-white border border-gray-300 p-4 mb-4 rounded-lg\">\n      <h3 className=\"text-lg font-semibold mb-2\">Panel de Diagnóstico</h3>\n      <div className=\"space-y-2\">\n        <div><strong>Estado de Autenticación:</strong> {authStatus}</div>\n        <div><strong>¿Es administrador?:</strong> {isAdmin ? 'Sí' : 'No'}</div>\n        {Object.entries(authDebug).map(([key, value]) => (\n          <div key={key}>\n            <strong>{key}:</strong> {typeof value === 'object' ? JSON.stringify(value) : String(value)}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  if (!isAdmin && currentUser) {\n    return (\n      <>\n        {renderDebugPanel()}\n        <div className=\"bg-yellow-50 border-l-4 border-yellow-400 p-4 my-4\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">\n              <svg className=\"h-5 w-5 text-yellow-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n              </svg>\n            </div>\n            <div className=\"ml-3\">\n              <p className=\"text-sm text-yellow-700\">\n                No tienes permisos para gestionar usuarios. Solo los administradores y usuarios con rol Ramon pueden acceder a esta sección.\n              </p>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"bg-white shadow rounded-lg p-6\">\n      {renderDebugPanel()}\n      {!showForm ? (\n        <>\n          <div className=\"mb-6 flex justify-between items-center\">\n            <h2 className=\"text-2xl font-semibold text-gray-800\">{translateText('Gestión de Usuarios', 'Gestión de Usuarios')}</h2>\n            {isAdmin && (\n              <button\n                onClick={handleAddUser}\n                className=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded shadow focus:outline-none focus:shadow-outline transition duration-150 ease-in-out\"\n              >\n                {translateText('Añadir Usuario', 'Añadir Usuario')}\n              </button>\n            )}\n          </div>\n          <UserTable \n            onEdit={handleEditUser} \n            onRefresh={() => setRefreshTrigger(prev => prev + 1)} \n            key={refreshTrigger} \n            forceLang={currentLang} // Pasamos el idioma como prop\n          />\n        </>\n      ) : (\n        <UserForm \n          user={selectedUser} \n          onSuccess={handleFormSuccess} \n          onCancel={handleFormCancel}\n          availableRoles={isAdmin ? \n            ['administrador', 'Ramon', 'editor', 'usuario'] : \n            ['editor', 'usuario']}\n        />\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getCurrentRole } from '../../services/roleService';\nimport type { UserRole } from '../../services/roleService';\nimport { isAuthenticated } from '../../services/authService';\n\ninterface RoleGuardProps {\n  allowedRoles: string[];\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n  redirectToLogin?: boolean;\n}\n\n/**\n * Componente para proteger rutas basado en roles de usuario\n * Verifica si el usuario tiene alguno de los roles permitidos para acceder al contenido\n */\nexport const RoleGuard: React.FC<RoleGuardProps> = ({\n  allowedRoles,\n  children,\n  fallback = null,\n  redirectToLogin = true\n}) => {\n  const [isClient, setIsClient] = useState<boolean>(false);\n  const [canAccess, setCanAccess] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [currentRole, setCurrentRole] = useState<string>('');\n\n  // Efecto para detectar el entorno cliente\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  // Efecto para gestionar el acceso, solo se ejecuta en el cliente\n  useEffect(() => {\n    // Solo ejecutar en el cliente\n    if (!isClient) return;\n    \n    // Si el usuario no está autenticado y se solicita redirección\n    if (!isAuthenticated() && redirectToLogin) {\n      console.log('Usuario no autenticado, redirigiendo a login');\n      window.location.href = '/login';\n      return;\n    }\n    \n    // Verificar rol del usuario\n    const role = getCurrentRole();\n    console.log('Rol actual:', role);\n    console.log('Roles permitidos:', allowedRoles);\n    \n    setCurrentRole(role);\n    const hasAccess = allowedRoles.includes(role);\n    console.log('¿Tiene acceso?', hasAccess);\n    \n    setCanAccess(hasAccess);\n    setLoading(false);\n    \n    if (!hasAccess && redirectToLogin) {\n      console.log(`Acceso denegado: se requiere uno de estos roles [${allowedRoles.join(', ')}]`);\n      // No redirigimos automáticamente, solo mostramos mensaje de acceso denegado\n    }\n  }, [isClient, allowedRoles, redirectToLogin]);\n\n  // Mostrar indicador de carga mientras se verifica el acceso\n  // o si aún no estamos en el cliente\n  if (loading || !isClient) {\n    return (\n      <div className=\"flex items-center justify-center p-4\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Mostrar el contenido si tiene acceso, o el fallback si no\n  return canAccess ? (\n    <>{children}</>\n  ) : (\n    <>\n      {fallback || (\n        <div className=\"bg-red-100 border-l-4 border-red-500 text-red-700 p-4 my-4 rounded shadow-md\" role=\"alert\">\n          <div className=\"flex items-center\">\n            <svg className=\"w-6 h-6 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z\"></path>\n            </svg>\n            <div>\n              <p className=\"font-bold\">Acceso denegado</p>\n              <p>No tienes los permisos necesarios para acceder a esta página.</p>\n              <p className=\"mt-2 text-sm\">Se requiere uno de estos roles: {allowedRoles.join(', ')}</p>\n              <p className=\"mt-2 text-sm\">Tu rol actual: {currentRole}</p>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default RoleGuard;\n","---\n// Importar el layout\nimport MainLayout from '../../components/layout/MainLayout.astro';\nimport { UsersManagement } from '../../components/users/UsersManagement';\nimport { RoleGuard } from '../../components/guards/RoleGuard';\nimport { t, getCurrentLanguage } from '../../i18n/config';\n\n// Obtener el idioma actual\nconst lang = getCurrentLanguage();\n\n// Roles que tienen acceso a esta página\nconst allowedRoles = ['administrador', 'Ramon'];\n---\n\n<MainLayout title={t('common.users', lang)}>\n  <!-- Bloqueo total para usuarios no autorizados -->\n  <script is:inline>\n    (function() {\n      try {\n        const token = localStorage.getItem('token');\n        if (token) {\n          const payload = JSON.parse(atob(token.split('.')[1]));\n          const userRole = payload.role || 'guest';\n          if (userRole.toLowerCase() !== 'administrador' && userRole.toLowerCase() !== 'ramon') {\n            console.log('ACCESO DENEGADO: Redirigiendo...');\n            window.location.href = '/';\n          }\n        } else {\n          window.location.href = '/login';\n        }\n      } catch (e) {\n        console.error('Error:', e);\n        window.location.href = '/';\n      }\n    })();\n  </script>\n  \n  <RoleGuard client:load allowedRoles={allowedRoles}>\n    <div class=\"mb-6\">\n      <h1 class=\"text-3xl font-bold text-gray-900\">Gestión de Usuarios</h1>\n      <p class=\"text-gray-600\">Administra los usuarios del sistema y sus permisos</p>\n    </div>\n\n    <UsersManagement client:load />\n  </RoleGuard>\n</MainLayout>\n"],"names":["isFirstRender","$$createComponent","$$render","$$renderComponent","MainLayout","$$result","$$maybeRenderHead"],"mappings":"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"}