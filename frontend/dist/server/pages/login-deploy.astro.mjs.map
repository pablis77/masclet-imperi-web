{"version":3,"file":"login-deploy.astro.mjs","sources":["../../../src/pages/login-deploy.astro"],"sourcesContent":["---\nimport LoginLayout from '../layouts/LoginLayout.astro';\nimport PasswordErrorModal from '../components/modals/PasswordErrorModal';\n---\n\n<LoginLayout title=\"Login - Masclet Imperi\">\n  <div class=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n    <div class=\"max-w-md w-full space-y-8\">\n      {/* Modal de error de contraseña */}\n      <PasswordErrorModal client:only=\"react\" isOpen={false} onClose={() => {}} id=\"passwordErrorModal\" />\n      <div class=\"flex flex-col items-center\">\n        <!-- Logo grande -->        \n        <img src=\"/images/logo_masclet.jpg\" alt=\"Logo Masclet Imperi\" class=\"w-48 h-auto mb-6\">\n        \n        <h2 class=\"mt-2 text-center text-3xl font-extrabold text-gray-900\">\n          Iniciar sesión\n        </h2>\n        <p class=\"mt-2 text-center text-sm text-gray-600\">\n          Accede a la plataforma de gestión\n        </p>\n      </div>\n      <div class=\"mt-8 bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10\">\n        <form id=\"loginForm\" class=\"space-y-6\">\n          <div>\n            <label for=\"username\" class=\"block text-sm font-medium text-gray-700\">\n              Usuario\n            </label>\n            <div class=\"mt-1\">\n              <input id=\"username\" name=\"username\" type=\"text\" required class=\"appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\" value=\"admin\">\n            </div>\n          </div>\n\n          <div>\n            <label for=\"password\" class=\"block text-sm font-medium text-gray-700\">\n              Contraseña\n            </label>\n            <div class=\"mt-1\">\n              <input id=\"password\" name=\"password\" type=\"password\" required class=\"appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm\" value=\"admin123\">\n            </div>\n          </div>\n\n          <div>\n            <button type=\"submit\" class=\"w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary\">\n              Iniciar sesión\n            </button>\n          </div>\n        </form>\n        \n        <div id=\"loginStatus\" class=\"mt-4 text-sm hidden\"></div>\n        \n        <div class=\"mt-6\">\n          <div class=\"relative\">\n            <div class=\"absolute inset-0 flex items-center\">\n              <div class=\"w-full border-t border-gray-300\"></div>\n            </div>\n            <div class=\"relative flex justify-center text-sm\">\n              <span class=\"px-2 bg-white text-gray-500\">\n                Masclet Imperi\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</LoginLayout>\n\n<script>\n  // En lugar de importar apiService, usamos directamente el endpoint de proxy\n  // Este es el cambio principal para el entorno Docker\n\n  // Definimos una variable global para el estado del modal\n  window.showPasswordErrorModal = function() {\n    // Acceder al componente React directamente mediante eventos personalizados\n    document.dispatchEvent(new CustomEvent('show-password-error'));\n  };\n  \n  // Función para manejar el inicio de sesión\n  document.addEventListener('DOMContentLoaded', () => {\n    console.log(\"Página de login cargada en Docker\");\n    const loginForm = document.getElementById('loginForm');\n    const loginStatus = document.getElementById('loginStatus');\n    \n    // Crear un script que maneje la interacción con el componente React\n    const script = document.createElement('script');\n    script.textContent = `\n      // Esta función se ejecutará cuando el componente React esté listo\n      document.addEventListener('astro:page-load', () => {\n        // Escuchar el evento personalizado para mostrar el modal\n        document.addEventListener('show-password-error', () => {\n          // Buscar el elemento modal por su ID\n          const modal = document.getElementById('passwordErrorModal');\n          if (modal) {\n            // Enviar mensaje al componente React para cambiar su estado\n            const event = new CustomEvent('update-modal-state', { \n              detail: { isOpen: true } \n            });\n            modal.dispatchEvent(event);\n          }\n        });\n      });\n    `;\n    document.head.appendChild(script);\n    \n    loginForm.addEventListener('submit', async (e) => {\n      e.preventDefault();\n      console.log(\"Formulario de login enviado\");\n      \n      const username = document.getElementById('username').value;\n      const password = document.getElementById('password').value;\n      \n      try {\n        console.log(\"Iniciando llamada de autenticación a /api/auth-proxy\");\n        loginStatus.classList.add(\"hidden\");\n        \n        // Usar directamente el endpoint de proxy en Docker\n        const response = await fetch(\"/api/auth-proxy\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({ username, password })\n        });\n\n        if (!response.ok) {\n          console.error(\"Error en la respuesta del servidor:\", response.status);\n          loginStatus.textContent = \"Credenciales incorrectas. Por favor, inténtelo de nuevo.\";\n          loginStatus.classList.remove(\"hidden\");\n          loginStatus.classList.add(\"text-red-600\");\n          return;\n        }\n\n        const data = await response.json();\n        console.log(\"Respuesta exitosa del servidor\");\n        \n        if (data.access_token) {\n          const token = data.access_token;\n          console.log(\"Token obtenido correctamente\");\n          \n          // Guardar el token y redirigir al dashboard\n          localStorage.setItem(\"token\", token);\n\n          // Guardar info del usuario si está disponible\n          if (data.user) {\n            const userData = data.user;\n            \n            // SOLUCIÓN PARA RAMON\n            if (userData.username && userData.username.toLowerCase() === \"ramon\") {\n              console.log(\"🔴 Usuario Ramon detectado, FORZANDO rol Ramon\");\n              userData.role = \"Ramon\";\n              localStorage.setItem(\"userRole\", \"Ramon\");\n              localStorage.setItem(\"ramonFix\", \"true\");\n            } else if (userData.role === \"gerente\") {\n              console.log(\"Rol gerente detectado, convirtiendo a Ramon\");\n              userData.role = \"Ramon\";\n              localStorage.setItem(\"userRole\", \"Ramon\");\n            }\n\n            // Guardar el usuario actualizado\n            localStorage.setItem(\"user\", JSON.stringify(userData));\n            if (userData.role) {\n              localStorage.setItem(\"userRole\", userData.role);\n            }\n          }\n\n          // Redireccionar al dashboard principal\n          console.log(\"Redirigiendo a la página principal\");\n          window.location.href = \"/\";\n        } else {\n          console.error(\"Error: No se encontró token en la respuesta\");\n          loginStatus.textContent = \"Error en la autenticación. Inténtelo de nuevo.\";\n          loginStatus.classList.remove(\"hidden\");\n          loginStatus.classList.add(\"text-red-600\");\n        }\n      } catch (error) {\n        console.error(\"Error al iniciar sesión:\", error);\n        loginStatus.textContent = \"Error al conectar con el servidor. Inténtelo de nuevo.\";\n        loginStatus.classList.remove(\"hidden\");\n        loginStatus.classList.add(\"text-red-600\");\n      }\n    });\n  });\n</script>\n"],"names":["$$createComponent","$$render","$$renderComponent","LoginLayout","$$result","$$maybeRenderHead"],"mappings":";;;;;AAAA,MAAA,aAAA,GAAAA,eAAA,CAAA,OAAA,QAAA,EAAA,SAAA,OAAA,KAAA;AAAA,EAAA,OAAAC,cAAA,CAAA,EAAAC,eAAA,CAAA,QAAA,EAAA,aAAA,EAAAC,aAAA,EAAA,EAKa,OALb,EAAA,wBAAA,EAAA,EAAA,EAAA,SAAA,EAAA,OAAAC,SAAA,KAAAH,cAAA,CAAA,CAAA,EAAAI,eAAAD,CAAA,CAAA,CAAA,2IAAA,EAAAF,eAAAE,CAAAA,SAAAA,EAAA,oBAAA,EAAA,IAAA,EAAA,EAS0B,aAAA,EAAa,OAAO,EAAA,QAAA,EAAQ,KAAO,EAAA,SAAA,EAAS,MAAA;GAAU,EAAA,IAAA,EAAI,sBATpF,4BAAA,EAAA,MAAA,EAAA,yBAAA,0FAAA,EAAA,yBAAA,EAAA,SAAA,EASO,CAAA,CAAA;;;;;;;;;;;;AATP,kDAAA,CAAA,EAiEE,CAAA,CAAA,CAAA,CAAA;AAjEF,CAAA,EAAA,gFAAA,MAAA,CAAA;;;;;;;;;;;;;;;;"}